
AZIMUTHALENCODER_H723ZG_110724.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000195cc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db0  0801989c  0801989c  0001a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c64c  0801c64c  0001d64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c654  0801c654  0001d654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801c658  0801c658  0001d658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000098  24004984  0801c65c  0001d984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .lwip_sec     00004983  24000000  24000000  0001e000  2**2
                  ALLOC
  8 .bss          0000bbe8  24004a1c  0801c6f4  0001da1c  2**2
                  ALLOC
  9 ._user_heap_stack 00000604  24010604  0801c6f4  0001e604  2**0
                  ALLOC
 10 .lwip_sec     00000160  30000000  30000000  0001e000  2**2
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0001da1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003488c  00000000  00000000  0001da4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007b39  00000000  00000000  000522d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002498  00000000  00000000  00059e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001cce  00000000  00000000  0005c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000436dc  00000000  00000000  0005df76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003abe0  00000000  00000000  000a1652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016e5db  00000000  00000000  000dc232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0024a80d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a008  00000000  00000000  0024a850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00254858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24004a1c 	.word	0x24004a1c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08019884 	.word	0x08019884

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24004a20 	.word	0x24004a20
 800030c:	08019884 	.word	0x08019884

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	60f8      	str	r0, [r7, #12]
 80003b8:	60b9      	str	r1, [r7, #8]
 80003ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	4a07      	ldr	r2, [pc, #28]	@ (80003dc <vApplicationGetIdleTaskMemory+0x2c>)
 80003c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	4a06      	ldr	r2, [pc, #24]	@ (80003e0 <vApplicationGetIdleTaskMemory+0x30>)
 80003c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2280      	movs	r2, #128	@ 0x80
 80003cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80003ce:	bf00      	nop
 80003d0:	3714      	adds	r7, #20
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr
 80003da:	bf00      	nop
 80003dc:	24004a38 	.word	0x24004a38
 80003e0:	24004ad8 	.word	0x24004ad8

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b5b0      	push	{r4, r5, r7, lr}
 80003e6:	b092      	sub	sp, #72	@ 0x48
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003ea:	f000 fd5f 	bl	8000eac <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ee:	4b4d      	ldr	r3, [pc, #308]	@ (8000524 <main+0x140>)
 80003f0:	695b      	ldr	r3, [r3, #20]
 80003f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d11b      	bne.n	8000432 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80003fa:	f3bf 8f4f 	dsb	sy
}
 80003fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000400:	f3bf 8f6f 	isb	sy
}
 8000404:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000406:	4b47      	ldr	r3, [pc, #284]	@ (8000524 <main+0x140>)
 8000408:	2200      	movs	r2, #0
 800040a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800040e:	f3bf 8f4f 	dsb	sy
}
 8000412:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000414:	f3bf 8f6f 	isb	sy
}
 8000418:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800041a:	4b42      	ldr	r3, [pc, #264]	@ (8000524 <main+0x140>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	4a41      	ldr	r2, [pc, #260]	@ (8000524 <main+0x140>)
 8000420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000424:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000426:	f3bf 8f4f 	dsb	sy
}
 800042a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800042c:	f3bf 8f6f 	isb	sy
}
 8000430:	e000      	b.n	8000434 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000432:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000434:	4b3b      	ldr	r3, [pc, #236]	@ (8000524 <main+0x140>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800043c:	2b00      	cmp	r3, #0
 800043e:	d138      	bne.n	80004b2 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000440:	4b38      	ldr	r3, [pc, #224]	@ (8000524 <main+0x140>)
 8000442:	2200      	movs	r2, #0
 8000444:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000448:	f3bf 8f4f 	dsb	sy
}
 800044c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800044e:	4b35      	ldr	r3, [pc, #212]	@ (8000524 <main+0x140>)
 8000450:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000454:	647b      	str	r3, [r7, #68]	@ 0x44

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000458:	0b5b      	lsrs	r3, r3, #13
 800045a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800045e:	643b      	str	r3, [r7, #64]	@ 0x40
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000460:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000468:	63fb      	str	r3, [r7, #60]	@ 0x3c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800046a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800046c:	015a      	lsls	r2, r3, #5
 800046e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000472:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000474:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000476:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000478:	492a      	ldr	r1, [pc, #168]	@ (8000524 <main+0x140>)
 800047a:	4313      	orrs	r3, r2
 800047c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000482:	1e5a      	subs	r2, r3, #1
 8000484:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000486:	2b00      	cmp	r3, #0
 8000488:	d1ef      	bne.n	800046a <main+0x86>
    } while(sets-- != 0U);
 800048a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800048c:	1e5a      	subs	r2, r3, #1
 800048e:	643a      	str	r2, [r7, #64]	@ 0x40
 8000490:	2b00      	cmp	r3, #0
 8000492:	d1e5      	bne.n	8000460 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000494:	f3bf 8f4f 	dsb	sy
}
 8000498:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800049a:	4b22      	ldr	r3, [pc, #136]	@ (8000524 <main+0x140>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a21      	ldr	r2, [pc, #132]	@ (8000524 <main+0x140>)
 80004a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004a4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004a6:	f3bf 8f4f 	dsb	sy
}
 80004aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004ac:	f3bf 8f6f 	isb	sy
}
 80004b0:	e000      	b.n	80004b4 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80004b2:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f001 fa0e 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f83e 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 fa98 	bl	80009f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c0:	f000 fa6e 	bl	80009a0 <MX_DMA_Init>
  MX_TIM2_Init();
 80004c4:	f000 f9a8 	bl	8000818 <MX_TIM2_Init>
  MX_SPI4_Init();
 80004c8:	f000 f8a4 	bl	8000614 <MX_SPI4_Init>
  MX_TIM23_Init();
 80004cc:	f000 fa18 	bl	8000900 <MX_TIM23_Init>
  MX_TIM1_Init();
 80004d0:	f000 f8f8 	bl	80006c4 <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80004d4:	4b14      	ldr	r3, [pc, #80]	@ (8000528 <main+0x144>)
 80004d6:	f107 0420 	add.w	r4, r7, #32
 80004da:	461d      	mov	r5, r3
 80004dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80004e8:	f107 0320 	add.w	r3, r7, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f00a fc8c 	bl	800ae0c <osThreadCreate>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <main+0x148>)
 80004f8:	6013      	str	r3, [r2, #0]

  /* definition and creation of ethernetTask */
  osThreadDef(ethernetTask, startEthernetTask, osPriorityHigh, 0, 256);
 80004fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000530 <main+0x14c>)
 80004fc:	1d3c      	adds	r4, r7, #4
 80004fe:	461d      	mov	r5, r3
 8000500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetTaskHandle = osThreadCreate(osThread(ethernetTask), NULL);
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2100      	movs	r1, #0
 8000510:	4618      	mov	r0, r3
 8000512:	f00a fc7b 	bl	800ae0c <osThreadCreate>
 8000516:	4603      	mov	r3, r0
 8000518:	4a06      	ldr	r2, [pc, #24]	@ (8000534 <main+0x150>)
 800051a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800051c:	f00a fc5f 	bl	800adde <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x13c>
 8000524:	e000ed00 	.word	0xe000ed00
 8000528:	080198a8 	.word	0x080198a8
 800052c:	24004f34 	.word	0x24004f34
 8000530:	080198d4 	.word	0x080198d4
 8000534:	24004f38 	.word	0x24004f38

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b09c      	sub	sp, #112	@ 0x70
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000542:	224c      	movs	r2, #76	@ 0x4c
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f018 fa5e 	bl	8018a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	2220      	movs	r2, #32
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f018 fa58 	bl	8018a08 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000558:	2002      	movs	r0, #2
 800055a:	f005 f9a5 	bl	80058a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800055e:	2300      	movs	r3, #0
 8000560:	603b      	str	r3, [r7, #0]
 8000562:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <SystemClock_Config+0xd8>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	4a2a      	ldr	r2, [pc, #168]	@ (8000610 <SystemClock_Config+0xd8>)
 8000568:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800056c:	6193      	str	r3, [r2, #24]
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <SystemClock_Config+0xd8>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000576:	603b      	str	r3, [r7, #0]
 8000578:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800057a:	bf00      	nop
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <SystemClock_Config+0xd8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000584:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000588:	d1f8      	bne.n	800057c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058a:	2301      	movs	r3, #1
 800058c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800058e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000598:	2302      	movs	r3, #2
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800059c:	2304      	movs	r3, #4
 800059e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 80005a0:	f240 1313 	movw	r3, #275	@ 0x113
 80005a4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005aa:	2304      	movs	r3, #4
 80005ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80005b2:	2304      	movs	r3, #4
 80005b4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 f9aa 	bl	800591c <HAL_RCC_OscConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ce:	f000 fce9 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d2:	233f      	movs	r3, #63	@ 0x3f
 80005d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	2303      	movs	r3, #3
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80005de:	2308      	movs	r3, #8
 80005e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005e2:	2340      	movs	r3, #64	@ 0x40
 80005e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005e6:	2340      	movs	r3, #64	@ 0x40
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 80005ea:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80005ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005f0:	2340      	movs	r3, #64	@ 0x40
 80005f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2103      	movs	r1, #3
 80005f8:	4618      	mov	r0, r3
 80005fa:	f005 fd69 	bl	80060d0 <HAL_RCC_ClockConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000604:	f000 fcce 	bl	8000fa4 <Error_Handler>
  }
}
 8000608:	bf00      	nop
 800060a:	3770      	adds	r7, #112	@ 0x70
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	58024800 	.word	0x58024800

08000614 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800061a:	4a29      	ldr	r2, [pc, #164]	@ (80006c0 <MX_SPI4_Init+0xac>)
 800061c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800061e:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000620:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000624:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000626:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_16BIT;
 800062c:	4b23      	ldr	r3, [pc, #140]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800062e:	220f      	movs	r2, #15
 8000630:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000632:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000638:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800063a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800063e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8000640:	4b1e      	ldr	r3, [pc, #120]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000642:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000646:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000648:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800064a:	f04f 42e0 	mov.w	r2, #1879048192	@ 0x70000000
 800064e:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000650:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000652:	2200      	movs	r2, #0
 8000654:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800065e:	2200      	movs	r2, #0
 8000660:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000664:	2200      	movs	r2, #0
 8000666:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800066a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800066e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000672:	2200      	movs	r2, #0
 8000674:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800067e:	2200      	movs	r2, #0
 8000680:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000682:	4b0e      	ldr	r3, [pc, #56]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000688:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800068a:	2200      	movs	r2, #0
 800068c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800068e:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000690:	2200      	movs	r2, #0
 8000692:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000694:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_SPI4_Init+0xa8>)
 8000696:	2200      	movs	r2, #0
 8000698:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_ENABLE;
 800069a:	4b08      	ldr	r3, [pc, #32]	@ (80006bc <MX_SPI4_Init+0xa8>)
 800069c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80006a0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_SPI4_Init+0xa8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_SPI4_Init+0xa8>)
 80006aa:	f007 fbcd 	bl	8007e48 <HAL_SPI_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_SPI4_Init+0xa4>
  {
    Error_Handler();
 80006b4:	f000 fc76 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	24004cd8 	.word	0x24004cd8
 80006c0:	40013400 	.word	0x40013400

080006c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b09c      	sub	sp, #112	@ 0x70
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2234      	movs	r2, #52	@ 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f018 f982 	bl	8018a08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000704:	4b42      	ldr	r3, [pc, #264]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000706:	4a43      	ldr	r2, [pc, #268]	@ (8000814 <MX_TIM1_Init+0x150>)
 8000708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1375-1;
 800070a:	4b41      	ldr	r3, [pc, #260]	@ (8000810 <MX_TIM1_Init+0x14c>)
 800070c:	f240 525e 	movw	r2, #1374	@ 0x55e
 8000710:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000712:	4b3f      	ldr	r3, [pc, #252]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000718:	4b3d      	ldr	r3, [pc, #244]	@ (8000810 <MX_TIM1_Init+0x14c>)
 800071a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800071e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000720:	4b3b      	ldr	r3, [pc, #236]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000726:	4b3a      	ldr	r3, [pc, #232]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000728:	2200      	movs	r2, #0
 800072a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072c:	4b38      	ldr	r3, [pc, #224]	@ (8000810 <MX_TIM1_Init+0x14c>)
 800072e:	2200      	movs	r2, #0
 8000730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000732:	4837      	ldr	r0, [pc, #220]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000734:	f008 f99d 	bl	8008a72 <HAL_TIM_Base_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800073e:	f000 fc31 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000748:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800074c:	4619      	mov	r1, r3
 800074e:	4830      	ldr	r0, [pc, #192]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000750:	f008 fe42 	bl	80093d8 <HAL_TIM_ConfigClockSource>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800075a:	f000 fc23 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800075e:	482c      	ldr	r0, [pc, #176]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000760:	f008 fae2 	bl	8008d28 <HAL_TIM_OC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800076a:	f000 fc1b 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076e:	2300      	movs	r3, #0
 8000770:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000772:	2300      	movs	r3, #0
 8000774:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000776:	2300      	movs	r3, #0
 8000778:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800077e:	4619      	mov	r1, r3
 8000780:	4823      	ldr	r0, [pc, #140]	@ (8000810 <MX_TIM1_Init+0x14c>)
 8000782:	f009 fb6f 	bl	8009e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 800078c:	f000 fc0a 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000790:	2300      	movs	r3, #0
 8000792:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000798:	2300      	movs	r3, #0
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079c:	2300      	movs	r3, #0
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b0:	2200      	movs	r2, #0
 80007b2:	4619      	mov	r1, r3
 80007b4:	4816      	ldr	r0, [pc, #88]	@ (8000810 <MX_TIM1_Init+0x14c>)
 80007b6:	f008 fc81 	bl	80090bc <HAL_TIM_OC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80007c0:	f000 fbf0 	bl	8000fa4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007f0:	2300      	movs	r3, #0
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	4619      	mov	r1, r3
 80007f8:	4805      	ldr	r0, [pc, #20]	@ (8000810 <MX_TIM1_Init+0x14c>)
 80007fa:	f009 fbcf 	bl	8009f9c <HAL_TIMEx_ConfigBreakDeadTime>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000804:	f000 fbce 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000808:	bf00      	nop
 800080a:	3770      	adds	r7, #112	@ 0x70
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	24004e50 	.word	0x24004e50
 8000814:	40010000 	.word	0x40010000

08000818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08e      	sub	sp, #56	@ 0x38
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	605a      	str	r2, [r3, #4]
 8000828:	609a      	str	r2, [r3, #8]
 800082a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000838:	463b      	mov	r3, r7
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]
 8000846:	615a      	str	r2, [r3, #20]
 8000848:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800084a:	4b2c      	ldr	r3, [pc, #176]	@ (80008fc <MX_TIM2_Init+0xe4>)
 800084c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 275-1;
 8000852:	4b2a      	ldr	r3, [pc, #168]	@ (80008fc <MX_TIM2_Init+0xe4>)
 8000854:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8000858:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b28      	ldr	r3, [pc, #160]	@ (80008fc <MX_TIM2_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000860:	4b26      	ldr	r3, [pc, #152]	@ (80008fc <MX_TIM2_Init+0xe4>)
 8000862:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000866:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <MX_TIM2_Init+0xe4>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <MX_TIM2_Init+0xe4>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000874:	4821      	ldr	r0, [pc, #132]	@ (80008fc <MX_TIM2_Init+0xe4>)
 8000876:	f008 f8fc 	bl	8008a72 <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000880:	f000 fb90 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800088e:	4619      	mov	r1, r3
 8000890:	481a      	ldr	r0, [pc, #104]	@ (80008fc <MX_TIM2_Init+0xe4>)
 8000892:	f008 fda1 	bl	80093d8 <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 800089c:	f000 fb82 	bl	8000fa4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008a0:	4816      	ldr	r0, [pc, #88]	@ (80008fc <MX_TIM2_Init+0xe4>)
 80008a2:	f008 faa2 	bl	8008dea <HAL_TIM_PWM_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80008ac:	f000 fb7a 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	480f      	ldr	r0, [pc, #60]	@ (80008fc <MX_TIM2_Init+0xe4>)
 80008c0:	f009 fad0 	bl	8009e64 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80008ca:	f000 fb6b 	bl	8000fa4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ce:	2360      	movs	r3, #96	@ 0x60
 80008d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_TIM2_Init+0xe4>)
 80008e6:	f008 fc63 	bl	80091b0 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80008f0:	f000 fb58 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	3738      	adds	r7, #56	@ 0x38
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	24004e9c 	.word	0x24004e9c

08000900 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800091e:	4b1e      	ldr	r3, [pc, #120]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <MX_TIM23_Init+0x9c>)
 8000922:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 275-1;
 8000924:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000926:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800092a:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <MX_TIM23_Init+0x98>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 4294967295;
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000934:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000938:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093a:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_TIM23_Init+0x98>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8000946:	4814      	ldr	r0, [pc, #80]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000948:	f008 f893 	bl	8008a72 <HAL_TIM_Base_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM23_Init+0x56>
  {
    Error_Handler();
 8000952:	f000 fb27 	bl	8000fa4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000956:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800095a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800095c:	f107 0310 	add.w	r3, r7, #16
 8000960:	4619      	mov	r1, r3
 8000962:	480d      	ldr	r0, [pc, #52]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000964:	f008 fd38 	bl	80093d8 <HAL_TIM_ConfigClockSource>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM23_Init+0x72>
  {
    Error_Handler();
 800096e:	f000 fb19 	bl	8000fa4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	@ (8000998 <MX_TIM23_Init+0x98>)
 8000980:	f009 fa70 	bl	8009e64 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM23_Init+0x8e>
  {
    Error_Handler();
 800098a:	f000 fb0b 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	24004ee8 	.word	0x24004ee8
 800099c:	4000e000 	.word	0x4000e000

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a6:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MX_DMA_Init+0x4c>)
 80009a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009ac:	4a0f      	ldr	r2, [pc, #60]	@ (80009ec <MX_DMA_Init+0x4c>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009b6:	4b0d      	ldr	r3, [pc, #52]	@ (80009ec <MX_DMA_Init+0x4c>)
 80009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	607b      	str	r3, [r7, #4]
 80009c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2105      	movs	r1, #5
 80009c8:	200b      	movs	r0, #11
 80009ca:	f001 f8ab 	bl	8001b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ce:	200b      	movs	r0, #11
 80009d0:	f001 f8c2 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2105      	movs	r1, #5
 80009d8:	200c      	movs	r0, #12
 80009da:	f001 f8a3 	bl	8001b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009de:	200c      	movs	r0, #12
 80009e0:	f001 f8ba 	bl	8001b58 <HAL_NVIC_EnableIRQ>

}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	58024400 	.word	0x58024400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08c      	sub	sp, #48	@ 0x30
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a06:	4b39      	ldr	r3, [pc, #228]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0c:	4a37      	ldr	r2, [pc, #220]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a16:	4b35      	ldr	r3, [pc, #212]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a24:	4b31      	ldr	r3, [pc, #196]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a2a:	4a30      	ldr	r2, [pc, #192]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a34:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a3a:	f003 0304 	and.w	r3, r3, #4
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	4b2a      	ldr	r3, [pc, #168]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	4a28      	ldr	r2, [pc, #160]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a52:	4b26      	ldr	r3, [pc, #152]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a60:	4b22      	ldr	r3, [pc, #136]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	4a21      	ldr	r2, [pc, #132]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a68:	f043 0310 	orr.w	r3, r3, #16
 8000a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a70:	4b1e      	ldr	r3, [pc, #120]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	4a19      	ldr	r2, [pc, #100]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a86:	f043 0302 	orr.w	r3, r3, #2
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8e:	4b17      	ldr	r3, [pc, #92]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a9c:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa2:	4a12      	ldr	r2, [pc, #72]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <MX_GPIO_Init+0xfc>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ac0:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <MX_GPIO_Init+0x100>)
 8000ac2:	f004 fed7 	bl	8005874 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000ac6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4804      	ldr	r0, [pc, #16]	@ (8000af0 <MX_GPIO_Init+0x100>)
 8000ae0:	f004 fd20 	bl	8005524 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae4:	bf00      	nop
 8000ae6:	3730      	adds	r7, #48	@ 0x30
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	58024400 	.word	0x58024400
 8000af0:	58021800 	.word	0x58021800

08000af4 <HAL_SPI_TxRxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI4) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a9c      	ldr	r2, [pc, #624]	@ (8000d74 <HAL_SPI_TxRxCpltCallback+0x280>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	f040 8131 	bne.w	8000d6a <HAL_SPI_TxRxCpltCallback+0x276>

		// For 16 bit value
		value = ( ((rxBuffer[0] & 0b0001000000000000) << 3) +
 8000b08:	4b9b      	ldr	r3, [pc, #620]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b0a:	881b      	ldrh	r3, [r3, #0]
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	4b9a      	ldr	r3, [pc, #616]	@ (8000d7c <HAL_SPI_TxRxCpltCallback+0x288>)
 8000b12:	4013      	ands	r3, r2
 8000b14:	b21a      	sxth	r2, r3
				  ((rxBuffer[0] & 0b0000010000000000) << 4) +
 8000b16:	4b98      	ldr	r3, [pc, #608]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	011b      	lsls	r3, r3, #4
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b22:	b21b      	sxth	r3, r3
		value = ( ((rxBuffer[0] & 0b0001000000000000) << 3) +
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b21b      	sxth	r3, r3
 8000b28:	b29a      	uxth	r2, r3
				  ((rxBuffer[0] & 0b0000000100000000) << 5)+
 8000b2a:	4b93      	ldr	r3, [pc, #588]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	015b      	lsls	r3, r3, #5
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b36:	b29b      	uxth	r3, r3
				  ((rxBuffer[0] & 0b0000010000000000) << 4) +
 8000b38:	4413      	add	r3, r2
 8000b3a:	b29a      	uxth	r2, r3
				  ((rxBuffer[0] & 0b0000000001000000) << 6)+
 8000b3c:	4b8e      	ldr	r3, [pc, #568]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	019b      	lsls	r3, r3, #6
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b48:	b29b      	uxth	r3, r3
				  ((rxBuffer[0] & 0b0000000100000000) << 5)+
 8000b4a:	4413      	add	r3, r2
 8000b4c:	b29a      	uxth	r2, r3
				  ((rxBuffer[0] & 0b0000000000010000) << 7)+
 8000b4e:	4b8a      	ldr	r3, [pc, #552]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	01db      	lsls	r3, r3, #7
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b5a:	b29b      	uxth	r3, r3
				  ((rxBuffer[0] & 0b0000000001000000) << 6)+
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b29a      	uxth	r2, r3
				  ((rxBuffer[0] & 0b0000000000000100) << 8)+
 8000b60:	4b85      	ldr	r3, [pc, #532]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b62:	881b      	ldrh	r3, [r3, #0]
 8000b64:	021b      	lsls	r3, r3, #8
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b6c:	b29b      	uxth	r3, r3
				  ((rxBuffer[0] & 0b0000000000010000) << 7)+
 8000b6e:	4413      	add	r3, r2
 8000b70:	b29a      	uxth	r2, r3
				  ((rxBuffer[0] & 0b0000000000000001) << 9)+
 8000b72:	4b81      	ldr	r3, [pc, #516]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	025b      	lsls	r3, r3, #9
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b7e:	b29b      	uxth	r3, r3
				  ((rxBuffer[0] & 0b0000000000000100) << 8)+
 8000b80:	4413      	add	r3, r2
 8000b82:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0100000000000000) >> 6) +
 8000b84:	4b7c      	ldr	r3, [pc, #496]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b86:	885b      	ldrh	r3, [r3, #2]
 8000b88:	119b      	asrs	r3, r3, #6
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b90:	b29b      	uxth	r3, r3
				  ((rxBuffer[0] & 0b0000000000000001) << 9)+
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0001000000000000) >> 5) +
 8000b96:	4b78      	ldr	r3, [pc, #480]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000b98:	885b      	ldrh	r3, [r3, #2]
 8000b9a:	115b      	asrs	r3, r3, #5
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ba2:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0100000000000000) >> 6) +
 8000ba4:	4413      	add	r3, r2
 8000ba6:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0000010000000000) >> 4) +
 8000ba8:	4b73      	ldr	r3, [pc, #460]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000baa:	885b      	ldrh	r3, [r3, #2]
 8000bac:	111b      	asrs	r3, r3, #4
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb4:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0001000000000000) >> 5) +
 8000bb6:	4413      	add	r3, r2
 8000bb8:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0000000100000000) >> 3) +
 8000bba:	4b6f      	ldr	r3, [pc, #444]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000bbc:	885b      	ldrh	r3, [r3, #2]
 8000bbe:	10db      	asrs	r3, r3, #3
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	f003 0320 	and.w	r3, r3, #32
 8000bc6:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0000010000000000) >> 4) +
 8000bc8:	4413      	add	r3, r2
 8000bca:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0000000001000000) >> 2) +
 8000bcc:	4b6a      	ldr	r3, [pc, #424]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	109b      	asrs	r3, r3, #2
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	f003 0310 	and.w	r3, r3, #16
 8000bd8:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0000000100000000) >> 3) +
 8000bda:	4413      	add	r3, r2
 8000bdc:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0000000000010000) >> 1) +
 8000bde:	4b66      	ldr	r3, [pc, #408]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000be0:	885b      	ldrh	r3, [r3, #2]
 8000be2:	105b      	asrs	r3, r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0000000001000000) >> 2) +
 8000bec:	4413      	add	r3, r2
 8000bee:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0000000000000100)     ) +
 8000bf0:	4b61      	ldr	r3, [pc, #388]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000bf2:	885b      	ldrh	r3, [r3, #2]
 8000bf4:	f003 0304 	and.w	r3, r3, #4
 8000bf8:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0000000000010000) >> 1) +
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b29a      	uxth	r2, r3
				  ((rxBuffer[1] & 0b0000000000000001) << 1) +
 8000bfe:	4b5e      	ldr	r3, [pc, #376]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	b29b      	uxth	r3, r3
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0000000000000100)     ) +
 8000c0c:	4413      	add	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
				  ((rxBuffer[2] & 0b0100000000000000) >> 14));
 8000c10:	4b59      	ldr	r3, [pc, #356]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c12:	889b      	ldrh	r3, [r3, #4]
 8000c14:	139b      	asrs	r3, r3, #14
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	b29b      	uxth	r3, r3
				  ((rxBuffer[1] & 0b0000000000000001) << 1) +
 8000c1e:	4413      	add	r3, r2
 8000c20:	b29a      	uxth	r2, r3
		value = ( ((rxBuffer[0] & 0b0001000000000000) << 3) +
 8000c22:	4b57      	ldr	r3, [pc, #348]	@ (8000d80 <HAL_SPI_TxRxCpltCallback+0x28c>)
 8000c24:	801a      	strh	r2, [r3, #0]

		// Last 4 bits
		value2 = (((rxBuffer[2] & 0b0001000000000000) >> 9) +
 8000c26:	4b54      	ldr	r3, [pc, #336]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c28:	889b      	ldrh	r3, [r3, #4]
 8000c2a:	125b      	asrs	r3, r3, #9
 8000c2c:	b21b      	sxth	r3, r3
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	b21a      	sxth	r2, r3
				  ((rxBuffer[2] & 0b0000010000000000) >> 8) +
 8000c34:	4b50      	ldr	r3, [pc, #320]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c36:	889b      	ldrh	r3, [r3, #4]
 8000c38:	121b      	asrs	r3, r3, #8
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	f003 0304 	and.w	r3, r3, #4
 8000c40:	b21b      	sxth	r3, r3
		value2 = (((rxBuffer[2] & 0b0001000000000000) >> 9) +
 8000c42:	4313      	orrs	r3, r2
 8000c44:	b21b      	sxth	r3, r3
 8000c46:	b29a      	uxth	r2, r3
				  ((rxBuffer[2] & 0b0000000100000000) >> 7) +
 8000c48:	4b4b      	ldr	r3, [pc, #300]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c4a:	889b      	ldrh	r3, [r3, #4]
 8000c4c:	11db      	asrs	r3, r3, #7
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	b29b      	uxth	r3, r3
				  ((rxBuffer[2] & 0b0000010000000000) >> 8) +
 8000c56:	4413      	add	r3, r2
 8000c58:	b29a      	uxth	r2, r3
				  ((rxBuffer[2] & 0b0000000001000000) >> 6));
 8000c5a:	4b47      	ldr	r3, [pc, #284]	@ (8000d78 <HAL_SPI_TxRxCpltCallback+0x284>)
 8000c5c:	889b      	ldrh	r3, [r3, #4]
 8000c5e:	119b      	asrs	r3, r3, #6
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	b29b      	uxth	r3, r3
				  ((rxBuffer[2] & 0b0000000100000000) >> 7) +
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29a      	uxth	r2, r3
		value2 = (((rxBuffer[2] & 0b0001000000000000) >> 9) +
 8000c6c:	4b45      	ldr	r3, [pc, #276]	@ (8000d84 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000c6e:	801a      	strh	r2, [r3, #0]

		// Note: Optional to read the last bits. They should be 0s to ensure no short circuit

		spiData[spiIndex] = value; // first 16 bits
 8000c70:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000c72:	881b      	ldrh	r3, [r3, #0]
 8000c74:	b29b      	uxth	r3, r3
 8000c76:	461a      	mov	r2, r3
 8000c78:	4b41      	ldr	r3, [pc, #260]	@ (8000d80 <HAL_SPI_TxRxCpltCallback+0x28c>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	b299      	uxth	r1, r3
 8000c7e:	4b43      	ldr	r3, [pc, #268]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000c80:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		spiData[spiIndex + 1] = value2; // last 4 bits
 8000c84:	4b40      	ldr	r3, [pc, #256]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a3d      	ldr	r2, [pc, #244]	@ (8000d84 <HAL_SPI_TxRxCpltCallback+0x290>)
 8000c8e:	8812      	ldrh	r2, [r2, #0]
 8000c90:	b291      	uxth	r1, r2
 8000c92:	4a3e      	ldr	r2, [pc, #248]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000c94:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 2] = (timer23val & 0xFFFF); // 32 bit clock tick
 8000c98:	4b3d      	ldr	r3, [pc, #244]	@ (8000d90 <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	b291      	uxth	r1, r2
 8000ca6:	4a39      	ldr	r2, [pc, #228]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000ca8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 3] = ((timer23val >> 16) & 0xFFFF); // 32 bit clock tick
 8000cac:	4b38      	ldr	r3, [pc, #224]	@ (8000d90 <HAL_SPI_TxRxCpltCallback+0x29c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	0c1a      	lsrs	r2, r3, #16
 8000cb2:	4b35      	ldr	r3, [pc, #212]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	3303      	adds	r3, #3
 8000cba:	b291      	uxth	r1, r2
 8000cbc:	4a33      	ldr	r2, [pc, #204]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000cbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 4] = 0xAB89; // 16 bit spacer
 8000cc2:	4b31      	ldr	r3, [pc, #196]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	3304      	adds	r3, #4
 8000cca:	4a30      	ldr	r2, [pc, #192]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000ccc:	f64a 3189 	movw	r1, #43913	@ 0xab89
 8000cd0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		spiData[spiIndex + 5] = 0xEFCD; // 16 bit spacer (two are necessary due to timer23val being 32 bit -- all 16 bit values are eventually covered)
 8000cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	3305      	adds	r3, #5
 8000cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000cde:	f64e 71cd 	movw	r1, #61389	@ 0xefcd
 8000ce2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		spiIndex = spiIndex + 6;
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	3306      	adds	r3, #6
 8000cee:	b29a      	uxth	r2, r3
 8000cf0:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000cf2:	801a      	strh	r2, [r3, #0]

		if (spiIndex >= 700) {
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	b29b      	uxth	r3, r3
 8000cfa:	f5b3 7f2f 	cmp.w	r3, #700	@ 0x2bc
 8000cfe:	d303      	bcc.n	8000d08 <HAL_SPI_TxRxCpltCallback+0x214>
			spiIndex = 0; // TODO find better solution than re-wrapping -- should stop taking data and alert
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	801a      	strh	r2, [r3, #0]
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
			vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
		}
	}
}
 8000d06:	e030      	b.n	8000d6a <HAL_SPI_TxRxCpltCallback+0x276>
		else if (spiIndex == 600) {
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000d12:	d12a      	bne.n	8000d6a <HAL_SPI_TxRxCpltCallback+0x276>
			spiData[spiIndex] = sampleNum;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8000d16:	6819      	ldr	r1, [r3, #0]
 8000d18:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	b289      	uxth	r1, r1
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <HAL_SPI_TxRxCpltCallback+0x298>)
 8000d24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			sampleNum++;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_SPI_TxRxCpltCallback+0x2a0>)
 8000d30:	6013      	str	r3, [r2, #0]
			spiIndex++;
 8000d32:	4b15      	ldr	r3, [pc, #84]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <HAL_SPI_TxRxCpltCallback+0x294>)
 8000d3e:	801a      	strh	r2, [r3, #0]
			BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
			vTaskNotifyGiveFromISR(ethernetTaskHandle, &xHigherPriorityTaskWoken); // function will set xHigherPriorityTaskWoken to pdTRUE if the unblocked task (ethernetTaskHandle) has a higher priority than the currently running task. Also unblocks task
 8000d44:	4b14      	ldr	r3, [pc, #80]	@ (8000d98 <HAL_SPI_TxRxCpltCallback+0x2a4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f00c fb2c 	bl	800d3ac <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR(xHigherPriorityTaskWoken); // if xHigherPriorityTaskWoken is pdTURE, scheduler will switch to the ethernetTaskHandle task as soon as the ISR completes. Otherwise, currently running task will continue to run after ISR completes
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <HAL_SPI_TxRxCpltCallback+0x276>
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <HAL_SPI_TxRxCpltCallback+0x2a8>)
 8000d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	f3bf 8f4f 	dsb	sy
 8000d66:	f3bf 8f6f 	isb	sy
}
 8000d6a:	bf00      	nop
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40013400 	.word	0x40013400
 8000d78:	2400596c 	.word	0x2400596c
 8000d7c:	ffff8000 	.word	0xffff8000
 8000d80:	24005972 	.word	0x24005972
 8000d84:	24005974 	.word	0x24005974
 8000d88:	24005966 	.word	0x24005966
 8000d8c:	24004f3c 	.word	0x24004f3c
 8000d90:	24005978 	.word	0x24005978
 8000d94:	24005968 	.word	0x24005968
 8000d98:	24004f38 	.word	0x24004f38
 8000d9c:	e000ed04 	.word	0xe000ed04

08000da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f00a f87b 	bl	800aea4 <osDelay>
 8000dae:	e7fb      	b.n	8000da8 <StartDefaultTask+0x8>

08000db0 <startEthernetTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startEthernetTask */
void startEthernetTask(void const * argument)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startEthernetTask */
	MX_LWIP_Init();
 8000db8:	f009 f99a 	bl	800a0f0 <MX_LWIP_Init>

	osDelay(100); // let LWIP be initialized
 8000dbc:	2064      	movs	r0, #100	@ 0x64
 8000dbe:	f00a f871 	bl	800aea4 <osDelay>

	// Own IP
	ip_addr_t myIPaddr;
	IP_ADDR4(&myIPaddr, 10, 20, 3, 2);
 8000dc2:	4b30      	ldr	r3, [pc, #192]	@ (8000e84 <startEthernetTask+0xd4>)
 8000dc4:	60fb      	str	r3, [r7, #12]

	// Computer IP
	ip_addr_t PC_IPADDR;
	IP_ADDR4(&PC_IPADDR, 10, 20, 1, 3);
 8000dc6:	4b30      	ldr	r3, [pc, #192]	@ (8000e88 <startEthernetTask+0xd8>)
 8000dc8:	60bb      	str	r3, [r7, #8]

	struct udp_pcb* my_udp = udp_new();
 8000dca:	f015 f8b1 	bl	8015f30 <udp_new>
 8000dce:	6178      	str	r0, [r7, #20]
	udp_bind(my_udp, &myIPaddr, 8);
 8000dd0:	f107 030c 	add.w	r3, r7, #12
 8000dd4:	2208      	movs	r2, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6978      	ldr	r0, [r7, #20]
 8000dda:	f014 ffb3 	bl	8015d44 <udp_bind>
	udp_connect(my_udp, &PC_IPADDR, 55151);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	f24d 726f 	movw	r2, #55151	@ 0xd76f
 8000de6:	4619      	mov	r1, r3
 8000de8:	6978      	ldr	r0, [r7, #20]
 8000dea:	f015 f833 	bl	8015e54 <udp_connect>
	struct pbuf* udp_buffer = NULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]

	// Set PG12 to high to select 'transmit' on Arduino RS422 shield
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, 1);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000df8:	4824      	ldr	r0, [pc, #144]	@ (8000e8c <startEthernetTask+0xdc>)
 8000dfa:	f004 fd3b 	bl	8005874 <HAL_GPIO_WritePin>

	/* Start Timer 5 */
	HAL_TIM_Base_Start(&htim23);
 8000dfe:	4824      	ldr	r0, [pc, #144]	@ (8000e90 <startEthernetTask+0xe0>)
 8000e00:	f007 fe8e 	bl	8008b20 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim1);
 8000e04:	4823      	ldr	r0, [pc, #140]	@ (8000e94 <startEthernetTask+0xe4>)
 8000e06:	f007 fe8b 	bl	8008b20 <HAL_TIM_Base_Start>

	// Start Timer 2 with 1ms interrupts
	HAL_TIM_Base_Start_IT(&htim2);
 8000e0a:	4823      	ldr	r0, [pc, #140]	@ (8000e98 <startEthernetTask+0xe8>)
 8000e0c:	f007 ff06 	bl	8008c1c <HAL_TIM_Base_Start_IT>

	for(;;)
	{
	  // Wait for the notification to send data
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e14:	2001      	movs	r0, #1
 8000e16:	f00c fa7d 	bl	800d314 <ulTaskNotifyTake>

	  // Copy samples from spiData to tempBuffer
	  memcpy(tempBuffer, spiData, sizeof(tempBuffer));
 8000e1a:	4a20      	ldr	r2, [pc, #128]	@ (8000e9c <startEthernetTask+0xec>)
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <startEthernetTask+0xf0>)
 8000e1e:	4610      	mov	r0, r2
 8000e20:	4619      	mov	r1, r3
 8000e22:	f240 43b2 	movw	r3, #1202	@ 0x4b2
 8000e26:	461a      	mov	r2, r3
 8000e28:	f017 fe73 	bl	8018b12 <memcpy>


	  // Send the data over Ethernet
	  udp_buffer = pbuf_alloc(PBUF_TRANSPORT, sizeof(tempBuffer), PBUF_RAM);
 8000e2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e30:	f240 41b2 	movw	r1, #1202	@ 0x4b2
 8000e34:	2036      	movs	r0, #54	@ 0x36
 8000e36:	f00e fb6f 	bl	800f518 <pbuf_alloc>
 8000e3a:	6138      	str	r0, [r7, #16]
	  if (udp_buffer != NULL)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d00e      	beq.n	8000e60 <startEthernetTask+0xb0>
	  {
		  memcpy(udp_buffer->payload, tempBuffer, sizeof(tempBuffer));
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f240 42b2 	movw	r2, #1202	@ 0x4b2
 8000e4a:	4914      	ldr	r1, [pc, #80]	@ (8000e9c <startEthernetTask+0xec>)
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f017 fe60 	bl	8018b12 <memcpy>
		  udp_send(my_udp, udp_buffer);
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	6978      	ldr	r0, [r7, #20]
 8000e56:	f014 fd8b 	bl	8015970 <udp_send>
		  pbuf_free(udp_buffer);
 8000e5a:	6938      	ldr	r0, [r7, #16]
 8000e5c:	f00e fe44 	bl	800fae8 <pbuf_free>
	  }

	  // Shift the remaining samples up in the spiData buffer (pointer to dest, pointer to source, number of bytes)
	  memmove(spiData, &spiData[601], sizeof(spiData) - sizeof(tempBuffer));
 8000e60:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea0 <startEthernetTask+0xf0>)
 8000e62:	4b10      	ldr	r3, [pc, #64]	@ (8000ea4 <startEthernetTask+0xf4>)
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	23c6      	movs	r3, #198	@ 0xc6
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	f017 fe51 	bl	8018b12 <memcpy>

	  // Update spiIndex to reflect the new starting position
	  spiIndex -= 601;
 8000e70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <startEthernetTask+0xf8>)
 8000e72:	881b      	ldrh	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f2a3 2359 	subw	r3, r3, #601	@ 0x259
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea8 <startEthernetTask+0xf8>)
 8000e7e:	801a      	strh	r2, [r3, #0]
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000e80:	e7c6      	b.n	8000e10 <startEthernetTask+0x60>
 8000e82:	bf00      	nop
 8000e84:	0203140a 	.word	0x0203140a
 8000e88:	0301140a 	.word	0x0301140a
 8000e8c:	58021800 	.word	0x58021800
 8000e90:	24004ee8 	.word	0x24004ee8
 8000e94:	24004e50 	.word	0x24004e50
 8000e98:	24004e9c 	.word	0x24004e9c
 8000e9c:	240054b4 	.word	0x240054b4
 8000ea0:	24004f3c 	.word	0x24004f3c
 8000ea4:	240053ee 	.word	0x240053ee
 8000ea8:	24005966 	.word	0x24005966

08000eac <MPU_Config>:
}

 /* MPU Configuration */

void MPU_Config(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ebe:	f000 fe59 	bl	8001b74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ece:	231f      	movs	r3, #31
 8000ed0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ed2:	2387      	movs	r3, #135	@ 0x87
 8000ed4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 fe77 	bl	8001be4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8000efa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000efe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8000f00:	2309      	movs	r3, #9
 8000f02:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f10:	463b      	mov	r3, r7
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 fe66 	bl	8001be4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000200;
 8000f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f48 <MPU_Config+0x9c>)
 8000f1e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000f20:	230f      	movs	r3, #15
 8000f22:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000f24:	2301      	movs	r3, #1
 8000f26:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f30:	463b      	mov	r3, r7
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fe56 	bl	8001be4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f000 fe33 	bl	8001ba4 <HAL_MPU_Enable>

}
 8000f3e:	bf00      	nop
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	30000200 	.word	0x30000200

08000f4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0c      	ldr	r2, [pc, #48]	@ (8000f8c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f5e:	f000 fcf5 	bl	800194c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  if (htim->Instance == TIM2) {
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f6a:	d10a      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x36>
	  HAL_SPI_TransmitReceive_IT(&hspi4, (uint8_t *)txBuffer, (uint8_t *)rxBuffer, 3);
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f70:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f72:	4809      	ldr	r0, [pc, #36]	@ (8000f98 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f74:	f007 f88c 	bl	8008090 <HAL_SPI_TransmitReceive_IT>
	  timer23val = __HAL_TIM_GET_COUNTER(&htim23);
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7e:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000f80:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40001000 	.word	0x40001000
 8000f90:	2400596c 	.word	0x2400596c
 8000f94:	24004984 	.word	0x24004984
 8000f98:	24004cd8 	.word	0x24004cd8
 8000f9c:	24004ee8 	.word	0x24004ee8
 8000fa0:	24005978 	.word	0x24005978

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <HAL_MspInit+0x38>)
 8000fb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_MspInit+0x38>)
 8000fbe:	f043 0302 	orr.w	r3, r3, #2
 8000fc2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x38>)
 8000fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f06f 0001 	mvn.w	r0, #1
 8000fdc:	f000 fda2 	bl	8001b24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	58024400 	.word	0x58024400

08000fec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0b8      	sub	sp, #224	@ 0xe0
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	22b8      	movs	r2, #184	@ 0xb8
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f017 fcfb 	bl	8018a08 <memset>
  if(hspi->Instance==SPI4)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5b      	ldr	r2, [pc, #364]	@ (8001184 <HAL_SPI_MspInit+0x198>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f040 80ae 	bne.w	800117a <HAL_SPI_MspInit+0x18e>

  /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 800101e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800102a:	2300      	movs	r3, #0
 800102c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f107 0310 	add.w	r3, r7, #16
 8001032:	4618      	mov	r0, r3
 8001034:	f005 fc04 	bl	8006840 <HAL_RCCEx_PeriphCLKConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800103e:	f7ff ffb1 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001042:	4b51      	ldr	r3, [pc, #324]	@ (8001188 <HAL_SPI_MspInit+0x19c>)
 8001044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001048:	4a4f      	ldr	r2, [pc, #316]	@ (8001188 <HAL_SPI_MspInit+0x19c>)
 800104a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800104e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001052:	4b4d      	ldr	r3, [pc, #308]	@ (8001188 <HAL_SPI_MspInit+0x19c>)
 8001054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001060:	4b49      	ldr	r3, [pc, #292]	@ (8001188 <HAL_SPI_MspInit+0x19c>)
 8001062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001066:	4a48      	ldr	r2, [pc, #288]	@ (8001188 <HAL_SPI_MspInit+0x19c>)
 8001068:	f043 0310 	orr.w	r3, r3, #16
 800106c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001070:	4b45      	ldr	r3, [pc, #276]	@ (8001188 <HAL_SPI_MspInit+0x19c>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**SPI4 GPIO Configuration
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800107e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001082:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001098:	2305      	movs	r3, #5
 800109a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800109e:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80010a2:	4619      	mov	r1, r3
 80010a4:	4839      	ldr	r0, [pc, #228]	@ (800118c <HAL_SPI_MspInit+0x1a0>)
 80010a6:	f004 fa3d 	bl	8005524 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream0;
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010ac:	4a39      	ldr	r2, [pc, #228]	@ (8001194 <HAL_SPI_MspInit+0x1a8>)
 80010ae:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80010b0:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010b2:	2254      	movs	r2, #84	@ 0x54
 80010b4:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010b6:	4b36      	ldr	r3, [pc, #216]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010b8:	2240      	movs	r2, #64	@ 0x40
 80010ba:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	4b33      	ldr	r3, [pc, #204]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c8:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ca:	4b31      	ldr	r3, [pc, #196]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010d0:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d8:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80010da:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010e6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80010ee:	4828      	ldr	r0, [pc, #160]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 80010f0:	f000 fdb8 	bl	8001c64 <HAL_DMA_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 80010fa:	f7ff ff53 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a23      	ldr	r2, [pc, #140]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 8001102:	679a      	str	r2, [r3, #120]	@ 0x78
 8001104:	4a22      	ldr	r2, [pc, #136]	@ (8001190 <HAL_SPI_MspInit+0x1a4>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream1;
 800110a:	4b23      	ldr	r3, [pc, #140]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 800110c:	4a23      	ldr	r2, [pc, #140]	@ (800119c <HAL_SPI_MspInit+0x1b0>)
 800110e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001110:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001112:	2253      	movs	r2, #83	@ 0x53
 8001114:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001116:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800111c:	4b1e      	ldr	r3, [pc, #120]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001124:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001128:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800112a:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 800112c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001130:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001132:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001134:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001138:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001140:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001142:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001146:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800114e:	4812      	ldr	r0, [pc, #72]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001150:	f000 fd88 	bl	8001c64 <HAL_DMA_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_SPI_MspInit+0x172>
    {
      Error_Handler();
 800115a:	f7ff ff23 	bl	8000fa4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001162:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001164:	4a0c      	ldr	r2, [pc, #48]	@ (8001198 <HAL_SPI_MspInit+0x1ac>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2105      	movs	r1, #5
 800116e:	2054      	movs	r0, #84	@ 0x54
 8001170:	f000 fcd8 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001174:	2054      	movs	r0, #84	@ 0x54
 8001176:	f000 fcef 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	37e0      	adds	r7, #224	@ 0xe0
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40013400 	.word	0x40013400
 8001188:	58024400 	.word	0x58024400
 800118c:	58021000 	.word	0x58021000
 8001190:	24004d60 	.word	0x24004d60
 8001194:	40020010 	.word	0x40020010
 8001198:	24004dd8 	.word	0x24004dd8
 800119c:	40020028 	.word	0x40020028

080011a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a23      	ldr	r2, [pc, #140]	@ (800123c <HAL_TIM_Base_MspInit+0x9c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10f      	bne.n	80011d2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b2:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 80011b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011b8:	4a21      	ldr	r2, [pc, #132]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 80011c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 80011d0:	e030      	b.n	8001234 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM2)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80011da:	d117      	bne.n	800120c <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011dc:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 80011de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e2:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011ec:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 80011ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
 80011f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	201c      	movs	r0, #28
 8001200:	f000 fc90 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001204:	201c      	movs	r0, #28
 8001206:	f000 fca7 	bl	8001b58 <HAL_NVIC_EnableIRQ>
}
 800120a:	e013      	b.n	8001234 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM23)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0c      	ldr	r2, [pc, #48]	@ (8001244 <HAL_TIM_Base_MspInit+0xa4>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10e      	bne.n	8001234 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8001216:	4b0a      	ldr	r3, [pc, #40]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 8001218:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800121c:	4a08      	ldr	r2, [pc, #32]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 800121e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001222:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8001226:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <HAL_TIM_Base_MspInit+0xa0>)
 8001228:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800122c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40010000 	.word	0x40010000
 8001240:	58024400 	.word	0x58024400
 8001244:	4000e000 	.word	0x4000e000

08001248 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b090      	sub	sp, #64	@ 0x40
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b0f      	cmp	r3, #15
 8001254:	d827      	bhi.n	80012a6 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001256:	2200      	movs	r2, #0
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	2036      	movs	r0, #54	@ 0x36
 800125c:	f000 fc62 	bl	8001b24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001260:	2036      	movs	r0, #54	@ 0x36
 8001262:	f000 fc79 	bl	8001b58 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001266:	4a29      	ldr	r2, [pc, #164]	@ (800130c <HAL_InitTick+0xc4>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <HAL_InitTick+0xc8>)
 800126e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001272:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <HAL_InitTick+0xc8>)
 8001274:	f043 0310 	orr.w	r3, r3, #16
 8001278:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800127c:	4b24      	ldr	r3, [pc, #144]	@ (8001310 <HAL_InitTick+0xc8>)
 800127e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001282:	f003 0310 	and.w	r3, r3, #16
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800128a:	f107 0210 	add.w	r2, r7, #16
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f005 fa91 	bl	80067bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800129a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800129c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800129e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d106      	bne.n	80012b2 <HAL_InitTick+0x6a>
 80012a4:	e001      	b.n	80012aa <HAL_InitTick+0x62>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e02b      	b.n	8001302 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012aa:	f005 fa71 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 80012ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b2:	f005 fa6d 	bl	8006790 <HAL_RCC_GetPCLK1Freq>
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012be:	4a15      	ldr	r2, [pc, #84]	@ (8001314 <HAL_InitTick+0xcc>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	3b01      	subs	r3, #1
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ca:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_InitTick+0xd0>)
 80012cc:	4a13      	ldr	r2, [pc, #76]	@ (800131c <HAL_InitTick+0xd4>)
 80012ce:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_InitTick+0xd0>)
 80012d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012d6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012d8:	4a0f      	ldr	r2, [pc, #60]	@ (8001318 <HAL_InitTick+0xd0>)
 80012da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012dc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_InitTick+0xd0>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <HAL_InitTick+0xd0>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80012ea:	480b      	ldr	r0, [pc, #44]	@ (8001318 <HAL_InitTick+0xd0>)
 80012ec:	f007 fbc1 	bl	8008a72 <HAL_TIM_Base_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d104      	bne.n	8001300 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80012f6:	4808      	ldr	r0, [pc, #32]	@ (8001318 <HAL_InitTick+0xd0>)
 80012f8:	f007 fc90 	bl	8008c1c <HAL_TIM_Base_Start_IT>
 80012fc:	4603      	mov	r3, r0
 80012fe:	e000      	b.n	8001302 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	3740      	adds	r7, #64	@ 0x40
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	24004994 	.word	0x24004994
 8001310:	58024400 	.word	0x58024400
 8001314:	431bde83 	.word	0x431bde83
 8001318:	2400597c 	.word	0x2400597c
 800131c:	40001000 	.word	0x40001000

08001320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <NMI_Handler+0x4>

08001328 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <HardFault_Handler+0x4>

08001330 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <MemManage_Handler+0x4>

08001338 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133c:	bf00      	nop
 800133e:	e7fd      	b.n	800133c <BusFault_Handler+0x4>

08001340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001344:	bf00      	nop
 8001346:	e7fd      	b.n	8001344 <UsageFault_Handler+0x4>

08001348 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA1_Stream0_IRQHandler+0x10>)
 800135e:	f001 fa1f 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24004d60 	.word	0x24004d60

0800136c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <DMA1_Stream1_IRQHandler+0x10>)
 8001372:	f001 fa15 	bl	80027a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24004dd8 	.word	0x24004dd8

08001380 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <TIM2_IRQHandler+0x10>)
 8001386:	f007 fd91 	bl	8008eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24004e9c 	.word	0x24004e9c

08001394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <TIM6_DAC_IRQHandler+0x10>)
 800139a:	f007 fd87 	bl	8008eac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2400597c 	.word	0x2400597c

080013a8 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <ETH_IRQHandler+0x10>)
 80013ae:	f002 ff31 	bl	8004214 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	24005a2c 	.word	0x24005a2c

080013bc <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80013c0:	4802      	ldr	r0, [pc, #8]	@ (80013cc <SPI4_IRQHandler+0x10>)
 80013c2:	f006 ff77 	bl	80082b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24004cd8 	.word	0x24004cd8

080013d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_kill>:

int _kill(int pid, int sig)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013ea:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <_kill+0x20>)
 80013ec:	2216      	movs	r2, #22
 80013ee:	601a      	str	r2, [r3, #0]
  return -1;
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	240105f4 	.word	0x240105f4

08001404 <_exit>:

void _exit (int status)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800140c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ffe5 	bl	80013e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001416:	bf00      	nop
 8001418:	e7fd      	b.n	8001416 <_exit+0x12>

0800141a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e00a      	b.n	8001442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142c:	f3af 8000 	nop.w
 8001430:	4601      	mov	r1, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	dbf0      	blt.n	800142c <_read+0x12>
  }

  return len;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e009      	b.n	800147a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	dbf1      	blt.n	8001466 <_write+0x12>
  }
  return len;
 8001482:	687b      	ldr	r3, [r7, #4]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_close>:

int _close(int file)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b4:	605a      	str	r2, [r3, #4]
  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_isatty>:

int _isatty(int file)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d205      	bcs.n	8001530 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001524:	4b0e      	ldr	r3, [pc, #56]	@ (8001560 <_sbrk+0x6c>)
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152e:	e009      	b.n	8001544 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a06      	ldr	r2, [pc, #24]	@ (8001558 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	24050000 	.word	0x24050000
 8001554:	00000400 	.word	0x00000400
 8001558:	240059c8 	.word	0x240059c8
 800155c:	24010608 	.word	0x24010608
 8001560:	240105f4 	.word	0x240105f4

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800156a:	4b3a      	ldr	r3, [pc, #232]	@ (8001654 <SystemInit+0xf0>)
 800156c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001570:	4a38      	ldr	r2, [pc, #224]	@ (8001654 <SystemInit+0xf0>)
 8001572:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001576:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800157a:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <SystemInit+0xf4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	2b06      	cmp	r3, #6
 8001584:	d807      	bhi.n	8001596 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001586:	4b34      	ldr	r3, [pc, #208]	@ (8001658 <SystemInit+0xf4>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 030f 	bic.w	r3, r3, #15
 800158e:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <SystemInit+0xf4>)
 8001590:	f043 0307 	orr.w	r3, r3, #7
 8001594:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001596:	4b31      	ldr	r3, [pc, #196]	@ (800165c <SystemInit+0xf8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a30      	ldr	r2, [pc, #192]	@ (800165c <SystemInit+0xf8>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015a2:	4b2e      	ldr	r3, [pc, #184]	@ (800165c <SystemInit+0xf8>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015a8:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <SystemInit+0xf8>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	492b      	ldr	r1, [pc, #172]	@ (800165c <SystemInit+0xf8>)
 80015ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001660 <SystemInit+0xfc>)
 80015b0:	4013      	ands	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <SystemInit+0xf4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d007      	beq.n	80015d0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015c0:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <SystemInit+0xf4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 030f 	bic.w	r3, r3, #15
 80015c8:	4a23      	ldr	r2, [pc, #140]	@ (8001658 <SystemInit+0xf4>)
 80015ca:	f043 0307 	orr.w	r3, r3, #7
 80015ce:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015d0:	4b22      	ldr	r3, [pc, #136]	@ (800165c <SystemInit+0xf8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015d6:	4b21      	ldr	r3, [pc, #132]	@ (800165c <SystemInit+0xf8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015dc:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <SystemInit+0xf8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <SystemInit+0xf8>)
 80015e4:	4a1f      	ldr	r2, [pc, #124]	@ (8001664 <SystemInit+0x100>)
 80015e6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <SystemInit+0xf8>)
 80015ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <SystemInit+0x104>)
 80015ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <SystemInit+0xf8>)
 80015f0:	4a1e      	ldr	r2, [pc, #120]	@ (800166c <SystemInit+0x108>)
 80015f2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <SystemInit+0xf8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015fa:	4b18      	ldr	r3, [pc, #96]	@ (800165c <SystemInit+0xf8>)
 80015fc:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <SystemInit+0x108>)
 80015fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001600:	4b16      	ldr	r3, [pc, #88]	@ (800165c <SystemInit+0xf8>)
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <SystemInit+0xf8>)
 8001608:	4a18      	ldr	r2, [pc, #96]	@ (800166c <SystemInit+0x108>)
 800160a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800160c:	4b13      	ldr	r3, [pc, #76]	@ (800165c <SystemInit+0xf8>)
 800160e:	2200      	movs	r2, #0
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001612:	4b12      	ldr	r3, [pc, #72]	@ (800165c <SystemInit+0xf8>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a11      	ldr	r2, [pc, #68]	@ (800165c <SystemInit+0xf8>)
 8001618:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800161c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800161e:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <SystemInit+0xf8>)
 8001620:	2200      	movs	r2, #0
 8001622:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
#elif defined(RCC_AHB2ENR_D2SRAM2EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
 8001624:	4b0d      	ldr	r3, [pc, #52]	@ (800165c <SystemInit+0xf8>)
 8001626:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800162a:	4a0c      	ldr	r2, [pc, #48]	@ (800165c <SystemInit+0xf8>)
 800162c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8001630:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8001634:	4b09      	ldr	r3, [pc, #36]	@ (800165c <SystemInit+0xf8>)
 8001636:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800163a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800163c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800163e:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <SystemInit+0x10c>)
 8001640:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001644:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	52002000 	.word	0x52002000
 800165c:	58024400 	.word	0x58024400
 8001660:	eaf6ed7f 	.word	0xeaf6ed7f
 8001664:	02020200 	.word	0x02020200
 8001668:	01ff0000 	.word	0x01ff0000
 800166c:	01010280 	.word	0x01010280
 8001670:	52004000 	.word	0x52004000

08001674 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001674:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001678:	f7ff ff74 	bl	8001564 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800167c:	480c      	ldr	r0, [pc, #48]	@ (80016b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800167e:	490d      	ldr	r1, [pc, #52]	@ (80016b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001680:	4a0d      	ldr	r2, [pc, #52]	@ (80016b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001684:	e002      	b.n	800168c <LoopCopyDataInit>

08001686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800168a:	3304      	adds	r3, #4

0800168c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800168c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800168e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001690:	d3f9      	bcc.n	8001686 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001692:	4a0a      	ldr	r2, [pc, #40]	@ (80016bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001694:	4c0a      	ldr	r4, [pc, #40]	@ (80016c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001698:	e001      	b.n	800169e <LoopFillZerobss>

0800169a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800169a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800169c:	3204      	adds	r2, #4

0800169e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800169e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016a0:	d3fb      	bcc.n	800169a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016a2:	f017 fa0f 	bl	8018ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016a6:	f7fe fe9d 	bl	80003e4 <main>
  bx  lr
 80016aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80016b0:	24004984 	.word	0x24004984
  ldr r1, =_edata
 80016b4:	24004a1c 	.word	0x24004a1c
  ldr r2, =_sidata
 80016b8:	0801c65c 	.word	0x0801c65c
  ldr r2, =_sbss
 80016bc:	24004a1c 	.word	0x24004a1c
  ldr r4, =_ebss
 80016c0:	24010604 	.word	0x24010604

080016c4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016c4:	e7fe      	b.n	80016c4 <ADC3_IRQHandler>

080016c6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d00b      	beq.n	80016ee <LAN8742_RegisterBusIO+0x28>
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <LAN8742_RegisterBusIO+0x28>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <LAN8742_RegisterBusIO+0x28>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d102      	bne.n	80016f4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016f2:	e014      	b.n	800171e <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68da      	ldr	r2, [r3, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d139      	bne.n	80017ba <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d002      	beq.n	8001754 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2220      	movs	r2, #32
 8001758:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e01c      	b.n	800179a <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	f107 020c 	add.w	r2, r7, #12
 8001768:	2112      	movs	r1, #18
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	4798      	blx	r3
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	da03      	bge.n	800177c <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8001774:	f06f 0304 	mvn.w	r3, #4
 8001778:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800177a:	e00b      	b.n	8001794 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 031f 	and.w	r3, r3, #31
 8001782:	697a      	ldr	r2, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	d105      	bne.n	8001794 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
         break;
 8001792:	e005      	b.n	80017a0 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b1f      	cmp	r3, #31
 800179e:	d9df      	bls.n	8001760 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b1f      	cmp	r3, #31
 80017a6:	d902      	bls.n	80017ae <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017a8:	f06f 0302 	mvn.w	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80017ba:	693b      	ldr	r3, [r7, #16]
 }
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6810      	ldr	r0, [r2, #0]
 80017d8:	f107 020c 	add.w	r2, r7, #12
 80017dc:	2101      	movs	r1, #1
 80017de:	4798      	blx	r3
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	da02      	bge.n	80017ec <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80017e6:	f06f 0304 	mvn.w	r3, #4
 80017ea:	e06e      	b.n	80018ca <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6810      	ldr	r0, [r2, #0]
 80017f4:	f107 020c 	add.w	r2, r7, #12
 80017f8:	2101      	movs	r1, #1
 80017fa:	4798      	blx	r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	da02      	bge.n	8001808 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001802:	f06f 0304 	mvn.w	r3, #4
 8001806:	e060      	b.n	80018ca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8001812:	2301      	movs	r3, #1
 8001814:	e059      	b.n	80018ca <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6810      	ldr	r0, [r2, #0]
 800181e:	f107 020c 	add.w	r2, r7, #12
 8001822:	2100      	movs	r1, #0
 8001824:	4798      	blx	r3
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	da02      	bge.n	8001832 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800182c:	f06f 0304 	mvn.w	r3, #4
 8001830:	e04b      	b.n	80018ca <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d11b      	bne.n	8001874 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d006      	beq.n	8001854 <LAN8742_GetLinkState+0x90>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001850:	2302      	movs	r3, #2
 8001852:	e03a      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800185e:	2303      	movs	r3, #3
 8001860:	e033      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800186c:	2304      	movs	r3, #4
 800186e:	e02c      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001870:	2305      	movs	r3, #5
 8001872:	e02a      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	695b      	ldr	r3, [r3, #20]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6810      	ldr	r0, [r2, #0]
 800187c:	f107 020c 	add.w	r2, r7, #12
 8001880:	211f      	movs	r1, #31
 8001882:	4798      	blx	r3
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	da02      	bge.n	8001890 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800188a:	f06f 0304 	mvn.w	r3, #4
 800188e:	e01c      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800189a:	2306      	movs	r3, #6
 800189c:	e015      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f003 031c 	and.w	r3, r3, #28
 80018a4:	2b18      	cmp	r3, #24
 80018a6:	d101      	bne.n	80018ac <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018a8:	2302      	movs	r3, #2
 80018aa:	e00e      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f003 031c 	and.w	r3, r3, #28
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d101      	bne.n	80018ba <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e007      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 031c 	and.w	r3, r3, #28
 80018c0:	2b14      	cmp	r3, #20
 80018c2:	d101      	bne.n	80018c8 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018c4:	2304      	movs	r3, #4
 80018c6:	e000      	b.n	80018ca <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018c8:	2305      	movs	r3, #5
    }
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018da:	2003      	movs	r0, #3
 80018dc:	f000 f917 	bl	8001b0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e0:	f004 fdac 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80018e4:	4602      	mov	r2, r0
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_Init+0x68>)
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	4913      	ldr	r1, [pc, #76]	@ (8001940 <HAL_Init+0x6c>)
 80018f2:	5ccb      	ldrb	r3, [r1, r3]
 80018f4:	f003 031f 	and.w	r3, r3, #31
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018fe:	4b0f      	ldr	r3, [pc, #60]	@ (800193c <HAL_Init+0x68>)
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	4a0e      	ldr	r2, [pc, #56]	@ (8001940 <HAL_Init+0x6c>)
 8001908:	5cd3      	ldrb	r3, [r2, r3]
 800190a:	f003 031f 	and.w	r3, r3, #31
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	fa22 f303 	lsr.w	r3, r2, r3
 8001914:	4a0b      	ldr	r2, [pc, #44]	@ (8001944 <HAL_Init+0x70>)
 8001916:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001918:	4a0b      	ldr	r2, [pc, #44]	@ (8001948 <HAL_Init+0x74>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800191e:	200f      	movs	r0, #15
 8001920:	f7ff fc92 	bl	8001248 <HAL_InitTick>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e002      	b.n	8001934 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800192e:	f7ff fb3f 	bl	8000fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	58024400 	.word	0x58024400
 8001940:	0801c41c 	.word	0x0801c41c
 8001944:	24004990 	.word	0x24004990
 8001948:	2400498c 	.word	0x2400498c

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001950:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x20>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	461a      	mov	r2, r3
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_IncTick+0x24>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4413      	add	r3, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <HAL_IncTick+0x24>)
 800195e:	6013      	str	r3, [r2, #0]
}
 8001960:	bf00      	nop
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	24004998 	.word	0x24004998
 8001970:	240059cc 	.word	0x240059cc

08001974 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return uwTick;
 8001978:	4b03      	ldr	r3, [pc, #12]	@ (8001988 <HAL_GetTick+0x14>)
 800197a:	681b      	ldr	r3, [r3, #0]
}
 800197c:	4618      	mov	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	240059cc 	.word	0x240059cc

0800198c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800199c:	4904      	ldr	r1, [pc, #16]	@ (80019b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	604b      	str	r3, [r1, #4]
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	58000400 	.word	0x58000400

080019b4 <__NVIC_SetPriorityGrouping>:
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x40>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ca:	68ba      	ldr	r2, [r7, #8]
 80019cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019d0:	4013      	ands	r3, r2
 80019d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x40>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00
 80019f8:	05fa0000 	.word	0x05fa0000

080019fc <__NVIC_GetPriorityGrouping>:
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a00:	4b04      	ldr	r3, [pc, #16]	@ (8001a14 <__NVIC_GetPriorityGrouping+0x18>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	0a1b      	lsrs	r3, r3, #8
 8001a06:	f003 0307 	and.w	r3, r3, #7
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_EnableIRQ>:
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	db0b      	blt.n	8001a42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	4907      	ldr	r1, [pc, #28]	@ (8001a50 <__NVIC_EnableIRQ+0x38>)
 8001a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a36:	095b      	lsrs	r3, r3, #5
 8001a38:	2001      	movs	r0, #1
 8001a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e100 	.word	0xe000e100

08001a54 <__NVIC_SetPriority>:
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6039      	str	r1, [r7, #0]
 8001a5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	db0a      	blt.n	8001a7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	490c      	ldr	r1, [pc, #48]	@ (8001aa0 <__NVIC_SetPriority+0x4c>)
 8001a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a72:	0112      	lsls	r2, r2, #4
 8001a74:	b2d2      	uxtb	r2, r2
 8001a76:	440b      	add	r3, r1
 8001a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a7c:	e00a      	b.n	8001a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4908      	ldr	r1, [pc, #32]	@ (8001aa4 <__NVIC_SetPriority+0x50>)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3b04      	subs	r3, #4
 8001a8c:	0112      	lsls	r2, r2, #4
 8001a8e:	b2d2      	uxtb	r2, r2
 8001a90:	440b      	add	r3, r1
 8001a92:	761a      	strb	r2, [r3, #24]
}
 8001a94:	bf00      	nop
 8001a96:	370c      	adds	r7, #12
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <NVIC_EncodePriority>:
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b089      	sub	sp, #36	@ 0x24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f1c3 0307 	rsb	r3, r3, #7
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	bf28      	it	cs
 8001ac6:	2304      	movcs	r3, #4
 8001ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3304      	adds	r3, #4
 8001ace:	2b06      	cmp	r3, #6
 8001ad0:	d902      	bls.n	8001ad8 <NVIC_EncodePriority+0x30>
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3b03      	subs	r3, #3
 8001ad6:	e000      	b.n	8001ada <NVIC_EncodePriority+0x32>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43da      	mvns	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	401a      	ands	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	43d9      	mvns	r1, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b00:	4313      	orrs	r3, r2
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3724      	adds	r7, #36	@ 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ff4c 	bl	80019b4 <__NVIC_SetPriorityGrouping>
}
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b32:	f7ff ff63 	bl	80019fc <__NVIC_GetPriorityGrouping>
 8001b36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	f7ff ffb3 	bl	8001aa8 <NVIC_EncodePriority>
 8001b42:	4602      	mov	r2, r0
 8001b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff82 	bl	8001a54 <__NVIC_SetPriority>
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff56 	bl	8001a18 <__NVIC_EnableIRQ>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001b78:	f3bf 8f5f 	dmb	sy
}
 8001b7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <HAL_MPU_Disable+0x28>)
 8001b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b82:	4a06      	ldr	r2, [pc, #24]	@ (8001b9c <HAL_MPU_Disable+0x28>)
 8001b84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <HAL_MPU_Disable+0x2c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	e000ed90 	.word	0xe000ed90

08001ba4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001bac:	4a0b      	ldr	r2, [pc, #44]	@ (8001bdc <HAL_MPU_Enable+0x38>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_MPU_Enable+0x3c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	4a09      	ldr	r2, [pc, #36]	@ (8001be0 <HAL_MPU_Enable+0x3c>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc2:	f3bf 8f4f 	dsb	sy
}
 8001bc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bc8:	f3bf 8f6f 	isb	sy
}
 8001bcc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed90 	.word	0xe000ed90
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	785a      	ldrb	r2, [r3, #1]
 8001bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_MPU_ConfigRegion+0x7c>)
 8001bf2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <HAL_MPU_ConfigRegion+0x7c>)
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	4a19      	ldr	r2, [pc, #100]	@ (8001c60 <HAL_MPU_ConfigRegion+0x7c>)
 8001bfa:	f023 0301 	bic.w	r3, r3, #1
 8001bfe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c00:	4a17      	ldr	r2, [pc, #92]	@ (8001c60 <HAL_MPU_ConfigRegion+0x7c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	7b1b      	ldrb	r3, [r3, #12]
 8001c0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	7adb      	ldrb	r3, [r3, #11]
 8001c12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7a9b      	ldrb	r3, [r3, #10]
 8001c1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	7b5b      	ldrb	r3, [r3, #13]
 8001c22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	7b9b      	ldrb	r3, [r3, #14]
 8001c2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	7bdb      	ldrb	r3, [r3, #15]
 8001c32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	7a5b      	ldrb	r3, [r3, #9]
 8001c3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001c3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	7a1b      	ldrb	r3, [r3, #8]
 8001c42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001c44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c4c:	4a04      	ldr	r2, [pc, #16]	@ (8001c60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001c4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c50:	6113      	str	r3, [r2, #16]
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed90 	.word	0xe000ed90

08001c64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fe82 	bl	8001974 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d101      	bne.n	8001c7c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e312      	b.n	80022a2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a66      	ldr	r2, [pc, #408]	@ (8001e1c <HAL_DMA_Init+0x1b8>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d04a      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a65      	ldr	r2, [pc, #404]	@ (8001e20 <HAL_DMA_Init+0x1bc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d045      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a63      	ldr	r2, [pc, #396]	@ (8001e24 <HAL_DMA_Init+0x1c0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d040      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a62      	ldr	r2, [pc, #392]	@ (8001e28 <HAL_DMA_Init+0x1c4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d03b      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a60      	ldr	r2, [pc, #384]	@ (8001e2c <HAL_DMA_Init+0x1c8>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d036      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8001e30 <HAL_DMA_Init+0x1cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d031      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e34 <HAL_DMA_Init+0x1d0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02c      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001e38 <HAL_DMA_Init+0x1d4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d027      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8001e3c <HAL_DMA_Init+0x1d8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d022      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a59      	ldr	r2, [pc, #356]	@ (8001e40 <HAL_DMA_Init+0x1dc>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d01d      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a57      	ldr	r2, [pc, #348]	@ (8001e44 <HAL_DMA_Init+0x1e0>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d018      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a56      	ldr	r2, [pc, #344]	@ (8001e48 <HAL_DMA_Init+0x1e4>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a54      	ldr	r2, [pc, #336]	@ (8001e4c <HAL_DMA_Init+0x1e8>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d00e      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a53      	ldr	r2, [pc, #332]	@ (8001e50 <HAL_DMA_Init+0x1ec>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d009      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a51      	ldr	r2, [pc, #324]	@ (8001e54 <HAL_DMA_Init+0x1f0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d004      	beq.n	8001d1c <HAL_DMA_Init+0xb8>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a50      	ldr	r2, [pc, #320]	@ (8001e58 <HAL_DMA_Init+0x1f4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d101      	bne.n	8001d20 <HAL_DMA_Init+0xbc>
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_DMA_Init+0xbe>
 8001d20:	2300      	movs	r3, #0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 813c 	beq.w	8001fa0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a37      	ldr	r2, [pc, #220]	@ (8001e1c <HAL_DMA_Init+0x1b8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d04a      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a36      	ldr	r2, [pc, #216]	@ (8001e20 <HAL_DMA_Init+0x1bc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d045      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a34      	ldr	r2, [pc, #208]	@ (8001e24 <HAL_DMA_Init+0x1c0>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d040      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a33      	ldr	r2, [pc, #204]	@ (8001e28 <HAL_DMA_Init+0x1c4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d03b      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a31      	ldr	r2, [pc, #196]	@ (8001e2c <HAL_DMA_Init+0x1c8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d036      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a30      	ldr	r2, [pc, #192]	@ (8001e30 <HAL_DMA_Init+0x1cc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d031      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a2e      	ldr	r2, [pc, #184]	@ (8001e34 <HAL_DMA_Init+0x1d0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d02c      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a2d      	ldr	r2, [pc, #180]	@ (8001e38 <HAL_DMA_Init+0x1d4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d027      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <HAL_DMA_Init+0x1d8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d022      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a2a      	ldr	r2, [pc, #168]	@ (8001e40 <HAL_DMA_Init+0x1dc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d01d      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a28      	ldr	r2, [pc, #160]	@ (8001e44 <HAL_DMA_Init+0x1e0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d018      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a27      	ldr	r2, [pc, #156]	@ (8001e48 <HAL_DMA_Init+0x1e4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d013      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a25      	ldr	r2, [pc, #148]	@ (8001e4c <HAL_DMA_Init+0x1e8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d00e      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a24      	ldr	r2, [pc, #144]	@ (8001e50 <HAL_DMA_Init+0x1ec>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d009      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a22      	ldr	r2, [pc, #136]	@ (8001e54 <HAL_DMA_Init+0x1f0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_DMA_Init+0x174>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a21      	ldr	r2, [pc, #132]	@ (8001e58 <HAL_DMA_Init+0x1f4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d108      	bne.n	8001dea <HAL_DMA_Init+0x186>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e007      	b.n	8001dfa <HAL_DMA_Init+0x196>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0201 	bic.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001dfa:	e02f      	b.n	8001e5c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dfc:	f7ff fdba 	bl	8001974 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b05      	cmp	r3, #5
 8001e08:	d928      	bls.n	8001e5c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2203      	movs	r2, #3
 8001e14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e242      	b.n	80022a2 <HAL_DMA_Init+0x63e>
 8001e1c:	40020010 	.word	0x40020010
 8001e20:	40020028 	.word	0x40020028
 8001e24:	40020040 	.word	0x40020040
 8001e28:	40020058 	.word	0x40020058
 8001e2c:	40020070 	.word	0x40020070
 8001e30:	40020088 	.word	0x40020088
 8001e34:	400200a0 	.word	0x400200a0
 8001e38:	400200b8 	.word	0x400200b8
 8001e3c:	40020410 	.word	0x40020410
 8001e40:	40020428 	.word	0x40020428
 8001e44:	40020440 	.word	0x40020440
 8001e48:	40020458 	.word	0x40020458
 8001e4c:	40020470 	.word	0x40020470
 8001e50:	40020488 	.word	0x40020488
 8001e54:	400204a0 	.word	0x400204a0
 8001e58:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1c8      	bne.n	8001dfc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	4b83      	ldr	r3, [pc, #524]	@ (8002084 <HAL_DMA_Init+0x420>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001e82:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d107      	bne.n	8001ec0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	697a      	ldr	r2, [r7, #20]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b28      	cmp	r3, #40	@ 0x28
 8001ec6:	d903      	bls.n	8001ed0 <HAL_DMA_Init+0x26c>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ece:	d91f      	bls.n	8001f10 <HAL_DMA_Init+0x2ac>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ed6:	d903      	bls.n	8001ee0 <HAL_DMA_Init+0x27c>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b42      	cmp	r3, #66	@ 0x42
 8001ede:	d917      	bls.n	8001f10 <HAL_DMA_Init+0x2ac>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b46      	cmp	r3, #70	@ 0x46
 8001ee6:	d903      	bls.n	8001ef0 <HAL_DMA_Init+0x28c>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	2b48      	cmp	r3, #72	@ 0x48
 8001eee:	d90f      	bls.n	8001f10 <HAL_DMA_Init+0x2ac>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b4e      	cmp	r3, #78	@ 0x4e
 8001ef6:	d903      	bls.n	8001f00 <HAL_DMA_Init+0x29c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b52      	cmp	r3, #82	@ 0x52
 8001efe:	d907      	bls.n	8001f10 <HAL_DMA_Init+0x2ac>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b73      	cmp	r3, #115	@ 0x73
 8001f06:	d905      	bls.n	8001f14 <HAL_DMA_Init+0x2b0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b77      	cmp	r3, #119	@ 0x77
 8001f0e:	d801      	bhi.n	8001f14 <HAL_DMA_Init+0x2b0>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_DMA_Init+0x2b2>
 8001f14:	2300      	movs	r3, #0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f20:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f023 0307 	bic.w	r3, r3, #7
 8001f38:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d117      	bne.n	8001f7c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00e      	beq.n	8001f7c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f001 fbfa 	bl	8003758 <DMA_CheckFifoParam>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d008      	beq.n	8001f7c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2240      	movs	r2, #64	@ 0x40
 8001f6e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e192      	b.n	80022a2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	697a      	ldr	r2, [r7, #20]
 8001f82:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f001 fb35 	bl	80035f4 <DMA_CalcBaseAndBitshift>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	223f      	movs	r2, #63	@ 0x3f
 8001f98:	409a      	lsls	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	e0c8      	b.n	8002132 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a38      	ldr	r2, [pc, #224]	@ (8002088 <HAL_DMA_Init+0x424>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a37      	ldr	r2, [pc, #220]	@ (800208c <HAL_DMA_Init+0x428>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a35      	ldr	r2, [pc, #212]	@ (8002090 <HAL_DMA_Init+0x42c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a34      	ldr	r2, [pc, #208]	@ (8002094 <HAL_DMA_Init+0x430>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a32      	ldr	r2, [pc, #200]	@ (8002098 <HAL_DMA_Init+0x434>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a31      	ldr	r2, [pc, #196]	@ (800209c <HAL_DMA_Init+0x438>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80020a0 <HAL_DMA_Init+0x43c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_DMA_Init+0x38c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a2e      	ldr	r2, [pc, #184]	@ (80020a4 <HAL_DMA_Init+0x440>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Init+0x390>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_DMA_Init+0x392>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 8092 	beq.w	8002120 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a21      	ldr	r2, [pc, #132]	@ (8002088 <HAL_DMA_Init+0x424>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d021      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a20      	ldr	r2, [pc, #128]	@ (800208c <HAL_DMA_Init+0x428>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d01c      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <HAL_DMA_Init+0x42c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d017      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a1d      	ldr	r2, [pc, #116]	@ (8002094 <HAL_DMA_Init+0x430>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d012      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_DMA_Init+0x434>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a1a      	ldr	r2, [pc, #104]	@ (800209c <HAL_DMA_Init+0x438>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d008      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a18      	ldr	r2, [pc, #96]	@ (80020a0 <HAL_DMA_Init+0x43c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d003      	beq.n	800204a <HAL_DMA_Init+0x3e6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a17      	ldr	r2, [pc, #92]	@ (80020a4 <HAL_DMA_Init+0x440>)
 8002048:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_DMA_Init+0x444>)
 8002066:	4013      	ands	r3, r2
 8002068:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2b40      	cmp	r3, #64	@ 0x40
 8002070:	d01c      	beq.n	80020ac <HAL_DMA_Init+0x448>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b80      	cmp	r3, #128	@ 0x80
 8002078:	d102      	bne.n	8002080 <HAL_DMA_Init+0x41c>
 800207a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800207e:	e016      	b.n	80020ae <HAL_DMA_Init+0x44a>
 8002080:	2300      	movs	r3, #0
 8002082:	e014      	b.n	80020ae <HAL_DMA_Init+0x44a>
 8002084:	fe10803f 	.word	0xfe10803f
 8002088:	58025408 	.word	0x58025408
 800208c:	5802541c 	.word	0x5802541c
 8002090:	58025430 	.word	0x58025430
 8002094:	58025444 	.word	0x58025444
 8002098:	58025458 	.word	0x58025458
 800209c:	5802546c 	.word	0x5802546c
 80020a0:	58025480 	.word	0x58025480
 80020a4:	58025494 	.word	0x58025494
 80020a8:	fffe000f 	.word	0xfffe000f
 80020ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	68d2      	ldr	r2, [r2, #12]
 80020b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80020bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80020c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80020cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80020d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80020dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b6e      	ldr	r3, [pc, #440]	@ (80022ac <HAL_DMA_Init+0x648>)
 80020f4:	4413      	add	r3, r2
 80020f6:	4a6e      	ldr	r2, [pc, #440]	@ (80022b0 <HAL_DMA_Init+0x64c>)
 80020f8:	fba2 2303 	umull	r2, r3, r2, r3
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	009a      	lsls	r2, r3, #2
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f001 fa75 	bl	80035f4 <DMA_CalcBaseAndBitshift>
 800210a:	4603      	mov	r3, r0
 800210c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2201      	movs	r2, #1
 8002118:	409a      	lsls	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	e008      	b.n	8002132 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	@ 0x40
 8002124:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e0b7      	b.n	80022a2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a5f      	ldr	r2, [pc, #380]	@ (80022b4 <HAL_DMA_Init+0x650>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d072      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a5d      	ldr	r2, [pc, #372]	@ (80022b8 <HAL_DMA_Init+0x654>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d06d      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a5c      	ldr	r2, [pc, #368]	@ (80022bc <HAL_DMA_Init+0x658>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d068      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a5a      	ldr	r2, [pc, #360]	@ (80022c0 <HAL_DMA_Init+0x65c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d063      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a59      	ldr	r2, [pc, #356]	@ (80022c4 <HAL_DMA_Init+0x660>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a57      	ldr	r2, [pc, #348]	@ (80022c8 <HAL_DMA_Init+0x664>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d059      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a56      	ldr	r2, [pc, #344]	@ (80022cc <HAL_DMA_Init+0x668>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d054      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a54      	ldr	r2, [pc, #336]	@ (80022d0 <HAL_DMA_Init+0x66c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d04f      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a53      	ldr	r2, [pc, #332]	@ (80022d4 <HAL_DMA_Init+0x670>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04a      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a51      	ldr	r2, [pc, #324]	@ (80022d8 <HAL_DMA_Init+0x674>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d045      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a50      	ldr	r2, [pc, #320]	@ (80022dc <HAL_DMA_Init+0x678>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d040      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a4e      	ldr	r2, [pc, #312]	@ (80022e0 <HAL_DMA_Init+0x67c>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d03b      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a4d      	ldr	r2, [pc, #308]	@ (80022e4 <HAL_DMA_Init+0x680>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d036      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	@ (80022e8 <HAL_DMA_Init+0x684>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d031      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a4a      	ldr	r2, [pc, #296]	@ (80022ec <HAL_DMA_Init+0x688>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d02c      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a48      	ldr	r2, [pc, #288]	@ (80022f0 <HAL_DMA_Init+0x68c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d027      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a47      	ldr	r2, [pc, #284]	@ (80022f4 <HAL_DMA_Init+0x690>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d022      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a45      	ldr	r2, [pc, #276]	@ (80022f8 <HAL_DMA_Init+0x694>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d01d      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a44      	ldr	r2, [pc, #272]	@ (80022fc <HAL_DMA_Init+0x698>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d018      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a42      	ldr	r2, [pc, #264]	@ (8002300 <HAL_DMA_Init+0x69c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a41      	ldr	r2, [pc, #260]	@ (8002304 <HAL_DMA_Init+0x6a0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d00e      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a3f      	ldr	r2, [pc, #252]	@ (8002308 <HAL_DMA_Init+0x6a4>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a3e      	ldr	r2, [pc, #248]	@ (800230c <HAL_DMA_Init+0x6a8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_DMA_Init+0x5be>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a3c      	ldr	r2, [pc, #240]	@ (8002310 <HAL_DMA_Init+0x6ac>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_DMA_Init+0x5c2>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_DMA_Init+0x5c4>
 8002226:	2300      	movs	r3, #0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d032      	beq.n	8002292 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f001 fb0f 	bl	8003850 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b80      	cmp	r3, #128	@ 0x80
 8002238:	d102      	bne.n	8002240 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002254:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_DMA_Init+0x61c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b08      	cmp	r3, #8
 8002264:	d80c      	bhi.n	8002280 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f001 fb8c 	bl	8003984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	e008      	b.n	8002292 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	a7fdabf8 	.word	0xa7fdabf8
 80022b0:	cccccccd 	.word	0xcccccccd
 80022b4:	40020010 	.word	0x40020010
 80022b8:	40020028 	.word	0x40020028
 80022bc:	40020040 	.word	0x40020040
 80022c0:	40020058 	.word	0x40020058
 80022c4:	40020070 	.word	0x40020070
 80022c8:	40020088 	.word	0x40020088
 80022cc:	400200a0 	.word	0x400200a0
 80022d0:	400200b8 	.word	0x400200b8
 80022d4:	40020410 	.word	0x40020410
 80022d8:	40020428 	.word	0x40020428
 80022dc:	40020440 	.word	0x40020440
 80022e0:	40020458 	.word	0x40020458
 80022e4:	40020470 	.word	0x40020470
 80022e8:	40020488 	.word	0x40020488
 80022ec:	400204a0 	.word	0x400204a0
 80022f0:	400204b8 	.word	0x400204b8
 80022f4:	58025408 	.word	0x58025408
 80022f8:	5802541c 	.word	0x5802541c
 80022fc:	58025430 	.word	0x58025430
 8002300:	58025444 	.word	0x58025444
 8002304:	58025458 	.word	0x58025458
 8002308:	5802546c 	.word	0x5802546c
 800230c:	58025480 	.word	0x58025480
 8002310:	58025494 	.word	0x58025494

08002314 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e237      	b.n	8002796 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d004      	beq.n	800233c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2280      	movs	r2, #128	@ 0x80
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e22c      	b.n	8002796 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5c      	ldr	r2, [pc, #368]	@ (80024b4 <HAL_DMA_Abort_IT+0x1a0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d04a      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5b      	ldr	r2, [pc, #364]	@ (80024b8 <HAL_DMA_Abort_IT+0x1a4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d045      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a59      	ldr	r2, [pc, #356]	@ (80024bc <HAL_DMA_Abort_IT+0x1a8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d040      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a58      	ldr	r2, [pc, #352]	@ (80024c0 <HAL_DMA_Abort_IT+0x1ac>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d03b      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a56      	ldr	r2, [pc, #344]	@ (80024c4 <HAL_DMA_Abort_IT+0x1b0>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d036      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a55      	ldr	r2, [pc, #340]	@ (80024c8 <HAL_DMA_Abort_IT+0x1b4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d031      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a53      	ldr	r2, [pc, #332]	@ (80024cc <HAL_DMA_Abort_IT+0x1b8>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d02c      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a52      	ldr	r2, [pc, #328]	@ (80024d0 <HAL_DMA_Abort_IT+0x1bc>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d027      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a50      	ldr	r2, [pc, #320]	@ (80024d4 <HAL_DMA_Abort_IT+0x1c0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d022      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a4f      	ldr	r2, [pc, #316]	@ (80024d8 <HAL_DMA_Abort_IT+0x1c4>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d01d      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4d      	ldr	r2, [pc, #308]	@ (80024dc <HAL_DMA_Abort_IT+0x1c8>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d018      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a4c      	ldr	r2, [pc, #304]	@ (80024e0 <HAL_DMA_Abort_IT+0x1cc>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d013      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	@ (80024e4 <HAL_DMA_Abort_IT+0x1d0>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d00e      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a49      	ldr	r2, [pc, #292]	@ (80024e8 <HAL_DMA_Abort_IT+0x1d4>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a47      	ldr	r2, [pc, #284]	@ (80024ec <HAL_DMA_Abort_IT+0x1d8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d004      	beq.n	80023dc <HAL_DMA_Abort_IT+0xc8>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a46      	ldr	r2, [pc, #280]	@ (80024f0 <HAL_DMA_Abort_IT+0x1dc>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_DMA_Abort_IT+0xcc>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_DMA_Abort_IT+0xce>
 80023e0:	2300      	movs	r3, #0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8086 	beq.w	80024f4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2204      	movs	r2, #4
 80023ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a2f      	ldr	r2, [pc, #188]	@ (80024b4 <HAL_DMA_Abort_IT+0x1a0>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d04a      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a2e      	ldr	r2, [pc, #184]	@ (80024b8 <HAL_DMA_Abort_IT+0x1a4>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d045      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a2c      	ldr	r2, [pc, #176]	@ (80024bc <HAL_DMA_Abort_IT+0x1a8>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d040      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a2b      	ldr	r2, [pc, #172]	@ (80024c0 <HAL_DMA_Abort_IT+0x1ac>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d03b      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a29      	ldr	r2, [pc, #164]	@ (80024c4 <HAL_DMA_Abort_IT+0x1b0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d036      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a28      	ldr	r2, [pc, #160]	@ (80024c8 <HAL_DMA_Abort_IT+0x1b4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d031      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a26      	ldr	r2, [pc, #152]	@ (80024cc <HAL_DMA_Abort_IT+0x1b8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d02c      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a25      	ldr	r2, [pc, #148]	@ (80024d0 <HAL_DMA_Abort_IT+0x1bc>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d027      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a23      	ldr	r2, [pc, #140]	@ (80024d4 <HAL_DMA_Abort_IT+0x1c0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d022      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a22      	ldr	r2, [pc, #136]	@ (80024d8 <HAL_DMA_Abort_IT+0x1c4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d01d      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a20      	ldr	r2, [pc, #128]	@ (80024dc <HAL_DMA_Abort_IT+0x1c8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d018      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a1f      	ldr	r2, [pc, #124]	@ (80024e0 <HAL_DMA_Abort_IT+0x1cc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d013      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1d      	ldr	r2, [pc, #116]	@ (80024e4 <HAL_DMA_Abort_IT+0x1d0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00e      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1c      	ldr	r2, [pc, #112]	@ (80024e8 <HAL_DMA_Abort_IT+0x1d4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1a      	ldr	r2, [pc, #104]	@ (80024ec <HAL_DMA_Abort_IT+0x1d8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_DMA_Abort_IT+0x17c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a19      	ldr	r2, [pc, #100]	@ (80024f0 <HAL_DMA_Abort_IT+0x1dc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d108      	bne.n	80024a2 <HAL_DMA_Abort_IT+0x18e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0201 	bic.w	r2, r2, #1
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e178      	b.n	8002794 <HAL_DMA_Abort_IT+0x480>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	601a      	str	r2, [r3, #0]
 80024b2:	e16f      	b.n	8002794 <HAL_DMA_Abort_IT+0x480>
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 020e 	bic.w	r2, r2, #14
 8002502:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a6c      	ldr	r2, [pc, #432]	@ (80026bc <HAL_DMA_Abort_IT+0x3a8>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d04a      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a6b      	ldr	r2, [pc, #428]	@ (80026c0 <HAL_DMA_Abort_IT+0x3ac>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d045      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a69      	ldr	r2, [pc, #420]	@ (80026c4 <HAL_DMA_Abort_IT+0x3b0>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d040      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a68      	ldr	r2, [pc, #416]	@ (80026c8 <HAL_DMA_Abort_IT+0x3b4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d03b      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a66      	ldr	r2, [pc, #408]	@ (80026cc <HAL_DMA_Abort_IT+0x3b8>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d036      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a65      	ldr	r2, [pc, #404]	@ (80026d0 <HAL_DMA_Abort_IT+0x3bc>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d031      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a63      	ldr	r2, [pc, #396]	@ (80026d4 <HAL_DMA_Abort_IT+0x3c0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02c      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a62      	ldr	r2, [pc, #392]	@ (80026d8 <HAL_DMA_Abort_IT+0x3c4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d027      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a60      	ldr	r2, [pc, #384]	@ (80026dc <HAL_DMA_Abort_IT+0x3c8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d022      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a5f      	ldr	r2, [pc, #380]	@ (80026e0 <HAL_DMA_Abort_IT+0x3cc>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d01d      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5d      	ldr	r2, [pc, #372]	@ (80026e4 <HAL_DMA_Abort_IT+0x3d0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d018      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5c      	ldr	r2, [pc, #368]	@ (80026e8 <HAL_DMA_Abort_IT+0x3d4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d013      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5a      	ldr	r2, [pc, #360]	@ (80026ec <HAL_DMA_Abort_IT+0x3d8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00e      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a59      	ldr	r2, [pc, #356]	@ (80026f0 <HAL_DMA_Abort_IT+0x3dc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d009      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a57      	ldr	r2, [pc, #348]	@ (80026f4 <HAL_DMA_Abort_IT+0x3e0>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d004      	beq.n	80025a4 <HAL_DMA_Abort_IT+0x290>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a56      	ldr	r2, [pc, #344]	@ (80026f8 <HAL_DMA_Abort_IT+0x3e4>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d108      	bne.n	80025b6 <HAL_DMA_Abort_IT+0x2a2>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e007      	b.n	80025c6 <HAL_DMA_Abort_IT+0x2b2>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0201 	bic.w	r2, r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a3c      	ldr	r2, [pc, #240]	@ (80026bc <HAL_DMA_Abort_IT+0x3a8>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d072      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a3a      	ldr	r2, [pc, #232]	@ (80026c0 <HAL_DMA_Abort_IT+0x3ac>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d06d      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a39      	ldr	r2, [pc, #228]	@ (80026c4 <HAL_DMA_Abort_IT+0x3b0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d068      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a37      	ldr	r2, [pc, #220]	@ (80026c8 <HAL_DMA_Abort_IT+0x3b4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d063      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a36      	ldr	r2, [pc, #216]	@ (80026cc <HAL_DMA_Abort_IT+0x3b8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d05e      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a34      	ldr	r2, [pc, #208]	@ (80026d0 <HAL_DMA_Abort_IT+0x3bc>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d059      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a33      	ldr	r2, [pc, #204]	@ (80026d4 <HAL_DMA_Abort_IT+0x3c0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d054      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a31      	ldr	r2, [pc, #196]	@ (80026d8 <HAL_DMA_Abort_IT+0x3c4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d04f      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a30      	ldr	r2, [pc, #192]	@ (80026dc <HAL_DMA_Abort_IT+0x3c8>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d04a      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2e      	ldr	r2, [pc, #184]	@ (80026e0 <HAL_DMA_Abort_IT+0x3cc>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d045      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2d      	ldr	r2, [pc, #180]	@ (80026e4 <HAL_DMA_Abort_IT+0x3d0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d040      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2b      	ldr	r2, [pc, #172]	@ (80026e8 <HAL_DMA_Abort_IT+0x3d4>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d03b      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a2a      	ldr	r2, [pc, #168]	@ (80026ec <HAL_DMA_Abort_IT+0x3d8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d036      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a28      	ldr	r2, [pc, #160]	@ (80026f0 <HAL_DMA_Abort_IT+0x3dc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a27      	ldr	r2, [pc, #156]	@ (80026f4 <HAL_DMA_Abort_IT+0x3e0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d02c      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a25      	ldr	r2, [pc, #148]	@ (80026f8 <HAL_DMA_Abort_IT+0x3e4>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d027      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a24      	ldr	r2, [pc, #144]	@ (80026fc <HAL_DMA_Abort_IT+0x3e8>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a22      	ldr	r2, [pc, #136]	@ (8002700 <HAL_DMA_Abort_IT+0x3ec>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01d      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a21      	ldr	r2, [pc, #132]	@ (8002704 <HAL_DMA_Abort_IT+0x3f0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d018      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1f      	ldr	r2, [pc, #124]	@ (8002708 <HAL_DMA_Abort_IT+0x3f4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1e      	ldr	r2, [pc, #120]	@ (800270c <HAL_DMA_Abort_IT+0x3f8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1c      	ldr	r2, [pc, #112]	@ (8002710 <HAL_DMA_Abort_IT+0x3fc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002714 <HAL_DMA_Abort_IT+0x400>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_DMA_Abort_IT+0x3a2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	@ (8002718 <HAL_DMA_Abort_IT+0x404>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d132      	bne.n	800271c <HAL_DMA_Abort_IT+0x408>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e031      	b.n	800271e <HAL_DMA_Abort_IT+0x40a>
 80026ba:	bf00      	nop
 80026bc:	40020010 	.word	0x40020010
 80026c0:	40020028 	.word	0x40020028
 80026c4:	40020040 	.word	0x40020040
 80026c8:	40020058 	.word	0x40020058
 80026cc:	40020070 	.word	0x40020070
 80026d0:	40020088 	.word	0x40020088
 80026d4:	400200a0 	.word	0x400200a0
 80026d8:	400200b8 	.word	0x400200b8
 80026dc:	40020410 	.word	0x40020410
 80026e0:	40020428 	.word	0x40020428
 80026e4:	40020440 	.word	0x40020440
 80026e8:	40020458 	.word	0x40020458
 80026ec:	40020470 	.word	0x40020470
 80026f0:	40020488 	.word	0x40020488
 80026f4:	400204a0 	.word	0x400204a0
 80026f8:	400204b8 	.word	0x400204b8
 80026fc:	58025408 	.word	0x58025408
 8002700:	5802541c 	.word	0x5802541c
 8002704:	58025430 	.word	0x58025430
 8002708:	58025444 	.word	0x58025444
 800270c:	58025458 	.word	0x58025458
 8002710:	5802546c 	.word	0x5802546c
 8002714:	58025480 	.word	0x58025480
 8002718:	58025494 	.word	0x58025494
 800271c:	2300      	movs	r3, #0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d028      	beq.n	8002774 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002730:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002736:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273c:	f003 031f 	and.w	r3, r3, #31
 8002740:	2201      	movs	r2, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002750:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00c      	beq.n	8002774 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002768:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002772:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3710      	adds	r7, #16
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop

080027a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08a      	sub	sp, #40	@ 0x28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027ac:	4b67      	ldr	r3, [pc, #412]	@ (800294c <HAL_DMA_IRQHandler+0x1ac>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a67      	ldr	r2, [pc, #412]	@ (8002950 <HAL_DMA_IRQHandler+0x1b0>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0a9b      	lsrs	r3, r3, #10
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	@ (8002954 <HAL_DMA_IRQHandler+0x1b4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d04a      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002958 <HAL_DMA_IRQHandler+0x1b8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d045      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	@ (800295c <HAL_DMA_IRQHandler+0x1bc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d040      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002960 <HAL_DMA_IRQHandler+0x1c0>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d03b      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	@ (8002964 <HAL_DMA_IRQHandler+0x1c4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d036      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	@ (8002968 <HAL_DMA_IRQHandler+0x1c8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d031      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	@ (800296c <HAL_DMA_IRQHandler+0x1cc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d02c      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	@ (8002970 <HAL_DMA_IRQHandler+0x1d0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d027      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	@ (8002974 <HAL_DMA_IRQHandler+0x1d4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d022      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	@ (8002978 <HAL_DMA_IRQHandler+0x1d8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	@ (800297c <HAL_DMA_IRQHandler+0x1dc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d018      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4e      	ldr	r2, [pc, #312]	@ (8002980 <HAL_DMA_IRQHandler+0x1e0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4d      	ldr	r2, [pc, #308]	@ (8002984 <HAL_DMA_IRQHandler+0x1e4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4b      	ldr	r2, [pc, #300]	@ (8002988 <HAL_DMA_IRQHandler+0x1e8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	@ (800298c <HAL_DMA_IRQHandler+0x1ec>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_DMA_IRQHandler+0xd2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a48      	ldr	r2, [pc, #288]	@ (8002990 <HAL_DMA_IRQHandler+0x1f0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d101      	bne.n	8002876 <HAL_DMA_IRQHandler+0xd6>
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_DMA_IRQHandler+0xd8>
 8002876:	2300      	movs	r3, #0
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 842b 	beq.w	80030d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	2208      	movs	r2, #8
 8002888:	409a      	lsls	r2, r3
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 80a2 	beq.w	80029d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a2e      	ldr	r2, [pc, #184]	@ (8002954 <HAL_DMA_IRQHandler+0x1b4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d04a      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002958 <HAL_DMA_IRQHandler+0x1b8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d045      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a2b      	ldr	r2, [pc, #172]	@ (800295c <HAL_DMA_IRQHandler+0x1bc>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d040      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002960 <HAL_DMA_IRQHandler+0x1c0>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d03b      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a28      	ldr	r2, [pc, #160]	@ (8002964 <HAL_DMA_IRQHandler+0x1c4>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d036      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a27      	ldr	r2, [pc, #156]	@ (8002968 <HAL_DMA_IRQHandler+0x1c8>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d031      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a25      	ldr	r2, [pc, #148]	@ (800296c <HAL_DMA_IRQHandler+0x1cc>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d02c      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a24      	ldr	r2, [pc, #144]	@ (8002970 <HAL_DMA_IRQHandler+0x1d0>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d027      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a22      	ldr	r2, [pc, #136]	@ (8002974 <HAL_DMA_IRQHandler+0x1d4>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d022      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a21      	ldr	r2, [pc, #132]	@ (8002978 <HAL_DMA_IRQHandler+0x1d8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01d      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a1f      	ldr	r2, [pc, #124]	@ (800297c <HAL_DMA_IRQHandler+0x1dc>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d018      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <HAL_DMA_IRQHandler+0x1e0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d013      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a1c      	ldr	r2, [pc, #112]	@ (8002984 <HAL_DMA_IRQHandler+0x1e4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00e      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1b      	ldr	r2, [pc, #108]	@ (8002988 <HAL_DMA_IRQHandler+0x1e8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d009      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	@ (800298c <HAL_DMA_IRQHandler+0x1ec>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d004      	beq.n	8002934 <HAL_DMA_IRQHandler+0x194>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a18      	ldr	r2, [pc, #96]	@ (8002990 <HAL_DMA_IRQHandler+0x1f0>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d12f      	bne.n	8002994 <HAL_DMA_IRQHandler+0x1f4>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	e02e      	b.n	80029a8 <HAL_DMA_IRQHandler+0x208>
 800294a:	bf00      	nop
 800294c:	2400498c 	.word	0x2400498c
 8002950:	1b4e81b5 	.word	0x1b4e81b5
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	bf14      	ite	ne
 80029a2:	2301      	movne	r3, #1
 80029a4:	2300      	moveq	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d015      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0204 	bic.w	r2, r2, #4
 80029ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	2208      	movs	r2, #8
 80029c6:	409a      	lsls	r2, r3
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d0:	f043 0201 	orr.w	r2, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d06e      	beq.n	8002acc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a69      	ldr	r2, [pc, #420]	@ (8002b98 <HAL_DMA_IRQHandler+0x3f8>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d04a      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a67      	ldr	r2, [pc, #412]	@ (8002b9c <HAL_DMA_IRQHandler+0x3fc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d045      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a66      	ldr	r2, [pc, #408]	@ (8002ba0 <HAL_DMA_IRQHandler+0x400>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d040      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a64      	ldr	r2, [pc, #400]	@ (8002ba4 <HAL_DMA_IRQHandler+0x404>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d03b      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a63      	ldr	r2, [pc, #396]	@ (8002ba8 <HAL_DMA_IRQHandler+0x408>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d036      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a61      	ldr	r2, [pc, #388]	@ (8002bac <HAL_DMA_IRQHandler+0x40c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d031      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a60      	ldr	r2, [pc, #384]	@ (8002bb0 <HAL_DMA_IRQHandler+0x410>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d02c      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a5e      	ldr	r2, [pc, #376]	@ (8002bb4 <HAL_DMA_IRQHandler+0x414>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d027      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a5d      	ldr	r2, [pc, #372]	@ (8002bb8 <HAL_DMA_IRQHandler+0x418>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d022      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8002bbc <HAL_DMA_IRQHandler+0x41c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01d      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a5a      	ldr	r2, [pc, #360]	@ (8002bc0 <HAL_DMA_IRQHandler+0x420>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d018      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a58      	ldr	r2, [pc, #352]	@ (8002bc4 <HAL_DMA_IRQHandler+0x424>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a57      	ldr	r2, [pc, #348]	@ (8002bc8 <HAL_DMA_IRQHandler+0x428>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00e      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a55      	ldr	r2, [pc, #340]	@ (8002bcc <HAL_DMA_IRQHandler+0x42c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d009      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a54      	ldr	r2, [pc, #336]	@ (8002bd0 <HAL_DMA_IRQHandler+0x430>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x2ee>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a52      	ldr	r2, [pc, #328]	@ (8002bd4 <HAL_DMA_IRQHandler+0x434>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d10a      	bne.n	8002aa4 <HAL_DMA_IRQHandler+0x304>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e003      	b.n	8002aac <HAL_DMA_IRQHandler+0x30c>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00d      	beq.n	8002acc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2201      	movs	r2, #1
 8002aba:	409a      	lsls	r2, r3
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac4:	f043 0202 	orr.w	r2, r3, #2
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad0:	f003 031f 	and.w	r3, r3, #31
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 808f 	beq.w	8002c00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8002b98 <HAL_DMA_IRQHandler+0x3f8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d04a      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a2a      	ldr	r2, [pc, #168]	@ (8002b9c <HAL_DMA_IRQHandler+0x3fc>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d045      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a29      	ldr	r2, [pc, #164]	@ (8002ba0 <HAL_DMA_IRQHandler+0x400>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d040      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a27      	ldr	r2, [pc, #156]	@ (8002ba4 <HAL_DMA_IRQHandler+0x404>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d03b      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a26      	ldr	r2, [pc, #152]	@ (8002ba8 <HAL_DMA_IRQHandler+0x408>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d036      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a24      	ldr	r2, [pc, #144]	@ (8002bac <HAL_DMA_IRQHandler+0x40c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d031      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a23      	ldr	r2, [pc, #140]	@ (8002bb0 <HAL_DMA_IRQHandler+0x410>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d02c      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a21      	ldr	r2, [pc, #132]	@ (8002bb4 <HAL_DMA_IRQHandler+0x414>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d027      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a20      	ldr	r2, [pc, #128]	@ (8002bb8 <HAL_DMA_IRQHandler+0x418>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1e      	ldr	r2, [pc, #120]	@ (8002bbc <HAL_DMA_IRQHandler+0x41c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d01d      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc0 <HAL_DMA_IRQHandler+0x420>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1b      	ldr	r2, [pc, #108]	@ (8002bc4 <HAL_DMA_IRQHandler+0x424>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc8 <HAL_DMA_IRQHandler+0x428>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a18      	ldr	r2, [pc, #96]	@ (8002bcc <HAL_DMA_IRQHandler+0x42c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a17      	ldr	r2, [pc, #92]	@ (8002bd0 <HAL_DMA_IRQHandler+0x430>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x3e2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	@ (8002bd4 <HAL_DMA_IRQHandler+0x434>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12a      	bne.n	8002bd8 <HAL_DMA_IRQHandler+0x438>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	e023      	b.n	8002be0 <HAL_DMA_IRQHandler+0x440>
 8002b98:	40020010 	.word	0x40020010
 8002b9c:	40020028 	.word	0x40020028
 8002ba0:	40020040 	.word	0x40020040
 8002ba4:	40020058 	.word	0x40020058
 8002ba8:	40020070 	.word	0x40020070
 8002bac:	40020088 	.word	0x40020088
 8002bb0:	400200a0 	.word	0x400200a0
 8002bb4:	400200b8 	.word	0x400200b8
 8002bb8:	40020410 	.word	0x40020410
 8002bbc:	40020428 	.word	0x40020428
 8002bc0:	40020440 	.word	0x40020440
 8002bc4:	40020458 	.word	0x40020458
 8002bc8:	40020470 	.word	0x40020470
 8002bcc:	40020488 	.word	0x40020488
 8002bd0:	400204a0 	.word	0x400204a0
 8002bd4:	400204b8 	.word	0x400204b8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c04:	f003 031f 	and.w	r3, r3, #31
 8002c08:	2210      	movs	r2, #16
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f000 80a6 	beq.w	8002d62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a85      	ldr	r2, [pc, #532]	@ (8002e30 <HAL_DMA_IRQHandler+0x690>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d04a      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a83      	ldr	r2, [pc, #524]	@ (8002e34 <HAL_DMA_IRQHandler+0x694>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d045      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a82      	ldr	r2, [pc, #520]	@ (8002e38 <HAL_DMA_IRQHandler+0x698>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d040      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a80      	ldr	r2, [pc, #512]	@ (8002e3c <HAL_DMA_IRQHandler+0x69c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d03b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a7f      	ldr	r2, [pc, #508]	@ (8002e40 <HAL_DMA_IRQHandler+0x6a0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d036      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a7d      	ldr	r2, [pc, #500]	@ (8002e44 <HAL_DMA_IRQHandler+0x6a4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d031      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7c      	ldr	r2, [pc, #496]	@ (8002e48 <HAL_DMA_IRQHandler+0x6a8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d02c      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a7a      	ldr	r2, [pc, #488]	@ (8002e4c <HAL_DMA_IRQHandler+0x6ac>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d027      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a79      	ldr	r2, [pc, #484]	@ (8002e50 <HAL_DMA_IRQHandler+0x6b0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d022      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a77      	ldr	r2, [pc, #476]	@ (8002e54 <HAL_DMA_IRQHandler+0x6b4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d01d      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a76      	ldr	r2, [pc, #472]	@ (8002e58 <HAL_DMA_IRQHandler+0x6b8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d018      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a74      	ldr	r2, [pc, #464]	@ (8002e5c <HAL_DMA_IRQHandler+0x6bc>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a73      	ldr	r2, [pc, #460]	@ (8002e60 <HAL_DMA_IRQHandler+0x6c0>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a71      	ldr	r2, [pc, #452]	@ (8002e64 <HAL_DMA_IRQHandler+0x6c4>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d009      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a70      	ldr	r2, [pc, #448]	@ (8002e68 <HAL_DMA_IRQHandler+0x6c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d004      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0x516>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e6c <HAL_DMA_IRQHandler+0x6cc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10a      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x52c>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0308 	and.w	r3, r3, #8
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	bf14      	ite	ne
 8002cc4:	2301      	movne	r3, #1
 8002cc6:	2300      	moveq	r3, #0
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	e009      	b.n	8002ce0 <HAL_DMA_IRQHandler+0x540>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d03e      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce8:	f003 031f 	and.w	r3, r3, #31
 8002cec:	2210      	movs	r2, #16
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d108      	bne.n	8002d22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d024      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e01f      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d01b      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	4798      	blx	r3
 8002d32:	e016      	b.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d107      	bne.n	8002d52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0208 	bic.w	r2, r2, #8
 8002d50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	f003 031f 	and.w	r3, r3, #31
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	f000 8110 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8002e30 <HAL_DMA_IRQHandler+0x690>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04a      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a2b      	ldr	r2, [pc, #172]	@ (8002e34 <HAL_DMA_IRQHandler+0x694>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d045      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_DMA_IRQHandler+0x698>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d040      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a28      	ldr	r2, [pc, #160]	@ (8002e3c <HAL_DMA_IRQHandler+0x69c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d03b      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a26      	ldr	r2, [pc, #152]	@ (8002e40 <HAL_DMA_IRQHandler+0x6a0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d036      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a25      	ldr	r2, [pc, #148]	@ (8002e44 <HAL_DMA_IRQHandler+0x6a4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d031      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a23      	ldr	r2, [pc, #140]	@ (8002e48 <HAL_DMA_IRQHandler+0x6a8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d02c      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a22      	ldr	r2, [pc, #136]	@ (8002e4c <HAL_DMA_IRQHandler+0x6ac>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d027      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a20      	ldr	r2, [pc, #128]	@ (8002e50 <HAL_DMA_IRQHandler+0x6b0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_DMA_IRQHandler+0x6b4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01d      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	@ (8002e58 <HAL_DMA_IRQHandler+0x6b8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1c      	ldr	r2, [pc, #112]	@ (8002e5c <HAL_DMA_IRQHandler+0x6bc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e60 <HAL_DMA_IRQHandler+0x6c0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a19      	ldr	r2, [pc, #100]	@ (8002e64 <HAL_DMA_IRQHandler+0x6c4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a17      	ldr	r2, [pc, #92]	@ (8002e68 <HAL_DMA_IRQHandler+0x6c8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_DMA_IRQHandler+0x678>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a16      	ldr	r2, [pc, #88]	@ (8002e6c <HAL_DMA_IRQHandler+0x6cc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d12b      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x6d0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	e02a      	b.n	8002e84 <HAL_DMA_IRQHandler+0x6e4>
 8002e2e:	bf00      	nop
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8087 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	2220      	movs	r2, #32
 8002e94:	409a      	lsls	r2, r3
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d139      	bne.n	8002f1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0216 	bic.w	r2, r2, #22
 8002eb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	695a      	ldr	r2, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ec4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_DMA_IRQHandler+0x736>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d007      	beq.n	8002ee6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0208 	bic.w	r2, r2, #8
 8002ee4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	223f      	movs	r2, #63	@ 0x3f
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 834a 	beq.w	80035a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	4798      	blx	r3
          }
          return;
 8002f18:	e344      	b.n	80035a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d018      	beq.n	8002f5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d02c      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	4798      	blx	r3
 8002f46:	e027      	b.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
 8002f58:	e01e      	b.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d10f      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0210 	bic.w	r2, r2, #16
 8002f76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8306 	beq.w	80035ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	f000 8088 	beq.w	80030c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2204      	movs	r2, #4
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a7a      	ldr	r2, [pc, #488]	@ (80031a8 <HAL_DMA_IRQHandler+0xa08>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a79      	ldr	r2, [pc, #484]	@ (80031ac <HAL_DMA_IRQHandler+0xa0c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a77      	ldr	r2, [pc, #476]	@ (80031b0 <HAL_DMA_IRQHandler+0xa10>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a76      	ldr	r2, [pc, #472]	@ (80031b4 <HAL_DMA_IRQHandler+0xa14>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a74      	ldr	r2, [pc, #464]	@ (80031b8 <HAL_DMA_IRQHandler+0xa18>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a73      	ldr	r2, [pc, #460]	@ (80031bc <HAL_DMA_IRQHandler+0xa1c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a71      	ldr	r2, [pc, #452]	@ (80031c0 <HAL_DMA_IRQHandler+0xa20>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a70      	ldr	r2, [pc, #448]	@ (80031c4 <HAL_DMA_IRQHandler+0xa24>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a6e      	ldr	r2, [pc, #440]	@ (80031c8 <HAL_DMA_IRQHandler+0xa28>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a6d      	ldr	r2, [pc, #436]	@ (80031cc <HAL_DMA_IRQHandler+0xa2c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a6b      	ldr	r2, [pc, #428]	@ (80031d0 <HAL_DMA_IRQHandler+0xa30>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a6a      	ldr	r2, [pc, #424]	@ (80031d4 <HAL_DMA_IRQHandler+0xa34>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a68      	ldr	r2, [pc, #416]	@ (80031d8 <HAL_DMA_IRQHandler+0xa38>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a67      	ldr	r2, [pc, #412]	@ (80031dc <HAL_DMA_IRQHandler+0xa3c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a65      	ldr	r2, [pc, #404]	@ (80031e0 <HAL_DMA_IRQHandler+0xa40>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <HAL_DMA_IRQHandler+0x8b8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a64      	ldr	r2, [pc, #400]	@ (80031e4 <HAL_DMA_IRQHandler+0xa44>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <HAL_DMA_IRQHandler+0x8ca>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0201 	bic.w	r2, r2, #1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e007      	b.n	800307a <HAL_DMA_IRQHandler+0x8da>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0201 	bic.w	r2, r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3301      	adds	r3, #1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003082:	429a      	cmp	r2, r3
 8003084:	d307      	bcc.n	8003096 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f2      	bne.n	800307a <HAL_DMA_IRQHandler+0x8da>
 8003094:	e000      	b.n	8003098 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003096:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2203      	movs	r2, #3
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80030ae:	e003      	b.n	80030b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 8272 	beq.w	80035ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	4798      	blx	r3
 80030d2:	e26c      	b.n	80035ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a43      	ldr	r2, [pc, #268]	@ (80031e8 <HAL_DMA_IRQHandler+0xa48>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d022      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a42      	ldr	r2, [pc, #264]	@ (80031ec <HAL_DMA_IRQHandler+0xa4c>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d01d      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a40      	ldr	r2, [pc, #256]	@ (80031f0 <HAL_DMA_IRQHandler+0xa50>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d018      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a3f      	ldr	r2, [pc, #252]	@ (80031f4 <HAL_DMA_IRQHandler+0xa54>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d013      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3d      	ldr	r2, [pc, #244]	@ (80031f8 <HAL_DMA_IRQHandler+0xa58>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d00e      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a3c      	ldr	r2, [pc, #240]	@ (80031fc <HAL_DMA_IRQHandler+0xa5c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3a      	ldr	r2, [pc, #232]	@ (8003200 <HAL_DMA_IRQHandler+0xa60>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d004      	beq.n	8003124 <HAL_DMA_IRQHandler+0x984>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a39      	ldr	r2, [pc, #228]	@ (8003204 <HAL_DMA_IRQHandler+0xa64>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d101      	bne.n	8003128 <HAL_DMA_IRQHandler+0x988>
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_DMA_IRQHandler+0x98a>
 8003128:	2300      	movs	r3, #0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 823f 	beq.w	80035ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	2204      	movs	r2, #4
 8003142:	409a      	lsls	r2, r3
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	4013      	ands	r3, r2
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80cd 	beq.w	80032e8 <HAL_DMA_IRQHandler+0xb48>
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 80c7 	beq.w	80032e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2204      	movs	r2, #4
 8003164:	409a      	lsls	r2, r3
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d049      	beq.n	8003208 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003182:	2b00      	cmp	r3, #0
 8003184:	f000 8210 	beq.w	80035a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003190:	e20a      	b.n	80035a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 8206 	beq.w	80035a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031a4:	e200      	b.n	80035a8 <HAL_DMA_IRQHandler+0xe08>
 80031a6:	bf00      	nop
 80031a8:	40020010 	.word	0x40020010
 80031ac:	40020028 	.word	0x40020028
 80031b0:	40020040 	.word	0x40020040
 80031b4:	40020058 	.word	0x40020058
 80031b8:	40020070 	.word	0x40020070
 80031bc:	40020088 	.word	0x40020088
 80031c0:	400200a0 	.word	0x400200a0
 80031c4:	400200b8 	.word	0x400200b8
 80031c8:	40020410 	.word	0x40020410
 80031cc:	40020428 	.word	0x40020428
 80031d0:	40020440 	.word	0x40020440
 80031d4:	40020458 	.word	0x40020458
 80031d8:	40020470 	.word	0x40020470
 80031dc:	40020488 	.word	0x40020488
 80031e0:	400204a0 	.word	0x400204a0
 80031e4:	400204b8 	.word	0x400204b8
 80031e8:	58025408 	.word	0x58025408
 80031ec:	5802541c 	.word	0x5802541c
 80031f0:	58025430 	.word	0x58025430
 80031f4:	58025444 	.word	0x58025444
 80031f8:	58025458 	.word	0x58025458
 80031fc:	5802546c 	.word	0x5802546c
 8003200:	58025480 	.word	0x58025480
 8003204:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d160      	bne.n	80032d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7f      	ldr	r2, [pc, #508]	@ (8003414 <HAL_DMA_IRQHandler+0xc74>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d04a      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a7d      	ldr	r2, [pc, #500]	@ (8003418 <HAL_DMA_IRQHandler+0xc78>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d045      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a7c      	ldr	r2, [pc, #496]	@ (800341c <HAL_DMA_IRQHandler+0xc7c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d040      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a7a      	ldr	r2, [pc, #488]	@ (8003420 <HAL_DMA_IRQHandler+0xc80>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d03b      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a79      	ldr	r2, [pc, #484]	@ (8003424 <HAL_DMA_IRQHandler+0xc84>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d036      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a77      	ldr	r2, [pc, #476]	@ (8003428 <HAL_DMA_IRQHandler+0xc88>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d031      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a76      	ldr	r2, [pc, #472]	@ (800342c <HAL_DMA_IRQHandler+0xc8c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d02c      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a74      	ldr	r2, [pc, #464]	@ (8003430 <HAL_DMA_IRQHandler+0xc90>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d027      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a73      	ldr	r2, [pc, #460]	@ (8003434 <HAL_DMA_IRQHandler+0xc94>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d022      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a71      	ldr	r2, [pc, #452]	@ (8003438 <HAL_DMA_IRQHandler+0xc98>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d01d      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a70      	ldr	r2, [pc, #448]	@ (800343c <HAL_DMA_IRQHandler+0xc9c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d018      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6e      	ldr	r2, [pc, #440]	@ (8003440 <HAL_DMA_IRQHandler+0xca0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d013      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6d      	ldr	r2, [pc, #436]	@ (8003444 <HAL_DMA_IRQHandler+0xca4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d00e      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a6b      	ldr	r2, [pc, #428]	@ (8003448 <HAL_DMA_IRQHandler+0xca8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d009      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a6a      	ldr	r2, [pc, #424]	@ (800344c <HAL_DMA_IRQHandler+0xcac>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d004      	beq.n	80032b2 <HAL_DMA_IRQHandler+0xb12>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a68      	ldr	r2, [pc, #416]	@ (8003450 <HAL_DMA_IRQHandler+0xcb0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d108      	bne.n	80032c4 <HAL_DMA_IRQHandler+0xb24>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_DMA_IRQHandler+0xb34>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8165 	beq.w	80035a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032e6:	e15f      	b.n	80035a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ec:	f003 031f 	and.w	r3, r3, #31
 80032f0:	2202      	movs	r2, #2
 80032f2:	409a      	lsls	r2, r3
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	4013      	ands	r3, r2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 80c5 	beq.w	8003488 <HAL_DMA_IRQHandler+0xce8>
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80bf 	beq.w	8003488 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330e:	f003 031f 	and.w	r3, r3, #31
 8003312:	2202      	movs	r2, #2
 8003314:	409a      	lsls	r2, r3
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d018      	beq.n	8003356 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d109      	bne.n	8003342 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 813a 	beq.w	80035ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003340:	e134      	b.n	80035ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	f000 8130 	beq.w	80035ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003354:	e12a      	b.n	80035ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 8089 	bne.w	8003474 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a2b      	ldr	r2, [pc, #172]	@ (8003414 <HAL_DMA_IRQHandler+0xc74>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d04a      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a29      	ldr	r2, [pc, #164]	@ (8003418 <HAL_DMA_IRQHandler+0xc78>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d045      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a28      	ldr	r2, [pc, #160]	@ (800341c <HAL_DMA_IRQHandler+0xc7c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d040      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a26      	ldr	r2, [pc, #152]	@ (8003420 <HAL_DMA_IRQHandler+0xc80>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d03b      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a25      	ldr	r2, [pc, #148]	@ (8003424 <HAL_DMA_IRQHandler+0xc84>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d036      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a23      	ldr	r2, [pc, #140]	@ (8003428 <HAL_DMA_IRQHandler+0xc88>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d031      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a22      	ldr	r2, [pc, #136]	@ (800342c <HAL_DMA_IRQHandler+0xc8c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d02c      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a20      	ldr	r2, [pc, #128]	@ (8003430 <HAL_DMA_IRQHandler+0xc90>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d027      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a1f      	ldr	r2, [pc, #124]	@ (8003434 <HAL_DMA_IRQHandler+0xc94>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d022      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003438 <HAL_DMA_IRQHandler+0xc98>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d01d      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_DMA_IRQHandler+0xc9c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d018      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1a      	ldr	r2, [pc, #104]	@ (8003440 <HAL_DMA_IRQHandler+0xca0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a19      	ldr	r2, [pc, #100]	@ (8003444 <HAL_DMA_IRQHandler+0xca4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00e      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a17      	ldr	r2, [pc, #92]	@ (8003448 <HAL_DMA_IRQHandler+0xca8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d009      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a16      	ldr	r2, [pc, #88]	@ (800344c <HAL_DMA_IRQHandler+0xcac>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d004      	beq.n	8003402 <HAL_DMA_IRQHandler+0xc62>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <HAL_DMA_IRQHandler+0xcb0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d128      	bne.n	8003454 <HAL_DMA_IRQHandler+0xcb4>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0214 	bic.w	r2, r2, #20
 8003410:	601a      	str	r2, [r3, #0]
 8003412:	e027      	b.n	8003464 <HAL_DMA_IRQHandler+0xcc4>
 8003414:	40020010 	.word	0x40020010
 8003418:	40020028 	.word	0x40020028
 800341c:	40020040 	.word	0x40020040
 8003420:	40020058 	.word	0x40020058
 8003424:	40020070 	.word	0x40020070
 8003428:	40020088 	.word	0x40020088
 800342c:	400200a0 	.word	0x400200a0
 8003430:	400200b8 	.word	0x400200b8
 8003434:	40020410 	.word	0x40020410
 8003438:	40020428 	.word	0x40020428
 800343c:	40020440 	.word	0x40020440
 8003440:	40020458 	.word	0x40020458
 8003444:	40020470 	.word	0x40020470
 8003448:	40020488 	.word	0x40020488
 800344c:	400204a0 	.word	0x400204a0
 8003450:	400204b8 	.word	0x400204b8
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 020a 	bic.w	r2, r2, #10
 8003462:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8097 	beq.w	80035ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003486:	e091      	b.n	80035ac <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	2208      	movs	r2, #8
 8003492:	409a      	lsls	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	4013      	ands	r3, r2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f000 8088 	beq.w	80035ae <HAL_DMA_IRQHandler+0xe0e>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0308 	and.w	r3, r3, #8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8082 	beq.w	80035ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a41      	ldr	r2, [pc, #260]	@ (80035b4 <HAL_DMA_IRQHandler+0xe14>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d04a      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a3f      	ldr	r2, [pc, #252]	@ (80035b8 <HAL_DMA_IRQHandler+0xe18>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d045      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3e      	ldr	r2, [pc, #248]	@ (80035bc <HAL_DMA_IRQHandler+0xe1c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d040      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3c      	ldr	r2, [pc, #240]	@ (80035c0 <HAL_DMA_IRQHandler+0xe20>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d03b      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a3b      	ldr	r2, [pc, #236]	@ (80035c4 <HAL_DMA_IRQHandler+0xe24>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d036      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a39      	ldr	r2, [pc, #228]	@ (80035c8 <HAL_DMA_IRQHandler+0xe28>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d031      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a38      	ldr	r2, [pc, #224]	@ (80035cc <HAL_DMA_IRQHandler+0xe2c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d02c      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a36      	ldr	r2, [pc, #216]	@ (80035d0 <HAL_DMA_IRQHandler+0xe30>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d027      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a35      	ldr	r2, [pc, #212]	@ (80035d4 <HAL_DMA_IRQHandler+0xe34>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d022      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a33      	ldr	r2, [pc, #204]	@ (80035d8 <HAL_DMA_IRQHandler+0xe38>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d01d      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a32      	ldr	r2, [pc, #200]	@ (80035dc <HAL_DMA_IRQHandler+0xe3c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d018      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a30      	ldr	r2, [pc, #192]	@ (80035e0 <HAL_DMA_IRQHandler+0xe40>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2f      	ldr	r2, [pc, #188]	@ (80035e4 <HAL_DMA_IRQHandler+0xe44>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d00e      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <HAL_DMA_IRQHandler+0xe48>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d009      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <HAL_DMA_IRQHandler+0xe4c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d004      	beq.n	800354a <HAL_DMA_IRQHandler+0xdaa>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2a      	ldr	r2, [pc, #168]	@ (80035f0 <HAL_DMA_IRQHandler+0xe50>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <HAL_DMA_IRQHandler+0xdbc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 021c 	bic.w	r2, r2, #28
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	e007      	b.n	800356c <HAL_DMA_IRQHandler+0xdcc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f022 020e 	bic.w	r2, r2, #14
 800356a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2201      	movs	r2, #1
 8003576:	409a      	lsls	r2, r3
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2201      	movs	r2, #1
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
 80035a2:	e004      	b.n	80035ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80035a4:	bf00      	nop
 80035a6:	e002      	b.n	80035ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035a8:	bf00      	nop
 80035aa:	e000      	b.n	80035ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035ae:	3728      	adds	r7, #40	@ 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40020010 	.word	0x40020010
 80035b8:	40020028 	.word	0x40020028
 80035bc:	40020040 	.word	0x40020040
 80035c0:	40020058 	.word	0x40020058
 80035c4:	40020070 	.word	0x40020070
 80035c8:	40020088 	.word	0x40020088
 80035cc:	400200a0 	.word	0x400200a0
 80035d0:	400200b8 	.word	0x400200b8
 80035d4:	40020410 	.word	0x40020410
 80035d8:	40020428 	.word	0x40020428
 80035dc:	40020440 	.word	0x40020440
 80035e0:	40020458 	.word	0x40020458
 80035e4:	40020470 	.word	0x40020470
 80035e8:	40020488 	.word	0x40020488
 80035ec:	400204a0 	.word	0x400204a0
 80035f0:	400204b8 	.word	0x400204b8

080035f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a42      	ldr	r2, [pc, #264]	@ (800370c <DMA_CalcBaseAndBitshift+0x118>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d04a      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a41      	ldr	r2, [pc, #260]	@ (8003710 <DMA_CalcBaseAndBitshift+0x11c>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d045      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a3f      	ldr	r2, [pc, #252]	@ (8003714 <DMA_CalcBaseAndBitshift+0x120>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d040      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a3e      	ldr	r2, [pc, #248]	@ (8003718 <DMA_CalcBaseAndBitshift+0x124>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d03b      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a3c      	ldr	r2, [pc, #240]	@ (800371c <DMA_CalcBaseAndBitshift+0x128>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d036      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a3b      	ldr	r2, [pc, #236]	@ (8003720 <DMA_CalcBaseAndBitshift+0x12c>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d031      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a39      	ldr	r2, [pc, #228]	@ (8003724 <DMA_CalcBaseAndBitshift+0x130>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d02c      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a38      	ldr	r2, [pc, #224]	@ (8003728 <DMA_CalcBaseAndBitshift+0x134>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d027      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a36      	ldr	r2, [pc, #216]	@ (800372c <DMA_CalcBaseAndBitshift+0x138>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d022      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a35      	ldr	r2, [pc, #212]	@ (8003730 <DMA_CalcBaseAndBitshift+0x13c>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d01d      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a33      	ldr	r2, [pc, #204]	@ (8003734 <DMA_CalcBaseAndBitshift+0x140>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d018      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a32      	ldr	r2, [pc, #200]	@ (8003738 <DMA_CalcBaseAndBitshift+0x144>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a30      	ldr	r2, [pc, #192]	@ (800373c <DMA_CalcBaseAndBitshift+0x148>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00e      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a2f      	ldr	r2, [pc, #188]	@ (8003740 <DMA_CalcBaseAndBitshift+0x14c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d009      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <DMA_CalcBaseAndBitshift+0x150>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d004      	beq.n	800369c <DMA_CalcBaseAndBitshift+0xa8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2c      	ldr	r2, [pc, #176]	@ (8003748 <DMA_CalcBaseAndBitshift+0x154>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d101      	bne.n	80036a0 <DMA_CalcBaseAndBitshift+0xac>
 800369c:	2301      	movs	r3, #1
 800369e:	e000      	b.n	80036a2 <DMA_CalcBaseAndBitshift+0xae>
 80036a0:	2300      	movs	r3, #0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d024      	beq.n	80036f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	3b10      	subs	r3, #16
 80036ae:	4a27      	ldr	r2, [pc, #156]	@ (800374c <DMA_CalcBaseAndBitshift+0x158>)
 80036b0:	fba2 2303 	umull	r2, r3, r2, r3
 80036b4:	091b      	lsrs	r3, r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <DMA_CalcBaseAndBitshift+0x15c>)
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	461a      	mov	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b03      	cmp	r3, #3
 80036cc:	d908      	bls.n	80036e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <DMA_CalcBaseAndBitshift+0x160>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	1d1a      	adds	r2, r3, #4
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	659a      	str	r2, [r3, #88]	@ 0x58
 80036de:	e00d      	b.n	80036fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003754 <DMA_CalcBaseAndBitshift+0x160>)
 80036e8:	4013      	ands	r3, r2
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80036ee:	e005      	b.n	80036fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003700:	4618      	mov	r0, r3
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	40020010 	.word	0x40020010
 8003710:	40020028 	.word	0x40020028
 8003714:	40020040 	.word	0x40020040
 8003718:	40020058 	.word	0x40020058
 800371c:	40020070 	.word	0x40020070
 8003720:	40020088 	.word	0x40020088
 8003724:	400200a0 	.word	0x400200a0
 8003728:	400200b8 	.word	0x400200b8
 800372c:	40020410 	.word	0x40020410
 8003730:	40020428 	.word	0x40020428
 8003734:	40020440 	.word	0x40020440
 8003738:	40020458 	.word	0x40020458
 800373c:	40020470 	.word	0x40020470
 8003740:	40020488 	.word	0x40020488
 8003744:	400204a0 	.word	0x400204a0
 8003748:	400204b8 	.word	0x400204b8
 800374c:	aaaaaaab 	.word	0xaaaaaaab
 8003750:	0801c42c 	.word	0x0801c42c
 8003754:	fffffc00 	.word	0xfffffc00

08003758 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003760:	2300      	movs	r3, #0
 8003762:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d120      	bne.n	80037ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003770:	2b03      	cmp	r3, #3
 8003772:	d858      	bhi.n	8003826 <DMA_CheckFifoParam+0xce>
 8003774:	a201      	add	r2, pc, #4	@ (adr r2, 800377c <DMA_CheckFifoParam+0x24>)
 8003776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800377a:	bf00      	nop
 800377c:	0800378d 	.word	0x0800378d
 8003780:	0800379f 	.word	0x0800379f
 8003784:	0800378d 	.word	0x0800378d
 8003788:	08003827 	.word	0x08003827
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d048      	beq.n	800382a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800379c:	e045      	b.n	800382a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037a6:	d142      	bne.n	800382e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ac:	e03f      	b.n	800382e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b6:	d123      	bne.n	8003800 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d838      	bhi.n	8003832 <DMA_CheckFifoParam+0xda>
 80037c0:	a201      	add	r2, pc, #4	@ (adr r2, 80037c8 <DMA_CheckFifoParam+0x70>)
 80037c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c6:	bf00      	nop
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037df 	.word	0x080037df
 80037d0:	080037d9 	.word	0x080037d9
 80037d4:	080037f1 	.word	0x080037f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
        break;
 80037dc:	e030      	b.n	8003840 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d025      	beq.n	8003836 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037ee:	e022      	b.n	8003836 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037f8:	d11f      	bne.n	800383a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037fe:	e01c      	b.n	800383a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003804:	2b02      	cmp	r3, #2
 8003806:	d902      	bls.n	800380e <DMA_CheckFifoParam+0xb6>
 8003808:	2b03      	cmp	r3, #3
 800380a:	d003      	beq.n	8003814 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800380c:	e018      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
        break;
 8003812:	e015      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00e      	beq.n	800383e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	73fb      	strb	r3, [r7, #15]
    break;
 8003824:	e00b      	b.n	800383e <DMA_CheckFifoParam+0xe6>
        break;
 8003826:	bf00      	nop
 8003828:	e00a      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        break;
 800382a:	bf00      	nop
 800382c:	e008      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        break;
 800382e:	bf00      	nop
 8003830:	e006      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        break;
 8003832:	bf00      	nop
 8003834:	e004      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        break;
 8003836:	bf00      	nop
 8003838:	e002      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
        break;
 800383a:	bf00      	nop
 800383c:	e000      	b.n	8003840 <DMA_CheckFifoParam+0xe8>
    break;
 800383e:	bf00      	nop
    }
  }

  return status;
 8003840:	7bfb      	ldrb	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop

08003850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a38      	ldr	r2, [pc, #224]	@ (8003944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d022      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a36      	ldr	r2, [pc, #216]	@ (8003948 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d01d      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a35      	ldr	r2, [pc, #212]	@ (800394c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d018      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a33      	ldr	r2, [pc, #204]	@ (8003950 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d013      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a32      	ldr	r2, [pc, #200]	@ (8003954 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d00e      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a30      	ldr	r2, [pc, #192]	@ (8003958 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d009      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a2f      	ldr	r2, [pc, #188]	@ (800395c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d004      	beq.n	80038ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003960 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80038ae:	2301      	movs	r3, #1
 80038b0:	e000      	b.n	80038b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80038b2:	2300      	movs	r3, #0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d01a      	beq.n	80038ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	3b08      	subs	r3, #8
 80038c0:	4a28      	ldr	r2, [pc, #160]	@ (8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4b26      	ldr	r3, [pc, #152]	@ (8003968 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80038ce:	4413      	add	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	461a      	mov	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a24      	ldr	r2, [pc, #144]	@ (800396c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80038dc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2201      	movs	r2, #1
 80038e6:	409a      	lsls	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80038ec:	e024      	b.n	8003938 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3b10      	subs	r3, #16
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	091b      	lsrs	r3, r3, #4
 80038fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d806      	bhi.n	8003916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d902      	bls.n	8003916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	3308      	adds	r3, #8
 8003914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4b18      	ldr	r3, [pc, #96]	@ (800397c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	461a      	mov	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a16      	ldr	r2, [pc, #88]	@ (8003980 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003928:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2201      	movs	r2, #1
 8003932:	409a      	lsls	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003938:	bf00      	nop
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	58025408 	.word	0x58025408
 8003948:	5802541c 	.word	0x5802541c
 800394c:	58025430 	.word	0x58025430
 8003950:	58025444 	.word	0x58025444
 8003954:	58025458 	.word	0x58025458
 8003958:	5802546c 	.word	0x5802546c
 800395c:	58025480 	.word	0x58025480
 8003960:	58025494 	.word	0x58025494
 8003964:	cccccccd 	.word	0xcccccccd
 8003968:	16009600 	.word	0x16009600
 800396c:	58025880 	.word	0x58025880
 8003970:	aaaaaaab 	.word	0xaaaaaaab
 8003974:	400204b8 	.word	0x400204b8
 8003978:	4002040f 	.word	0x4002040f
 800397c:	10008200 	.word	0x10008200
 8003980:	40020880 	.word	0x40020880

08003984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	b2db      	uxtb	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d04a      	beq.n	8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d847      	bhi.n	8003a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a25      	ldr	r2, [pc, #148]	@ (8003a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d022      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a24      	ldr	r2, [pc, #144]	@ (8003a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d01d      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a22      	ldr	r2, [pc, #136]	@ (8003a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d018      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a21      	ldr	r2, [pc, #132]	@ (8003a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d013      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1f      	ldr	r2, [pc, #124]	@ (8003a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00e      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d009      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d004      	beq.n	80039f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d101      	bne.n	80039f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80039f0:	2301      	movs	r3, #1
 80039f2:	e000      	b.n	80039f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80039f4:	2300      	movs	r3, #0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4b17      	ldr	r3, [pc, #92]	@ (8003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	461a      	mov	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a0c:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a0e:	e009      	b.n	8003a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4b14      	ldr	r3, [pc, #80]	@ (8003a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003a22:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3b01      	subs	r3, #1
 8003a28:	2201      	movs	r2, #1
 8003a2a:	409a      	lsls	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003a30:	bf00      	nop
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	58025408 	.word	0x58025408
 8003a40:	5802541c 	.word	0x5802541c
 8003a44:	58025430 	.word	0x58025430
 8003a48:	58025444 	.word	0x58025444
 8003a4c:	58025458 	.word	0x58025458
 8003a50:	5802546c 	.word	0x5802546c
 8003a54:	58025480 	.word	0x58025480
 8003a58:	58025494 	.word	0x58025494
 8003a5c:	1600963f 	.word	0x1600963f
 8003a60:	58025940 	.word	0x58025940
 8003a64:	1000823f 	.word	0x1000823f
 8003a68:	40020940 	.word	0x40020940

08003a6c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e0e3      	b.n	8003c46 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d106      	bne.n	8003a96 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2223      	movs	r2, #35	@ 0x23
 8003a8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f006 ff25 	bl	800a8e0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a96:	4b6e      	ldr	r3, [pc, #440]	@ (8003c50 <HAL_ETH_Init+0x1e4>)
 8003a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003a9c:	4a6c      	ldr	r2, [pc, #432]	@ (8003c50 <HAL_ETH_Init+0x1e4>)
 8003a9e:	f043 0302 	orr.w	r3, r3, #2
 8003aa2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8003c50 <HAL_ETH_Init+0x1e4>)
 8003aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003aac:	f003 0302 	and.w	r3, r3, #2
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	7a1b      	ldrb	r3, [r3, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d103      	bne.n	8003ac4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003abc:	2000      	movs	r0, #0
 8003abe:	f7fd ff65 	bl	800198c <HAL_SYSCFG_ETHInterfaceSelect>
 8003ac2:	e003      	b.n	8003acc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003ac4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8003ac8:	f7fd ff60 	bl	800198c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003acc:	4b61      	ldr	r3, [pc, #388]	@ (8003c54 <HAL_ETH_Init+0x1e8>)
 8003ace:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	f043 0301 	orr.w	r3, r3, #1
 8003ae2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ae6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae8:	f7fd ff44 	bl	8001974 <HAL_GetTick>
 8003aec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003aee:	e011      	b.n	8003b14 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003af0:	f7fd ff40 	bl	8001974 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003afe:	d909      	bls.n	8003b14 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2204      	movs	r2, #4
 8003b04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	22e0      	movs	r2, #224	@ 0xe0
 8003b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e098      	b.n	8003c46 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e4      	bne.n	8003af0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 ff1c 	bl	8004964 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003b2c:	f002 fe00 	bl	8006730 <HAL_RCC_GetHCLKFreq>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4a49      	ldr	r2, [pc, #292]	@ (8003c58 <HAL_ETH_Init+0x1ec>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	0c9a      	lsrs	r2, r3, #18
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3a01      	subs	r2, #1
 8003b40:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f001 f90d 	bl	8004d64 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b52:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8003b56:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003b62:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003b66:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d009      	beq.n	8003b8a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	22e0      	movs	r2, #224	@ 0xe0
 8003b82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e05d      	b.n	8003c46 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003b92:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003b96:	4b31      	ldr	r3, [pc, #196]	@ (8003c5c <HAL_ETH_Init+0x1f0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6952      	ldr	r2, [r2, #20]
 8003b9e:	0051      	lsls	r1, r2, #1
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003baa:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f001 f975 	bl	8004e9e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f001 f9bb 	bl	8004f30 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	3305      	adds	r3, #5
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	021a      	lsls	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4619      	mov	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	3303      	adds	r3, #3
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	061a      	lsls	r2, r3, #24
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	3302      	adds	r3, #2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	041b      	lsls	r3, r3, #16
 8003bec:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003bf8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c06:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c08:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	4b11      	ldr	r3, [pc, #68]	@ (8003c60 <HAL_ETH_Init+0x1f4>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <HAL_ETH_Init+0x1f8>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2210      	movs	r2, #16
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	58024400 	.word	0x58024400
 8003c54:	58000400 	.word	0x58000400
 8003c58:	431bde83 	.word	0x431bde83
 8003c5c:	ffff8001 	.word	0xffff8001
 8003c60:	0c020060 	.word	0x0c020060
 8003c64:	0c20c000 	.word	0x0c20c000

08003c68 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c76:	2b10      	cmp	r3, #16
 8003c78:	d165      	bne.n	8003d46 <HAL_ETH_Start_IT+0xde>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2223      	movs	r2, #35	@ 0x23
 8003c7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2204      	movs	r2, #4
 8003c8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f9e4 	bl	800405c <ETH_UpdateDescriptor>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cac:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cb8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6812      	ldr	r2, [r2, #0]
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003cc8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003cd4:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6812      	ldr	r2, [r2, #0]
 8003cdc:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8003ce0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ce4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f042 0201 	orr.w	r2, r2, #1
 8003cf8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0202 	orr.w	r2, r2, #2
 8003d0a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f042 0201 	orr.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d24:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	f24d 03c1 	movw	r3, #53441	@ 0xd0c1
 8003d30:	430b      	orrs	r3, r1
 8003d32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d36:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2223      	movs	r2, #35	@ 0x23
 8003d3e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	e000      	b.n	8003d48 <HAL_ETH_Start_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
  }
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d5e:	2b23      	cmp	r3, #35	@ 0x23
 8003d60:	d165      	bne.n	8003e2e <HAL_ETH_Stop_IT+0xde>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2223      	movs	r2, #35	@ 0x23
 8003d66:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d72:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	4b30      	ldr	r3, [pc, #192]	@ (8003e3c <HAL_ETH_Stop_IT+0xec>)
 8003d7c:	400b      	ands	r3, r1
 8003d7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d82:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                    ETH_DMACIER_FBEE | ETH_DMACIER_AIE | ETH_DMACIER_RBUE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8e:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d9e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003daa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6812      	ldr	r2, [r2, #0]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dba:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0202 	bic.w	r2, r2, #2
 8003df0:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	e00e      	b.n	8003e16 <HAL_ETH_Stop_IT+0xc6>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	3212      	adds	r2, #18
 8003dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e02:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60da      	str	r2, [r3, #12]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b03      	cmp	r3, #3
 8003e1a:	d9ed      	bls.n	8003df8 <HAL_ETH_Stop_IT+0xa8>
    }

    heth->RxDescList.ItMode = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2210      	movs	r2, #16
 8003e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	e000      	b.n	8003e30 <HAL_ETH_Stop_IT+0xe0>
  }
  else
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
  }
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	ffff2f3e 	.word	0xffff2f3e

08003e40 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e56:	f043 0201 	orr.w	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e03a      	b.n	8003eda <HAL_ETH_Transmit_IT+0x9a>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e6a:	2b23      	cmp	r3, #35	@ 0x23
 8003e6c:	d134      	bne.n	8003ed8 <HAL_ETH_Transmit_IT+0x98>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003e76:	2201      	movs	r2, #1
 8003e78:	6839      	ldr	r1, [r7, #0]
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f001 f8b6 	bl	8004fec <ETH_Prepare_Tx_Descriptors>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d009      	beq.n	8003e9a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e8c:	f043 0202 	orr.w	r2, r3, #2
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e01f      	b.n	8003eda <HAL_ETH_Transmit_IT+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8003e9a:	f3bf 8f4f 	dsb	sy
}
 8003e9e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	1c5a      	adds	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	d904      	bls.n	8003ebc <HAL_ETH_Transmit_IT+0x7c>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eb6:	1f1a      	subs	r2, r3, #4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3106      	adds	r1, #6
 8003ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003ecc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ed0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	e000      	b.n	8003eda <HAL_ETH_Transmit_IT+0x9a>

  }
  else
  {
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
  }
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b088      	sub	sp, #32
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d109      	bne.n	8003f0e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f00:	f043 0201 	orr.w	r2, r3, #1
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0a2      	b.n	8004054 <HAL_ETH_ReadData+0x172>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f14:	2b23      	cmp	r3, #35	@ 0x23
 8003f16:	d001      	beq.n	8003f1c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e09b      	b.n	8004054 <HAL_ETH_ReadData+0x172>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69fa      	ldr	r2, [r7, #28]
 8003f26:	3212      	adds	r2, #18
 8003f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f2c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f32:	f1c3 0304 	rsb	r3, r3, #4
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003f38:	e064      	b.n	8004004 <HAL_ETH_ReadData+0x122>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d007      	beq.n	8003f56 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <HAL_ETH_ReadData+0x88>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d03a      	beq.n	8003fe0 <HAL_ETH_ReadData+0xfe>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_ETH_ReadData+0xc8>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	74fb      	strb	r3, [r7, #19]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f006 fe70 	bl	800aca4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	61fb      	str	r3, [r7, #28]
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b03      	cmp	r3, #3
 8003fea:	d902      	bls.n	8003ff2 <HAL_ETH_ReadData+0x110>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	3b04      	subs	r3, #4
 8003ff0:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	3212      	adds	r2, #18
 8003ff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffc:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8004008:	2b00      	cmp	r3, #0
 800400a:	db06      	blt.n	800401a <HAL_ETH_ReadData+0x138>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	429a      	cmp	r2, r3
 8004012:	d202      	bcs.n	800401a <HAL_ETH_ReadData+0x138>
         && (rxdataready == 0U))
 8004014:	7cfb      	ldrb	r3, [r7, #19]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d08f      	beq.n	8003f3a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_ETH_ReadData+0x152>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f814 	bl	800405c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d108      	bne.n	8004052 <HAL_ETH_ReadData+0x170>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e000      	b.n	8004054 <HAL_ETH_ReadData+0x172>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
}
 8004054:	4618      	mov	r0, r3
 8004056:	3720      	adds	r7, #32
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004064:	2300      	movs	r3, #0
 8004066:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004068:	2301      	movs	r3, #1
 800406a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004070:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	3212      	adds	r2, #18
 8004078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800407c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004082:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004084:	e038      	b.n	80040f8 <ETH_UpdateDescriptor+0x9c>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d112      	bne.n	80040b4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800408e:	f107 0308 	add.w	r3, r7, #8
 8004092:	4618      	mov	r0, r3
 8004094:	f006 fdd6 	bl	800ac44 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d102      	bne.n	80040a4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	74fb      	strb	r3, [r7, #19]
 80040a2:	e007      	b.n	80040b4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	461a      	mov	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	461a      	mov	r2, r3
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80040b4:	7cfb      	ldrb	r3, [r7, #19]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01e      	beq.n	80040f8 <ETH_UpdateDescriptor+0x9c>
    {

      if (heth->RxDescList.ItMode != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d004      	beq.n	80040cc <ETH_UpdateDescriptor+0x70>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80040c8:	60da      	str	r2, [r3, #12]
 80040ca:	e003      	b.n	80040d4 <ETH_UpdateDescriptor+0x78>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f04f 4201 	mov.w	r2, #2164260864	@ 0x81000000
 80040d2:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	3301      	adds	r3, #1
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d902      	bls.n	80040e6 <ETH_UpdateDescriptor+0x8a>
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	3b04      	subs	r3, #4
 80040e4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	69fa      	ldr	r2, [r7, #28]
 80040ea:	3212      	adds	r2, #18
 80040ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f0:	617b      	str	r3, [r7, #20]
      desccount--;
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <ETH_UpdateDescriptor+0xa8>
 80040fe:	7cfb      	ldrb	r3, [r7, #19]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1c0      	bne.n	8004086 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	429a      	cmp	r2, r3
 800410c:	d01b      	beq.n	8004146 <ETH_UpdateDescriptor+0xea>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	f003 0303 	and.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004118:	f3bf 8f5f 	dmb	sy
}
 800411c:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6919      	ldr	r1, [r3, #16]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4613      	mov	r3, r2
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	4413      	add	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	18ca      	adds	r2, r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004136:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	69fa      	ldr	r2, [r7, #28]
 800413e:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8004146:	bf00      	nop
 8004148:	3720      	adds	r7, #32
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3318      	adds	r3, #24
 800415a:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004168:	2301      	movs	r3, #1
 800416a:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800416c:	e047      	b.n	80041fe <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 800416e:	2301      	movs	r3, #1
 8004170:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	3b01      	subs	r3, #1
 8004176:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	3304      	adds	r3, #4
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	3301      	adds	r3, #1
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	2b03      	cmp	r3, #3
 8004192:	d902      	bls.n	800419a <HAL_ETH_ReleaseTxPacket+0x4c>
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	3b04      	subs	r3, #4
 8004198:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800419a:	2300      	movs	r3, #0
 800419c:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800419e:	7bbb      	ldrb	r3, [r7, #14]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d02c      	beq.n	80041fe <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC3 & ETH_DMATXNDESCRF_OWN) == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68d9      	ldr	r1, [r3, #12]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4613      	mov	r3, r2
 80041ac:	005b      	lsls	r3, r3, #1
 80041ae:	4413      	add	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	440b      	add	r3, r1
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	db1f      	blt.n	80041fa <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	3304      	adds	r3, #4
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	4413      	add	r3, r2
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f006 fdd4 	bl	800ad74 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	3304      	adds	r3, #4
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	3301      	adds	r3, #1
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d902      	bls.n	80041ec <HAL_ETH_ReleaseTxPacket+0x9e>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3b04      	subs	r3, #4
 80041ea:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80041f8:	e001      	b.n	80041fe <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80041fa:	2300      	movs	r3, #0
 80041fc:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_ETH_ReleaseTxPacket+0xbc>
 8004204:	7bfb      	ldrb	r3, [r7, #15]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1b1      	bne.n	800416e <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACISR);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004224:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMACSR);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800422e:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004232:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMACIER);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800423c:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8004240:	60fb      	str	r3, [r7, #12]
  uint32_t exti_d1_flag = READ_REG(EXTI_D1->PR3);
 8004242:	4b6d      	ldr	r3, [pc, #436]	@ (80043f8 <HAL_ETH_IRQHandler+0x1e4>)
 8004244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004246:	60bb      	str	r3, [r7, #8]
#if defined(DUAL_CORE)
  uint32_t exti_d2_flag = READ_REG(EXTI_D2->PR3);
#endif /* DUAL_CORE */

  /* Packet received */
  if (((dma_flag & ETH_DMACSR_RI) != 0U) && ((dma_itsource & ETH_DMACIER_RIE) != 0U))
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d010      	beq.n	8004274 <HAL_ETH_IRQHandler+0x60>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <HAL_ETH_IRQHandler+0x60>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004264:	461a      	mov	r2, r3
 8004266:	f248 0340 	movw	r3, #32832	@ 0x8040
 800426a:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f006 f880 	bl	800a374 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMACSR_TI) != 0U) && ((dma_itsource & ETH_DMACIER_TIE) != 0U))
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f003 0301 	and.w	r3, r3, #1
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <HAL_ETH_IRQHandler+0x8c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00b      	beq.n	80042a0 <HAL_ETH_IRQHandler+0x8c>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004290:	461a      	mov	r2, r3
 8004292:	f248 0301 	movw	r3, #32769	@ 0x8001
 8004296:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f006 f87a 	bl	800a394 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMACSR_AIS) != 0U) && ((dma_itsource & ETH_DMACIER_AIE) != 0U))
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d047      	beq.n	800433a <HAL_ETH_IRQHandler+0x126>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d042      	beq.n	800433a <HAL_ETH_IRQHandler+0x126>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	f043 0208 	orr.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMACSR_FBE) != 0U)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01e      	beq.n	800430c <HAL_ETH_IRQHandler+0xf8>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d6:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80042da:	f241 1302 	movw	r3, #4354	@ 0x1102
 80042de:	4013      	ands	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042ee:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6812      	ldr	r2, [r2, #0]
 80042f6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80042fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80042fe:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	22e0      	movs	r2, #224	@ 0xe0
 8004306:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800430a:	e013      	b.n	8004334 <HAL_ETH_IRQHandler+0x120>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004314:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8004318:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
                                                             ETH_DMACSR_RBU | ETH_DMACSR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800432a:	461a      	mov	r2, r3
 800432c:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8004330:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f006 f83d 	bl	800a3b4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH MAC Error IT */
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d104      	bne.n	800434e <HAL_ETH_IRQHandler+0x13a>
      ((mac_flag & ETH_MACIER_TXSTSIE) == ETH_MACIER_TXSTSIE))
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((mac_flag & ETH_MACIER_RXSTSIE) == ETH_MACIER_RXSTSIE) || \
 800434a:	2b00      	cmp	r3, #0
 800434c:	d019      	beq.n	8004382 <HAL_ETH_IRQHandler+0x16e>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_MAC;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004354:	f043 0210 	orr.w	r2, r3, #16
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    heth->gState = HAL_ETH_STATE_ERROR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	22e0      	movs	r2, #224	@ 0xe0
 8004370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f006 f81d 	bl	800a3b4 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    heth->MACErrorCode = (uint32_t)(0x0U);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }

  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00f      	beq.n	80043ac <HAL_ETH_IRQHandler+0x198>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004394:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f82c 	bl	80043fc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }

  /* ETH EEE IT */
  if ((mac_flag & ETH_MAC_LPI_IT) != 0U)
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00f      	beq.n	80043d6 <HAL_ETH_IRQHandler+0x1c2>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACLCSR, 0x0000000FU);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 f821 	bl	8004410 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }
#else /* DUAL_CORE not defined */
  /* check ETH WAKEUP exti flag */
  if ((exti_d1_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d006      	beq.n	80043ee <HAL_ETH_IRQHandler+0x1da>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80043e0:	4b05      	ldr	r3, [pc, #20]	@ (80043f8 <HAL_ETH_IRQHandler+0x1e4>)
 80043e2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80043e6:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f81b 	bl	8004424 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
#endif /* DUAL_CORE */
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	58000080 	.word	0x58000080

080043fc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
 8004444:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03e      	b.n	80044d8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004462:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	055b      	lsls	r3, r3, #21
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	041b      	lsls	r3, r3, #16
 800447c:	4313      	orrs	r3, r2
 800447e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	f043 030c 	orr.w	r3, r3, #12
 8004486:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	697a      	ldr	r2, [r7, #20]
 8004496:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800449a:	f7fd fa6b 	bl	8001974 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80044a0:	e009      	b.n	80044b6 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80044a2:	f7fd fa67 	bl	8001974 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044b0:	d901      	bls.n	80044b6 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e010      	b.n	80044d8 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1ed      	bne.n	80044a2 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e03c      	b.n	800457c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800450a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	055b      	lsls	r3, r3, #21
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	4313      	orrs	r3, r2
 8004526:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 030c 	bic.w	r3, r3, #12
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b29a      	uxth	r2, r3
 8004540:	4b10      	ldr	r3, [pc, #64]	@ (8004584 <HAL_ETH_WritePHYRegister+0xa4>)
 8004542:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8004546:	4a0f      	ldr	r2, [pc, #60]	@ (8004584 <HAL_ETH_WritePHYRegister+0xa4>)
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 800454e:	f7fd fa11 	bl	8001974 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004554:	e009      	b.n	800456a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8004556:	f7fd fa0d 	bl	8001974 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004564:	d901      	bls.n	800456a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e008      	b.n	800457c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1ed      	bne.n	8004556 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40028000 	.word	0x40028000

08004588 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e1c3      	b.n	8004924 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 020c 	and.w	r2, r3, #12
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	bf14      	ite	ne
 80045b8:	2301      	movne	r3, #1
 80045ba:	2300      	moveq	r3, #0
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045de:	2b00      	cmp	r3, #0
 80045e0:	bf0c      	ite	eq
 80045e2:	2301      	moveq	r3, #1
 80045e4:	2300      	movne	r3, #0
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	461a      	mov	r2, r3
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
                                        ? ENABLE : DISABLE;
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	bf14      	ite	ne
 80045fe:	2301      	movne	r3, #1
 8004600:	2300      	moveq	r3, #0
 8004602:	b2db      	uxtb	r3, r3
 8004604:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf0c      	ite	eq
 8004618:	2301      	moveq	r3, #1
 800461a:	2300      	movne	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 800462a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf14      	ite	ne
 800464c:	2301      	movne	r3, #1
 800464e:	2300      	moveq	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	461a      	mov	r2, r3
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800467e:	2b00      	cmp	r3, #0
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf0c      	ite	eq
 800469c:	2301      	moveq	r3, #1
 800469e:	2300      	movne	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	461a      	mov	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf0c      	ite	eq
 80046b6:	2301      	moveq	r3, #1
 80046b8:	2300      	movne	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	461a      	mov	r2, r3
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004700:	2b00      	cmp	r3, #0
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	461a      	mov	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800471a:	2b00      	cmp	r3, #0
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	bf0c      	ite	eq
 800477c:	2301      	moveq	r3, #1
 800477e:	2300      	movne	r3, #0
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	bf14      	ite	ne
 8004798:	2301      	movne	r3, #1
 800479a:	2300      	moveq	r3, #0
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80047ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
                                    ? ENABLE : DISABLE;
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	0e5b      	lsrs	r3, r3, #25
 80047e6:	f003 021f 	and.w	r2, r3, #31
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	63da      	str	r2, [r3, #60]	@ 0x3c

  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 020f 	and.w	r2, r3, #15
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	461a      	mov	r2, r3
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	bf0c      	ite	eq
 8004842:	2301      	moveq	r3, #1
 8004844:	2300      	movne	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	461a      	mov	r2, r3
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004856:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004864:	0c1b      	lsrs	r3, r3, #16
 8004866:	b29a      	uxth	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	bf14      	ite	ne
 800487c:	2301      	movne	r3, #1
 800487e:	2300      	moveq	r3, #0
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004892:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8004896:	2b00      	cmp	r3, #0
 8004898:	bf14      	ite	ne
 800489a:	2301      	movne	r3, #1
 800489c:	2300      	moveq	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80048b0:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80048c0:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	bf14      	ite	ne
 80048f6:	2301      	movne	r3, #1
 80048f8:	2300      	moveq	r3, #0
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	461a      	mov	r2, r3
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 800490c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004910:	2b00      	cmp	r3, #0
 8004912:	bf0c      	ite	eq
 8004914:	2301      	moveq	r3, #1
 8004916:	2300      	movne	r3, #0
 8004918:	b2db      	uxtb	r3, r3
 800491a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d101      	bne.n	8004944 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e00b      	b.n	800495c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800494a:	2b10      	cmp	r3, #16
 800494c:	d105      	bne.n	800495a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800494e:	6839      	ldr	r1, [r7, #0]
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f865 	bl	8004a20 <ETH_SetMACConfig>

    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
  }
}
 800495c:	4618      	mov	r0, r3
 800495e:	3708      	adds	r7, #8
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004974:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800497c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800497e:	f001 fed7 	bl	8006730 <HAL_RCC_GetHCLKFreq>
 8004982:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	4a1a      	ldr	r2, [pc, #104]	@ (80049f0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d804      	bhi.n	8004996 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e022      	b.n	80049dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4a16      	ldr	r2, [pc, #88]	@ (80049f4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d204      	bcs.n	80049a8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e019      	b.n	80049dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	4a13      	ldr	r2, [pc, #76]	@ (80049f8 <HAL_ETH_SetMDIOClockRange+0x94>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d915      	bls.n	80049dc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	4a12      	ldr	r2, [pc, #72]	@ (80049fc <HAL_ETH_SetMDIOClockRange+0x98>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d804      	bhi.n	80049c2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e00c      	b.n	80049dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	4a0e      	ldr	r2, [pc, #56]	@ (8004a00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d804      	bhi.n	80049d4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	e003      	b.n	80049dc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80049da:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80049e6:	bf00      	nop
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	02160ebf 	.word	0x02160ebf
 80049f4:	03938700 	.word	0x03938700
 80049f8:	05f5e0ff 	.word	0x05f5e0ff
 80049fc:	08f0d17f 	.word	0x08f0d17f
 8004a00:	0ee6b27f 	.word	0x0ee6b27f

08004a04 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
	...

08004a20 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004a32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	791b      	ldrb	r3, [r3, #4]
 8004a38:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004a3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	7b1b      	ldrb	r3, [r3, #12]
 8004a40:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	7b5b      	ldrb	r3, [r3, #13]
 8004a48:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	7b9b      	ldrb	r3, [r3, #14]
 8004a50:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	7bdb      	ldrb	r3, [r3, #15]
 8004a58:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	7c12      	ldrb	r2, [r2, #16]
 8004a60:	2a00      	cmp	r2, #0
 8004a62:	d102      	bne.n	8004a6a <ETH_SetMACConfig+0x4a>
 8004a64:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004a68:	e000      	b.n	8004a6c <ETH_SetMACConfig+0x4c>
 8004a6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a6c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	7c52      	ldrb	r2, [r2, #17]
 8004a72:	2a00      	cmp	r2, #0
 8004a74:	d102      	bne.n	8004a7c <ETH_SetMACConfig+0x5c>
 8004a76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a7a:	e000      	b.n	8004a7e <ETH_SetMACConfig+0x5e>
 8004a7c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	7c9b      	ldrb	r3, [r3, #18]
 8004a84:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a86:	431a      	orrs	r2, r3
               macconf->Speed |
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004a8c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004a92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7f1b      	ldrb	r3, [r3, #28]
 8004a98:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004a9a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	7f5b      	ldrb	r3, [r3, #29]
 8004aa0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004aa2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	7f92      	ldrb	r2, [r2, #30]
 8004aa8:	2a00      	cmp	r2, #0
 8004aaa:	d102      	bne.n	8004ab2 <ETH_SetMACConfig+0x92>
 8004aac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ab0:	e000      	b.n	8004ab4 <ETH_SetMACConfig+0x94>
 8004ab2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004ab4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	7fdb      	ldrb	r3, [r3, #31]
 8004aba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004abc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004ac4:	2a00      	cmp	r2, #0
 8004ac6:	d102      	bne.n	8004ace <ETH_SetMACConfig+0xae>
 8004ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004acc:	e000      	b.n	8004ad0 <ETH_SetMACConfig+0xb0>
 8004ace:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ad0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ad6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ade:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004ae0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b56      	ldr	r3, [pc, #344]	@ (8004c4c <ETH_SetMACConfig+0x22c>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	6812      	ldr	r2, [r2, #0]
 8004af8:	68f9      	ldr	r1, [r7, #12]
 8004afa:	430b      	orrs	r3, r1
 8004afc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b02:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b0a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004b0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b14:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004b16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b1e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004b20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8004b28:	2a00      	cmp	r2, #0
 8004b2a:	d102      	bne.n	8004b32 <ETH_SetMACConfig+0x112>
 8004b2c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004b30:	e000      	b.n	8004b34 <ETH_SetMACConfig+0x114>
 8004b32:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004b34:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	4b42      	ldr	r3, [pc, #264]	@ (8004c50 <ETH_SetMACConfig+0x230>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b58:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68da      	ldr	r2, [r3, #12]
 8004b68:	4b3a      	ldr	r3, [pc, #232]	@ (8004c54 <ETH_SetMACConfig+0x234>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	430b      	orrs	r3, r1
 8004b74:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004b7c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004b8a:	2a00      	cmp	r2, #0
 8004b8c:	d101      	bne.n	8004b92 <ETH_SetMACConfig+0x172>
 8004b8e:	2280      	movs	r2, #128	@ 0x80
 8004b90:	e000      	b.n	8004b94 <ETH_SetMACConfig+0x174>
 8004b92:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004b94:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b9a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ba6:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8004baa:	4013      	ands	r3, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	68f9      	ldr	r1, [r7, #12]
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8004bbc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8004bc4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd2:	f023 0103 	bic.w	r1, r3, #3
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8004bea:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8004c06:	2a00      	cmp	r2, #0
 8004c08:	d101      	bne.n	8004c0e <ETH_SetMACConfig+0x1ee>
 8004c0a:	2240      	movs	r2, #64	@ 0x40
 8004c0c:	e000      	b.n	8004c10 <ETH_SetMACConfig+0x1f0>
 8004c0e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004c10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8004c18:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8004c22:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8004c30:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	00048083 	.word	0x00048083
 8004c50:	c0f88000 	.word	0xc0f88000
 8004c54:	fffffef0 	.word	0xfffffef0

08004c58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	4b38      	ldr	r3, [pc, #224]	@ (8004d50 <ETH_SetDMAConfig+0xf8>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	683a      	ldr	r2, [r7, #0]
 8004c72:	6811      	ldr	r1, [r2, #0]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004c7e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	791b      	ldrb	r3, [r3, #4]
 8004c84:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	7b1b      	ldrb	r3, [r3, #12]
 8004c90:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c92:	4313      	orrs	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8004d54 <ETH_SetDMAConfig+0xfc>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	68f9      	ldr	r1, [r7, #12]
 8004caa:	430b      	orrs	r3, r1
 8004cac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cb0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	7b5b      	ldrb	r3, [r3, #13]
 8004cb6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cc8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8004ccc:	4b22      	ldr	r3, [pc, #136]	@ (8004d58 <ETH_SetDMAConfig+0x100>)
 8004cce:	4013      	ands	r3, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6812      	ldr	r2, [r2, #0]
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004cdc:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	7d1b      	ldrb	r3, [r3, #20]
 8004ce8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	7f5b      	ldrb	r3, [r3, #29]
 8004cf0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cfe:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8004d02:	4b16      	ldr	r3, [pc, #88]	@ (8004d5c <ETH_SetDMAConfig+0x104>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004d12:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	7f1b      	ldrb	r3, [r3, #28]
 8004d1a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d2c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <ETH_SetDMAConfig+0x108>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6812      	ldr	r2, [r2, #0]
 8004d38:	68f9      	ldr	r1, [r7, #12]
 8004d3a:	430b      	orrs	r3, r1
 8004d3c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004d40:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	ffff87fd 	.word	0xffff87fd
 8004d54:	ffff2ffe 	.word	0xffff2ffe
 8004d58:	fffec000 	.word	0xfffec000
 8004d5c:	ffc0efef 	.word	0xffc0efef
 8004d60:	7fc0ffff 	.word	0x7fc0ffff

08004d64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b0a4      	sub	sp, #144	@ 0x90
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004d72:	2300      	movs	r3, #0
 8004d74:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004d82:	2301      	movs	r3, #1
 8004d84:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004da0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004da4:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8004dac:	2300      	movs	r3, #0
 8004dae:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8004dbc:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8004dc0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004dde:	2300      	movs	r3, #0
 8004de0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8004de2:	2300      	movs	r3, #0
 8004de4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004de6:	2300      	movs	r3, #0
 8004de8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004dfc:	2320      	movs	r3, #32
 8004dfe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e0e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8004e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e14:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e18:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004e20:	2302      	movs	r3, #2
 8004e22:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004e48:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fde6 	bl	8004a20 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e54:	2301      	movs	r3, #1
 8004e56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e6e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004e74:	2300      	movs	r3, #0
 8004e76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e78:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004e7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004e84:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8004e88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e8a:	f107 0308 	add.w	r3, r7, #8
 8004e8e:	4619      	mov	r1, r3
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f7ff fee1 	bl	8004c58 <ETH_SetDMAConfig>
}
 8004e96:	bf00      	nop
 8004e98:	3790      	adds	r7, #144	@ 0x90
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e01d      	b.n	8004ee8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	68d9      	ldr	r1, [r3, #12]
 8004eb0:	68fa      	ldr	r2, [r7, #12]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	3206      	adds	r2, #6
 8004ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b03      	cmp	r3, #3
 8004eec:	d9de      	bls.n	8004eac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004efc:	461a      	mov	r2, r3
 8004efe:	2303      	movs	r3, #3
 8004f00:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68da      	ldr	r2, [r3, #12]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f10:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f20:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	60fb      	str	r3, [r7, #12]
 8004f3c:	e023      	b.n	8004f86 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6919      	ldr	r1, [r3, #16]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2200      	movs	r2, #0
 8004f54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2200      	movs	r2, #0
 8004f66:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004f74:	68b9      	ldr	r1, [r7, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	3212      	adds	r2, #18
 8004f7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3301      	adds	r3, #1
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d9d8      	bls.n	8004f3e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691a      	ldr	r2, [r3, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fc6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004fda:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8004fde:	bf00      	nop
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b091      	sub	sp, #68	@ 0x44
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	3318      	adds	r3, #24
 8004ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005016:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8005022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800502a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800502e:	d007      	beq.n	8005040 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005034:	3304      	adds	r3, #4
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005040:	2302      	movs	r3, #2
 8005042:	e266      	b.n	8005512 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d044      	beq.n	80050da <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005052:	68da      	ldr	r2, [r3, #12]
 8005054:	4b75      	ldr	r3, [pc, #468]	@ (800522c <ETH_Prepare_Tx_Descriptors+0x240>)
 8005056:	4013      	ands	r3, r2
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800505c:	431a      	orrs	r2, r3
 800505e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005060:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800507c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d027      	beq.n	80050da <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	b29a      	uxth	r2, r3
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	431a      	orrs	r2, r3
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	431a      	orrs	r2, r3
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80050c8:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80050d8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00e      	beq.n	8005104 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	4b51      	ldr	r3, [pc, #324]	@ (8005230 <ETH_Prepare_Tx_Descriptors+0x244>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	6992      	ldr	r2, [r2, #24]
 80050f2:	431a      	orrs	r2, r3
 80050f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f6:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0310 	and.w	r3, r3, #16
 8005118:	2b00      	cmp	r3, #0
 800511a:	d036      	beq.n	800518a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005128:	f3bf 8f5f 	dmb	sy
}
 800512c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800512e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005138:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800513a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800513c:	3301      	adds	r3, #1
 800513e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005140:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005142:	2b03      	cmp	r3, #3
 8005144:	d902      	bls.n	800514c <ETH_Prepare_Tx_Descriptors+0x160>
 8005146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005148:	3b04      	subs	r3, #4
 800514a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800514c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005154:	633b      	str	r3, [r7, #48]	@ 0x30

    descnbr += 1U;
 8005156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005158:	3301      	adds	r3, #1
 800515a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005164:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005168:	d10f      	bne.n	800518a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005172:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005174:	f3bf 8f5f 	dmb	sy
}
 8005178:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005184:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8005186:	2302      	movs	r3, #2
 8005188:	e1c3      	b.n	8005512 <ETH_Prepare_Tx_Descriptors+0x526>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800518a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518c:	3301      	adds	r3, #1
 800518e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005198:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800519a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <ETH_Prepare_Tx_Descriptors+0x244>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051a4:	6852      	ldr	r2, [r2, #4]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80051b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	461a      	mov	r2, r3
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80051c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <ETH_Prepare_Tx_Descriptors+0x248>)
 80051ca:	4013      	ands	r3, r2
 80051cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051ce:	6852      	ldr	r2, [r2, #4]
 80051d0:	0412      	lsls	r2, r2, #16
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d6:	609a      	str	r2, [r3, #8]
 80051d8:	e008      	b.n	80051ec <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80051da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051dc:	2200      	movs	r2, #0
 80051de:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	4b13      	ldr	r3, [pc, #76]	@ (8005234 <ETH_Prepare_Tx_Descriptors+0x248>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051ea:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0310 	and.w	r3, r3, #16
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d021      	beq.n	800523c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80051f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	04db      	lsls	r3, r3, #19
 8005206:	431a      	orrs	r2, r3
 8005208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800520c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4b09      	ldr	r3, [pc, #36]	@ (8005238 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	69d2      	ldr	r2, [r2, #28]
 8005218:	431a      	orrs	r2, r3
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800521e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	e02e      	b.n	800528a <ETH_Prepare_Tx_Descriptors+0x29e>
 800522c:	ffff0000 	.word	0xffff0000
 8005230:	ffffc000 	.word	0xffffc000
 8005234:	c000ffff 	.word	0xc000ffff
 8005238:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800523c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523e:	68da      	ldr	r2, [r3, #12]
 8005240:	4b7b      	ldr	r3, [pc, #492]	@ (8005430 <ETH_Prepare_Tx_Descriptors+0x444>)
 8005242:	4013      	ands	r3, r2
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	6852      	ldr	r2, [r2, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d008      	beq.n	800526c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	431a      	orrs	r2, r3
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0320 	and.w	r3, r3, #32
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	431a      	orrs	r2, r3
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a2:	431a      	orrs	r2, r3
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80052c0:	f3bf 8f5f 	dmb	sy
}
 80052c4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 80da 	beq.w	8005494 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80052e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80052f2:	e0cf      	b.n	8005494 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005302:	3301      	adds	r3, #1
 8005304:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005308:	2b03      	cmp	r3, #3
 800530a:	d902      	bls.n	8005312 <ETH_Prepare_Tx_Descriptors+0x326>
 800530c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800530e:	3b04      	subs	r3, #4
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005314:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800531c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005330:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005334:	d007      	beq.n	8005346 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005336:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800533a:	3304      	adds	r3, #4
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d029      	beq.n	800539a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800534a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800534e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005352:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005354:	2300      	movs	r3, #0
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005358:	e019      	b.n	800538e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800535a:	f3bf 8f5f 	dmb	sy
}
 800535e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800536c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536e:	3301      	adds	r3, #1
 8005370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005374:	2b03      	cmp	r3, #3
 8005376:	d902      	bls.n	800537e <ETH_Prepare_Tx_Descriptors+0x392>
 8005378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537a:	3b04      	subs	r3, #4
 800537c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005386:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538a:	3301      	adds	r3, #1
 800538c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800538e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	429a      	cmp	r2, r3
 8005394:	d3e1      	bcc.n	800535a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8005396:	2302      	movs	r3, #2
 8005398:	e0bb      	b.n	8005512 <ETH_Prepare_Tx_Descriptors+0x526>
    }

    descnbr += 1U;
 800539a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800539c:	3301      	adds	r3, #1
 800539e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80053a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80053a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	461a      	mov	r2, r3
 80053ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ae:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80053b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b2:	689a      	ldr	r2, [r3, #8]
 80053b4:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <ETH_Prepare_Tx_Descriptors+0x448>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ba:	6852      	ldr	r2, [r2, #4]
 80053bc:	431a      	orrs	r2, r3
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80053c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80053d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80053da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053dc:	689a      	ldr	r2, [r3, #8]
 80053de:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80053e0:	4013      	ands	r3, r2
 80053e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053e4:	6852      	ldr	r2, [r2, #4]
 80053e6:	0412      	lsls	r2, r2, #16
 80053e8:	431a      	orrs	r2, r3
 80053ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	e008      	b.n	8005402 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80053f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f2:	2200      	movs	r2, #0
 80053f4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80053f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005438 <ETH_Prepare_Tx_Descriptors+0x44c>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005400:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0310 	and.w	r3, r3, #16
 800540a:	2b00      	cmp	r3, #0
 800540c:	d018      	beq.n	8005440 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800540e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <ETH_Prepare_Tx_Descriptors+0x450>)
 8005414:	4013      	ands	r3, r2
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	69d2      	ldr	r2, [r2, #28]
 800541a:	431a      	orrs	r2, r3
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800542a:	60da      	str	r2, [r3, #12]
 800542c:	e020      	b.n	8005470 <ETH_Prepare_Tx_Descriptors+0x484>
 800542e:	bf00      	nop
 8005430:	ffff8000 	.word	0xffff8000
 8005434:	ffffc000 	.word	0xffffc000
 8005438:	c000ffff 	.word	0xc000ffff
 800543c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005442:	68da      	ldr	r2, [r3, #12]
 8005444:	4b36      	ldr	r3, [pc, #216]	@ (8005520 <ETH_Prepare_Tx_Descriptors+0x534>)
 8005446:	4013      	ands	r3, r2
 8005448:	68ba      	ldr	r2, [r7, #8]
 800544a:	6852      	ldr	r2, [r2, #4]
 800544c:	431a      	orrs	r2, r3
 800544e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005450:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d008      	beq.n	8005470 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800545e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	431a      	orrs	r2, r3
 800546c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	3301      	adds	r3, #1
 8005474:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005476:	f3bf 8f5f 	dmb	sy
}
 800547a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800547c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8005488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005492:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	f47f af2b 	bne.w	80052f4 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d006      	beq.n	80054b2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80054a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ae:	609a      	str	r2, [r3, #8]
 80054b0:	e005      	b.n	80054be <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80054be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80054c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d2:	3304      	adds	r3, #4
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80054de:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e0:	f3ef 8310 	mrs	r3, PRIMASK
 80054e4:	613b      	str	r3, [r7, #16]
  return(result);
 80054e6:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	2301      	movs	r3, #1
 80054ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f383 8810 	msr	PRIMASK, r3
}
 80054f4:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80054f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	4413      	add	r3, r2
 80054fe:	1c5a      	adds	r2, r3, #1
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	629a      	str	r2, [r3, #40]	@ 0x28
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f383 8810 	msr	PRIMASK, r3
}
 800550e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3744      	adds	r7, #68	@ 0x44
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	ffff8000 	.word	0xffff8000

08005524 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005524:	b480      	push	{r7}
 8005526:	b089      	sub	sp, #36	@ 0x24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800552e:	2300      	movs	r3, #0
 8005530:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005532:	4b86      	ldr	r3, [pc, #536]	@ (800574c <HAL_GPIO_Init+0x228>)
 8005534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005536:	e18c      	b.n	8005852 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	2101      	movs	r1, #1
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa01 f303 	lsl.w	r3, r1, r3
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	f000 817e 	beq.w	800584c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 0303 	and.w	r3, r3, #3
 8005558:	2b01      	cmp	r3, #1
 800555a:	d005      	beq.n	8005568 <HAL_GPIO_Init+0x44>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d130      	bne.n	80055ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	2203      	movs	r2, #3
 8005574:	fa02 f303 	lsl.w	r3, r2, r3
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	4313      	orrs	r3, r2
 8005590:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800559e:	2201      	movs	r2, #1
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	4013      	ands	r3, r2
 80055ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	091b      	lsrs	r3, r3, #4
 80055b4:	f003 0201 	and.w	r2, r3, #1
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	fa02 f303 	lsl.w	r3, r2, r3
 80055be:	69ba      	ldr	r2, [r7, #24]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b03      	cmp	r3, #3
 80055d4:	d017      	beq.n	8005606 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	2203      	movs	r2, #3
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43db      	mvns	r3, r3
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	4013      	ands	r3, r2
 80055ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b02      	cmp	r3, #2
 8005610:	d123      	bne.n	800565a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	08da      	lsrs	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3208      	adds	r2, #8
 800561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	220f      	movs	r2, #15
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43db      	mvns	r3, r3
 8005630:	69ba      	ldr	r2, [r7, #24]
 8005632:	4013      	ands	r3, r2
 8005634:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	691a      	ldr	r2, [r3, #16]
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	69ba      	ldr	r2, [r7, #24]
 8005648:	4313      	orrs	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	08da      	lsrs	r2, r3, #3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3208      	adds	r2, #8
 8005654:	69b9      	ldr	r1, [r7, #24]
 8005656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	2203      	movs	r2, #3
 8005666:	fa02 f303 	lsl.w	r3, r2, r3
 800566a:	43db      	mvns	r3, r3
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	4013      	ands	r3, r2
 8005670:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	f003 0203 	and.w	r2, r3, #3
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	69ba      	ldr	r2, [r7, #24]
 8005684:	4313      	orrs	r3, r2
 8005686:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 80d8 	beq.w	800584c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800569c:	4b2c      	ldr	r3, [pc, #176]	@ (8005750 <HAL_GPIO_Init+0x22c>)
 800569e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005750 <HAL_GPIO_Init+0x22c>)
 80056a4:	f043 0302 	orr.w	r3, r3, #2
 80056a8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80056ac:	4b28      	ldr	r3, [pc, #160]	@ (8005750 <HAL_GPIO_Init+0x22c>)
 80056ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ba:	4a26      	ldr	r2, [pc, #152]	@ (8005754 <HAL_GPIO_Init+0x230>)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	089b      	lsrs	r3, r3, #2
 80056c0:	3302      	adds	r3, #2
 80056c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	220f      	movs	r2, #15
 80056d2:	fa02 f303 	lsl.w	r3, r2, r3
 80056d6:	43db      	mvns	r3, r3
 80056d8:	69ba      	ldr	r2, [r7, #24]
 80056da:	4013      	ands	r3, r2
 80056dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005758 <HAL_GPIO_Init+0x234>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d04a      	beq.n	800577c <HAL_GPIO_Init+0x258>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <HAL_GPIO_Init+0x238>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d02b      	beq.n	8005746 <HAL_GPIO_Init+0x222>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005760 <HAL_GPIO_Init+0x23c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d025      	beq.n	8005742 <HAL_GPIO_Init+0x21e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1a      	ldr	r2, [pc, #104]	@ (8005764 <HAL_GPIO_Init+0x240>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d01f      	beq.n	800573e <HAL_GPIO_Init+0x21a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	@ (8005768 <HAL_GPIO_Init+0x244>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d019      	beq.n	800573a <HAL_GPIO_Init+0x216>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	@ (800576c <HAL_GPIO_Init+0x248>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_GPIO_Init+0x212>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a17      	ldr	r2, [pc, #92]	@ (8005770 <HAL_GPIO_Init+0x24c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00d      	beq.n	8005732 <HAL_GPIO_Init+0x20e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a16      	ldr	r2, [pc, #88]	@ (8005774 <HAL_GPIO_Init+0x250>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <HAL_GPIO_Init+0x20a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a15      	ldr	r2, [pc, #84]	@ (8005778 <HAL_GPIO_Init+0x254>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d101      	bne.n	800572a <HAL_GPIO_Init+0x206>
 8005726:	2309      	movs	r3, #9
 8005728:	e029      	b.n	800577e <HAL_GPIO_Init+0x25a>
 800572a:	230a      	movs	r3, #10
 800572c:	e027      	b.n	800577e <HAL_GPIO_Init+0x25a>
 800572e:	2307      	movs	r3, #7
 8005730:	e025      	b.n	800577e <HAL_GPIO_Init+0x25a>
 8005732:	2306      	movs	r3, #6
 8005734:	e023      	b.n	800577e <HAL_GPIO_Init+0x25a>
 8005736:	2305      	movs	r3, #5
 8005738:	e021      	b.n	800577e <HAL_GPIO_Init+0x25a>
 800573a:	2304      	movs	r3, #4
 800573c:	e01f      	b.n	800577e <HAL_GPIO_Init+0x25a>
 800573e:	2303      	movs	r3, #3
 8005740:	e01d      	b.n	800577e <HAL_GPIO_Init+0x25a>
 8005742:	2302      	movs	r3, #2
 8005744:	e01b      	b.n	800577e <HAL_GPIO_Init+0x25a>
 8005746:	2301      	movs	r3, #1
 8005748:	e019      	b.n	800577e <HAL_GPIO_Init+0x25a>
 800574a:	bf00      	nop
 800574c:	58000080 	.word	0x58000080
 8005750:	58024400 	.word	0x58024400
 8005754:	58000400 	.word	0x58000400
 8005758:	58020000 	.word	0x58020000
 800575c:	58020400 	.word	0x58020400
 8005760:	58020800 	.word	0x58020800
 8005764:	58020c00 	.word	0x58020c00
 8005768:	58021000 	.word	0x58021000
 800576c:	58021400 	.word	0x58021400
 8005770:	58021800 	.word	0x58021800
 8005774:	58021c00 	.word	0x58021c00
 8005778:	58022400 	.word	0x58022400
 800577c:	2300      	movs	r3, #0
 800577e:	69fa      	ldr	r2, [r7, #28]
 8005780:	f002 0203 	and.w	r2, r2, #3
 8005784:	0092      	lsls	r2, r2, #2
 8005786:	4093      	lsls	r3, r2
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	4313      	orrs	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800578e:	4938      	ldr	r1, [pc, #224]	@ (8005870 <HAL_GPIO_Init+0x34c>)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	089b      	lsrs	r3, r3, #2
 8005794:	3302      	adds	r3, #2
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	43db      	mvns	r3, r3
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	4013      	ands	r3, r2
 80057ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	43db      	mvns	r3, r3
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	4013      	ands	r3, r2
 80057da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80057f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	43db      	mvns	r3, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4013      	ands	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	3301      	adds	r3, #1
 8005850:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	f47f ae6b 	bne.w	8005538 <HAL_GPIO_Init+0x14>
  }
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	3724      	adds	r7, #36	@ 0x24
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	58000400 	.word	0x58000400

08005874 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	807b      	strh	r3, [r7, #2]
 8005880:	4613      	mov	r3, r2
 8005882:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005884:	787b      	ldrb	r3, [r7, #1]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d003      	beq.n	8005892 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800588a:	887a      	ldrh	r2, [r7, #2]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005890:	e003      	b.n	800589a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005892:	887b      	ldrh	r3, [r7, #2]
 8005894:	041a      	lsls	r2, r3, #16
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	619a      	str	r2, [r3, #24]
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80058b0:	4b19      	ldr	r3, [pc, #100]	@ (8005918 <HAL_PWREx_ConfigSupply+0x70>)
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b04      	cmp	r3, #4
 80058ba:	d00a      	beq.n	80058d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80058bc:	4b16      	ldr	r3, [pc, #88]	@ (8005918 <HAL_PWREx_ConfigSupply+0x70>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d001      	beq.n	80058ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e01f      	b.n	800590e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e01d      	b.n	800590e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80058d2:	4b11      	ldr	r3, [pc, #68]	@ (8005918 <HAL_PWREx_ConfigSupply+0x70>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f023 0207 	bic.w	r2, r3, #7
 80058da:	490f      	ldr	r1, [pc, #60]	@ (8005918 <HAL_PWREx_ConfigSupply+0x70>)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80058e2:	f7fc f847 	bl	8001974 <HAL_GetTick>
 80058e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058e8:	e009      	b.n	80058fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80058ea:	f7fc f843 	bl	8001974 <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80058f8:	d901      	bls.n	80058fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e007      	b.n	800590e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80058fe:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <HAL_PWREx_ConfigSupply+0x70>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005906:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800590a:	d1ee      	bne.n	80058ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3710      	adds	r7, #16
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	58024800 	.word	0x58024800

0800591c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08c      	sub	sp, #48	@ 0x30
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e3c8      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	f000 8087 	beq.w	8005a4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800593c:	4b88      	ldr	r3, [pc, #544]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005946:	4b86      	ldr	r3, [pc, #536]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	2b10      	cmp	r3, #16
 8005950:	d007      	beq.n	8005962 <HAL_RCC_OscConfig+0x46>
 8005952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005954:	2b18      	cmp	r3, #24
 8005956:	d110      	bne.n	800597a <HAL_RCC_OscConfig+0x5e>
 8005958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d10b      	bne.n	800597a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005962:	4b7f      	ldr	r3, [pc, #508]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d06c      	beq.n	8005a48 <HAL_RCC_OscConfig+0x12c>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d168      	bne.n	8005a48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e3a2      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005982:	d106      	bne.n	8005992 <HAL_RCC_OscConfig+0x76>
 8005984:	4b76      	ldr	r3, [pc, #472]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a75      	ldr	r2, [pc, #468]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 800598a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800598e:	6013      	str	r3, [r2, #0]
 8005990:	e02e      	b.n	80059f0 <HAL_RCC_OscConfig+0xd4>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10c      	bne.n	80059b4 <HAL_RCC_OscConfig+0x98>
 800599a:	4b71      	ldr	r3, [pc, #452]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4a70      	ldr	r2, [pc, #448]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	4b6e      	ldr	r3, [pc, #440]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e01d      	b.n	80059f0 <HAL_RCC_OscConfig+0xd4>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059bc:	d10c      	bne.n	80059d8 <HAL_RCC_OscConfig+0xbc>
 80059be:	4b68      	ldr	r3, [pc, #416]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a67      	ldr	r2, [pc, #412]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	4b65      	ldr	r3, [pc, #404]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a64      	ldr	r2, [pc, #400]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d4:	6013      	str	r3, [r2, #0]
 80059d6:	e00b      	b.n	80059f0 <HAL_RCC_OscConfig+0xd4>
 80059d8:	4b61      	ldr	r3, [pc, #388]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a60      	ldr	r2, [pc, #384]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 80059ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d013      	beq.n	8005a20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f8:	f7fb ffbc 	bl	8001974 <HAL_GetTick>
 80059fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80059fe:	e008      	b.n	8005a12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a00:	f7fb ffb8 	bl	8001974 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	2b64      	cmp	r3, #100	@ 0x64
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e356      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a12:	4b53      	ldr	r3, [pc, #332]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0f0      	beq.n	8005a00 <HAL_RCC_OscConfig+0xe4>
 8005a1e:	e014      	b.n	8005a4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a20:	f7fb ffa8 	bl	8001974 <HAL_GetTick>
 8005a24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a26:	e008      	b.n	8005a3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a28:	f7fb ffa4 	bl	8001974 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	2b64      	cmp	r3, #100	@ 0x64
 8005a34:	d901      	bls.n	8005a3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e342      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005a3a:	4b49      	ldr	r3, [pc, #292]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1f0      	bne.n	8005a28 <HAL_RCC_OscConfig+0x10c>
 8005a46:	e000      	b.n	8005a4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 808c 	beq.w	8005b70 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a58:	4b41      	ldr	r3, [pc, #260]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a60:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a62:	4b3f      	ldr	r3, [pc, #252]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a66:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_RCC_OscConfig+0x162>
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b18      	cmp	r3, #24
 8005a72:	d137      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1c8>
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d132      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a7e:	4b38      	ldr	r3, [pc, #224]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCC_OscConfig+0x17a>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e314      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005a96:	4b32      	ldr	r3, [pc, #200]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 0219 	bic.w	r2, r3, #25
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	492f      	ldr	r1, [pc, #188]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa8:	f7fb ff64 	bl	8001974 <HAL_GetTick>
 8005aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005aae:	e008      	b.n	8005ac2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ab0:	f7fb ff60 	bl	8001974 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d901      	bls.n	8005ac2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	e2fe      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ac2:	4b27      	ldr	r3, [pc, #156]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0304 	and.w	r3, r3, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0f0      	beq.n	8005ab0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ace:	4b24      	ldr	r3, [pc, #144]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	4920      	ldr	r1, [pc, #128]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ae2:	e045      	b.n	8005b70 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d026      	beq.n	8005b3a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005aec:	4b1c      	ldr	r3, [pc, #112]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f023 0219 	bic.w	r2, r3, #25
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4919      	ldr	r1, [pc, #100]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afe:	f7fb ff39 	bl	8001974 <HAL_GetTick>
 8005b02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b06:	f7fb ff35 	bl	8001974 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e2d3      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0f0      	beq.n	8005b06 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b24:	4b0e      	ldr	r3, [pc, #56]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	061b      	lsls	r3, r3, #24
 8005b32:	490b      	ldr	r1, [pc, #44]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	604b      	str	r3, [r1, #4]
 8005b38:	e01a      	b.n	8005b70 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b3a:	4b09      	ldr	r3, [pc, #36]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a08      	ldr	r2, [pc, #32]	@ (8005b60 <HAL_RCC_OscConfig+0x244>)
 8005b40:	f023 0301 	bic.w	r3, r3, #1
 8005b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b46:	f7fb ff15 	bl	8001974 <HAL_GetTick>
 8005b4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b4c:	e00a      	b.n	8005b64 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b4e:	f7fb ff11 	bl	8001974 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d903      	bls.n	8005b64 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e2af      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
 8005b60:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005b64:	4b96      	ldr	r3, [pc, #600]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1ee      	bne.n	8005b4e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d06a      	beq.n	8005c52 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b7c:	4b90      	ldr	r3, [pc, #576]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b84:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005b86:	4b8e      	ldr	r3, [pc, #568]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b8a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCC_OscConfig+0x286>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b18      	cmp	r3, #24
 8005b96:	d11b      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2b4>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d116      	bne.n	8005bd0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005ba2:	4b87      	ldr	r3, [pc, #540]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d005      	beq.n	8005bba <HAL_RCC_OscConfig+0x29e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	2b80      	cmp	r3, #128	@ 0x80
 8005bb4:	d001      	beq.n	8005bba <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e282      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005bba:	4b81      	ldr	r3, [pc, #516]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	061b      	lsls	r3, r3, #24
 8005bc8:	497d      	ldr	r1, [pc, #500]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005bce:	e040      	b.n	8005c52 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d023      	beq.n	8005c20 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005bd8:	4b79      	ldr	r3, [pc, #484]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a78      	ldr	r2, [pc, #480]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be4:	f7fb fec6 	bl	8001974 <HAL_GetTick>
 8005be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bea:	e008      	b.n	8005bfe <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005bec:	f7fb fec2 	bl	8001974 <HAL_GetTick>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d901      	bls.n	8005bfe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	e260      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005bfe:	4b70      	ldr	r3, [pc, #448]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d0f0      	beq.n	8005bec <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005c0a:	4b6d      	ldr	r3, [pc, #436]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	061b      	lsls	r3, r3, #24
 8005c18:	4969      	ldr	r1, [pc, #420]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60cb      	str	r3, [r1, #12]
 8005c1e:	e018      	b.n	8005c52 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c20:	4b67      	ldr	r3, [pc, #412]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a66      	ldr	r2, [pc, #408]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2c:	f7fb fea2 	bl	8001974 <HAL_GetTick>
 8005c30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c32:	e008      	b.n	8005c46 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005c34:	f7fb fe9e 	bl	8001974 <HAL_GetTick>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e23c      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005c46:	4b5e      	ldr	r3, [pc, #376]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f0      	bne.n	8005c34 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0308 	and.w	r3, r3, #8
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d036      	beq.n	8005ccc <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d019      	beq.n	8005c9a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c66:	4b56      	ldr	r3, [pc, #344]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6a:	4a55      	ldr	r2, [pc, #340]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c6c:	f043 0301 	orr.w	r3, r3, #1
 8005c70:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c72:	f7fb fe7f 	bl	8001974 <HAL_GetTick>
 8005c76:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c7a:	f7fb fe7b 	bl	8001974 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e219      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x35e>
 8005c98:	e018      	b.n	8005ccc <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c9a:	4b49      	ldr	r3, [pc, #292]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c9e:	4a48      	ldr	r2, [pc, #288]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca6:	f7fb fe65 	bl	8001974 <HAL_GetTick>
 8005caa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cae:	f7fb fe61 	bl	8001974 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e1ff      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005cc0:	4b3f      	ldr	r3, [pc, #252]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc4:	f003 0302 	and.w	r3, r3, #2
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1f0      	bne.n	8005cae <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d036      	beq.n	8005d46 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d019      	beq.n	8005d14 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ce0:	4b37      	ldr	r3, [pc, #220]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a36      	ldr	r2, [pc, #216]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005ce6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005cea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005cec:	f7fb fe42 	bl	8001974 <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005cf4:	f7fb fe3e 	bl	8001974 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e1dc      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005d06:	4b2e      	ldr	r3, [pc, #184]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d0f0      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x3d8>
 8005d12:	e018      	b.n	8005d46 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005d14:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a29      	ldr	r2, [pc, #164]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005d1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d1e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005d20:	f7fb fe28 	bl	8001974 <HAL_GetTick>
 8005d24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d26:	e008      	b.n	8005d3a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005d28:	f7fb fe24 	bl	8001974 <HAL_GetTick>
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d901      	bls.n	8005d3a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e1c2      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005d3a:	4b21      	ldr	r3, [pc, #132]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1f0      	bne.n	8005d28 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0304 	and.w	r3, r3, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8086 	beq.w	8005e60 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005d54:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc4 <HAL_RCC_OscConfig+0x4a8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1a      	ldr	r2, [pc, #104]	@ (8005dc4 <HAL_RCC_OscConfig+0x4a8>)
 8005d5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d60:	f7fb fe08 	bl	8001974 <HAL_GetTick>
 8005d64:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d68:	f7fb fe04 	bl	8001974 <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b64      	cmp	r3, #100	@ 0x64
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e1a2      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7a:	4b12      	ldr	r3, [pc, #72]	@ (8005dc4 <HAL_RCC_OscConfig+0x4a8>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d0f0      	beq.n	8005d68 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d106      	bne.n	8005d9c <HAL_RCC_OscConfig+0x480>
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d92:	4a0b      	ldr	r2, [pc, #44]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005d94:	f043 0301 	orr.w	r3, r3, #1
 8005d98:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d9a:	e032      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e6>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d111      	bne.n	8005dc8 <HAL_RCC_OscConfig+0x4ac>
 8005da4:	4b06      	ldr	r3, [pc, #24]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005da8:	4a05      	ldr	r2, [pc, #20]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db0:	4b03      	ldr	r3, [pc, #12]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db4:	4a02      	ldr	r2, [pc, #8]	@ (8005dc0 <HAL_RCC_OscConfig+0x4a4>)
 8005db6:	f023 0304 	bic.w	r3, r3, #4
 8005dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dbc:	e021      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e6>
 8005dbe:	bf00      	nop
 8005dc0:	58024400 	.word	0x58024400
 8005dc4:	58024800 	.word	0x58024800
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	2b05      	cmp	r3, #5
 8005dce:	d10c      	bne.n	8005dea <HAL_RCC_OscConfig+0x4ce>
 8005dd0:	4b83      	ldr	r3, [pc, #524]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd4:	4a82      	ldr	r2, [pc, #520]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005dd6:	f043 0304 	orr.w	r3, r3, #4
 8005dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ddc:	4b80      	ldr	r3, [pc, #512]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de0:	4a7f      	ldr	r2, [pc, #508]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005de2:	f043 0301 	orr.w	r3, r3, #1
 8005de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de8:	e00b      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e6>
 8005dea:	4b7d      	ldr	r3, [pc, #500]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dee:	4a7c      	ldr	r2, [pc, #496]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005df0:	f023 0301 	bic.w	r3, r3, #1
 8005df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005df6:	4b7a      	ldr	r3, [pc, #488]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dfa:	4a79      	ldr	r2, [pc, #484]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005dfc:	f023 0304 	bic.w	r3, r3, #4
 8005e00:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d015      	beq.n	8005e36 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0a:	f7fb fdb3 	bl	8001974 <HAL_GetTick>
 8005e0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e10:	e00a      	b.n	8005e28 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e12:	f7fb fdaf 	bl	8001974 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e14b      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e28:	4b6d      	ldr	r3, [pc, #436]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0ee      	beq.n	8005e12 <HAL_RCC_OscConfig+0x4f6>
 8005e34:	e014      	b.n	8005e60 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e36:	f7fb fd9d 	bl	8001974 <HAL_GetTick>
 8005e3a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e3c:	e00a      	b.n	8005e54 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e3e:	f7fb fd99 	bl	8001974 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d901      	bls.n	8005e54 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005e50:	2303      	movs	r3, #3
 8005e52:	e135      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e54:	4b62      	ldr	r3, [pc, #392]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1ee      	bne.n	8005e3e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 812a 	beq.w	80060be <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e72:	2b18      	cmp	r3, #24
 8005e74:	f000 80ba 	beq.w	8005fec <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	f040 8095 	bne.w	8005fac <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e82:	4b57      	ldr	r3, [pc, #348]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a56      	ldr	r2, [pc, #344]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005e88:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8e:	f7fb fd71 	bl	8001974 <HAL_GetTick>
 8005e92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e96:	f7fb fd6d 	bl	8001974 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e10b      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ea8:	4b4d      	ldr	r3, [pc, #308]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1f0      	bne.n	8005e96 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eb4:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8005fe4 <HAL_RCC_OscConfig+0x6c8>)
 8005eba:	4013      	ands	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ec4:	0112      	lsls	r2, r2, #4
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	4945      	ldr	r1, [pc, #276]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	628b      	str	r3, [r1, #40]	@ 0x28
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005edc:	3b01      	subs	r3, #1
 8005ede:	025b      	lsls	r3, r3, #9
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	041b      	lsls	r3, r3, #16
 8005eec:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005efe:	4938      	ldr	r1, [pc, #224]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005f04:	4b36      	ldr	r3, [pc, #216]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	4a35      	ldr	r2, [pc, #212]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f0a:	f023 0301 	bic.w	r3, r3, #1
 8005f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f10:	4b33      	ldr	r3, [pc, #204]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f12:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f14:	4b34      	ldr	r3, [pc, #208]	@ (8005fe8 <HAL_RCC_OscConfig+0x6cc>)
 8005f16:	4013      	ands	r3, r2
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f1c:	00d2      	lsls	r2, r2, #3
 8005f1e:	4930      	ldr	r1, [pc, #192]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005f24:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f28:	f023 020c 	bic.w	r2, r3, #12
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f30:	492b      	ldr	r1, [pc, #172]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005f36:	4b2a      	ldr	r3, [pc, #168]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3a:	f023 0202 	bic.w	r2, r3, #2
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f42:	4927      	ldr	r1, [pc, #156]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f48:	4b25      	ldr	r3, [pc, #148]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f4c:	4a24      	ldr	r2, [pc, #144]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f54:	4b22      	ldr	r3, [pc, #136]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f58:	4a21      	ldr	r2, [pc, #132]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005f60:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f64:	4a1e      	ldr	r2, [pc, #120]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f70:	4a1b      	ldr	r2, [pc, #108]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f72:	f043 0301 	orr.w	r3, r3, #1
 8005f76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f78:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a18      	ldr	r2, [pc, #96]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005f7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f84:	f7fb fcf6 	bl	8001974 <HAL_GetTick>
 8005f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f8c:	f7fb fcf2 	bl	8001974 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e090      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f9e:	4b10      	ldr	r3, [pc, #64]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d0f0      	beq.n	8005f8c <HAL_RCC_OscConfig+0x670>
 8005faa:	e088      	b.n	80060be <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fac:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005fb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fb fcdc 	bl	8001974 <HAL_GetTick>
 8005fbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fc0:	f7fb fcd8 	bl	8001974 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e076      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005fd2:	4b03      	ldr	r3, [pc, #12]	@ (8005fe0 <HAL_RCC_OscConfig+0x6c4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1f0      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x6a4>
 8005fde:	e06e      	b.n	80060be <HAL_RCC_OscConfig+0x7a2>
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	fffffc0c 	.word	0xfffffc0c
 8005fe8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005fec:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 8005fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ff2:	4b35      	ldr	r3, [pc, #212]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 8005ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d031      	beq.n	8006064 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f003 0203 	and.w	r2, r3, #3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800600a:	429a      	cmp	r2, r3
 800600c:	d12a      	bne.n	8006064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800601a:	429a      	cmp	r2, r3
 800601c:	d122      	bne.n	8006064 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d11a      	bne.n	8006064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	0a5b      	lsrs	r3, r3, #9
 8006032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800603c:	429a      	cmp	r2, r3
 800603e:	d111      	bne.n	8006064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	0c1b      	lsrs	r3, r3, #16
 8006044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800604e:	429a      	cmp	r2, r3
 8006050:	d108      	bne.n	8006064 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	0e1b      	lsrs	r3, r3, #24
 8006056:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006060:	429a      	cmp	r2, r3
 8006062:	d001      	beq.n	8006068 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e02b      	b.n	80060c0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006068:	4b17      	ldr	r3, [pc, #92]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 800606a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800606c:	08db      	lsrs	r3, r3, #3
 800606e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006072:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	429a      	cmp	r2, r3
 800607c:	d01f      	beq.n	80060be <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800607e:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 8006080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006082:	4a11      	ldr	r2, [pc, #68]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 8006084:	f023 0301 	bic.w	r3, r3, #1
 8006088:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800608a:	f7fb fc73 	bl	8001974 <HAL_GetTick>
 800608e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006090:	bf00      	nop
 8006092:	f7fb fc6f 	bl	8001974 <HAL_GetTick>
 8006096:	4602      	mov	r2, r0
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	4293      	cmp	r3, r2
 800609c:	d0f9      	beq.n	8006092 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800609e:	4b0a      	ldr	r3, [pc, #40]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 80060a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060a2:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <HAL_RCC_OscConfig+0x7b0>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80060aa:	00d2      	lsls	r2, r2, #3
 80060ac:	4906      	ldr	r1, [pc, #24]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 80060b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060b6:	4a04      	ldr	r2, [pc, #16]	@ (80060c8 <HAL_RCC_OscConfig+0x7ac>)
 80060b8:	f043 0301 	orr.w	r3, r3, #1
 80060bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3730      	adds	r7, #48	@ 0x30
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	58024400 	.word	0x58024400
 80060cc:	ffff0007 	.word	0xffff0007

080060d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b086      	sub	sp, #24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e19c      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060e4:	4b8a      	ldr	r3, [pc, #552]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 030f 	and.w	r3, r3, #15
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d910      	bls.n	8006114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060f2:	4b87      	ldr	r3, [pc, #540]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f023 020f 	bic.w	r2, r3, #15
 80060fa:	4985      	ldr	r1, [pc, #532]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4313      	orrs	r3, r2
 8006100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006102:	4b83      	ldr	r3, [pc, #524]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 030f 	and.w	r3, r3, #15
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d001      	beq.n	8006114 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e184      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d010      	beq.n	8006142 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	4b7b      	ldr	r3, [pc, #492]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006126:	699b      	ldr	r3, [r3, #24]
 8006128:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800612c:	429a      	cmp	r2, r3
 800612e:	d908      	bls.n	8006142 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006130:	4b78      	ldr	r3, [pc, #480]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	4975      	ldr	r1, [pc, #468]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 800613e:	4313      	orrs	r3, r2
 8006140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d010      	beq.n	8006170 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	695a      	ldr	r2, [r3, #20]
 8006152:	4b70      	ldr	r3, [pc, #448]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800615a:	429a      	cmp	r2, r3
 800615c:	d908      	bls.n	8006170 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800615e:	4b6d      	ldr	r3, [pc, #436]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
 800616a:	496a      	ldr	r1, [pc, #424]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 800616c:	4313      	orrs	r3, r2
 800616e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	2b00      	cmp	r3, #0
 800617a:	d010      	beq.n	800619e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	4b64      	ldr	r3, [pc, #400]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006188:	429a      	cmp	r2, r3
 800618a:	d908      	bls.n	800619e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800618c:	4b61      	ldr	r3, [pc, #388]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 800618e:	69db      	ldr	r3, [r3, #28]
 8006190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	495e      	ldr	r1, [pc, #376]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 800619a:	4313      	orrs	r3, r2
 800619c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 0320 	and.w	r3, r3, #32
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d010      	beq.n	80061cc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69da      	ldr	r2, [r3, #28]
 80061ae:	4b59      	ldr	r3, [pc, #356]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061b0:	6a1b      	ldr	r3, [r3, #32]
 80061b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d908      	bls.n	80061cc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80061ba:	4b56      	ldr	r3, [pc, #344]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061bc:	6a1b      	ldr	r3, [r3, #32]
 80061be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	4953      	ldr	r1, [pc, #332]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d010      	beq.n	80061fa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68da      	ldr	r2, [r3, #12]
 80061dc:	4b4d      	ldr	r3, [pc, #308]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 030f 	and.w	r3, r3, #15
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d908      	bls.n	80061fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061e8:	4b4a      	ldr	r3, [pc, #296]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f023 020f 	bic.w	r2, r3, #15
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	4947      	ldr	r1, [pc, #284]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0301 	and.w	r3, r3, #1
 8006202:	2b00      	cmp	r3, #0
 8006204:	d055      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006206:	4b43      	ldr	r3, [pc, #268]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	4940      	ldr	r1, [pc, #256]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006214:	4313      	orrs	r3, r2
 8006216:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006220:	4b3c      	ldr	r3, [pc, #240]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d121      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0f6      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b03      	cmp	r3, #3
 8006236:	d107      	bne.n	8006248 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006238:	4b36      	ldr	r3, [pc, #216]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006240:	2b00      	cmp	r3, #0
 8006242:	d115      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	e0ea      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d107      	bne.n	8006260 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006250:	4b30      	ldr	r3, [pc, #192]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006258:	2b00      	cmp	r3, #0
 800625a:	d109      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800625c:	2301      	movs	r3, #1
 800625e:	e0de      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006260:	4b2c      	ldr	r3, [pc, #176]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0304 	and.w	r3, r3, #4
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e0d6      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006270:	4b28      	ldr	r3, [pc, #160]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f023 0207 	bic.w	r2, r3, #7
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	4925      	ldr	r1, [pc, #148]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 800627e:	4313      	orrs	r3, r2
 8006280:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006282:	f7fb fb77 	bl	8001974 <HAL_GetTick>
 8006286:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006288:	e00a      	b.n	80062a0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800628a:	f7fb fb73 	bl	8001974 <HAL_GetTick>
 800628e:	4602      	mov	r2, r0
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	1ad3      	subs	r3, r2, r3
 8006294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006298:	4293      	cmp	r3, r2
 800629a:	d901      	bls.n	80062a0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800629c:	2303      	movs	r3, #3
 800629e:	e0be      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062a0:	4b1c      	ldr	r3, [pc, #112]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d1eb      	bne.n	800628a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0302 	and.w	r3, r3, #2
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d010      	beq.n	80062e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	4b14      	ldr	r3, [pc, #80]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d208      	bcs.n	80062e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062ce:	4b11      	ldr	r3, [pc, #68]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062d0:	699b      	ldr	r3, [r3, #24]
 80062d2:	f023 020f 	bic.w	r2, r3, #15
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	490e      	ldr	r1, [pc, #56]	@ (8006314 <HAL_RCC_ClockConfig+0x244>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f003 030f 	and.w	r3, r3, #15
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d214      	bcs.n	8006318 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ee:	4b08      	ldr	r3, [pc, #32]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f023 020f 	bic.w	r2, r3, #15
 80062f6:	4906      	ldr	r1, [pc, #24]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062fe:	4b04      	ldr	r3, [pc, #16]	@ (8006310 <HAL_RCC_ClockConfig+0x240>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 030f 	and.w	r3, r3, #15
 8006306:	683a      	ldr	r2, [r7, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d005      	beq.n	8006318 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e086      	b.n	800641e <HAL_RCC_ClockConfig+0x34e>
 8006310:	52002000 	.word	0x52002000
 8006314:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0304 	and.w	r3, r3, #4
 8006320:	2b00      	cmp	r3, #0
 8006322:	d010      	beq.n	8006346 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	4b3f      	ldr	r3, [pc, #252]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006330:	429a      	cmp	r2, r3
 8006332:	d208      	bcs.n	8006346 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006334:	4b3c      	ldr	r3, [pc, #240]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006336:	699b      	ldr	r3, [r3, #24]
 8006338:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4939      	ldr	r1, [pc, #228]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006342:	4313      	orrs	r3, r2
 8006344:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d010      	beq.n	8006374 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	4b34      	ldr	r3, [pc, #208]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800635e:	429a      	cmp	r2, r3
 8006360:	d208      	bcs.n	8006374 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006362:	4b31      	ldr	r3, [pc, #196]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	492e      	ldr	r1, [pc, #184]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006370:	4313      	orrs	r3, r2
 8006372:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0310 	and.w	r3, r3, #16
 800637c:	2b00      	cmp	r3, #0
 800637e:	d010      	beq.n	80063a2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	699a      	ldr	r2, [r3, #24]
 8006384:	4b28      	ldr	r3, [pc, #160]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800638c:	429a      	cmp	r2, r3
 800638e:	d208      	bcs.n	80063a2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006390:	4b25      	ldr	r3, [pc, #148]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	4922      	ldr	r1, [pc, #136]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 0320 	and.w	r3, r3, #32
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	69da      	ldr	r2, [r3, #28]
 80063b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d208      	bcs.n	80063d0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80063be:	4b1a      	ldr	r3, [pc, #104]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	4917      	ldr	r1, [pc, #92]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80063d0:	f000 f834 	bl	800643c <HAL_RCC_GetSysClockFreq>
 80063d4:	4602      	mov	r2, r0
 80063d6:	4b14      	ldr	r3, [pc, #80]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	0a1b      	lsrs	r3, r3, #8
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	4912      	ldr	r1, [pc, #72]	@ (800642c <HAL_RCC_ClockConfig+0x35c>)
 80063e2:	5ccb      	ldrb	r3, [r1, r3]
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80063ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006428 <HAL_RCC_ClockConfig+0x358>)
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	4a0d      	ldr	r2, [pc, #52]	@ (800642c <HAL_RCC_ClockConfig+0x35c>)
 80063f8:	5cd3      	ldrb	r3, [r2, r3]
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
 8006404:	4a0a      	ldr	r2, [pc, #40]	@ (8006430 <HAL_RCC_ClockConfig+0x360>)
 8006406:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006408:	4a0a      	ldr	r2, [pc, #40]	@ (8006434 <HAL_RCC_ClockConfig+0x364>)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800640e:	4b0a      	ldr	r3, [pc, #40]	@ (8006438 <HAL_RCC_ClockConfig+0x368>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f7fa ff18 	bl	8001248 <HAL_InitTick>
 8006418:	4603      	mov	r3, r0
 800641a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800641c:	7bfb      	ldrb	r3, [r7, #15]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	58024400 	.word	0x58024400
 800642c:	0801c41c 	.word	0x0801c41c
 8006430:	24004990 	.word	0x24004990
 8006434:	2400498c 	.word	0x2400498c
 8006438:	24004994 	.word	0x24004994

0800643c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	@ 0x24
 8006440:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006442:	4bb3      	ldr	r3, [pc, #716]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800644a:	2b18      	cmp	r3, #24
 800644c:	f200 8155 	bhi.w	80066fa <HAL_RCC_GetSysClockFreq+0x2be>
 8006450:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	080064bd 	.word	0x080064bd
 800645c:	080066fb 	.word	0x080066fb
 8006460:	080066fb 	.word	0x080066fb
 8006464:	080066fb 	.word	0x080066fb
 8006468:	080066fb 	.word	0x080066fb
 800646c:	080066fb 	.word	0x080066fb
 8006470:	080066fb 	.word	0x080066fb
 8006474:	080066fb 	.word	0x080066fb
 8006478:	080064e3 	.word	0x080064e3
 800647c:	080066fb 	.word	0x080066fb
 8006480:	080066fb 	.word	0x080066fb
 8006484:	080066fb 	.word	0x080066fb
 8006488:	080066fb 	.word	0x080066fb
 800648c:	080066fb 	.word	0x080066fb
 8006490:	080066fb 	.word	0x080066fb
 8006494:	080066fb 	.word	0x080066fb
 8006498:	080064e9 	.word	0x080064e9
 800649c:	080066fb 	.word	0x080066fb
 80064a0:	080066fb 	.word	0x080066fb
 80064a4:	080066fb 	.word	0x080066fb
 80064a8:	080066fb 	.word	0x080066fb
 80064ac:	080066fb 	.word	0x080066fb
 80064b0:	080066fb 	.word	0x080066fb
 80064b4:	080066fb 	.word	0x080066fb
 80064b8:	080064ef 	.word	0x080064ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064bc:	4b94      	ldr	r3, [pc, #592]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064c8:	4b91      	ldr	r3, [pc, #580]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	08db      	lsrs	r3, r3, #3
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	4a90      	ldr	r2, [pc, #576]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80064da:	e111      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80064dc:	4b8d      	ldr	r3, [pc, #564]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80064de:	61bb      	str	r3, [r7, #24]
      break;
 80064e0:	e10e      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80064e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80064e4:	61bb      	str	r3, [r7, #24]
      break;
 80064e6:	e10b      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80064e8:	4b8c      	ldr	r3, [pc, #560]	@ (800671c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80064ea:	61bb      	str	r3, [r7, #24]
      break;
 80064ec:	e108      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80064ee:	4b88      	ldr	r3, [pc, #544]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80064f8:	4b85      	ldr	r3, [pc, #532]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064fc:	091b      	lsrs	r3, r3, #4
 80064fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006502:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006504:	4b82      	ldr	r3, [pc, #520]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800650e:	4b80      	ldr	r3, [pc, #512]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006512:	08db      	lsrs	r3, r3, #3
 8006514:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006526:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	2b00      	cmp	r3, #0
 800652e:	f000 80e1 	beq.w	80066f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b02      	cmp	r3, #2
 8006536:	f000 8083 	beq.w	8006640 <HAL_RCC_GetSysClockFreq+0x204>
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	2b02      	cmp	r3, #2
 800653e:	f200 80a1 	bhi.w	8006684 <HAL_RCC_GetSysClockFreq+0x248>
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d003      	beq.n	8006550 <HAL_RCC_GetSysClockFreq+0x114>
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d056      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800654e:	e099      	b.n	8006684 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006550:	4b6f      	ldr	r3, [pc, #444]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02d      	beq.n	80065b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800655c:	4b6c      	ldr	r3, [pc, #432]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	08db      	lsrs	r3, r3, #3
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	4a6b      	ldr	r2, [pc, #428]	@ (8006714 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006568:	fa22 f303 	lsr.w	r3, r2, r3
 800656c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006586:	4b62      	ldr	r3, [pc, #392]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006596:	ed97 6a02 	vldr	s12, [r7, #8]
 800659a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800659e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80065b6:	e087      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	ee07 3a90 	vmov	s15, r3
 80065be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065c2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006724 <HAL_RCC_GetSysClockFreq+0x2e8>
 80065c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ca:	4b51      	ldr	r3, [pc, #324]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d2:	ee07 3a90 	vmov	s15, r3
 80065d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065da:	ed97 6a02 	vldr	s12, [r7, #8]
 80065de:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80065e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80065fa:	e065      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	ee07 3a90 	vmov	s15, r3
 8006602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006606:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006728 <HAL_RCC_GetSysClockFreq+0x2ec>
 800660a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800660e:	4b40      	ldr	r3, [pc, #256]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006616:	ee07 3a90 	vmov	s15, r3
 800661a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800661e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006622:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800662a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800662e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800663a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800663e:	e043      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	ee07 3a90 	vmov	s15, r3
 8006646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800664a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800672c <HAL_RCC_GetSysClockFreq+0x2f0>
 800664e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006652:	4b2f      	ldr	r3, [pc, #188]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665a:	ee07 3a90 	vmov	s15, r3
 800665e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006662:	ed97 6a02 	vldr	s12, [r7, #8]
 8006666:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 800666a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800666e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800667a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800667e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006682:	e021      	b.n	80066c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	ee07 3a90 	vmov	s15, r3
 800668a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800668e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006728 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006696:	4b1e      	ldr	r3, [pc, #120]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800669a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800669e:	ee07 3a90 	vmov	s15, r3
 80066a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066aa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006720 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80066c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80066c8:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066cc:	0a5b      	lsrs	r3, r3, #9
 80066ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066d2:	3301      	adds	r3, #1
 80066d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	ee07 3a90 	vmov	s15, r3
 80066dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80066e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ec:	ee17 3a90 	vmov	r3, s15
 80066f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80066f2:	e005      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61bb      	str	r3, [r7, #24]
      break;
 80066f8:	e002      	b.n	8006700 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80066fa:	4b07      	ldr	r3, [pc, #28]	@ (8006718 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80066fc:	61bb      	str	r3, [r7, #24]
      break;
 80066fe:	bf00      	nop
  }

  return sysclockfreq;
 8006700:	69bb      	ldr	r3, [r7, #24]
}
 8006702:	4618      	mov	r0, r3
 8006704:	3724      	adds	r7, #36	@ 0x24
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	58024400 	.word	0x58024400
 8006714:	03d09000 	.word	0x03d09000
 8006718:	003d0900 	.word	0x003d0900
 800671c:	007a1200 	.word	0x007a1200
 8006720:	46000000 	.word	0x46000000
 8006724:	4c742400 	.word	0x4c742400
 8006728:	4a742400 	.word	0x4a742400
 800672c:	4af42400 	.word	0x4af42400

08006730 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b082      	sub	sp, #8
 8006734:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006736:	f7ff fe81 	bl	800643c <HAL_RCC_GetSysClockFreq>
 800673a:	4602      	mov	r2, r0
 800673c:	4b10      	ldr	r3, [pc, #64]	@ (8006780 <HAL_RCC_GetHCLKFreq+0x50>)
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	f003 030f 	and.w	r3, r3, #15
 8006746:	490f      	ldr	r1, [pc, #60]	@ (8006784 <HAL_RCC_GetHCLKFreq+0x54>)
 8006748:	5ccb      	ldrb	r3, [r1, r3]
 800674a:	f003 031f 	and.w	r3, r3, #31
 800674e:	fa22 f303 	lsr.w	r3, r2, r3
 8006752:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006754:	4b0a      	ldr	r3, [pc, #40]	@ (8006780 <HAL_RCC_GetHCLKFreq+0x50>)
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	4a09      	ldr	r2, [pc, #36]	@ (8006784 <HAL_RCC_GetHCLKFreq+0x54>)
 800675e:	5cd3      	ldrb	r3, [r2, r3]
 8006760:	f003 031f 	and.w	r3, r3, #31
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	fa22 f303 	lsr.w	r3, r2, r3
 800676a:	4a07      	ldr	r2, [pc, #28]	@ (8006788 <HAL_RCC_GetHCLKFreq+0x58>)
 800676c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800676e:	4a07      	ldr	r2, [pc, #28]	@ (800678c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006774:	4b04      	ldr	r3, [pc, #16]	@ (8006788 <HAL_RCC_GetHCLKFreq+0x58>)
 8006776:	681b      	ldr	r3, [r3, #0]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	58024400 	.word	0x58024400
 8006784:	0801c41c 	.word	0x0801c41c
 8006788:	24004990 	.word	0x24004990
 800678c:	2400498c 	.word	0x2400498c

08006790 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006794:	f7ff ffcc 	bl	8006730 <HAL_RCC_GetHCLKFreq>
 8006798:	4602      	mov	r2, r0
 800679a:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	f003 0307 	and.w	r3, r3, #7
 80067a4:	4904      	ldr	r1, [pc, #16]	@ (80067b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80067a6:	5ccb      	ldrb	r3, [r1, r3]
 80067a8:	f003 031f 	and.w	r3, r3, #31
 80067ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	58024400 	.word	0x58024400
 80067b8:	0801c41c 	.word	0x0801c41c

080067bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	223f      	movs	r2, #63	@ 0x3f
 80067ca:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067cc:	4b1a      	ldr	r3, [pc, #104]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	f003 0207 	and.w	r2, r3, #7
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80067d8:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80067e4:	4b14      	ldr	r3, [pc, #80]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	f003 020f 	and.w	r2, r3, #15
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80067f0:	4b11      	ldr	r3, [pc, #68]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80067fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006808:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8006814:	4b08      	ldr	r3, [pc, #32]	@ (8006838 <HAL_RCC_GetClockConfig+0x7c>)
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_RCC_GetClockConfig+0x80>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 020f 	and.w	r2, r3, #15
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	601a      	str	r2, [r3, #0]
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr
 8006838:	58024400 	.word	0x58024400
 800683c:	52002000 	.word	0x52002000

08006840 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006844:	b0c6      	sub	sp, #280	@ 0x118
 8006846:	af00      	add	r7, sp, #0
 8006848:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800684c:	2300      	movs	r3, #0
 800684e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006852:	2300      	movs	r3, #0
 8006854:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006864:	2500      	movs	r5, #0
 8006866:	ea54 0305 	orrs.w	r3, r4, r5
 800686a:	d049      	beq.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006872:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006876:	d02f      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800687c:	d828      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800687e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006882:	d01a      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006888:	d822      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800688e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006892:	d007      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006894:	e01c      	b.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006896:	4bab      	ldr	r3, [pc, #684]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689a:	4aaa      	ldr	r2, [pc, #680]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800689c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068a2:	e01a      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	3308      	adds	r3, #8
 80068aa:	2102      	movs	r1, #2
 80068ac:	4618      	mov	r0, r3
 80068ae:	f001 f967 	bl	8007b80 <RCCEx_PLL2_Config>
 80068b2:	4603      	mov	r3, r0
 80068b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068b8:	e00f      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068be:	3328      	adds	r3, #40	@ 0x28
 80068c0:	2102      	movs	r1, #2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 fa0e 	bl	8007ce4 <RCCEx_PLL3_Config>
 80068c8:	4603      	mov	r3, r0
 80068ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80068ce:	e004      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80068d6:	e000      	b.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80068d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80068e2:	4b98      	ldr	r3, [pc, #608]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f0:	4a94      	ldr	r2, [pc, #592]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80068f2:	430b      	orrs	r3, r1
 80068f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80068f6:	e003      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006908:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800690c:	f04f 0900 	mov.w	r9, #0
 8006910:	ea58 0309 	orrs.w	r3, r8, r9
 8006914:	d047      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800691c:	2b04      	cmp	r3, #4
 800691e:	d82a      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006920:	a201      	add	r2, pc, #4	@ (adr r2, 8006928 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006926:	bf00      	nop
 8006928:	0800693d 	.word	0x0800693d
 800692c:	0800694b 	.word	0x0800694b
 8006930:	08006961 	.word	0x08006961
 8006934:	0800697f 	.word	0x0800697f
 8006938:	0800697f 	.word	0x0800697f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693c:	4b81      	ldr	r3, [pc, #516]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	4a80      	ldr	r2, [pc, #512]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006948:	e01a      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800694a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800694e:	3308      	adds	r3, #8
 8006950:	2100      	movs	r1, #0
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f914 	bl	8007b80 <RCCEx_PLL2_Config>
 8006958:	4603      	mov	r3, r0
 800695a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800695e:	e00f      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006964:	3328      	adds	r3, #40	@ 0x28
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f9bb 	bl	8007ce4 <RCCEx_PLL3_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006974:	e004      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800697c:	e000      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800697e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006988:	4b6e      	ldr	r3, [pc, #440]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800698a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800698c:	f023 0107 	bic.w	r1, r3, #7
 8006990:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006996:	4a6b      	ldr	r2, [pc, #428]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006998:	430b      	orrs	r3, r1
 800699a:	6513      	str	r3, [r2, #80]	@ 0x50
 800699c:	e003      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800699e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80069a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ae:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80069b2:	f04f 0b00 	mov.w	fp, #0
 80069b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80069ba:	d05b      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80069bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80069c4:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80069c8:	d03b      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80069ca:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80069ce:	d834      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069d4:	d037      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80069d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80069da:	d82e      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069dc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069e0:	d033      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80069e2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80069e6:	d828      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069ec:	d01a      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80069ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80069f2:	d822      	bhi.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80069f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80069fc:	d007      	beq.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80069fe:	e01c      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a00:	4b50      	ldr	r3, [pc, #320]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	4a4f      	ldr	r2, [pc, #316]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a0c:	e01e      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a12:	3308      	adds	r3, #8
 8006a14:	2100      	movs	r1, #0
 8006a16:	4618      	mov	r0, r3
 8006a18:	f001 f8b2 	bl	8007b80 <RCCEx_PLL2_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a22:	e013      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a28:	3328      	adds	r3, #40	@ 0x28
 8006a2a:	2100      	movs	r1, #0
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f001 f959 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006a32:	4603      	mov	r3, r0
 8006a34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a38:	e008      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006a40:	e004      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a42:	bf00      	nop
 8006a44:	e002      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a46:	bf00      	nop
 8006a48:	e000      	b.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006a54:	4b3b      	ldr	r3, [pc, #236]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a58:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006a64:	4a37      	ldr	r2, [pc, #220]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006a66:	430b      	orrs	r3, r1
 8006a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a6a:	e003      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006a80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a84:	2300      	movs	r3, #0
 8006a86:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a8a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4313      	orrs	r3, r2
 8006a92:	d05d      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006a9c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006aa0:	d03b      	beq.n	8006b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006aa2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006aa6:	d834      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aac:	d037      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8006aae:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006ab2:	d82e      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ab4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006ab8:	d033      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006aba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006abe:	d828      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006ac0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ac4:	d01a      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006ac6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006aca:	d822      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ad0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ad4:	d007      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006ad6:	e01c      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006adc:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006ade:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ae4:	e01e      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aea:	3308      	adds	r3, #8
 8006aec:	2100      	movs	r1, #0
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 f846 	bl	8007b80 <RCCEx_PLL2_Config>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006afa:	e013      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b00:	3328      	adds	r3, #40	@ 0x28
 8006b02:	2100      	movs	r1, #0
 8006b04:	4618      	mov	r0, r3
 8006b06:	f001 f8ed 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006b10:	e008      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006b18:	e004      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b1a:	bf00      	nop
 8006b1c:	e002      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b1e:	bf00      	nop
 8006b20:	e000      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006b22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10d      	bne.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006b2c:	4b05      	ldr	r3, [pc, #20]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b30:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006b3c:	4a01      	ldr	r2, [pc, #4]	@ (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	6593      	str	r3, [r2, #88]	@ 0x58
 8006b42:	e005      	b.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006b44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006b4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006b5c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b60:	2300      	movs	r3, #0
 8006b62:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b66:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	d03a      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b76:	2b30      	cmp	r3, #48	@ 0x30
 8006b78:	d01f      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006b7a:	2b30      	cmp	r3, #48	@ 0x30
 8006b7c:	d819      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b7e:	2b20      	cmp	r3, #32
 8006b80:	d00c      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d815      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d019      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006b8a:	2b10      	cmp	r3, #16
 8006b8c:	d111      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b8e:	4baa      	ldr	r3, [pc, #680]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	4aa9      	ldr	r2, [pc, #676]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006b9a:	e011      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006b9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f000 ffeb 	bl	8007b80 <RCCEx_PLL2_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006bb0:	e006      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006bb8:	e002      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e000      	b.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006bbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10a      	bne.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006bc8:	4b9b      	ldr	r3, [pc, #620]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bcc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bd6:	4a98      	ldr	r2, [pc, #608]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006bd8:	430b      	orrs	r3, r1
 8006bda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006bdc:	e003      	b.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006be2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006bf2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bfc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c00:	460b      	mov	r3, r1
 8006c02:	4313      	orrs	r3, r2
 8006c04:	d051      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c10:	d035      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006c12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c16:	d82e      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c1c:	d031      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8006c1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006c22:	d828      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c28:	d01a      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c2e:	d822      	bhi.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c38:	d007      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006c3a:	e01c      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c3c:	4b7e      	ldr	r3, [pc, #504]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	4a7d      	ldr	r2, [pc, #500]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c48:	e01c      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c4e:	3308      	adds	r3, #8
 8006c50:	2100      	movs	r1, #0
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 ff94 	bl	8007b80 <RCCEx_PLL2_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c5e:	e011      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c64:	3328      	adds	r3, #40	@ 0x28
 8006c66:	2100      	movs	r1, #0
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f001 f83b 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006c74:	e006      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006c7c:	e002      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d10a      	bne.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c9a:	4a67      	ldr	r2, [pc, #412]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006c9c:	430b      	orrs	r3, r1
 8006c9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ca0:	e003      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ca2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ca6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006cb6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cc0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	d053      	beq.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cd4:	d033      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006cd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006cda:	d82c      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ce0:	d02f      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8006ce2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ce6:	d826      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006ce8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cec:	d02b      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006cee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006cf2:	d820      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006cf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cf8:	d012      	beq.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8006cfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006cfe:	d81a      	bhi.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d022      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d08:	d115      	bne.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d0e:	3308      	adds	r3, #8
 8006d10:	2101      	movs	r1, #1
 8006d12:	4618      	mov	r0, r3
 8006d14:	f000 ff34 	bl	8007b80 <RCCEx_PLL2_Config>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d1e:	e015      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d24:	3328      	adds	r3, #40	@ 0x28
 8006d26:	2101      	movs	r1, #1
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f000 ffdb 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006d34:	e00a      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006d3c:	e006      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d3e:	bf00      	nop
 8006d40:	e004      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d42:	bf00      	nop
 8006d44:	e002      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d46:	bf00      	nop
 8006d48:	e000      	b.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d10a      	bne.n	8006d6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006d54:	4b38      	ldr	r3, [pc, #224]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d58:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d62:	4a35      	ldr	r2, [pc, #212]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006d64:	430b      	orrs	r3, r1
 8006d66:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d68:	e003      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006d6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006d7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d82:	2300      	movs	r3, #0
 8006d84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d88:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	d058      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006d92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d9e:	d033      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006da0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006da4:	d82c      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006daa:	d02f      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006dac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db0:	d826      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006db2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006db6:	d02b      	beq.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006db8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006dbc:	d820      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006dbe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc2:	d012      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006dc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc8:	d81a      	bhi.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d022      	beq.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006dce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dd2:	d115      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd8:	3308      	adds	r3, #8
 8006dda:	2101      	movs	r1, #1
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f000 fecf 	bl	8007b80 <RCCEx_PLL2_Config>
 8006de2:	4603      	mov	r3, r0
 8006de4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006de8:	e015      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dee:	3328      	adds	r3, #40	@ 0x28
 8006df0:	2101      	movs	r1, #1
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 ff76 	bl	8007ce4 <RCCEx_PLL3_Config>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006dfe:	e00a      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006e00:	2301      	movs	r3, #1
 8006e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006e06:	e006      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e08:	bf00      	nop
 8006e0a:	e004      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e0c:	bf00      	nop
 8006e0e:	e002      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e10:	bf00      	nop
 8006e12:	e000      	b.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006e14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10e      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e1e:	4b06      	ldr	r3, [pc, #24]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e22:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e2e:	4a02      	ldr	r2, [pc, #8]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006e30:	430b      	orrs	r3, r1
 8006e32:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e34:	e006      	b.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006e36:	bf00      	nop
 8006e38:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006e40:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006e50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e5a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	4313      	orrs	r3, r2
 8006e62:	d037      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e6e:	d00e      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006e70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006e74:	d816      	bhi.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d018      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006e7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e7e:	d111      	bne.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e80:	4bc4      	ldr	r3, [pc, #784]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e84:	4ac3      	ldr	r2, [pc, #780]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006e86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006e8c:	e00f      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e92:	3308      	adds	r3, #8
 8006e94:	2101      	movs	r1, #1
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 fe72 	bl	8007b80 <RCCEx_PLL2_Config>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006ea2:	e004      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006eaa:	e000      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006eac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d10a      	bne.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006eb6:	4bb7      	ldr	r3, [pc, #732]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec4:	4ab3      	ldr	r2, [pc, #716]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ec6:	430b      	orrs	r3, r1
 8006ec8:	6513      	str	r3, [r2, #80]	@ 0x50
 8006eca:	e003      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006ed0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006edc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006ee0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006eea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	d039      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006efa:	2b03      	cmp	r3, #3
 8006efc:	d81c      	bhi.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f41 	.word	0x08006f41
 8006f08:	08006f15 	.word	0x08006f15
 8006f0c:	08006f23 	.word	0x08006f23
 8006f10:	08006f41 	.word	0x08006f41
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f14:	4b9f      	ldr	r3, [pc, #636]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f18:	4a9e      	ldr	r2, [pc, #632]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f20:	e00f      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f26:	3308      	adds	r3, #8
 8006f28:	2102      	movs	r1, #2
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f000 fe28 	bl	8007b80 <RCCEx_PLL2_Config>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006f36:	e004      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006f3e:	e000      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10a      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f4a:	4b92      	ldr	r3, [pc, #584]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f4e:	f023 0103 	bic.w	r1, r3, #3
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006f58:	4a8e      	ldr	r2, [pc, #568]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006f5a:	430b      	orrs	r3, r1
 8006f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006f5e:	e003      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f60:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006f64:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006f74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f78:	2300      	movs	r3, #0
 8006f7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f82:	460b      	mov	r3, r1
 8006f84:	4313      	orrs	r3, r2
 8006f86:	f000 8099 	beq.w	80070bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f8a:	4b83      	ldr	r3, [pc, #524]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a82      	ldr	r2, [pc, #520]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006f90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f96:	f7fa fced 	bl	8001974 <HAL_GetTick>
 8006f9a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f9e:	e00b      	b.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fa0:	f7fa fce8 	bl	8001974 <HAL_GetTick>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006faa:	1ad3      	subs	r3, r2, r3
 8006fac:	2b64      	cmp	r3, #100	@ 0x64
 8006fae:	d903      	bls.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006fb0:	2303      	movs	r3, #3
 8006fb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006fb6:	e005      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fb8:	4b77      	ldr	r3, [pc, #476]	@ (8007198 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d0ed      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006fc4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d173      	bne.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006fcc:	4b71      	ldr	r3, [pc, #452]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fd8:	4053      	eors	r3, r2
 8006fda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d015      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fe6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fea:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fee:	4b69      	ldr	r3, [pc, #420]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ff2:	4a68      	ldr	r2, [pc, #416]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ff8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006ffa:	4b66      	ldr	r3, [pc, #408]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffe:	4a65      	ldr	r2, [pc, #404]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007000:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007004:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007006:	4a63      	ldr	r2, [pc, #396]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007008:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800700c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007012:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800701a:	d118      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800701c:	f7fa fcaa 	bl	8001974 <HAL_GetTick>
 8007020:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007024:	e00d      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007026:	f7fa fca5 	bl	8001974 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007036:	429a      	cmp	r2, r3
 8007038:	d903      	bls.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8007040:	e005      	b.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007042:	4b54      	ldr	r3, [pc, #336]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0eb      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800704e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007052:	2b00      	cmp	r3, #0
 8007054:	d129      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800705e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007062:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007066:	d10e      	bne.n	8007086 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8007068:	4b4a      	ldr	r3, [pc, #296]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007074:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007078:	091a      	lsrs	r2, r3, #4
 800707a:	4b48      	ldr	r3, [pc, #288]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800707c:	4013      	ands	r3, r2
 800707e:	4a45      	ldr	r2, [pc, #276]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007080:	430b      	orrs	r3, r1
 8007082:	6113      	str	r3, [r2, #16]
 8007084:	e005      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8007086:	4b43      	ldr	r3, [pc, #268]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	4a42      	ldr	r2, [pc, #264]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800708c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007090:	6113      	str	r3, [r2, #16]
 8007092:	4b40      	ldr	r3, [pc, #256]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8007094:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800709a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800709e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070a2:	4a3c      	ldr	r2, [pc, #240]	@ (8007194 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80070a4:	430b      	orrs	r3, r1
 80070a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80070a8:	e008      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80070aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070ae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 80070b2:	e003      	b.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80070b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80070bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	f002 0301 	and.w	r3, r2, #1
 80070c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80070d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80070d6:	460b      	mov	r3, r1
 80070d8:	4313      	orrs	r3, r2
 80070da:	f000 808f 	beq.w	80071fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070e4:	2b28      	cmp	r3, #40	@ 0x28
 80070e6:	d871      	bhi.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80070e8:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	080071d5 	.word	0x080071d5
 80070f4:	080071cd 	.word	0x080071cd
 80070f8:	080071cd 	.word	0x080071cd
 80070fc:	080071cd 	.word	0x080071cd
 8007100:	080071cd 	.word	0x080071cd
 8007104:	080071cd 	.word	0x080071cd
 8007108:	080071cd 	.word	0x080071cd
 800710c:	080071cd 	.word	0x080071cd
 8007110:	080071a1 	.word	0x080071a1
 8007114:	080071cd 	.word	0x080071cd
 8007118:	080071cd 	.word	0x080071cd
 800711c:	080071cd 	.word	0x080071cd
 8007120:	080071cd 	.word	0x080071cd
 8007124:	080071cd 	.word	0x080071cd
 8007128:	080071cd 	.word	0x080071cd
 800712c:	080071cd 	.word	0x080071cd
 8007130:	080071b7 	.word	0x080071b7
 8007134:	080071cd 	.word	0x080071cd
 8007138:	080071cd 	.word	0x080071cd
 800713c:	080071cd 	.word	0x080071cd
 8007140:	080071cd 	.word	0x080071cd
 8007144:	080071cd 	.word	0x080071cd
 8007148:	080071cd 	.word	0x080071cd
 800714c:	080071cd 	.word	0x080071cd
 8007150:	080071d5 	.word	0x080071d5
 8007154:	080071cd 	.word	0x080071cd
 8007158:	080071cd 	.word	0x080071cd
 800715c:	080071cd 	.word	0x080071cd
 8007160:	080071cd 	.word	0x080071cd
 8007164:	080071cd 	.word	0x080071cd
 8007168:	080071cd 	.word	0x080071cd
 800716c:	080071cd 	.word	0x080071cd
 8007170:	080071d5 	.word	0x080071d5
 8007174:	080071cd 	.word	0x080071cd
 8007178:	080071cd 	.word	0x080071cd
 800717c:	080071cd 	.word	0x080071cd
 8007180:	080071cd 	.word	0x080071cd
 8007184:	080071cd 	.word	0x080071cd
 8007188:	080071cd 	.word	0x080071cd
 800718c:	080071cd 	.word	0x080071cd
 8007190:	080071d5 	.word	0x080071d5
 8007194:	58024400 	.word	0x58024400
 8007198:	58024800 	.word	0x58024800
 800719c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071a4:	3308      	adds	r3, #8
 80071a6:	2101      	movs	r1, #1
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fce9 	bl	8007b80 <RCCEx_PLL2_Config>
 80071ae:	4603      	mov	r3, r0
 80071b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071b4:	e00f      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ba:	3328      	adds	r3, #40	@ 0x28
 80071bc:	2101      	movs	r1, #1
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fd90 	bl	8007ce4 <RCCEx_PLL3_Config>
 80071c4:	4603      	mov	r3, r0
 80071c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80071ca:	e004      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80071d2:	e000      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80071d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80071de:	4bbf      	ldr	r3, [pc, #764]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071ec:	4abb      	ldr	r2, [pc, #748]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071ee:	430b      	orrs	r3, r1
 80071f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071f2:	e003      	b.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80071f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f002 0302 	and.w	r3, r2, #2
 8007208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800720c:	2300      	movs	r3, #0
 800720e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007212:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007216:	460b      	mov	r3, r1
 8007218:	4313      	orrs	r3, r2
 800721a:	d041      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007222:	2b05      	cmp	r3, #5
 8007224:	d824      	bhi.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8007226:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8007228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722c:	08007279 	.word	0x08007279
 8007230:	08007245 	.word	0x08007245
 8007234:	0800725b 	.word	0x0800725b
 8007238:	08007279 	.word	0x08007279
 800723c:	08007279 	.word	0x08007279
 8007240:	08007279 	.word	0x08007279
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007248:	3308      	adds	r3, #8
 800724a:	2101      	movs	r1, #1
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fc97 	bl	8007b80 <RCCEx_PLL2_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007258:	e00f      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800725a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725e:	3328      	adds	r3, #40	@ 0x28
 8007260:	2101      	movs	r1, #1
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fd3e 	bl	8007ce4 <RCCEx_PLL3_Config>
 8007268:	4603      	mov	r3, r0
 800726a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800726e:	e004      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007276:	e000      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8007278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10a      	bne.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007282:	4b96      	ldr	r3, [pc, #600]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007286:	f023 0107 	bic.w	r1, r3, #7
 800728a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800728e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007290:	4a92      	ldr	r2, [pc, #584]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007292:	430b      	orrs	r3, r1
 8007294:	6553      	str	r3, [r2, #84]	@ 0x54
 8007296:	e003      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800729c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80072a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f002 0304 	and.w	r3, r2, #4
 80072ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072b0:	2300      	movs	r3, #0
 80072b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072b6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072ba:	460b      	mov	r3, r1
 80072bc:	4313      	orrs	r3, r2
 80072be:	d044      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80072c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	d825      	bhi.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80072cc:	a201      	add	r2, pc, #4	@ (adr r2, 80072d4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80072ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d2:	bf00      	nop
 80072d4:	08007321 	.word	0x08007321
 80072d8:	080072ed 	.word	0x080072ed
 80072dc:	08007303 	.word	0x08007303
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007321 	.word	0x08007321
 80072e8:	08007321 	.word	0x08007321
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072f0:	3308      	adds	r3, #8
 80072f2:	2101      	movs	r1, #1
 80072f4:	4618      	mov	r0, r3
 80072f6:	f000 fc43 	bl	8007b80 <RCCEx_PLL2_Config>
 80072fa:	4603      	mov	r3, r0
 80072fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007300:	e00f      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007306:	3328      	adds	r3, #40	@ 0x28
 8007308:	2101      	movs	r1, #1
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fcea 	bl	8007ce4 <RCCEx_PLL3_Config>
 8007310:	4603      	mov	r3, r0
 8007312:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007316:	e004      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800731e:	e000      	b.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007322:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800732a:	4b6c      	ldr	r3, [pc, #432]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800732c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800732e:	f023 0107 	bic.w	r1, r3, #7
 8007332:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733a:	4a68      	ldr	r2, [pc, #416]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800733c:	430b      	orrs	r3, r1
 800733e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007340:	e003      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007346:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800734a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f002 0320 	and.w	r3, r2, #32
 8007356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800735a:	2300      	movs	r3, #0
 800735c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007360:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007364:	460b      	mov	r3, r1
 8007366:	4313      	orrs	r3, r2
 8007368:	d055      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800736a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007372:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007376:	d033      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007378:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800737c:	d82c      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800737e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007382:	d02f      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007388:	d826      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800738a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800738e:	d02b      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007390:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007394:	d820      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007396:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800739a:	d012      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800739c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80073a0:	d81a      	bhi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d022      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80073a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80073aa:	d115      	bne.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b0:	3308      	adds	r3, #8
 80073b2:	2100      	movs	r1, #0
 80073b4:	4618      	mov	r0, r3
 80073b6:	f000 fbe3 	bl	8007b80 <RCCEx_PLL2_Config>
 80073ba:	4603      	mov	r3, r0
 80073bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073c0:	e015      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073c6:	3328      	adds	r3, #40	@ 0x28
 80073c8:	2102      	movs	r1, #2
 80073ca:	4618      	mov	r0, r3
 80073cc:	f000 fc8a 	bl	8007ce4 <RCCEx_PLL3_Config>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80073d6:	e00a      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80073de:	e006      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073e0:	bf00      	nop
 80073e2:	e004      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073e4:	bf00      	nop
 80073e6:	e002      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80073ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d10b      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80073f6:	4b39      	ldr	r3, [pc, #228]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80073f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80073fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007402:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007406:	4a35      	ldr	r2, [pc, #212]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8007408:	430b      	orrs	r3, r1
 800740a:	6553      	str	r3, [r2, #84]	@ 0x54
 800740c:	e003      	b.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007412:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007422:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007426:	2300      	movs	r3, #0
 8007428:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800742c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007430:	460b      	mov	r3, r1
 8007432:	4313      	orrs	r3, r2
 8007434:	d058      	beq.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800743e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007442:	d033      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007444:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007448:	d82c      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800744a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800744e:	d02f      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007450:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007454:	d826      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007456:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800745a:	d02b      	beq.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800745c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007460:	d820      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007462:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007466:	d012      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007468:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800746c:	d81a      	bhi.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d022      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007476:	d115      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747c:	3308      	adds	r3, #8
 800747e:	2100      	movs	r1, #0
 8007480:	4618      	mov	r0, r3
 8007482:	f000 fb7d 	bl	8007b80 <RCCEx_PLL2_Config>
 8007486:	4603      	mov	r3, r0
 8007488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800748c:	e015      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007492:	3328      	adds	r3, #40	@ 0x28
 8007494:	2102      	movs	r1, #2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 fc24 	bl	8007ce4 <RCCEx_PLL3_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80074a2:	e00a      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074a4:	2301      	movs	r3, #1
 80074a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80074aa:	e006      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074ac:	bf00      	nop
 80074ae:	e004      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074b0:	bf00      	nop
 80074b2:	e002      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074b4:	bf00      	nop
 80074b6:	e000      	b.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80074b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10e      	bne.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80074c2:	4b06      	ldr	r3, [pc, #24]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80074ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80074d2:	4a02      	ldr	r2, [pc, #8]	@ (80074dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d8:	e006      	b.n	80074e8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80074da:	bf00      	nop
 80074dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80074e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80074f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074f8:	2300      	movs	r3, #0
 80074fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007502:	460b      	mov	r3, r1
 8007504:	4313      	orrs	r3, r2
 8007506:	d055      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800750c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007510:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007514:	d033      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8007516:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800751a:	d82c      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800751c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007520:	d02f      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007522:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007526:	d826      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007528:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800752c:	d02b      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800752e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007532:	d820      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007534:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007538:	d012      	beq.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800753a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800753e:	d81a      	bhi.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d022      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007544:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007548:	d115      	bne.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800754a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800754e:	3308      	adds	r3, #8
 8007550:	2100      	movs	r1, #0
 8007552:	4618      	mov	r0, r3
 8007554:	f000 fb14 	bl	8007b80 <RCCEx_PLL2_Config>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800755e:	e015      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	3328      	adds	r3, #40	@ 0x28
 8007566:	2102      	movs	r1, #2
 8007568:	4618      	mov	r0, r3
 800756a:	f000 fbbb 	bl	8007ce4 <RCCEx_PLL3_Config>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007574:	e00a      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800757c:	e006      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800757e:	bf00      	nop
 8007580:	e004      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007582:	bf00      	nop
 8007584:	e002      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007586:	bf00      	nop
 8007588:	e000      	b.n	800758c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800758a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10b      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007594:	4ba0      	ldr	r3, [pc, #640]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007596:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007598:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800759c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80075a4:	4a9c      	ldr	r2, [pc, #624]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075a6:	430b      	orrs	r3, r1
 80075a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80075aa:	e003      	b.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80075b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80075b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075bc:	f002 0308 	and.w	r3, r2, #8
 80075c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80075c4:	2300      	movs	r3, #0
 80075c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80075ca:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80075ce:	460b      	mov	r3, r1
 80075d0:	4313      	orrs	r3, r2
 80075d2:	d01e      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80075d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075e0:	d10c      	bne.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80075e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075e6:	3328      	adds	r3, #40	@ 0x28
 80075e8:	2102      	movs	r1, #2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb7a 	bl	8007ce4 <RCCEx_PLL3_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d002      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80075fc:	4b86      	ldr	r3, [pc, #536]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80075fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007600:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007608:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800760c:	4a82      	ldr	r2, [pc, #520]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800760e:	430b      	orrs	r3, r1
 8007610:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f002 0310 	and.w	r3, r2, #16
 800761e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007622:	2300      	movs	r3, #0
 8007624:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007628:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d01e      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800763a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800763e:	d10c      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007644:	3328      	adds	r3, #40	@ 0x28
 8007646:	2102      	movs	r1, #2
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fb4b 	bl	8007ce4 <RCCEx_PLL3_Config>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800765a:	4b6f      	ldr	r3, [pc, #444]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800765c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800765e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800766a:	4a6b      	ldr	r2, [pc, #428]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800766c:	430b      	orrs	r3, r1
 800766e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800767c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800767e:	2300      	movs	r3, #0
 8007680:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007682:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007686:	460b      	mov	r3, r1
 8007688:	4313      	orrs	r3, r2
 800768a:	d03e      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800768c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007690:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007698:	d022      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800769a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800769e:	d81b      	bhi.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d003      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076a8:	d00b      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80076aa:	e015      	b.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076b0:	3308      	adds	r3, #8
 80076b2:	2100      	movs	r1, #0
 80076b4:	4618      	mov	r0, r3
 80076b6:	f000 fa63 	bl	8007b80 <RCCEx_PLL2_Config>
 80076ba:	4603      	mov	r3, r0
 80076bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076c0:	e00f      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80076c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076c6:	3328      	adds	r3, #40	@ 0x28
 80076c8:	2102      	movs	r1, #2
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 fb0a 	bl	8007ce4 <RCCEx_PLL3_Config>
 80076d0:	4603      	mov	r3, r0
 80076d2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80076d6:	e004      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80076de:	e000      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80076e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80076ea:	4b4b      	ldr	r3, [pc, #300]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ee:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80076f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80076fa:	4a47      	ldr	r2, [pc, #284]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80076fc:	430b      	orrs	r3, r1
 80076fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007700:	e003      	b.n	800770a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007702:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007706:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800770a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800770e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007712:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007716:	673b      	str	r3, [r7, #112]	@ 0x70
 8007718:	2300      	movs	r3, #0
 800771a:	677b      	str	r3, [r7, #116]	@ 0x74
 800771c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007720:	460b      	mov	r3, r1
 8007722:	4313      	orrs	r3, r2
 8007724:	d03b      	beq.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800772a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800772e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007732:	d01f      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007734:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007738:	d818      	bhi.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800773a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800773e:	d003      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007740:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007744:	d007      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007746:	e011      	b.n	800776c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007748:	4b33      	ldr	r3, [pc, #204]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800774a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800774c:	4a32      	ldr	r2, [pc, #200]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800774e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007752:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007754:	e00f      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800775a:	3328      	adds	r3, #40	@ 0x28
 800775c:	2101      	movs	r1, #1
 800775e:	4618      	mov	r0, r3
 8007760:	f000 fac0 	bl	8007ce4 <RCCEx_PLL3_Config>
 8007764:	4603      	mov	r3, r0
 8007766:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800776a:	e004      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8007772:	e000      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007776:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10b      	bne.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800777e:	4b26      	ldr	r3, [pc, #152]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800778a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800778e:	4a22      	ldr	r2, [pc, #136]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007790:	430b      	orrs	r3, r1
 8007792:	6553      	str	r3, [r2, #84]	@ 0x54
 8007794:	e003      	b.n	800779e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007796:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800779a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800779e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ac:	2300      	movs	r3, #0
 80077ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077b0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80077b4:	460b      	mov	r3, r1
 80077b6:	4313      	orrs	r3, r2
 80077b8:	d034      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80077ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077c8:	d007      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80077ca:	e011      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077cc:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d0:	4a11      	ldr	r2, [pc, #68]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80077d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077d8:	e00e      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80077da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077de:	3308      	adds	r3, #8
 80077e0:	2102      	movs	r1, #2
 80077e2:	4618      	mov	r0, r3
 80077e4:	f000 f9cc 	bl	8007b80 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80077ee:	e003      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80077f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10d      	bne.n	800781c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007800:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007804:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800780c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780e:	4a02      	ldr	r2, [pc, #8]	@ (8007818 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007810:	430b      	orrs	r3, r1
 8007812:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007814:	e006      	b.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007816:	bf00      	nop
 8007818:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800781c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007820:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007830:	663b      	str	r3, [r7, #96]	@ 0x60
 8007832:	2300      	movs	r3, #0
 8007834:	667b      	str	r3, [r7, #100]	@ 0x64
 8007836:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800783a:	460b      	mov	r3, r1
 800783c:	4313      	orrs	r3, r2
 800783e:	d00c      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007844:	3328      	adds	r3, #40	@ 0x28
 8007846:	2102      	movs	r1, #2
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fa4b 	bl	8007ce4 <RCCEx_PLL3_Config>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800785a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007866:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007868:	2300      	movs	r3, #0
 800786a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800786c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007870:	460b      	mov	r3, r1
 8007872:	4313      	orrs	r3, r2
 8007874:	d036      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800787a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800787c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007880:	d018      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007882:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007886:	d811      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800788c:	d014      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800788e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007892:	d80b      	bhi.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d011      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007898:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800789c:	d106      	bne.n	80078ac <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789e:	4bb7      	ldr	r3, [pc, #732]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078a2:	4ab6      	ldr	r2, [pc, #728]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80078aa:	e008      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80078b2:	e004      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80078b4:	bf00      	nop
 80078b6:	e002      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80078b8:	bf00      	nop
 80078ba:	e000      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80078bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80078c6:	4bad      	ldr	r3, [pc, #692]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078d4:	4aa9      	ldr	r2, [pc, #676]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80078d6:	430b      	orrs	r3, r1
 80078d8:	6553      	str	r3, [r2, #84]	@ 0x54
 80078da:	e003      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80078e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80078f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80078f2:	2300      	movs	r3, #0
 80078f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80078f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007900:	4b9e      	ldr	r3, [pc, #632]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007904:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800790e:	4a9b      	ldr	r2, [pc, #620]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007910:	430b      	orrs	r3, r1
 8007912:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007922:	2300      	movs	r3, #0
 8007924:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007926:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800792a:	460b      	mov	r3, r1
 800792c:	4313      	orrs	r3, r2
 800792e:	d009      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007930:	4b92      	ldr	r3, [pc, #584]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007932:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007934:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007938:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800793c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800793e:	4a8f      	ldr	r2, [pc, #572]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007940:	430b      	orrs	r3, r1
 8007942:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794c:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007950:	643b      	str	r3, [r7, #64]	@ 0x40
 8007952:	2300      	movs	r3, #0
 8007954:	647b      	str	r3, [r7, #68]	@ 0x44
 8007956:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800795a:	460b      	mov	r3, r1
 800795c:	4313      	orrs	r3, r2
 800795e:	d00e      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007960:	4b86      	ldr	r3, [pc, #536]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007962:	691b      	ldr	r3, [r3, #16]
 8007964:	4a85      	ldr	r2, [pc, #532]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007966:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800796a:	6113      	str	r3, [r2, #16]
 800796c:	4b83      	ldr	r3, [pc, #524]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800796e:	6919      	ldr	r1, [r3, #16]
 8007970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007978:	4a80      	ldr	r2, [pc, #512]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800797a:	430b      	orrs	r3, r1
 800797c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800797e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007986:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800798a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800798c:	2300      	movs	r3, #0
 800798e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007990:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007994:	460b      	mov	r3, r1
 8007996:	4313      	orrs	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800799a:	4b78      	ldr	r3, [pc, #480]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800799c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800799e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a8:	4a74      	ldr	r2, [pc, #464]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079aa:	430b      	orrs	r3, r1
 80079ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80079ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80079ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80079bc:	2300      	movs	r3, #0
 80079be:	637b      	str	r3, [r7, #52]	@ 0x34
 80079c0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079c4:	460b      	mov	r3, r1
 80079c6:	4313      	orrs	r3, r2
 80079c8:	d00a      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80079ca:	4b6c      	ldr	r3, [pc, #432]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ce:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079da:	4a68      	ldr	r2, [pc, #416]	@ (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80079dc:	430b      	orrs	r3, r1
 80079de:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80079e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e8:	2100      	movs	r1, #0
 80079ea:	62b9      	str	r1, [r7, #40]	@ 0x28
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079f2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80079f6:	460b      	mov	r3, r1
 80079f8:	4313      	orrs	r3, r2
 80079fa:	d011      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a00:	3308      	adds	r3, #8
 8007a02:	2100      	movs	r1, #0
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f8bb 	bl	8007b80 <RCCEx_PLL2_Config>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	2100      	movs	r1, #0
 8007a2a:	6239      	str	r1, [r7, #32]
 8007a2c:	f003 0302 	and.w	r3, r3, #2
 8007a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a32:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007a36:	460b      	mov	r3, r1
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	d011      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a40:	3308      	adds	r3, #8
 8007a42:	2101      	movs	r1, #1
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 f89b 	bl	8007b80 <RCCEx_PLL2_Config>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007a60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	2100      	movs	r1, #0
 8007a6a:	61b9      	str	r1, [r7, #24]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	61fb      	str	r3, [r7, #28]
 8007a72:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a76:	460b      	mov	r3, r1
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	d011      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	3308      	adds	r3, #8
 8007a82:	2102      	movs	r1, #2
 8007a84:	4618      	mov	r0, r3
 8007a86:	f000 f87b 	bl	8007b80 <RCCEx_PLL2_Config>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007a90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007a9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007aa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	6139      	str	r1, [r7, #16]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	617b      	str	r3, [r7, #20]
 8007ab2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	4313      	orrs	r3, r2
 8007aba:	d011      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac0:	3328      	adds	r3, #40	@ 0x28
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f000 f90d 	bl	8007ce4 <RCCEx_PLL3_Config>
 8007aca:	4603      	mov	r3, r0
 8007acc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8007ad0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007adc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	f003 0310 	and.w	r3, r3, #16
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007af6:	460b      	mov	r3, r1
 8007af8:	4313      	orrs	r3, r2
 8007afa:	d011      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	3328      	adds	r3, #40	@ 0x28
 8007b02:	2101      	movs	r1, #1
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f8ed 	bl	8007ce4 <RCCEx_PLL3_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d003      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6039      	str	r1, [r7, #0]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	607b      	str	r3, [r7, #4]
 8007b32:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007b36:	460b      	mov	r3, r1
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	d011      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b40:	3328      	adds	r3, #40	@ 0x28
 8007b42:	2102      	movs	r1, #2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 f8cd 	bl	8007ce4 <RCCEx_PLL3_Config>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8007b50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8007b5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8007b60:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e000      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8007b74:	46bd      	mov	sp, r7
 8007b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b7a:	bf00      	nop
 8007b7c:	58024400 	.word	0x58024400

08007b80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007b8e:	4b53      	ldr	r3, [pc, #332]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d101      	bne.n	8007b9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e099      	b.n	8007cd2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007b9e:	4b4f      	ldr	r3, [pc, #316]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a4e      	ldr	r2, [pc, #312]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007baa:	f7f9 fee3 	bl	8001974 <HAL_GetTick>
 8007bae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bb0:	e008      	b.n	8007bc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bb2:	f7f9 fedf 	bl	8001974 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e086      	b.n	8007cd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bc4:	4b45      	ldr	r3, [pc, #276]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1f0      	bne.n	8007bb2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007bd0:	4b42      	ldr	r3, [pc, #264]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bd4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	031b      	lsls	r3, r3, #12
 8007bde:	493f      	ldr	r1, [pc, #252]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	628b      	str	r3, [r1, #40]	@ 0x28
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	3b01      	subs	r3, #1
 8007bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	025b      	lsls	r3, r3, #9
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	041b      	lsls	r3, r3, #16
 8007c02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007c14:	4931      	ldr	r1, [pc, #196]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007c1a:	4b30      	ldr	r3, [pc, #192]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c1e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	492d      	ldr	r1, [pc, #180]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007c2c:	4b2b      	ldr	r3, [pc, #172]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	f023 0220 	bic.w	r2, r3, #32
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	4928      	ldr	r1, [pc, #160]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007c3e:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c42:	4a26      	ldr	r2, [pc, #152]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c44:	f023 0310 	bic.w	r3, r3, #16
 8007c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007c4a:	4b24      	ldr	r3, [pc, #144]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c4e:	4b24      	ldr	r3, [pc, #144]	@ (8007ce0 <RCCEx_PLL2_Config+0x160>)
 8007c50:	4013      	ands	r3, r2
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	69d2      	ldr	r2, [r2, #28]
 8007c56:	00d2      	lsls	r2, r2, #3
 8007c58:	4920      	ldr	r1, [pc, #128]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c62:	4a1e      	ldr	r2, [pc, #120]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c64:	f043 0310 	orr.w	r3, r3, #16
 8007c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007c70:	4b1a      	ldr	r3, [pc, #104]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	4a19      	ldr	r2, [pc, #100]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c7c:	e00f      	b.n	8007c9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d106      	bne.n	8007c92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007c84:	4b15      	ldr	r3, [pc, #84]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	4a14      	ldr	r2, [pc, #80]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007c90:	e005      	b.n	8007c9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007c92:	4b12      	ldr	r3, [pc, #72]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c96:	4a11      	ldr	r2, [pc, #68]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007c98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007c9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a0e      	ldr	r2, [pc, #56]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007ca4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007caa:	f7f9 fe63 	bl	8001974 <HAL_GetTick>
 8007cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cb0:	e008      	b.n	8007cc4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007cb2:	f7f9 fe5f 	bl	8001974 <HAL_GetTick>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	2b02      	cmp	r3, #2
 8007cbe:	d901      	bls.n	8007cc4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	e006      	b.n	8007cd2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007cc4:	4b05      	ldr	r3, [pc, #20]	@ (8007cdc <RCCEx_PLL2_Config+0x15c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d0f0      	beq.n	8007cb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	58024400 	.word	0x58024400
 8007ce0:	ffff0007 	.word	0xffff0007

08007ce4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007cf2:	4b53      	ldr	r3, [pc, #332]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d101      	bne.n	8007d02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e099      	b.n	8007e36 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007d02:	4b4f      	ldr	r3, [pc, #316]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a4e      	ldr	r2, [pc, #312]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d0e:	f7f9 fe31 	bl	8001974 <HAL_GetTick>
 8007d12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d14:	e008      	b.n	8007d28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d16:	f7f9 fe2d 	bl	8001974 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b02      	cmp	r3, #2
 8007d22:	d901      	bls.n	8007d28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e086      	b.n	8007e36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d28:	4b45      	ldr	r3, [pc, #276]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1f0      	bne.n	8007d16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007d34:	4b42      	ldr	r3, [pc, #264]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d38:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	051b      	lsls	r3, r3, #20
 8007d42:	493f      	ldr	r1, [pc, #252]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d44:	4313      	orrs	r3, r2
 8007d46:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	025b      	lsls	r3, r3, #9
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	041b      	lsls	r3, r3, #16
 8007d66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007d6a:	431a      	orrs	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	061b      	lsls	r3, r3, #24
 8007d74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007d78:	4931      	ldr	r1, [pc, #196]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007d7e:	4b30      	ldr	r3, [pc, #192]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	695b      	ldr	r3, [r3, #20]
 8007d8a:	492d      	ldr	r1, [pc, #180]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007d90:	4b2b      	ldr	r3, [pc, #172]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d94:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	4928      	ldr	r1, [pc, #160]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007da2:	4b27      	ldr	r3, [pc, #156]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	4a26      	ldr	r2, [pc, #152]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007da8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007dae:	4b24      	ldr	r3, [pc, #144]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007db0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007db2:	4b24      	ldr	r3, [pc, #144]	@ (8007e44 <RCCEx_PLL3_Config+0x160>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	69d2      	ldr	r2, [r2, #28]
 8007dba:	00d2      	lsls	r2, r2, #3
 8007dbc:	4920      	ldr	r1, [pc, #128]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d106      	bne.n	8007de2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	4a19      	ldr	r2, [pc, #100]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007dde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007de0:	e00f      	b.n	8007e02 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d106      	bne.n	8007df6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007de8:	4b15      	ldr	r3, [pc, #84]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dec:	4a14      	ldr	r2, [pc, #80]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007df4:	e005      	b.n	8007e02 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007df6:	4b12      	ldr	r3, [pc, #72]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	4a11      	ldr	r2, [pc, #68]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007e02:	4b0f      	ldr	r3, [pc, #60]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a0e      	ldr	r2, [pc, #56]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e0e:	f7f9 fdb1 	bl	8001974 <HAL_GetTick>
 8007e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e14:	e008      	b.n	8007e28 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e16:	f7f9 fdad 	bl	8001974 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e006      	b.n	8007e36 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e28:	4b05      	ldr	r3, [pc, #20]	@ (8007e40 <RCCEx_PLL3_Config+0x15c>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f0      	beq.n	8007e16 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3710      	adds	r7, #16
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	58024400 	.word	0x58024400
 8007e44:	ffff0007 	.word	0xffff0007

08007e48 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d101      	bne.n	8007e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e10f      	b.n	800807a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a87      	ldr	r2, [pc, #540]	@ (8008084 <HAL_SPI_Init+0x23c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d00f      	beq.n	8007e8a <HAL_SPI_Init+0x42>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a86      	ldr	r2, [pc, #536]	@ (8008088 <HAL_SPI_Init+0x240>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00a      	beq.n	8007e8a <HAL_SPI_Init+0x42>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a84      	ldr	r2, [pc, #528]	@ (800808c <HAL_SPI_Init+0x244>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d005      	beq.n	8007e8a <HAL_SPI_Init+0x42>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	68db      	ldr	r3, [r3, #12]
 8007e82:	2b0f      	cmp	r3, #15
 8007e84:	d901      	bls.n	8007e8a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0f7      	b.n	800807a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 fdd6 	bl	8008a3c <SPI_GetPacketSize>
 8007e90:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a7b      	ldr	r2, [pc, #492]	@ (8008084 <HAL_SPI_Init+0x23c>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d00c      	beq.n	8007eb6 <HAL_SPI_Init+0x6e>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a79      	ldr	r2, [pc, #484]	@ (8008088 <HAL_SPI_Init+0x240>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d007      	beq.n	8007eb6 <HAL_SPI_Init+0x6e>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a78      	ldr	r2, [pc, #480]	@ (800808c <HAL_SPI_Init+0x244>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d002      	beq.n	8007eb6 <HAL_SPI_Init+0x6e>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2b08      	cmp	r3, #8
 8007eb4:	d811      	bhi.n	8007eda <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007eba:	4a72      	ldr	r2, [pc, #456]	@ (8008084 <HAL_SPI_Init+0x23c>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d009      	beq.n	8007ed4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a70      	ldr	r2, [pc, #448]	@ (8008088 <HAL_SPI_Init+0x240>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d004      	beq.n	8007ed4 <HAL_SPI_Init+0x8c>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a6f      	ldr	r2, [pc, #444]	@ (800808c <HAL_SPI_Init+0x244>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d104      	bne.n	8007ede <HAL_SPI_Init+0x96>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2b10      	cmp	r3, #16
 8007ed8:	d901      	bls.n	8007ede <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0cd      	b.n	800807a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d106      	bne.n	8007ef8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2200      	movs	r2, #0
 8007eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7f9 f87a 	bl	8000fec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2202      	movs	r2, #2
 8007efc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f022 0201 	bic.w	r2, r2, #1
 8007f0e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007f1a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007f24:	d119      	bne.n	8007f5a <HAL_SPI_Init+0x112>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f2e:	d103      	bne.n	8007f38 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d008      	beq.n	8007f4a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10c      	bne.n	8007f5a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f48:	d107      	bne.n	8007f5a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007f58:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00f      	beq.n	8007f86 <HAL_SPI_Init+0x13e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	2b06      	cmp	r3, #6
 8007f6c:	d90b      	bls.n	8007f86 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	430a      	orrs	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]
 8007f84:	e007      	b.n	8007f96 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681a      	ldr	r2, [r3, #0]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007f94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	69da      	ldr	r2, [r3, #28]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f9e:	431a      	orrs	r2, r3
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	431a      	orrs	r2, r3
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fa8:	ea42 0103 	orr.w	r1, r2, r3
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68da      	ldr	r2, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	695b      	ldr	r3, [r3, #20]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ff6:	ea42 0103 	orr.w	r1, r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d113      	bne.n	8008036 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008020:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008034:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0201 	bic.w	r2, r2, #1
 8008044:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
 800804a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d00a      	beq.n	8008068 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	430a      	orrs	r2, r1
 8008066:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40013000 	.word	0x40013000
 8008088:	40003800 	.word	0x40003800
 800808c:	40003c00 	.word	0x40003c00

08008090 <HAL_SPI_TransmitReceive_IT>:
  * @param  Size   : amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                             uint16_t Size)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
 800809c:	807b      	strh	r3, [r7, #2]
  uint32_t tmp_TxXferCount;
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3320      	adds	r3, #32
 80080a4:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d001      	beq.n	80080b6 <HAL_SPI_TransmitReceive_IT+0x26>
  {
    return HAL_BUSY;
 80080b2:	2302      	movs	r3, #2
 80080b4:	e0e9      	b.n	800828a <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_SPI_TransmitReceive_IT+0x38>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d002      	beq.n	80080c8 <HAL_SPI_TransmitReceive_IT+0x38>
 80080c2:	887b      	ldrh	r3, [r7, #2]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <HAL_SPI_TransmitReceive_IT+0x3c>
  {
    return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e0de      	b.n	800828a <HAL_SPI_TransmitReceive_IT+0x1fa>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d101      	bne.n	80080da <HAL_SPI_TransmitReceive_IT+0x4a>
 80080d6:	2302      	movs	r3, #2
 80080d8:	e0d7      	b.n	800828a <HAL_SPI_TransmitReceive_IT+0x1fa>
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2205      	movs	r2, #5
 80080e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	887a      	ldrh	r2, [r7, #2]
 80080fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	887a      	ldrh	r2, [r7, #2]
 8008104:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = Size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	887a      	ldrh	r2, [r7, #2]
 8008112:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = Size;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	887a      	ldrh	r2, [r7, #2]
 800811a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  tmp_TxXferCount   = hspi->TxXferCount;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008124:	b29b      	uxth	r3, r3
 8008126:	617b      	str	r3, [r7, #20]
  hspi->Reload.pTxBuffPtr  = NULL;
  hspi->Reload.TxXferSize  = NULL;
#endif /* USE_SPI_RELOAD_TRANSFER */

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	2b0f      	cmp	r3, #15
 800812e:	d906      	bls.n	800813e <HAL_SPI_TransmitReceive_IT+0xae>
  {
    hspi->TxISR     = SPI_TxISR_32BIT;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	4a59      	ldr	r2, [pc, #356]	@ (8008298 <HAL_SPI_TransmitReceive_IT+0x208>)
 8008134:	675a      	str	r2, [r3, #116]	@ 0x74
    hspi->RxISR     = SPI_RxISR_32BIT;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	4a58      	ldr	r2, [pc, #352]	@ (800829c <HAL_SPI_TransmitReceive_IT+0x20c>)
 800813a:	671a      	str	r2, [r3, #112]	@ 0x70
 800813c:	e010      	b.n	8008160 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	2b07      	cmp	r3, #7
 8008144:	d906      	bls.n	8008154 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_RxISR_16BIT;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a55      	ldr	r2, [pc, #340]	@ (80082a0 <HAL_SPI_TransmitReceive_IT+0x210>)
 800814a:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_16BIT;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	4a55      	ldr	r2, [pc, #340]	@ (80082a4 <HAL_SPI_TransmitReceive_IT+0x214>)
 8008150:	675a      	str	r2, [r3, #116]	@ 0x74
 8008152:	e005      	b.n	8008160 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_RxISR_8BIT;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	4a54      	ldr	r2, [pc, #336]	@ (80082a8 <HAL_SPI_TransmitReceive_IT+0x218>)
 8008158:	671a      	str	r2, [r3, #112]	@ 0x70
    hspi->TxISR     = SPI_TxISR_8BIT;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	4a53      	ldr	r2, [pc, #332]	@ (80082ac <HAL_SPI_TransmitReceive_IT+0x21c>)
 800815e:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800816e:	60da      	str	r2, [r3, #12]

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	4b4e      	ldr	r3, [pc, #312]	@ (80082b0 <HAL_SPI_TransmitReceive_IT+0x220>)
 8008178:	4013      	ands	r3, r2
 800817a:	8879      	ldrh	r1, [r7, #2]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	6812      	ldr	r2, [r2, #0]
 8008180:	430b      	orrs	r3, r1
 8008182:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f042 0201 	orr.w	r2, r2, #1
 8008192:	601a      	str	r2, [r3, #0]

  /* Fill in the TxFIFO */
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8008194:	e054      	b.n	8008240 <HAL_SPI_TransmitReceive_IT+0x1b0>
  {
    /* Transmit data in 32 Bit mode */
    if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	2b0f      	cmp	r3, #15
 800819c:	d919      	bls.n	80081d2 <HAL_SPI_TransmitReceive_IT+0x142>
    {
      *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6812      	ldr	r2, [r2, #0]
 80081a8:	621a      	str	r2, [r3, #32]
      hspi->pTxBuffPtr += sizeof(uint32_t);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	3b01      	subs	r3, #1
 80081be:	b29a      	uxth	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e036      	b.n	8008240 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 16 Bit mode */
    else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	68db      	ldr	r3, [r3, #12]
 80081d6:	2b07      	cmp	r3, #7
 80081d8:	d918      	bls.n	800820c <HAL_SPI_TransmitReceive_IT+0x17c>
    {
#if defined (__GNUC__)
      *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081de:	881a      	ldrh	r2, [r3, #0]
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	801a      	strh	r2, [r3, #0]
#else
      *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081e8:	1c9a      	adds	r2, r3, #2
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b29a      	uxth	r2, r3
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008206:	b29b      	uxth	r3, r3
 8008208:	617b      	str	r3, [r7, #20]
 800820a:	e019      	b.n	8008240 <HAL_SPI_TransmitReceive_IT+0x1b0>
    }
    /* Transmit data in 8 Bit mode */
    else
    {
      *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	3320      	adds	r3, #32
 8008216:	7812      	ldrb	r2, [r2, #0]
 8008218:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	65da      	str	r2, [r3, #92]	@ 0x5c
      hspi->TxXferCount--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800822a:	b29b      	uxth	r3, r3
 800822c:	3b01      	subs	r3, #1
 800822e:	b29a      	uxth	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      tmp_TxXferCount = hspi->TxXferCount;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800823c:	b29b      	uxth	r3, r3
 800823e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (tmp_TxXferCount != 0UL))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	f003 0302 	and.w	r3, r3, #2
 800824a:	2b02      	cmp	r3, #2
 800824c:	d102      	bne.n	8008254 <HAL_SPI_TransmitReceive_IT+0x1c4>
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d1a0      	bne.n	8008196 <HAL_SPI_TransmitReceive_IT+0x106>
    }
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Enable EOT, DXP, UDR, OVR, FRE, MODF and TSERF interrupts */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR |
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6919      	ldr	r1, [r3, #16]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	f240 736c 	movw	r3, #1900	@ 0x76c
 800826a:	430b      	orrs	r3, r1
 800826c:	6113      	str	r3, [r2, #16]
                             SPI_IT_FRE | SPI_IT_MODF | SPI_IT_TSERF));

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008276:	d107      	bne.n	8008288 <HAL_SPI_TransmitReceive_IT+0x1f8>
  {
    /* Start Master transfer */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008286:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	371c      	adds	r7, #28
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	080088a3 	.word	0x080088a3
 800829c:	08008793 	.word	0x08008793
 80082a0:	08008733 	.word	0x08008733
 80082a4:	08008845 	.word	0x08008845
 80082a8:	080086d5 	.word	0x080086d5
 80082ac:	080087eb 	.word	0x080087eb
 80082b0:	ffff0000 	.word	0xffff0000

080082b4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	@ 0x28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	695b      	ldr	r3, [r3, #20]
 80082ca:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 80082cc:	6a3a      	ldr	r2, [r7, #32]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	4013      	ands	r3, r2
 80082d2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 80082dc:	2300      	movs	r3, #0
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80082e6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3330      	adds	r3, #48	@ 0x30
 80082ee:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80082f0:	69fb      	ldr	r3, [r7, #28]
 80082f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d010      	beq.n	800831c <HAL_SPI_IRQHandler+0x68>
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	f003 0308 	and.w	r3, r3, #8
 8008300:	2b00      	cmp	r3, #0
 8008302:	d00b      	beq.n	800831c <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008312:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 f9b9 	bl	800868c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800831a:	e192      	b.n	8008642 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008322:	2b00      	cmp	r3, #0
 8008324:	d113      	bne.n	800834e <HAL_SPI_IRQHandler+0x9a>
 8008326:	69bb      	ldr	r3, [r7, #24]
 8008328:	f003 0320 	and.w	r3, r3, #32
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10e      	bne.n	800834e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008336:	2b00      	cmp	r3, #0
 8008338:	d009      	beq.n	800834e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	4798      	blx	r3
    handled = 1UL;
 800834a:	2301      	movs	r3, #1
 800834c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10f      	bne.n	8008378 <HAL_SPI_IRQHandler+0xc4>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d00a      	beq.n	8008378 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008362:	69bb      	ldr	r3, [r7, #24]
 8008364:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008368:	2b00      	cmp	r3, #0
 800836a:	d105      	bne.n	8008378 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
    handled = 1UL;
 8008374:	2301      	movs	r3, #1
 8008376:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	f003 0320 	and.w	r3, r3, #32
 800837e:	2b00      	cmp	r3, #0
 8008380:	d10f      	bne.n	80083a2 <HAL_SPI_IRQHandler+0xee>
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d00a      	beq.n	80083a2 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008392:	2b00      	cmp	r3, #0
 8008394:	d105      	bne.n	80083a2 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
    handled = 1UL;
 800839e:	2301      	movs	r3, #1
 80083a0:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 8147 	bne.w	8008638 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	f003 0308 	and.w	r3, r3, #8
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 808b 	beq.w	80084cc <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f042 0208 	orr.w	r2, r2, #8
 80083c4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	699a      	ldr	r2, [r3, #24]
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f042 0210 	orr.w	r2, r2, #16
 80083d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	699a      	ldr	r2, [r3, #24]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083e4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0208 	bic.w	r2, r2, #8
 80083f4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d13d      	bne.n	8008480 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008404:	e036      	b.n	8008474 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	2b0f      	cmp	r3, #15
 800840c:	d90b      	bls.n	8008426 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008416:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008418:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800841e:	1d1a      	adds	r2, r3, #4
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	665a      	str	r2, [r3, #100]	@ 0x64
 8008424:	e01d      	b.n	8008462 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	68db      	ldr	r3, [r3, #12]
 800842a:	2b07      	cmp	r3, #7
 800842c:	d90b      	bls.n	8008446 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	8812      	ldrh	r2, [r2, #0]
 8008436:	b292      	uxth	r2, r2
 8008438:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800843e:	1c9a      	adds	r2, r3, #2
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	665a      	str	r2, [r3, #100]	@ 0x64
 8008444:	e00d      	b.n	8008462 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008452:	7812      	ldrb	r2, [r2, #0]
 8008454:	b2d2      	uxtb	r2, r2
 8008456:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008468:	b29b      	uxth	r3, r3
 800846a:	3b01      	subs	r3, #1
 800846c:	b29a      	uxth	r2, r3
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800847a:	b29b      	uxth	r3, r3
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1c2      	bne.n	8008406 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fa3b 	bl	80088fc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008494:	2b00      	cmp	r3, #0
 8008496:	d003      	beq.n	80084a0 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f8ed 	bl	8008678 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800849e:	e0d0      	b.n	8008642 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80084a0:	7cfb      	ldrb	r3, [r7, #19]
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	d103      	bne.n	80084ae <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f7f8 fb24 	bl	8000af4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80084ac:	e0c6      	b.n	800863c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80084ae:	7cfb      	ldrb	r3, [r7, #19]
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d103      	bne.n	80084bc <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f000 f8d5 	bl	8008664 <HAL_SPI_RxCpltCallback>
    return;
 80084ba:	e0bf      	b.n	800863c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80084bc:	7cfb      	ldrb	r3, [r7, #19]
 80084be:	2b03      	cmp	r3, #3
 80084c0:	f040 80bc 	bne.w	800863c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f8c3 	bl	8008650 <HAL_SPI_TxCpltCallback>
    return;
 80084ca:	e0b7      	b.n	800863c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 80b5 	beq.w	8008642 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00f      	beq.n	8008502 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084e8:	f043 0204 	orr.w	r2, r3, #4
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699a      	ldr	r2, [r3, #24]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008500:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00f      	beq.n	800852c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008512:	f043 0201 	orr.w	r2, r3, #1
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	699a      	ldr	r2, [r3, #24]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800852a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00f      	beq.n	8008556 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800853c:	f043 0208 	orr.w	r2, r3, #8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	699a      	ldr	r2, [r3, #24]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008554:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00f      	beq.n	8008580 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008566:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	699a      	ldr	r2, [r3, #24]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0220 	orr.w	r2, r2, #32
 800857e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008586:	2b00      	cmp	r3, #0
 8008588:	d05a      	beq.n	8008640 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f022 0201 	bic.w	r2, r2, #1
 8008598:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	6919      	ldr	r1, [r3, #16]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	4b28      	ldr	r3, [pc, #160]	@ (8008648 <HAL_SPI_IRQHandler+0x394>)
 80085a6:	400b      	ands	r3, r1
 80085a8:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80085b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80085b4:	d138      	bne.n	8008628 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689a      	ldr	r2, [r3, #8]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80085c4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d013      	beq.n	80085f6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085d2:	4a1e      	ldr	r2, [pc, #120]	@ (800864c <HAL_SPI_IRQHandler+0x398>)
 80085d4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f9 fe9a 	bl	8002314 <HAL_DMA_Abort_IT>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d007      	beq.n	80085f6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80085ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d020      	beq.n	8008640 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008602:	4a12      	ldr	r2, [pc, #72]	@ (800864c <HAL_SPI_IRQHandler+0x398>)
 8008604:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800860a:	4618      	mov	r0, r3
 800860c:	f7f9 fe82 	bl	8002314 <HAL_DMA_Abort_IT>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d014      	beq.n	8008640 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800861c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008626:	e00b      	b.n	8008640 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2201      	movs	r2, #1
 800862c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f821 	bl	8008678 <HAL_SPI_ErrorCallback>
    return;
 8008636:	e003      	b.n	8008640 <HAL_SPI_IRQHandler+0x38c>
    return;
 8008638:	bf00      	nop
 800863a:	e002      	b.n	8008642 <HAL_SPI_IRQHandler+0x38e>
    return;
 800863c:	bf00      	nop
 800863e:	e000      	b.n	8008642 <HAL_SPI_IRQHandler+0x38e>
    return;
 8008640:	bf00      	nop
  }
}
 8008642:	3728      	adds	r7, #40	@ 0x28
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	fffffc94 	.word	0xfffffc94
 800864c:	080086a1 	.word	0x080086a1

08008650 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2200      	movs	r2, #0
 80086ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff ffd6 	bl	8008678 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80086cc:	bf00      	nop
 80086ce:	3710      	adds	r7, #16
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <SPI_RxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b083      	sub	sp, #12
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Receive data in 8 Bit mode */
  *((uint8_t *)hspi->pRxBuffPtr) = (*(__IO uint8_t *)&hspi->Instance->RXDR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086e8:	7812      	ldrb	r2, [r2, #0]
 80086ea:	b2d2      	uxtb	r2, r2
 80086ec:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint8_t);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086f2:	1c5a      	adds	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80086fe:	b29b      	uxth	r3, r3
 8008700:	3b01      	subs	r3, #1
 8008702:	b29a      	uxth	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d107      	bne.n	8008726 <SPI_RxISR_8BIT+0x52>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	691a      	ldr	r2, [r3, #16]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008726:	bf00      	nop
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <SPI_RxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3330      	adds	r3, #48	@ 0x30
 8008740:	60fb      	str	r3, [r7, #12]

  *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	8812      	ldrh	r2, [r2, #0]
 800874a:	b292      	uxth	r2, r2
 800874c:	801a      	strh	r2, [r3, #0]
#else
  *((uint16_t *)hspi->pRxBuffPtr) = (*(__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008752:	1c9a      	adds	r2, r3, #2
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800875e:	b29b      	uxth	r3, r3
 8008760:	3b01      	subs	r3, #1
 8008762:	b29a      	uxth	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d107      	bne.n	8008786 <SPI_RxISR_16BIT+0x54>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	691a      	ldr	r2, [r3, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f022 0201 	bic.w	r2, r2, #1
 8008784:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008786:	bf00      	nop
 8008788:	3714      	adds	r7, #20
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <SPI_RxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  /* Receive data in 32 Bit mode */
  *((uint32_t *)hspi->pRxBuffPtr) = (*(__IO uint32_t *)&hspi->Instance->RXDR);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80087a4:	601a      	str	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint32_t);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80087aa:	1d1a      	adds	r2, r3, #4
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount--;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	3b01      	subs	r3, #1
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Disable IT if no more data excepted */
  if (hspi->RxXferCount == 0UL)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d107      	bne.n	80087de <SPI_RxISR_32BIT+0x4c>
      /* Disable RXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
    }
#else
    /* Disable RXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXP);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f022 0201 	bic.w	r2, r2, #1
 80087dc:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <SPI_TxISR_8BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(SPI_HandleTypeDef *hspi)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b083      	sub	sp, #12
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 8 Bit mode */
  *(__IO uint8_t *)&hspi->Instance->TXDR = *((const uint8_t *)hspi->pTxBuffPtr);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3320      	adds	r3, #32
 80087fc:	7812      	ldrb	r2, [r2, #0]
 80087fe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr += sizeof(uint8_t);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008810:	b29b      	uxth	r3, r3
 8008812:	3b01      	subs	r3, #1
 8008814:	b29a      	uxth	r2, r3
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008822:	b29b      	uxth	r3, r3
 8008824:	2b00      	cmp	r3, #0
 8008826:	d107      	bne.n	8008838 <SPI_TxISR_8BIT+0x4e>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	691a      	ldr	r2, [r3, #16]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f022 0202 	bic.w	r2, r2, #2
 8008836:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008838:	bf00      	nop
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <SPI_TxISR_16BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(SPI_HandleTypeDef *hspi)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	3320      	adds	r3, #32
 8008852:	60fb      	str	r3, [r7, #12]

  *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008858:	881a      	ldrh	r2, [r3, #0]
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	801a      	strh	r2, [r3, #0]
#else
  *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008862:	1c9a      	adds	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800886e:	b29b      	uxth	r3, r3
 8008870:	3b01      	subs	r3, #1
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d107      	bne.n	8008896 <SPI_TxISR_16BIT+0x52>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f022 0202 	bic.w	r2, r2, #2
 8008894:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <SPI_TxISR_32BIT>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_32BIT(SPI_HandleTypeDef *hspi)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 32 Bit mode */
  *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	6812      	ldr	r2, [r2, #0]
 80088b4:	621a      	str	r2, [r3, #32]
  hspi->pTxBuffPtr += sizeof(uint32_t);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount--;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	3b01      	subs	r3, #1
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Disable IT if no more data excepted */
  if (hspi->TxXferCount == 0UL)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d107      	bne.n	80088ee <SPI_TxISR_32BIT+0x4c>
      /* Disable TXP interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
    }
#else
    /* Disable TXP interrupts */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXP);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0202 	bic.w	r2, r2, #2
 80088ec:	611a      	str	r2, [r3, #16]
#endif /* USE_SPI_RELOAD_TRANSFER */
  }
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
	...

080088fc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b085      	sub	sp, #20
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699a      	ldr	r2, [r3, #24]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0208 	orr.w	r2, r2, #8
 800891a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0210 	orr.w	r2, r2, #16
 800892a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0201 	bic.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6919      	ldr	r1, [r3, #16]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	4b3c      	ldr	r3, [pc, #240]	@ (8008a38 <SPI_CloseTransfer+0x13c>)
 8008948:	400b      	ands	r3, r1
 800894a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689a      	ldr	r2, [r3, #8]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800895a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008962:	b2db      	uxtb	r3, r3
 8008964:	2b04      	cmp	r3, #4
 8008966:	d014      	beq.n	8008992 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f003 0320 	and.w	r3, r3, #32
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00f      	beq.n	8008992 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008978:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	699a      	ldr	r2, [r3, #24]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f042 0220 	orr.w	r2, r2, #32
 8008990:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b03      	cmp	r3, #3
 800899c:	d014      	beq.n	80089c8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00f      	beq.n	80089c8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089ae:	f043 0204 	orr.w	r2, r3, #4
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089c6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00f      	beq.n	80089f2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80089d8:	f043 0201 	orr.w	r2, r3, #1
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	699a      	ldr	r2, [r3, #24]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80089f0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00f      	beq.n	8008a1c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008a02:	f043 0208 	orr.w	r2, r3, #8
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	699a      	ldr	r2, [r3, #24]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008a1a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8008a2c:	bf00      	nop
 8008a2e:	3714      	adds	r7, #20
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr
 8008a38:	fffffc90 	.word	0xfffffc90

08008a3c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a48:	095b      	lsrs	r3, r3, #5
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	3301      	adds	r3, #1
 8008a54:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3307      	adds	r3, #7
 8008a5a:	08db      	lsrs	r3, r3, #3
 8008a5c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b082      	sub	sp, #8
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d101      	bne.n	8008a84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008a80:	2301      	movs	r3, #1
 8008a82:	e049      	b.n	8008b18 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f7f8 fb81 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2202      	movs	r2, #2
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	3304      	adds	r3, #4
 8008aae:	4619      	mov	r1, r3
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f000 fdb1 	bl	8009618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2201      	movs	r2, #1
 8008b02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2201      	movs	r2, #1
 8008b12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d001      	beq.n	8008b38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e056      	b.n	8008be6 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2202      	movs	r2, #2
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a2b      	ldr	r2, [pc, #172]	@ (8008bf4 <HAL_TIM_Base_Start+0xd4>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d02c      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b52:	d027      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a27      	ldr	r2, [pc, #156]	@ (8008bf8 <HAL_TIM_Base_Start+0xd8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d022      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a26      	ldr	r2, [pc, #152]	@ (8008bfc <HAL_TIM_Base_Start+0xdc>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d01d      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a24      	ldr	r2, [pc, #144]	@ (8008c00 <HAL_TIM_Base_Start+0xe0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d018      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a23      	ldr	r2, [pc, #140]	@ (8008c04 <HAL_TIM_Base_Start+0xe4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d013      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a21      	ldr	r2, [pc, #132]	@ (8008c08 <HAL_TIM_Base_Start+0xe8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00e      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a20      	ldr	r2, [pc, #128]	@ (8008c0c <HAL_TIM_Base_Start+0xec>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d009      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a1e      	ldr	r2, [pc, #120]	@ (8008c10 <HAL_TIM_Base_Start+0xf0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d004      	beq.n	8008ba4 <HAL_TIM_Base_Start+0x84>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <HAL_TIM_Base_Start+0xf4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d115      	bne.n	8008bd0 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689a      	ldr	r2, [r3, #8]
 8008baa:	4b1b      	ldr	r3, [pc, #108]	@ (8008c18 <HAL_TIM_Base_Start+0xf8>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2b06      	cmp	r3, #6
 8008bb4:	d015      	beq.n	8008be2 <HAL_TIM_Base_Start+0xc2>
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bbc:	d011      	beq.n	8008be2 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	681a      	ldr	r2, [r3, #0]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f042 0201 	orr.w	r2, r2, #1
 8008bcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bce:	e008      	b.n	8008be2 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]
 8008be0:	e000      	b.n	8008be4 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40000400 	.word	0x40000400
 8008bfc:	40000800 	.word	0x40000800
 8008c00:	40000c00 	.word	0x40000c00
 8008c04:	40010400 	.word	0x40010400
 8008c08:	40001800 	.word	0x40001800
 8008c0c:	40014000 	.word	0x40014000
 8008c10:	4000e000 	.word	0x4000e000
 8008c14:	4000e400 	.word	0x4000e400
 8008c18:	00010007 	.word	0x00010007

08008c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d001      	beq.n	8008c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e05e      	b.n	8008cf2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	68da      	ldr	r2, [r3, #12]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f042 0201 	orr.w	r2, r2, #1
 8008c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a2b      	ldr	r2, [pc, #172]	@ (8008d00 <HAL_TIM_Base_Start_IT+0xe4>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d02c      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5e:	d027      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a27      	ldr	r2, [pc, #156]	@ (8008d04 <HAL_TIM_Base_Start_IT+0xe8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d022      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a26      	ldr	r2, [pc, #152]	@ (8008d08 <HAL_TIM_Base_Start_IT+0xec>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d01d      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a24      	ldr	r2, [pc, #144]	@ (8008d0c <HAL_TIM_Base_Start_IT+0xf0>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d018      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a23      	ldr	r2, [pc, #140]	@ (8008d10 <HAL_TIM_Base_Start_IT+0xf4>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d013      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a21      	ldr	r2, [pc, #132]	@ (8008d14 <HAL_TIM_Base_Start_IT+0xf8>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d00e      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a20      	ldr	r2, [pc, #128]	@ (8008d18 <HAL_TIM_Base_Start_IT+0xfc>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d009      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8008d1c <HAL_TIM_Base_Start_IT+0x100>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d004      	beq.n	8008cb0 <HAL_TIM_Base_Start_IT+0x94>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a1d      	ldr	r2, [pc, #116]	@ (8008d20 <HAL_TIM_Base_Start_IT+0x104>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d115      	bne.n	8008cdc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689a      	ldr	r2, [r3, #8]
 8008cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8008d24 <HAL_TIM_Base_Start_IT+0x108>)
 8008cb8:	4013      	ands	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b06      	cmp	r3, #6
 8008cc0:	d015      	beq.n	8008cee <HAL_TIM_Base_Start_IT+0xd2>
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cc8:	d011      	beq.n	8008cee <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f042 0201 	orr.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cda:	e008      	b.n	8008cee <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f042 0201 	orr.w	r2, r2, #1
 8008cea:	601a      	str	r2, [r3, #0]
 8008cec:	e000      	b.n	8008cf0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40000400 	.word	0x40000400
 8008d08:	40000800 	.word	0x40000800
 8008d0c:	40000c00 	.word	0x40000c00
 8008d10:	40010400 	.word	0x40010400
 8008d14:	40001800 	.word	0x40001800
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	4000e000 	.word	0x4000e000
 8008d20:	4000e400 	.word	0x4000e400
 8008d24:	00010007 	.word	0x00010007

08008d28 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b082      	sub	sp, #8
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e049      	b.n	8008dce <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d40:	b2db      	uxtb	r3, r3
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d106      	bne.n	8008d54 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f841 	bl	8008dd6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2202      	movs	r2, #2
 8008d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	3304      	adds	r3, #4
 8008d64:	4619      	mov	r1, r3
 8008d66:	4610      	mov	r0, r2
 8008d68:	f000 fc56 	bl	8009618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e049      	b.n	8008e90 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d106      	bne.n	8008e16 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f000 f841 	bl	8008e98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	3304      	adds	r3, #4
 8008e26:	4619      	mov	r1, r3
 8008e28:	4610      	mov	r0, r2
 8008e2a:	f000 fbf5 	bl	8009618 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2201      	movs	r2, #1
 8008e3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008e8e:	2300      	movs	r3, #0
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3708      	adds	r7, #8
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b083      	sub	sp, #12
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f003 0302 	and.w	r3, r3, #2
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d020      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f003 0302 	and.w	r3, r3, #2
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d01b      	beq.n	8008f10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f06f 0202 	mvn.w	r2, #2
 8008ee0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	f003 0303 	and.w	r3, r3, #3
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d003      	beq.n	8008efe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fb70 	bl	80095dc <HAL_TIM_IC_CaptureCallback>
 8008efc:	e005      	b.n	8008f0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fb62 	bl	80095c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fb73 	bl	80095f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f003 0304 	and.w	r3, r3, #4
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d020      	beq.n	8008f5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f003 0304 	and.w	r3, r3, #4
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d01b      	beq.n	8008f5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f06f 0204 	mvn.w	r2, #4
 8008f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2202      	movs	r2, #2
 8008f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 fb4a 	bl	80095dc <HAL_TIM_IC_CaptureCallback>
 8008f48:	e005      	b.n	8008f56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fb3c 	bl	80095c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fb4d 	bl	80095f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d020      	beq.n	8008fa8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	f003 0308 	and.w	r3, r3, #8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01b      	beq.n	8008fa8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f06f 0208 	mvn.w	r2, #8
 8008f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fb24 	bl	80095dc <HAL_TIM_IC_CaptureCallback>
 8008f94:	e005      	b.n	8008fa2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fb16 	bl	80095c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 fb27 	bl	80095f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f003 0310 	and.w	r3, r3, #16
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d020      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f003 0310 	and.w	r3, r3, #16
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01b      	beq.n	8008ff4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f06f 0210 	mvn.w	r2, #16
 8008fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2208      	movs	r2, #8
 8008fca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fafe 	bl	80095dc <HAL_TIM_IC_CaptureCallback>
 8008fe0:	e005      	b.n	8008fee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 faf0 	bl	80095c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fb01 	bl	80095f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	f003 0301 	and.w	r3, r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00c      	beq.n	8009018 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f003 0301 	and.w	r3, r3, #1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f06f 0201 	mvn.w	r2, #1
 8009010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7f7 ff9a 	bl	8000f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00c      	beq.n	8009046 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009032:	2b00      	cmp	r3, #0
 8009034:	d007      	beq.n	8009046 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800903e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f001 f841 	bl	800a0c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00c      	beq.n	800906a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009056:	2b00      	cmp	r3, #0
 8009058:	d007      	beq.n	800906a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 f839 	bl	800a0dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00c      	beq.n	800908e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d007      	beq.n	800908e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f000 fabb 	bl	8009604 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d007      	beq.n	80090b2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f06f 0220 	mvn.w	r2, #32
 80090aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 f801 	bl	800a0b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	60f8      	str	r0, [r7, #12]
 80090c4:	60b9      	str	r1, [r7, #8]
 80090c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <HAL_TIM_OC_ConfigChannel+0x1e>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e066      	b.n	80091a8 <HAL_TIM_OC_ConfigChannel+0xec>
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2b14      	cmp	r3, #20
 80090e6:	d857      	bhi.n	8009198 <HAL_TIM_OC_ConfigChannel+0xdc>
 80090e8:	a201      	add	r2, pc, #4	@ (adr r2, 80090f0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80090ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ee:	bf00      	nop
 80090f0:	08009145 	.word	0x08009145
 80090f4:	08009199 	.word	0x08009199
 80090f8:	08009199 	.word	0x08009199
 80090fc:	08009199 	.word	0x08009199
 8009100:	08009153 	.word	0x08009153
 8009104:	08009199 	.word	0x08009199
 8009108:	08009199 	.word	0x08009199
 800910c:	08009199 	.word	0x08009199
 8009110:	08009161 	.word	0x08009161
 8009114:	08009199 	.word	0x08009199
 8009118:	08009199 	.word	0x08009199
 800911c:	08009199 	.word	0x08009199
 8009120:	0800916f 	.word	0x0800916f
 8009124:	08009199 	.word	0x08009199
 8009128:	08009199 	.word	0x08009199
 800912c:	08009199 	.word	0x08009199
 8009130:	0800917d 	.word	0x0800917d
 8009134:	08009199 	.word	0x08009199
 8009138:	08009199 	.word	0x08009199
 800913c:	08009199 	.word	0x08009199
 8009140:	0800918b 	.word	0x0800918b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68b9      	ldr	r1, [r7, #8]
 800914a:	4618      	mov	r0, r3
 800914c:	f000 fb16 	bl	800977c <TIM_OC1_SetConfig>
      break;
 8009150:	e025      	b.n	800919e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	68b9      	ldr	r1, [r7, #8]
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fb9f 	bl	800989c <TIM_OC2_SetConfig>
      break;
 800915e:	e01e      	b.n	800919e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68b9      	ldr	r1, [r7, #8]
 8009166:	4618      	mov	r0, r3
 8009168:	f000 fc22 	bl	80099b0 <TIM_OC3_SetConfig>
      break;
 800916c:	e017      	b.n	800919e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	68b9      	ldr	r1, [r7, #8]
 8009174:	4618      	mov	r0, r3
 8009176:	f000 fca3 	bl	8009ac0 <TIM_OC4_SetConfig>
      break;
 800917a:	e010      	b.n	800919e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68b9      	ldr	r1, [r7, #8]
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fd06 	bl	8009b94 <TIM_OC5_SetConfig>
      break;
 8009188:	e009      	b.n	800919e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	68b9      	ldr	r1, [r7, #8]
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fd63 	bl	8009c5c <TIM_OC6_SetConfig>
      break;
 8009196:	e002      	b.n	800919e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	75fb      	strb	r3, [r7, #23]
      break;
 800919c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b086      	sub	sp, #24
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	60b9      	str	r1, [r7, #8]
 80091ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091bc:	2300      	movs	r3, #0
 80091be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d101      	bne.n	80091ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80091ca:	2302      	movs	r3, #2
 80091cc:	e0ff      	b.n	80093ce <HAL_TIM_PWM_ConfigChannel+0x21e>
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2201      	movs	r2, #1
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2b14      	cmp	r3, #20
 80091da:	f200 80f0 	bhi.w	80093be <HAL_TIM_PWM_ConfigChannel+0x20e>
 80091de:	a201      	add	r2, pc, #4	@ (adr r2, 80091e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	08009239 	.word	0x08009239
 80091e8:	080093bf 	.word	0x080093bf
 80091ec:	080093bf 	.word	0x080093bf
 80091f0:	080093bf 	.word	0x080093bf
 80091f4:	08009279 	.word	0x08009279
 80091f8:	080093bf 	.word	0x080093bf
 80091fc:	080093bf 	.word	0x080093bf
 8009200:	080093bf 	.word	0x080093bf
 8009204:	080092bb 	.word	0x080092bb
 8009208:	080093bf 	.word	0x080093bf
 800920c:	080093bf 	.word	0x080093bf
 8009210:	080093bf 	.word	0x080093bf
 8009214:	080092fb 	.word	0x080092fb
 8009218:	080093bf 	.word	0x080093bf
 800921c:	080093bf 	.word	0x080093bf
 8009220:	080093bf 	.word	0x080093bf
 8009224:	0800933d 	.word	0x0800933d
 8009228:	080093bf 	.word	0x080093bf
 800922c:	080093bf 	.word	0x080093bf
 8009230:	080093bf 	.word	0x080093bf
 8009234:	0800937d 	.word	0x0800937d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	4618      	mov	r0, r3
 8009240:	f000 fa9c 	bl	800977c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	699a      	ldr	r2, [r3, #24]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f042 0208 	orr.w	r2, r2, #8
 8009252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	699a      	ldr	r2, [r3, #24]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0204 	bic.w	r2, r2, #4
 8009262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6999      	ldr	r1, [r3, #24]
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	691a      	ldr	r2, [r3, #16]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	619a      	str	r2, [r3, #24]
      break;
 8009276:	e0a5      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68b9      	ldr	r1, [r7, #8]
 800927e:	4618      	mov	r0, r3
 8009280:	f000 fb0c 	bl	800989c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	699a      	ldr	r2, [r3, #24]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009292:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	699a      	ldr	r2, [r3, #24]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	6999      	ldr	r1, [r3, #24]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	691b      	ldr	r3, [r3, #16]
 80092ae:	021a      	lsls	r2, r3, #8
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	430a      	orrs	r2, r1
 80092b6:	619a      	str	r2, [r3, #24]
      break;
 80092b8:	e084      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68b9      	ldr	r1, [r7, #8]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fb75 	bl	80099b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	69da      	ldr	r2, [r3, #28]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f042 0208 	orr.w	r2, r2, #8
 80092d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0204 	bic.w	r2, r2, #4
 80092e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	69d9      	ldr	r1, [r3, #28]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	691a      	ldr	r2, [r3, #16]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	430a      	orrs	r2, r1
 80092f6:	61da      	str	r2, [r3, #28]
      break;
 80092f8:	e064      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fbdd 	bl	8009ac0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	69da      	ldr	r2, [r3, #28]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009314:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	69da      	ldr	r2, [r3, #28]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009324:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69d9      	ldr	r1, [r3, #28]
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	021a      	lsls	r2, r3, #8
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	61da      	str	r2, [r3, #28]
      break;
 800933a:	e043      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68b9      	ldr	r1, [r7, #8]
 8009342:	4618      	mov	r0, r3
 8009344:	f000 fc26 	bl	8009b94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0208 	orr.w	r2, r2, #8
 8009356:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f022 0204 	bic.w	r2, r2, #4
 8009366:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	691a      	ldr	r2, [r3, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800937a:	e023      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fc6a 	bl	8009c5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009396:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	021a      	lsls	r2, r3, #8
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80093bc:	e002      	b.n	80093c4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	75fb      	strb	r3, [r7, #23]
      break;
 80093c2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3718      	adds	r7, #24
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop

080093d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	d101      	bne.n	80093f4 <HAL_TIM_ConfigClockSource+0x1c>
 80093f0:	2302      	movs	r3, #2
 80093f2:	e0dc      	b.n	80095ae <HAL_TIM_ConfigClockSource+0x1d6>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2201      	movs	r2, #1
 80093f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	4b6a      	ldr	r3, [pc, #424]	@ (80095b8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009410:	4013      	ands	r3, r2
 8009412:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800941a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68ba      	ldr	r2, [r7, #8]
 8009422:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a64      	ldr	r2, [pc, #400]	@ (80095bc <HAL_TIM_ConfigClockSource+0x1e4>)
 800942a:	4293      	cmp	r3, r2
 800942c:	f000 80a9 	beq.w	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 8009430:	4a62      	ldr	r2, [pc, #392]	@ (80095bc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	f200 80ae 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009438:	4a61      	ldr	r2, [pc, #388]	@ (80095c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800943a:	4293      	cmp	r3, r2
 800943c:	f000 80a1 	beq.w	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 8009440:	4a5f      	ldr	r2, [pc, #380]	@ (80095c0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009442:	4293      	cmp	r3, r2
 8009444:	f200 80a6 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009448:	4a5e      	ldr	r2, [pc, #376]	@ (80095c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800944a:	4293      	cmp	r3, r2
 800944c:	f000 8099 	beq.w	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 8009450:	4a5c      	ldr	r2, [pc, #368]	@ (80095c4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009452:	4293      	cmp	r3, r2
 8009454:	f200 809e 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009458:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800945c:	f000 8091 	beq.w	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 8009460:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009464:	f200 8096 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009468:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800946c:	f000 8089 	beq.w	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 8009470:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009474:	f200 808e 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009478:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800947c:	d03e      	beq.n	80094fc <HAL_TIM_ConfigClockSource+0x124>
 800947e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009482:	f200 8087 	bhi.w	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009486:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800948a:	f000 8086 	beq.w	800959a <HAL_TIM_ConfigClockSource+0x1c2>
 800948e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009492:	d87f      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 8009494:	2b70      	cmp	r3, #112	@ 0x70
 8009496:	d01a      	beq.n	80094ce <HAL_TIM_ConfigClockSource+0xf6>
 8009498:	2b70      	cmp	r3, #112	@ 0x70
 800949a:	d87b      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 800949c:	2b60      	cmp	r3, #96	@ 0x60
 800949e:	d050      	beq.n	8009542 <HAL_TIM_ConfigClockSource+0x16a>
 80094a0:	2b60      	cmp	r3, #96	@ 0x60
 80094a2:	d877      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 80094a4:	2b50      	cmp	r3, #80	@ 0x50
 80094a6:	d03c      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0x14a>
 80094a8:	2b50      	cmp	r3, #80	@ 0x50
 80094aa:	d873      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 80094ac:	2b40      	cmp	r3, #64	@ 0x40
 80094ae:	d058      	beq.n	8009562 <HAL_TIM_ConfigClockSource+0x18a>
 80094b0:	2b40      	cmp	r3, #64	@ 0x40
 80094b2:	d86f      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 80094b4:	2b30      	cmp	r3, #48	@ 0x30
 80094b6:	d064      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 80094b8:	2b30      	cmp	r3, #48	@ 0x30
 80094ba:	d86b      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 80094bc:	2b20      	cmp	r3, #32
 80094be:	d060      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 80094c0:	2b20      	cmp	r3, #32
 80094c2:	d867      	bhi.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d05c      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 80094c8:	2b10      	cmp	r3, #16
 80094ca:	d05a      	beq.n	8009582 <HAL_TIM_ConfigClockSource+0x1aa>
 80094cc:	e062      	b.n	8009594 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80094de:	f000 fca1 	bl	8009e24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80094f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68ba      	ldr	r2, [r7, #8]
 80094f8:	609a      	str	r2, [r3, #8]
      break;
 80094fa:	e04f      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800950c:	f000 fc8a 	bl	8009e24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800951e:	609a      	str	r2, [r3, #8]
      break;
 8009520:	e03c      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800952e:	461a      	mov	r2, r3
 8009530:	f000 fbfa 	bl	8009d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2150      	movs	r1, #80	@ 0x50
 800953a:	4618      	mov	r0, r3
 800953c:	f000 fc54 	bl	8009de8 <TIM_ITRx_SetConfig>
      break;
 8009540:	e02c      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800954e:	461a      	mov	r2, r3
 8009550:	f000 fc19 	bl	8009d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2160      	movs	r1, #96	@ 0x60
 800955a:	4618      	mov	r0, r3
 800955c:	f000 fc44 	bl	8009de8 <TIM_ITRx_SetConfig>
      break;
 8009560:	e01c      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800956e:	461a      	mov	r2, r3
 8009570:	f000 fbda 	bl	8009d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2140      	movs	r1, #64	@ 0x40
 800957a:	4618      	mov	r0, r3
 800957c:	f000 fc34 	bl	8009de8 <TIM_ITRx_SetConfig>
      break;
 8009580:	e00c      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4619      	mov	r1, r3
 800958c:	4610      	mov	r0, r2
 800958e:	f000 fc2b 	bl	8009de8 <TIM_ITRx_SetConfig>
      break;
 8009592:	e003      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	73fb      	strb	r3, [r7, #15]
      break;
 8009598:	e000      	b.n	800959c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800959a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2201      	movs	r2, #1
 80095a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	ffceff88 	.word	0xffceff88
 80095bc:	00100040 	.word	0x00100040
 80095c0:	00100030 	.word	0x00100030
 80095c4:	00100020 	.word	0x00100020

080095c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095dc:	b480      	push	{r7}
 80095de:	b083      	sub	sp, #12
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095e4:	bf00      	nop
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095f8:	bf00      	nop
 80095fa:	370c      	adds	r7, #12
 80095fc:	46bd      	mov	sp, r7
 80095fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009602:	4770      	bx	lr

08009604 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800960c:	bf00      	nop
 800960e:	370c      	adds	r7, #12
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a4a      	ldr	r2, [pc, #296]	@ (8009754 <TIM_Base_SetConfig+0x13c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d013      	beq.n	8009658 <TIM_Base_SetConfig+0x40>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009636:	d00f      	beq.n	8009658 <TIM_Base_SetConfig+0x40>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a47      	ldr	r2, [pc, #284]	@ (8009758 <TIM_Base_SetConfig+0x140>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d00b      	beq.n	8009658 <TIM_Base_SetConfig+0x40>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a46      	ldr	r2, [pc, #280]	@ (800975c <TIM_Base_SetConfig+0x144>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d007      	beq.n	8009658 <TIM_Base_SetConfig+0x40>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a45      	ldr	r2, [pc, #276]	@ (8009760 <TIM_Base_SetConfig+0x148>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d003      	beq.n	8009658 <TIM_Base_SetConfig+0x40>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4a44      	ldr	r2, [pc, #272]	@ (8009764 <TIM_Base_SetConfig+0x14c>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d108      	bne.n	800966a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800965e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	68fa      	ldr	r2, [r7, #12]
 8009666:	4313      	orrs	r3, r2
 8009668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a39      	ldr	r2, [pc, #228]	@ (8009754 <TIM_Base_SetConfig+0x13c>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d027      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009678:	d023      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a36      	ldr	r2, [pc, #216]	@ (8009758 <TIM_Base_SetConfig+0x140>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d01f      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a35      	ldr	r2, [pc, #212]	@ (800975c <TIM_Base_SetConfig+0x144>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d01b      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a34      	ldr	r2, [pc, #208]	@ (8009760 <TIM_Base_SetConfig+0x148>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d017      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	4a33      	ldr	r2, [pc, #204]	@ (8009764 <TIM_Base_SetConfig+0x14c>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d013      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	4a32      	ldr	r2, [pc, #200]	@ (8009768 <TIM_Base_SetConfig+0x150>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d00f      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a31      	ldr	r2, [pc, #196]	@ (800976c <TIM_Base_SetConfig+0x154>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00b      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	4a30      	ldr	r2, [pc, #192]	@ (8009770 <TIM_Base_SetConfig+0x158>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d007      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	4a2f      	ldr	r2, [pc, #188]	@ (8009774 <TIM_Base_SetConfig+0x15c>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d003      	beq.n	80096c2 <TIM_Base_SetConfig+0xaa>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	4a2e      	ldr	r2, [pc, #184]	@ (8009778 <TIM_Base_SetConfig+0x160>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d108      	bne.n	80096d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80096c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	4313      	orrs	r3, r2
 80096e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a16      	ldr	r2, [pc, #88]	@ (8009754 <TIM_Base_SetConfig+0x13c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00f      	beq.n	8009720 <TIM_Base_SetConfig+0x108>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a18      	ldr	r2, [pc, #96]	@ (8009764 <TIM_Base_SetConfig+0x14c>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00b      	beq.n	8009720 <TIM_Base_SetConfig+0x108>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a17      	ldr	r2, [pc, #92]	@ (8009768 <TIM_Base_SetConfig+0x150>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d007      	beq.n	8009720 <TIM_Base_SetConfig+0x108>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a16      	ldr	r2, [pc, #88]	@ (800976c <TIM_Base_SetConfig+0x154>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_Base_SetConfig+0x108>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a15      	ldr	r2, [pc, #84]	@ (8009770 <TIM_Base_SetConfig+0x158>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d103      	bne.n	8009728 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	691a      	ldr	r2, [r3, #16]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b01      	cmp	r3, #1
 8009738:	d105      	bne.n	8009746 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	691b      	ldr	r3, [r3, #16]
 800973e:	f023 0201 	bic.w	r2, r3, #1
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	611a      	str	r2, [r3, #16]
  }
}
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	40010000 	.word	0x40010000
 8009758:	40000400 	.word	0x40000400
 800975c:	40000800 	.word	0x40000800
 8009760:	40000c00 	.word	0x40000c00
 8009764:	40010400 	.word	0x40010400
 8009768:	40014000 	.word	0x40014000
 800976c:	40014400 	.word	0x40014400
 8009770:	40014800 	.word	0x40014800
 8009774:	4000e000 	.word	0x4000e000
 8009778:	4000e400 	.word	0x4000e400

0800977c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800977c:	b480      	push	{r7}
 800977e:	b087      	sub	sp, #28
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6a1b      	ldr	r3, [r3, #32]
 8009790:	f023 0201 	bic.w	r2, r3, #1
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	4b37      	ldr	r3, [pc, #220]	@ (8009884 <TIM_OC1_SetConfig+0x108>)
 80097a8:	4013      	ands	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0303 	bic.w	r3, r3, #3
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f023 0302 	bic.w	r3, r3, #2
 80097c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	689b      	ldr	r3, [r3, #8]
 80097ca:	697a      	ldr	r2, [r7, #20]
 80097cc:	4313      	orrs	r3, r2
 80097ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	4a2d      	ldr	r2, [pc, #180]	@ (8009888 <TIM_OC1_SetConfig+0x10c>)
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d00f      	beq.n	80097f8 <TIM_OC1_SetConfig+0x7c>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4a2c      	ldr	r2, [pc, #176]	@ (800988c <TIM_OC1_SetConfig+0x110>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d00b      	beq.n	80097f8 <TIM_OC1_SetConfig+0x7c>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	4a2b      	ldr	r2, [pc, #172]	@ (8009890 <TIM_OC1_SetConfig+0x114>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d007      	beq.n	80097f8 <TIM_OC1_SetConfig+0x7c>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	4a2a      	ldr	r2, [pc, #168]	@ (8009894 <TIM_OC1_SetConfig+0x118>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d003      	beq.n	80097f8 <TIM_OC1_SetConfig+0x7c>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a29      	ldr	r2, [pc, #164]	@ (8009898 <TIM_OC1_SetConfig+0x11c>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d10c      	bne.n	8009812 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	f023 0308 	bic.w	r3, r3, #8
 80097fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	697a      	ldr	r2, [r7, #20]
 8009806:	4313      	orrs	r3, r2
 8009808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	f023 0304 	bic.w	r3, r3, #4
 8009810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a1c      	ldr	r2, [pc, #112]	@ (8009888 <TIM_OC1_SetConfig+0x10c>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00f      	beq.n	800983a <TIM_OC1_SetConfig+0xbe>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a1b      	ldr	r2, [pc, #108]	@ (800988c <TIM_OC1_SetConfig+0x110>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d00b      	beq.n	800983a <TIM_OC1_SetConfig+0xbe>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a1a      	ldr	r2, [pc, #104]	@ (8009890 <TIM_OC1_SetConfig+0x114>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d007      	beq.n	800983a <TIM_OC1_SetConfig+0xbe>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a19      	ldr	r2, [pc, #100]	@ (8009894 <TIM_OC1_SetConfig+0x118>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d003      	beq.n	800983a <TIM_OC1_SetConfig+0xbe>
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	4a18      	ldr	r2, [pc, #96]	@ (8009898 <TIM_OC1_SetConfig+0x11c>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d111      	bne.n	800985e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009842:	693b      	ldr	r3, [r7, #16]
 8009844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	693a      	ldr	r2, [r7, #16]
 8009850:	4313      	orrs	r3, r2
 8009852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	693a      	ldr	r2, [r7, #16]
 800985a:	4313      	orrs	r3, r2
 800985c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	693a      	ldr	r2, [r7, #16]
 8009862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	621a      	str	r2, [r3, #32]
}
 8009878:	bf00      	nop
 800987a:	371c      	adds	r7, #28
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	fffeff8f 	.word	0xfffeff8f
 8009888:	40010000 	.word	0x40010000
 800988c:	40010400 	.word	0x40010400
 8009890:	40014000 	.word	0x40014000
 8009894:	40014400 	.word	0x40014400
 8009898:	40014800 	.word	0x40014800

0800989c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800989c:	b480      	push	{r7}
 800989e:	b087      	sub	sp, #28
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a1b      	ldr	r3, [r3, #32]
 80098aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6a1b      	ldr	r3, [r3, #32]
 80098b0:	f023 0210 	bic.w	r2, r3, #16
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	699b      	ldr	r3, [r3, #24]
 80098c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	4b34      	ldr	r3, [pc, #208]	@ (8009998 <TIM_OC2_SetConfig+0xfc>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	4313      	orrs	r3, r2
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	f023 0320 	bic.w	r3, r3, #32
 80098e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	011b      	lsls	r3, r3, #4
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4a29      	ldr	r2, [pc, #164]	@ (800999c <TIM_OC2_SetConfig+0x100>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <TIM_OC2_SetConfig+0x68>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4a28      	ldr	r2, [pc, #160]	@ (80099a0 <TIM_OC2_SetConfig+0x104>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d10d      	bne.n	8009920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800990a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	4313      	orrs	r3, r2
 8009916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800991e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a1e      	ldr	r2, [pc, #120]	@ (800999c <TIM_OC2_SetConfig+0x100>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00f      	beq.n	8009948 <TIM_OC2_SetConfig+0xac>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a1d      	ldr	r2, [pc, #116]	@ (80099a0 <TIM_OC2_SetConfig+0x104>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00b      	beq.n	8009948 <TIM_OC2_SetConfig+0xac>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a1c      	ldr	r2, [pc, #112]	@ (80099a4 <TIM_OC2_SetConfig+0x108>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d007      	beq.n	8009948 <TIM_OC2_SetConfig+0xac>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a1b      	ldr	r2, [pc, #108]	@ (80099a8 <TIM_OC2_SetConfig+0x10c>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d003      	beq.n	8009948 <TIM_OC2_SetConfig+0xac>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a1a      	ldr	r2, [pc, #104]	@ (80099ac <TIM_OC2_SetConfig+0x110>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d113      	bne.n	8009970 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800994e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	695b      	ldr	r3, [r3, #20]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4313      	orrs	r3, r2
 8009962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	4313      	orrs	r3, r2
 800996e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	685a      	ldr	r2, [r3, #4]
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	697a      	ldr	r2, [r7, #20]
 8009988:	621a      	str	r2, [r3, #32]
}
 800998a:	bf00      	nop
 800998c:	371c      	adds	r7, #28
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	feff8fff 	.word	0xfeff8fff
 800999c:	40010000 	.word	0x40010000
 80099a0:	40010400 	.word	0x40010400
 80099a4:	40014000 	.word	0x40014000
 80099a8:	40014400 	.word	0x40014400
 80099ac:	40014800 	.word	0x40014800

080099b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4b33      	ldr	r3, [pc, #204]	@ (8009aa8 <TIM_OC3_SetConfig+0xf8>)
 80099dc:	4013      	ands	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80099f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	021b      	lsls	r3, r3, #8
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	4313      	orrs	r3, r2
 8009a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a28      	ldr	r2, [pc, #160]	@ (8009aac <TIM_OC3_SetConfig+0xfc>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d003      	beq.n	8009a16 <TIM_OC3_SetConfig+0x66>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a27      	ldr	r2, [pc, #156]	@ (8009ab0 <TIM_OC3_SetConfig+0x100>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d10d      	bne.n	8009a32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	021b      	lsls	r3, r3, #8
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a1d      	ldr	r2, [pc, #116]	@ (8009aac <TIM_OC3_SetConfig+0xfc>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d00f      	beq.n	8009a5a <TIM_OC3_SetConfig+0xaa>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009ab0 <TIM_OC3_SetConfig+0x100>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d00b      	beq.n	8009a5a <TIM_OC3_SetConfig+0xaa>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab4 <TIM_OC3_SetConfig+0x104>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d007      	beq.n	8009a5a <TIM_OC3_SetConfig+0xaa>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ab8 <TIM_OC3_SetConfig+0x108>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d003      	beq.n	8009a5a <TIM_OC3_SetConfig+0xaa>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	4a19      	ldr	r2, [pc, #100]	@ (8009abc <TIM_OC3_SetConfig+0x10c>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d113      	bne.n	8009a82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	011b      	lsls	r3, r3, #4
 8009a7c:	693a      	ldr	r2, [r7, #16]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	693a      	ldr	r2, [r7, #16]
 8009a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	685a      	ldr	r2, [r3, #4]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	621a      	str	r2, [r3, #32]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	fffeff8f 	.word	0xfffeff8f
 8009aac:	40010000 	.word	0x40010000
 8009ab0:	40010400 	.word	0x40010400
 8009ab4:	40014000 	.word	0x40014000
 8009ab8:	40014400 	.word	0x40014400
 8009abc:	40014800 	.word	0x40014800

08009ac0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4b24      	ldr	r3, [pc, #144]	@ (8009b7c <TIM_OC4_SetConfig+0xbc>)
 8009aec:	4013      	ands	r3, r2
 8009aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	021b      	lsls	r3, r3, #8
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4313      	orrs	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009b0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	031b      	lsls	r3, r3, #12
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a19      	ldr	r2, [pc, #100]	@ (8009b80 <TIM_OC4_SetConfig+0xc0>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d00f      	beq.n	8009b40 <TIM_OC4_SetConfig+0x80>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a18      	ldr	r2, [pc, #96]	@ (8009b84 <TIM_OC4_SetConfig+0xc4>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d00b      	beq.n	8009b40 <TIM_OC4_SetConfig+0x80>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a17      	ldr	r2, [pc, #92]	@ (8009b88 <TIM_OC4_SetConfig+0xc8>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d007      	beq.n	8009b40 <TIM_OC4_SetConfig+0x80>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a16      	ldr	r2, [pc, #88]	@ (8009b8c <TIM_OC4_SetConfig+0xcc>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d003      	beq.n	8009b40 <TIM_OC4_SetConfig+0x80>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a15      	ldr	r2, [pc, #84]	@ (8009b90 <TIM_OC4_SetConfig+0xd0>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d109      	bne.n	8009b54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	019b      	lsls	r3, r3, #6
 8009b4e:	697a      	ldr	r2, [r7, #20]
 8009b50:	4313      	orrs	r3, r2
 8009b52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	697a      	ldr	r2, [r7, #20]
 8009b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685a      	ldr	r2, [r3, #4]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	693a      	ldr	r2, [r7, #16]
 8009b6c:	621a      	str	r2, [r3, #32]
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	feff8fff 	.word	0xfeff8fff
 8009b80:	40010000 	.word	0x40010000
 8009b84:	40010400 	.word	0x40010400
 8009b88:	40014000 	.word	0x40014000
 8009b8c:	40014400 	.word	0x40014400
 8009b90:	40014800 	.word	0x40014800

08009b94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b087      	sub	sp, #28
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	4b21      	ldr	r3, [pc, #132]	@ (8009c44 <TIM_OC5_SetConfig+0xb0>)
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009bd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	689b      	ldr	r3, [r3, #8]
 8009bda:	041b      	lsls	r3, r3, #16
 8009bdc:	693a      	ldr	r2, [r7, #16]
 8009bde:	4313      	orrs	r3, r2
 8009be0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a18      	ldr	r2, [pc, #96]	@ (8009c48 <TIM_OC5_SetConfig+0xb4>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00f      	beq.n	8009c0a <TIM_OC5_SetConfig+0x76>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4a17      	ldr	r2, [pc, #92]	@ (8009c4c <TIM_OC5_SetConfig+0xb8>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d00b      	beq.n	8009c0a <TIM_OC5_SetConfig+0x76>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	4a16      	ldr	r2, [pc, #88]	@ (8009c50 <TIM_OC5_SetConfig+0xbc>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d007      	beq.n	8009c0a <TIM_OC5_SetConfig+0x76>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4a15      	ldr	r2, [pc, #84]	@ (8009c54 <TIM_OC5_SetConfig+0xc0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d003      	beq.n	8009c0a <TIM_OC5_SetConfig+0x76>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4a14      	ldr	r2, [pc, #80]	@ (8009c58 <TIM_OC5_SetConfig+0xc4>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d109      	bne.n	8009c1e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	695b      	ldr	r3, [r3, #20]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	693a      	ldr	r2, [r7, #16]
 8009c36:	621a      	str	r2, [r3, #32]
}
 8009c38:	bf00      	nop
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr
 8009c44:	fffeff8f 	.word	0xfffeff8f
 8009c48:	40010000 	.word	0x40010000
 8009c4c:	40010400 	.word	0x40010400
 8009c50:	40014000 	.word	0x40014000
 8009c54:	40014400 	.word	0x40014400
 8009c58:	40014800 	.word	0x40014800

08009c5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b087      	sub	sp, #28
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a1b      	ldr	r3, [r3, #32]
 8009c70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	4b22      	ldr	r3, [pc, #136]	@ (8009d10 <TIM_OC6_SetConfig+0xb4>)
 8009c88:	4013      	ands	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	4313      	orrs	r3, r2
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	051b      	lsls	r3, r3, #20
 8009ca6:	693a      	ldr	r2, [r7, #16]
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a19      	ldr	r2, [pc, #100]	@ (8009d14 <TIM_OC6_SetConfig+0xb8>)
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	d00f      	beq.n	8009cd4 <TIM_OC6_SetConfig+0x78>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a18      	ldr	r2, [pc, #96]	@ (8009d18 <TIM_OC6_SetConfig+0xbc>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d00b      	beq.n	8009cd4 <TIM_OC6_SetConfig+0x78>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a17      	ldr	r2, [pc, #92]	@ (8009d1c <TIM_OC6_SetConfig+0xc0>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d007      	beq.n	8009cd4 <TIM_OC6_SetConfig+0x78>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a16      	ldr	r2, [pc, #88]	@ (8009d20 <TIM_OC6_SetConfig+0xc4>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d003      	beq.n	8009cd4 <TIM_OC6_SetConfig+0x78>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a15      	ldr	r2, [pc, #84]	@ (8009d24 <TIM_OC6_SetConfig+0xc8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d109      	bne.n	8009ce8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009cda:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	029b      	lsls	r3, r3, #10
 8009ce2:	697a      	ldr	r2, [r7, #20]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	685a      	ldr	r2, [r3, #4]
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	693a      	ldr	r2, [r7, #16]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
 8009d0e:	bf00      	nop
 8009d10:	feff8fff 	.word	0xfeff8fff
 8009d14:	40010000 	.word	0x40010000
 8009d18:	40010400 	.word	0x40010400
 8009d1c:	40014000 	.word	0x40014000
 8009d20:	40014400 	.word	0x40014400
 8009d24:	40014800 	.word	0x40014800

08009d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a1b      	ldr	r3, [r3, #32]
 8009d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	f023 0201 	bic.w	r2, r3, #1
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	693a      	ldr	r2, [r7, #16]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f023 030a 	bic.w	r3, r3, #10
 8009d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	621a      	str	r2, [r3, #32]
}
 8009d7a:	bf00      	nop
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d86:	b480      	push	{r7}
 8009d88:	b087      	sub	sp, #28
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	60b9      	str	r1, [r7, #8]
 8009d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6a1b      	ldr	r3, [r3, #32]
 8009d96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6a1b      	ldr	r3, [r3, #32]
 8009d9c:	f023 0210 	bic.w	r2, r3, #16
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	699b      	ldr	r3, [r3, #24]
 8009da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009db0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	031b      	lsls	r3, r3, #12
 8009db6:	693a      	ldr	r2, [r7, #16]
 8009db8:	4313      	orrs	r3, r2
 8009dba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009dc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	011b      	lsls	r3, r3, #4
 8009dc8:	697a      	ldr	r2, [r7, #20]
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	697a      	ldr	r2, [r7, #20]
 8009dd8:	621a      	str	r2, [r3, #32]
}
 8009dda:	bf00      	nop
 8009ddc:	371c      	adds	r7, #28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
	...

08009de8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009df8:	68fa      	ldr	r2, [r7, #12]
 8009dfa:	4b09      	ldr	r3, [pc, #36]	@ (8009e20 <TIM_ITRx_SetConfig+0x38>)
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	f043 0307 	orr.w	r3, r3, #7
 8009e0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	609a      	str	r2, [r3, #8]
}
 8009e12:	bf00      	nop
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	ffcfff8f 	.word	0xffcfff8f

08009e24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
 8009e30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	021a      	lsls	r2, r3, #8
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	431a      	orrs	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	697a      	ldr	r2, [r7, #20]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	697a      	ldr	r2, [r7, #20]
 8009e56:	609a      	str	r2, [r3, #8]
}
 8009e58:	bf00      	nop
 8009e5a:	371c      	adds	r7, #28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e077      	b.n	8009f6c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2202      	movs	r2, #2
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a35      	ldr	r2, [pc, #212]	@ (8009f78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d004      	beq.n	8009eb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a34      	ldr	r2, [pc, #208]	@ (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d108      	bne.n	8009ec2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009eb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ec8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	68fa      	ldr	r2, [r7, #12]
 8009eda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	4a25      	ldr	r2, [pc, #148]	@ (8009f78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d02c      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eee:	d027      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a22      	ldr	r2, [pc, #136]	@ (8009f80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009ef6:	4293      	cmp	r3, r2
 8009ef8:	d022      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a21      	ldr	r2, [pc, #132]	@ (8009f84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d01d      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a1f      	ldr	r2, [pc, #124]	@ (8009f88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d018      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a1a      	ldr	r2, [pc, #104]	@ (8009f7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d013      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a1b      	ldr	r2, [pc, #108]	@ (8009f8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d00e      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a1a      	ldr	r2, [pc, #104]	@ (8009f90 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d009      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a18      	ldr	r2, [pc, #96]	@ (8009f94 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d004      	beq.n	8009f40 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a17      	ldr	r2, [pc, #92]	@ (8009f98 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10c      	bne.n	8009f5a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009f46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	40010000 	.word	0x40010000
 8009f7c:	40010400 	.word	0x40010400
 8009f80:	40000400 	.word	0x40000400
 8009f84:	40000800 	.word	0x40000800
 8009f88:	40000c00 	.word	0x40000c00
 8009f8c:	40001800 	.word	0x40001800
 8009f90:	40014000 	.word	0x40014000
 8009f94:	4000e000 	.word	0x4000e000
 8009f98:	4000e400 	.word	0x4000e400

08009f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e073      	b.n	800a0a0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	689b      	ldr	r3, [r3, #8]
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	4313      	orrs	r3, r2
 800a004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	4313      	orrs	r3, r2
 800a012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01e:	4313      	orrs	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	041b      	lsls	r3, r3, #16
 800a02e:	4313      	orrs	r3, r2
 800a030:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	69db      	ldr	r3, [r3, #28]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a19      	ldr	r2, [pc, #100]	@ (800a0ac <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d004      	beq.n	800a054 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a18      	ldr	r2, [pc, #96]	@ (800a0b0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d11c      	bne.n	800a08e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05e:	051b      	lsls	r3, r3, #20
 800a060:	4313      	orrs	r3, r2
 800a062:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	6a1b      	ldr	r3, [r3, #32]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a07c:	4313      	orrs	r3, r2
 800a07e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a08a:	4313      	orrs	r3, r2
 800a08c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr
 800a0ac:	40010000 	.word	0x40010000
 800a0b0:	40010400 	.word	0x40010400

0800a0b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0d0:	bf00      	nop
 800a0d2:	370c      	adds	r7, #12
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800a0f0:	b5b0      	push	{r4, r5, r7, lr}
 800a0f2:	b08c      	sub	sp, #48	@ 0x30
 800a0f4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800a0f6:	4b8f      	ldr	r3, [pc, #572]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a0f8:	220a      	movs	r2, #10
 800a0fa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 20;
 800a0fc:	4b8d      	ldr	r3, [pc, #564]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a0fe:	2214      	movs	r2, #20
 800a100:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 3;
 800a102:	4b8c      	ldr	r3, [pc, #560]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a104:	2203      	movs	r2, #3
 800a106:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800a108:	4b8a      	ldr	r3, [pc, #552]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a10a:	2202      	movs	r2, #2
 800a10c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800a10e:	4b8a      	ldr	r3, [pc, #552]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a110:	22ff      	movs	r2, #255	@ 0xff
 800a112:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800a114:	4b88      	ldr	r3, [pc, #544]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a116:	22ff      	movs	r2, #255	@ 0xff
 800a118:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800a11a:	4b87      	ldr	r3, [pc, #540]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800a120:	4b85      	ldr	r3, [pc, #532]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a122:	2200      	movs	r2, #0
 800a124:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800a126:	4b85      	ldr	r3, [pc, #532]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a128:	220a      	movs	r2, #10
 800a12a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 20;
 800a12c:	4b83      	ldr	r3, [pc, #524]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a12e:	2214      	movs	r2, #20
 800a130:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800a132:	4b82      	ldr	r3, [pc, #520]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a134:	2201      	movs	r2, #1
 800a136:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800a138:	4b80      	ldr	r3, [pc, #512]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a13a:	2201      	movs	r2, #1
 800a13c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a13e:	2100      	movs	r1, #0
 800a140:	2000      	movs	r0, #0
 800a142:	f003 ffc9 	bl	800e0d8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800a146:	4b7b      	ldr	r3, [pc, #492]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	061a      	lsls	r2, r3, #24
 800a14c:	4b79      	ldr	r3, [pc, #484]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a14e:	785b      	ldrb	r3, [r3, #1]
 800a150:	041b      	lsls	r3, r3, #16
 800a152:	431a      	orrs	r2, r3
 800a154:	4b77      	ldr	r3, [pc, #476]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a156:	789b      	ldrb	r3, [r3, #2]
 800a158:	021b      	lsls	r3, r3, #8
 800a15a:	4313      	orrs	r3, r2
 800a15c:	4a75      	ldr	r2, [pc, #468]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a15e:	78d2      	ldrb	r2, [r2, #3]
 800a160:	4313      	orrs	r3, r2
 800a162:	061a      	lsls	r2, r3, #24
 800a164:	4b73      	ldr	r3, [pc, #460]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	0619      	lsls	r1, r3, #24
 800a16a:	4b72      	ldr	r3, [pc, #456]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a16c:	785b      	ldrb	r3, [r3, #1]
 800a16e:	041b      	lsls	r3, r3, #16
 800a170:	4319      	orrs	r1, r3
 800a172:	4b70      	ldr	r3, [pc, #448]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a174:	789b      	ldrb	r3, [r3, #2]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	430b      	orrs	r3, r1
 800a17a:	496e      	ldr	r1, [pc, #440]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a17c:	78c9      	ldrb	r1, [r1, #3]
 800a17e:	430b      	orrs	r3, r1
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a186:	431a      	orrs	r2, r3
 800a188:	4b6a      	ldr	r3, [pc, #424]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	0619      	lsls	r1, r3, #24
 800a18e:	4b69      	ldr	r3, [pc, #420]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a190:	785b      	ldrb	r3, [r3, #1]
 800a192:	041b      	lsls	r3, r3, #16
 800a194:	4319      	orrs	r1, r3
 800a196:	4b67      	ldr	r3, [pc, #412]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a198:	789b      	ldrb	r3, [r3, #2]
 800a19a:	021b      	lsls	r3, r3, #8
 800a19c:	430b      	orrs	r3, r1
 800a19e:	4965      	ldr	r1, [pc, #404]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a1a0:	78c9      	ldrb	r1, [r1, #3]
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	0a1b      	lsrs	r3, r3, #8
 800a1a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	4b61      	ldr	r3, [pc, #388]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	0619      	lsls	r1, r3, #24
 800a1b2:	4b60      	ldr	r3, [pc, #384]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	041b      	lsls	r3, r3, #16
 800a1b8:	4319      	orrs	r1, r3
 800a1ba:	4b5e      	ldr	r3, [pc, #376]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a1bc:	789b      	ldrb	r3, [r3, #2]
 800a1be:	021b      	lsls	r3, r3, #8
 800a1c0:	430b      	orrs	r3, r1
 800a1c2:	495c      	ldr	r1, [pc, #368]	@ (800a334 <MX_LWIP_Init+0x244>)
 800a1c4:	78c9      	ldrb	r1, [r1, #3]
 800a1c6:	430b      	orrs	r3, r1
 800a1c8:	0e1b      	lsrs	r3, r3, #24
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	4a5c      	ldr	r2, [pc, #368]	@ (800a340 <MX_LWIP_Init+0x250>)
 800a1ce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800a1d0:	4b59      	ldr	r3, [pc, #356]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	061a      	lsls	r2, r3, #24
 800a1d6:	4b58      	ldr	r3, [pc, #352]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1d8:	785b      	ldrb	r3, [r3, #1]
 800a1da:	041b      	lsls	r3, r3, #16
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	4b56      	ldr	r3, [pc, #344]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1e0:	789b      	ldrb	r3, [r3, #2]
 800a1e2:	021b      	lsls	r3, r3, #8
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	4a54      	ldr	r2, [pc, #336]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1e8:	78d2      	ldrb	r2, [r2, #3]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	061a      	lsls	r2, r3, #24
 800a1ee:	4b52      	ldr	r3, [pc, #328]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1f0:	781b      	ldrb	r3, [r3, #0]
 800a1f2:	0619      	lsls	r1, r3, #24
 800a1f4:	4b50      	ldr	r3, [pc, #320]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1f6:	785b      	ldrb	r3, [r3, #1]
 800a1f8:	041b      	lsls	r3, r3, #16
 800a1fa:	4319      	orrs	r1, r3
 800a1fc:	4b4e      	ldr	r3, [pc, #312]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a1fe:	789b      	ldrb	r3, [r3, #2]
 800a200:	021b      	lsls	r3, r3, #8
 800a202:	430b      	orrs	r3, r1
 800a204:	494c      	ldr	r1, [pc, #304]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a206:	78c9      	ldrb	r1, [r1, #3]
 800a208:	430b      	orrs	r3, r1
 800a20a:	021b      	lsls	r3, r3, #8
 800a20c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a210:	431a      	orrs	r2, r3
 800a212:	4b49      	ldr	r3, [pc, #292]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	0619      	lsls	r1, r3, #24
 800a218:	4b47      	ldr	r3, [pc, #284]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	041b      	lsls	r3, r3, #16
 800a21e:	4319      	orrs	r1, r3
 800a220:	4b45      	ldr	r3, [pc, #276]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a222:	789b      	ldrb	r3, [r3, #2]
 800a224:	021b      	lsls	r3, r3, #8
 800a226:	430b      	orrs	r3, r1
 800a228:	4943      	ldr	r1, [pc, #268]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a22a:	78c9      	ldrb	r1, [r1, #3]
 800a22c:	430b      	orrs	r3, r1
 800a22e:	0a1b      	lsrs	r3, r3, #8
 800a230:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a234:	431a      	orrs	r2, r3
 800a236:	4b40      	ldr	r3, [pc, #256]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	0619      	lsls	r1, r3, #24
 800a23c:	4b3e      	ldr	r3, [pc, #248]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a23e:	785b      	ldrb	r3, [r3, #1]
 800a240:	041b      	lsls	r3, r3, #16
 800a242:	4319      	orrs	r1, r3
 800a244:	4b3c      	ldr	r3, [pc, #240]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a246:	789b      	ldrb	r3, [r3, #2]
 800a248:	021b      	lsls	r3, r3, #8
 800a24a:	430b      	orrs	r3, r1
 800a24c:	493a      	ldr	r1, [pc, #232]	@ (800a338 <MX_LWIP_Init+0x248>)
 800a24e:	78c9      	ldrb	r1, [r1, #3]
 800a250:	430b      	orrs	r3, r1
 800a252:	0e1b      	lsrs	r3, r3, #24
 800a254:	4313      	orrs	r3, r2
 800a256:	4a3b      	ldr	r2, [pc, #236]	@ (800a344 <MX_LWIP_Init+0x254>)
 800a258:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800a25a:	4b38      	ldr	r3, [pc, #224]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	061a      	lsls	r2, r3, #24
 800a260:	4b36      	ldr	r3, [pc, #216]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a262:	785b      	ldrb	r3, [r3, #1]
 800a264:	041b      	lsls	r3, r3, #16
 800a266:	431a      	orrs	r2, r3
 800a268:	4b34      	ldr	r3, [pc, #208]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a26a:	789b      	ldrb	r3, [r3, #2]
 800a26c:	021b      	lsls	r3, r3, #8
 800a26e:	4313      	orrs	r3, r2
 800a270:	4a32      	ldr	r2, [pc, #200]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a272:	78d2      	ldrb	r2, [r2, #3]
 800a274:	4313      	orrs	r3, r2
 800a276:	061a      	lsls	r2, r3, #24
 800a278:	4b30      	ldr	r3, [pc, #192]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a27a:	781b      	ldrb	r3, [r3, #0]
 800a27c:	0619      	lsls	r1, r3, #24
 800a27e:	4b2f      	ldr	r3, [pc, #188]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a280:	785b      	ldrb	r3, [r3, #1]
 800a282:	041b      	lsls	r3, r3, #16
 800a284:	4319      	orrs	r1, r3
 800a286:	4b2d      	ldr	r3, [pc, #180]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a288:	789b      	ldrb	r3, [r3, #2]
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	430b      	orrs	r3, r1
 800a28e:	492b      	ldr	r1, [pc, #172]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a290:	78c9      	ldrb	r1, [r1, #3]
 800a292:	430b      	orrs	r3, r1
 800a294:	021b      	lsls	r3, r3, #8
 800a296:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a29a:	431a      	orrs	r2, r3
 800a29c:	4b27      	ldr	r3, [pc, #156]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	0619      	lsls	r1, r3, #24
 800a2a2:	4b26      	ldr	r3, [pc, #152]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2a4:	785b      	ldrb	r3, [r3, #1]
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	4319      	orrs	r1, r3
 800a2aa:	4b24      	ldr	r3, [pc, #144]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	021b      	lsls	r3, r3, #8
 800a2b0:	430b      	orrs	r3, r1
 800a2b2:	4922      	ldr	r1, [pc, #136]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2b4:	78c9      	ldrb	r1, [r1, #3]
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	0a1b      	lsrs	r3, r3, #8
 800a2ba:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	4b1e      	ldr	r3, [pc, #120]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	0619      	lsls	r1, r3, #24
 800a2c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2c8:	785b      	ldrb	r3, [r3, #1]
 800a2ca:	041b      	lsls	r3, r3, #16
 800a2cc:	4319      	orrs	r1, r3
 800a2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2d0:	789b      	ldrb	r3, [r3, #2]
 800a2d2:	021b      	lsls	r3, r3, #8
 800a2d4:	430b      	orrs	r3, r1
 800a2d6:	4919      	ldr	r1, [pc, #100]	@ (800a33c <MX_LWIP_Init+0x24c>)
 800a2d8:	78c9      	ldrb	r1, [r1, #3]
 800a2da:	430b      	orrs	r3, r1
 800a2dc:	0e1b      	lsrs	r3, r3, #24
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	4a19      	ldr	r2, [pc, #100]	@ (800a348 <MX_LWIP_Init+0x258>)
 800a2e2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a2e4:	4b19      	ldr	r3, [pc, #100]	@ (800a34c <MX_LWIP_Init+0x25c>)
 800a2e6:	9302      	str	r3, [sp, #8]
 800a2e8:	4b19      	ldr	r3, [pc, #100]	@ (800a350 <MX_LWIP_Init+0x260>)
 800a2ea:	9301      	str	r3, [sp, #4]
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9300      	str	r3, [sp, #0]
 800a2f0:	4b15      	ldr	r3, [pc, #84]	@ (800a348 <MX_LWIP_Init+0x258>)
 800a2f2:	4a14      	ldr	r2, [pc, #80]	@ (800a344 <MX_LWIP_Init+0x254>)
 800a2f4:	4912      	ldr	r1, [pc, #72]	@ (800a340 <MX_LWIP_Init+0x250>)
 800a2f6:	4817      	ldr	r0, [pc, #92]	@ (800a354 <MX_LWIP_Init+0x264>)
 800a2f8:	f004 fd80 	bl	800edfc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a2fc:	4815      	ldr	r0, [pc, #84]	@ (800a354 <MX_LWIP_Init+0x264>)
 800a2fe:	f004 ff2f 	bl	800f160 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800a302:	4814      	ldr	r0, [pc, #80]	@ (800a354 <MX_LWIP_Init+0x264>)
 800a304:	f004 ff3c 	bl	800f180 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800a308:	4913      	ldr	r1, [pc, #76]	@ (800a358 <MX_LWIP_Init+0x268>)
 800a30a:	4812      	ldr	r0, [pc, #72]	@ (800a354 <MX_LWIP_Init+0x264>)
 800a30c:	f005 f83a 	bl	800f384 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800a310:	4b12      	ldr	r3, [pc, #72]	@ (800a35c <MX_LWIP_Init+0x26c>)
 800a312:	1d3c      	adds	r4, r7, #4
 800a314:	461d      	mov	r5, r3
 800a316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a31a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a31e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800a322:	1d3b      	adds	r3, r7, #4
 800a324:	490b      	ldr	r1, [pc, #44]	@ (800a354 <MX_LWIP_Init+0x264>)
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fd70 	bl	800ae0c <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a32c:	bf00      	nop
 800a32e:	3720      	adds	r7, #32
 800a330:	46bd      	mov	sp, r7
 800a332:	bdb0      	pop	{r4, r5, r7, pc}
 800a334:	24005a10 	.word	0x24005a10
 800a338:	24005a14 	.word	0x24005a14
 800a33c:	24005a18 	.word	0x24005a18
 800a340:	24005a04 	.word	0x24005a04
 800a344:	24005a08 	.word	0x24005a08
 800a348:	24005a0c 	.word	0x24005a0c
 800a34c:	0800e015 	.word	0x0800e015
 800a350:	0800a835 	.word	0x0800a835
 800a354:	240059d0 	.word	0x240059d0
 800a358:	0800a361 	.word	0x0800a361
 800a35c:	080198f8 	.word	0x080198f8

0800a360 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800a360:	b480      	push	{r7}
 800a362:	b083      	sub	sp, #12
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800a37c:	4b04      	ldr	r3, [pc, #16]	@ (800a390 <HAL_ETH_RxCpltCallback+0x1c>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4618      	mov	r0, r3
 800a382:	f000 febf 	bl	800b104 <osSemaphoreRelease>
}
 800a386:	bf00      	nop
 800a388:	3708      	adds	r7, #8
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}
 800a38e:	bf00      	nop
 800a390:	24005a24 	.word	0x24005a24

0800a394 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800a39c:	4b04      	ldr	r3, [pc, #16]	@ (800a3b0 <HAL_ETH_TxCpltCallback+0x1c>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f000 feaf 	bl	800b104 <osSemaphoreRelease>
}
 800a3a6:	bf00      	nop
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	24005a28 	.word	0x24005a28

0800a3b4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMACSR_RBU) == ETH_DMACSR_RBU)
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7fa fb21 	bl	8004a04 <HAL_ETH_GetDMAError>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3c8:	2b80      	cmp	r3, #128	@ 0x80
 800a3ca:	d104      	bne.n	800a3d6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800a3cc:	4b04      	ldr	r3, [pc, #16]	@ (800a3e0 <HAL_ETH_ErrorCallback+0x2c>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	f000 fe97 	bl	800b104 <osSemaphoreRelease>
  }
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	24005a24 	.word	0x24005a24

0800a3e4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800a3e4:	b5b0      	push	{r4, r5, r7, lr}
 800a3e6:	b0ac      	sub	sp, #176	@ 0xb0
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
  uint32_t duplex, speed = 0;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  int32_t PHYLinkState = 0;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 800a3fe:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a402:	2264      	movs	r2, #100	@ 0x64
 800a404:	2100      	movs	r1, #0
 800a406:	4618      	mov	r0, r3
 800a408:	f00e fafe 	bl	8018a08 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800a40c:	4b8f      	ldr	r3, [pc, #572]	@ (800a64c <low_level_init+0x268>)
 800a40e:	4a90      	ldr	r2, [pc, #576]	@ (800a650 <low_level_init+0x26c>)
 800a410:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800a412:	2300      	movs	r3, #0
 800a414:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  MACAddr[1] = 0x80;
 800a418:	2380      	movs	r3, #128	@ 0x80
 800a41a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  MACAddr[2] = 0xE1;
 800a41e:	23e1      	movs	r3, #225	@ 0xe1
 800a420:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MACAddr[3] = 0x00;
 800a424:	2300      	movs	r3, #0
 800a426:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MACAddr[4] = 0x00;
 800a42a:	2300      	movs	r3, #0
 800a42c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  MACAddr[5] = 0x00;
 800a430:	2300      	movs	r3, #0
 800a432:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800a436:	4a85      	ldr	r2, [pc, #532]	@ (800a64c <low_level_init+0x268>)
 800a438:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800a43c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800a43e:	4b83      	ldr	r3, [pc, #524]	@ (800a64c <low_level_init+0x268>)
 800a440:	2201      	movs	r2, #1
 800a442:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800a444:	4b81      	ldr	r3, [pc, #516]	@ (800a64c <low_level_init+0x268>)
 800a446:	4a83      	ldr	r2, [pc, #524]	@ (800a654 <low_level_init+0x270>)
 800a448:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800a44a:	4b80      	ldr	r3, [pc, #512]	@ (800a64c <low_level_init+0x268>)
 800a44c:	4a82      	ldr	r2, [pc, #520]	@ (800a658 <low_level_init+0x274>)
 800a44e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800a450:	4b7e      	ldr	r3, [pc, #504]	@ (800a64c <low_level_init+0x268>)
 800a452:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800a456:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a458:	487c      	ldr	r0, [pc, #496]	@ (800a64c <low_level_init+0x268>)
 800a45a:	f7f9 fb07 	bl	8003a6c <HAL_ETH_Init>
 800a45e:	4603      	mov	r3, r0
 800a460:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800a464:	2238      	movs	r2, #56	@ 0x38
 800a466:	2100      	movs	r1, #0
 800a468:	487c      	ldr	r0, [pc, #496]	@ (800a65c <low_level_init+0x278>)
 800a46a:	f00e facd 	bl	8018a08 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800a46e:	4b7b      	ldr	r3, [pc, #492]	@ (800a65c <low_level_init+0x278>)
 800a470:	2221      	movs	r2, #33	@ 0x21
 800a472:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800a474:	4b79      	ldr	r3, [pc, #484]	@ (800a65c <low_level_init+0x278>)
 800a476:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800a47a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800a47c:	4b77      	ldr	r3, [pc, #476]	@ (800a65c <low_level_init+0x278>)
 800a47e:	2200      	movs	r2, #0
 800a480:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800a482:	4877      	ldr	r0, [pc, #476]	@ (800a660 <low_level_init+0x27c>)
 800a484:	f004 fb74 	bl	800eb70 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2206      	movs	r2, #6
 800a48c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a490:	4b6e      	ldr	r3, [pc, #440]	@ (800a64c <low_level_init+0x268>)
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	781a      	ldrb	r2, [r3, #0]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a49c:	4b6b      	ldr	r3, [pc, #428]	@ (800a64c <low_level_init+0x268>)
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	785a      	ldrb	r2, [r3, #1]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a4a8:	4b68      	ldr	r3, [pc, #416]	@ (800a64c <low_level_init+0x268>)
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	789a      	ldrb	r2, [r3, #2]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a4b4:	4b65      	ldr	r3, [pc, #404]	@ (800a64c <low_level_init+0x268>)
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	78da      	ldrb	r2, [r3, #3]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a4c0:	4b62      	ldr	r3, [pc, #392]	@ (800a64c <low_level_init+0x268>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	791a      	ldrb	r2, [r3, #4]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a4cc:	4b5f      	ldr	r3, [pc, #380]	@ (800a64c <low_level_init+0x268>)
 800a4ce:	685b      	ldr	r3, [r3, #4]
 800a4d0:	795a      	ldrb	r2, [r3, #5]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800a4de:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a4e6:	f043 030a 	orr.w	r3, r3, #10
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800a4fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a4fe:	2101      	movs	r1, #1
 800a500:	4618      	mov	r0, r3
 800a502:	f000 fd7f 	bl	800b004 <osSemaphoreCreate>
 800a506:	4603      	mov	r3, r0
 800a508:	4a56      	ldr	r2, [pc, #344]	@ (800a664 <low_level_init+0x280>)
 800a50a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800a50c:	2300      	movs	r3, #0
 800a50e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a510:	2300      	movs	r3, #0
 800a512:	62bb      	str	r3, [r7, #40]	@ 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800a514:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a518:	2101      	movs	r1, #1
 800a51a:	4618      	mov	r0, r3
 800a51c:	f000 fd72 	bl	800b004 <osSemaphoreCreate>
 800a520:	4603      	mov	r3, r0
 800a522:	4a51      	ldr	r2, [pc, #324]	@ (800a668 <low_level_init+0x284>)
 800a524:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800a526:	4b4f      	ldr	r3, [pc, #316]	@ (800a664 <low_level_init+0x280>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2100      	movs	r1, #0
 800a52c:	4618      	mov	r0, r3
 800a52e:	f000 fd9b 	bl	800b068 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800a532:	4b4d      	ldr	r3, [pc, #308]	@ (800a668 <low_level_init+0x284>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2100      	movs	r1, #0
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 fd95 	bl	800b068 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a53e:	4b4b      	ldr	r3, [pc, #300]	@ (800a66c <low_level_init+0x288>)
 800a540:	f107 0408 	add.w	r4, r7, #8
 800a544:	461d      	mov	r5, r3
 800a546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a54a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a54e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800a552:	f107 0308 	add.w	r3, r7, #8
 800a556:	6879      	ldr	r1, [r7, #4]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fc57 	bl	800ae0c <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800a55e:	4944      	ldr	r1, [pc, #272]	@ (800a670 <low_level_init+0x28c>)
 800a560:	4844      	ldr	r0, [pc, #272]	@ (800a674 <low_level_init+0x290>)
 800a562:	f7f7 f8b0 	bl	80016c6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800a566:	4843      	ldr	r0, [pc, #268]	@ (800a674 <low_level_init+0x290>)
 800a568:	f7f7 f8df 	bl	800172a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800a56c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 800a570:	2b00      	cmp	r3, #0
 800a572:	d164      	bne.n	800a63e <low_level_init+0x25a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800a574:	483f      	ldr	r0, [pc, #252]	@ (800a674 <low_level_init+0x290>)
 800a576:	f7f7 f925 	bl	80017c4 <LAN8742_GetLinkState>
 800a57a:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800a57e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a582:	2b01      	cmp	r3, #1
 800a584:	dc06      	bgt.n	800a594 <low_level_init+0x1b0>
    {
      netif_set_link_down(netif);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f004 fecc 	bl	800f324 <netif_set_link_down>
      netif_set_down(netif);
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f004 fe63 	bl	800f258 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800a592:	e056      	b.n	800a642 <low_level_init+0x25e>
      switch (PHYLinkState)
 800a594:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a598:	3b02      	subs	r3, #2
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d82a      	bhi.n	800a5f4 <low_level_init+0x210>
 800a59e:	a201      	add	r2, pc, #4	@ (adr r2, 800a5a4 <low_level_init+0x1c0>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5b5 	.word	0x0800a5b5
 800a5a8:	0800a5c7 	.word	0x0800a5c7
 800a5ac:	0800a5d7 	.word	0x0800a5d7
 800a5b0:	0800a5e7 	.word	0x0800a5e7
        duplex = ETH_FULLDUPLEX_MODE;
 800a5b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800a5bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a5c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800a5c4:	e01f      	b.n	800a606 <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800a5cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a5d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800a5d4:	e017      	b.n	800a606 <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 800a5d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800a5e4:	e00f      	b.n	800a606 <low_level_init+0x222>
        duplex = ETH_HALFDUPLEX_MODE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_10M;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800a5f2:	e008      	b.n	800a606 <low_level_init+0x222>
        duplex = ETH_FULLDUPLEX_MODE;
 800a5f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        speed = ETH_SPEED_100M;
 800a5fc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800a600:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        break;
 800a604:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800a606:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a60a:	4619      	mov	r1, r3
 800a60c:	480f      	ldr	r0, [pc, #60]	@ (800a64c <low_level_init+0x268>)
 800a60e:	f7f9 ffbb 	bl	8004588 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800a612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a616:	657b      	str	r3, [r7, #84]	@ 0x54
    MACConf.Speed = speed;
 800a618:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a61c:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800a61e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800a622:	4619      	mov	r1, r3
 800a624:	4809      	ldr	r0, [pc, #36]	@ (800a64c <low_level_init+0x268>)
 800a626:	f7fa f983 	bl	8004930 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800a62a:	4808      	ldr	r0, [pc, #32]	@ (800a64c <low_level_init+0x268>)
 800a62c:	f7f9 fb1c 	bl	8003c68 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f004 fda5 	bl	800f180 <netif_set_up>
    netif_set_link_up(netif);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f004 fe40 	bl	800f2bc <netif_set_link_up>
}
 800a63c:	e001      	b.n	800a642 <low_level_init+0x25e>
    Error_Handler();
 800a63e:	f7f6 fcb1 	bl	8000fa4 <Error_Handler>
}
 800a642:	bf00      	nop
 800a644:	37b0      	adds	r7, #176	@ 0xb0
 800a646:	46bd      	mov	sp, r7
 800a648:	bdb0      	pop	{r4, r5, r7, pc}
 800a64a:	bf00      	nop
 800a64c:	24005a2c 	.word	0x24005a2c
 800a650:	40028000 	.word	0x40028000
 800a654:	30000100 	.word	0x30000100
 800a658:	30000000 	.word	0x30000000
 800a65c:	24005adc 	.word	0x24005adc
 800a660:	0801c434 	.word	0x0801c434
 800a664:	24005a24 	.word	0x24005a24
 800a668:	24005a28 	.word	0x24005a28
 800a66c:	0801991c 	.word	0x0801991c
 800a670:	2400499c 	.word	0x2400499c
 800a674:	24005b14 	.word	0x24005b14

0800a678 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b092      	sub	sp, #72	@ 0x48
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800a682:	2300      	movs	r3, #0
 800a684:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800a686:	2300      	movs	r3, #0
 800a688:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800a68a:	2300      	movs	r3, #0
 800a68c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800a690:	f107 030c 	add.w	r3, r7, #12
 800a694:	2230      	movs	r2, #48	@ 0x30
 800a696:	2100      	movs	r1, #0
 800a698:	4618      	mov	r0, r3
 800a69a:	f00e f9b5 	bl	8018a08 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800a69e:	f107 030c 	add.w	r3, r7, #12
 800a6a2:	2230      	movs	r2, #48	@ 0x30
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00e f9ae 	bl	8018a08 <memset>

  for(q = p; q != NULL; q = q->next)
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6b0:	e045      	b.n	800a73e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800a6b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6b4:	2b03      	cmp	r3, #3
 800a6b6:	d902      	bls.n	800a6be <low_level_output+0x46>
      return ERR_IF;
 800a6b8:	f06f 030b 	mvn.w	r3, #11
 800a6bc:	e06c      	b.n	800a798 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800a6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6c0:	6859      	ldr	r1, [r3, #4]
 800a6c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	3348      	adds	r3, #72	@ 0x48
 800a6ce:	443b      	add	r3, r7
 800a6d0:	3b3c      	subs	r3, #60	@ 0x3c
 800a6d2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800a6d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6d6:	895b      	ldrh	r3, [r3, #10]
 800a6d8:	4619      	mov	r1, r3
 800a6da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a6dc:	4613      	mov	r3, r2
 800a6de:	005b      	lsls	r3, r3, #1
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	3348      	adds	r3, #72	@ 0x48
 800a6e6:	443b      	add	r3, r7
 800a6e8:	3b38      	subs	r3, #56	@ 0x38
 800a6ea:	6019      	str	r1, [r3, #0]

    if(i>0)
 800a6ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d011      	beq.n	800a716 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800a6f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a6f4:	1e5a      	subs	r2, r3, #1
 800a6f6:	f107 000c 	add.w	r0, r7, #12
 800a6fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	005b      	lsls	r3, r3, #1
 800a700:	440b      	add	r3, r1
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	18c1      	adds	r1, r0, r3
 800a706:	4613      	mov	r3, r2
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	3348      	adds	r3, #72	@ 0x48
 800a710:	443b      	add	r3, r7
 800a712:	3b34      	subs	r3, #52	@ 0x34
 800a714:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800a716:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d109      	bne.n	800a732 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800a71e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a720:	4613      	mov	r3, r2
 800a722:	005b      	lsls	r3, r3, #1
 800a724:	4413      	add	r3, r2
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	3348      	adds	r3, #72	@ 0x48
 800a72a:	443b      	add	r3, r7
 800a72c:	3b34      	subs	r3, #52	@ 0x34
 800a72e:	2200      	movs	r2, #0
 800a730:	601a      	str	r2, [r3, #0]
    }

    i++;
 800a732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a734:	3301      	adds	r3, #1
 800a736:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800a738:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a73e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1b6      	bne.n	800a6b2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	891b      	ldrh	r3, [r3, #8]
 800a748:	461a      	mov	r2, r3
 800a74a:	4b15      	ldr	r3, [pc, #84]	@ (800a7a0 <low_level_output+0x128>)
 800a74c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800a74e:	4a14      	ldr	r2, [pc, #80]	@ (800a7a0 <low_level_output+0x128>)
 800a750:	f107 030c 	add.w	r3, r7, #12
 800a754:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800a756:	4a12      	ldr	r2, [pc, #72]	@ (800a7a0 <low_level_output+0x128>)
 800a758:	683b      	ldr	r3, [r7, #0]
 800a75a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800a75c:	6838      	ldr	r0, [r7, #0]
 800a75e:	f005 fa69 	bl	800fc34 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800a762:	490f      	ldr	r1, [pc, #60]	@ (800a7a0 <low_level_output+0x128>)
 800a764:	480f      	ldr	r0, [pc, #60]	@ (800a7a4 <low_level_output+0x12c>)
 800a766:	f7f9 fb6b 	bl	8003e40 <HAL_ETH_Transmit_IT>
 800a76a:	4603      	mov	r3, r0
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10e      	bne.n	800a78e <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800a770:	bf00      	nop
 800a772:	4b0d      	ldr	r3, [pc, #52]	@ (800a7a8 <low_level_output+0x130>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a77a:	4618      	mov	r0, r3
 800a77c:	f000 fc74 	bl	800b068 <osSemaphoreWait>
 800a780:	4603      	mov	r3, r0
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1f5      	bne.n	800a772 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800a786:	4807      	ldr	r0, [pc, #28]	@ (800a7a4 <low_level_output+0x12c>)
 800a788:	f7f9 fce1 	bl	800414e <HAL_ETH_ReleaseTxPacket>
 800a78c:	e002      	b.n	800a794 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800a78e:	6838      	ldr	r0, [r7, #0]
 800a790:	f005 f9aa 	bl	800fae8 <pbuf_free>
  }

  return errval;
 800a794:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3748      	adds	r7, #72	@ 0x48
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	24005adc 	.word	0x24005adc
 800a7a4:	24005a2c 	.word	0x24005a2c
 800a7a8:	24005a28 	.word	0x24005a28

0800a7ac <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b084      	sub	sp, #16
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800a7b8:	4b07      	ldr	r3, [pc, #28]	@ (800a7d8 <low_level_input+0x2c>)
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800a7c0:	f107 030c 	add.w	r3, r7, #12
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	4805      	ldr	r0, [pc, #20]	@ (800a7dc <low_level_input+0x30>)
 800a7c8:	f7f9 fb8b 	bl	8003ee2 <HAL_ETH_ReadData>
  }

  return p;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	24005a20 	.word	0x24005a20
 800a7dc:	24005a2c 	.word	0x24005a2c

0800a7e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a7f0:	4b0f      	ldr	r3, [pc, #60]	@ (800a830 <ethernetif_input+0x50>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 fc35 	bl	800b068 <osSemaphoreWait>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f5      	bne.n	800a7f0 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800a804:	68b8      	ldr	r0, [r7, #8]
 800a806:	f7ff ffd1 	bl	800a7ac <low_level_input>
 800a80a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	68f8      	ldr	r0, [r7, #12]
 800a81a:	4798      	blx	r3
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d002      	beq.n	800a828 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	f005 f960 	bl	800fae8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1ea      	bne.n	800a804 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800a82e:	e7df      	b.n	800a7f0 <ethernetif_input+0x10>
 800a830:	24005a24 	.word	0x24005a24

0800a834 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d106      	bne.n	800a850 <ethernetif_init+0x1c>
 800a842:	4b0e      	ldr	r3, [pc, #56]	@ (800a87c <ethernetif_init+0x48>)
 800a844:	f240 2203 	movw	r2, #515	@ 0x203
 800a848:	490d      	ldr	r1, [pc, #52]	@ (800a880 <ethernetif_init+0x4c>)
 800a84a:	480e      	ldr	r0, [pc, #56]	@ (800a884 <ethernetif_init+0x50>)
 800a84c:	f00e f8ba 	bl	80189c4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2273      	movs	r2, #115	@ 0x73
 800a854:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2274      	movs	r2, #116	@ 0x74
 800a85c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a09      	ldr	r2, [pc, #36]	@ (800a888 <ethernetif_init+0x54>)
 800a864:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	4a08      	ldr	r2, [pc, #32]	@ (800a88c <ethernetif_init+0x58>)
 800a86a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f7ff fdb9 	bl	800a3e4 <low_level_init>

  return ERR_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3708      	adds	r7, #8
 800a878:	46bd      	mov	sp, r7
 800a87a:	bd80      	pop	{r7, pc}
 800a87c:	08019938 	.word	0x08019938
 800a880:	08019954 	.word	0x08019954
 800a884:	08019964 	.word	0x08019964
 800a888:	08016859 	.word	0x08016859
 800a88c:	0800a679 	.word	0x0800a679

0800a890 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800a89c:	68f9      	ldr	r1, [r7, #12]
 800a89e:	4809      	ldr	r0, [pc, #36]	@ (800a8c4 <pbuf_free_custom+0x34>)
 800a8a0:	f004 fa56 	bl	800ed50 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800a8a4:	4b08      	ldr	r3, [pc, #32]	@ (800a8c8 <pbuf_free_custom+0x38>)
 800a8a6:	781b      	ldrb	r3, [r3, #0]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d107      	bne.n	800a8bc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800a8ac:	4b06      	ldr	r3, [pc, #24]	@ (800a8c8 <pbuf_free_custom+0x38>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800a8b2:	4b06      	ldr	r3, [pc, #24]	@ (800a8cc <pbuf_free_custom+0x3c>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fc24 	bl	800b104 <osSemaphoreRelease>
  }
}
 800a8bc:	bf00      	nop
 800a8be:	3710      	adds	r7, #16
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	0801c434 	.word	0x0801c434
 800a8c8:	24005a20 	.word	0x24005a20
 800a8cc:	24005a24 	.word	0x24005a24

0800a8d0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800a8d4:	f7f7 f84e 	bl	8001974 <HAL_GetTick>
 800a8d8:	4603      	mov	r3, r0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	bd80      	pop	{r7, pc}
	...

0800a8e0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b08e      	sub	sp, #56	@ 0x38
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	601a      	str	r2, [r3, #0]
 800a8f0:	605a      	str	r2, [r3, #4]
 800a8f2:	609a      	str	r2, [r3, #8]
 800a8f4:	60da      	str	r2, [r3, #12]
 800a8f6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a5d      	ldr	r2, [pc, #372]	@ (800aa74 <HAL_ETH_MspInit+0x194>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	f040 80b3 	bne.w	800aa6a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800a904:	4b5c      	ldr	r3, [pc, #368]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a906:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a90a:	4a5b      	ldr	r2, [pc, #364]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a90c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a910:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a914:	4b58      	ldr	r3, [pc, #352]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a916:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a91a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a91e:	623b      	str	r3, [r7, #32]
 800a920:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800a922:	4b55      	ldr	r3, [pc, #340]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a924:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a928:	4a53      	ldr	r2, [pc, #332]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a92a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a92e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a932:	4b51      	ldr	r3, [pc, #324]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a938:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a93c:	61fb      	str	r3, [r7, #28]
 800a93e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800a940:	4b4d      	ldr	r3, [pc, #308]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a946:	4a4c      	ldr	r2, [pc, #304]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a94c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800a950:	4b49      	ldr	r3, [pc, #292]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a952:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a95a:	61bb      	str	r3, [r7, #24]
 800a95c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a95e:	4b46      	ldr	r3, [pc, #280]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a964:	4a44      	ldr	r2, [pc, #272]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a966:	f043 0304 	orr.w	r3, r3, #4
 800a96a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a96e:	4b42      	ldr	r3, [pc, #264]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a974:	f003 0304 	and.w	r3, r3, #4
 800a978:	617b      	str	r3, [r7, #20]
 800a97a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a97c:	4b3e      	ldr	r3, [pc, #248]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a97e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a982:	4a3d      	ldr	r2, [pc, #244]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a984:	f043 0301 	orr.w	r3, r3, #1
 800a988:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a98c:	4b3a      	ldr	r3, [pc, #232]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a98e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	613b      	str	r3, [r7, #16]
 800a998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a99a:	4b37      	ldr	r3, [pc, #220]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9a0:	4a35      	ldr	r2, [pc, #212]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a9a2:	f043 0302 	orr.w	r3, r3, #2
 800a9a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a9aa:	4b33      	ldr	r3, [pc, #204]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a9ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	60fb      	str	r3, [r7, #12]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800a9b8:	4b2f      	ldr	r3, [pc, #188]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a9ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9be:	4a2e      	ldr	r2, [pc, #184]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a9c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800a9c8:	4b2b      	ldr	r3, [pc, #172]	@ (800aa78 <HAL_ETH_MspInit+0x198>)
 800a9ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a9ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9d2:	60bb      	str	r3, [r7, #8]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800a9d6:	2332      	movs	r3, #50	@ 0x32
 800a9d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9da:	2302      	movs	r3, #2
 800a9dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a9e6:	230b      	movs	r3, #11
 800a9e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a9ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4822      	ldr	r0, [pc, #136]	@ (800aa7c <HAL_ETH_MspInit+0x19c>)
 800a9f2:	f7fa fd97 	bl	8005524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800a9f6:	2386      	movs	r3, #134	@ 0x86
 800a9f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa02:	2300      	movs	r3, #0
 800aa04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa06:	230b      	movs	r3, #11
 800aa08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa0e:	4619      	mov	r1, r3
 800aa10:	481b      	ldr	r0, [pc, #108]	@ (800aa80 <HAL_ETH_MspInit+0x1a0>)
 800aa12:	f7fa fd87 	bl	8005524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800aa16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800aa1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa20:	2300      	movs	r3, #0
 800aa22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa24:	2300      	movs	r3, #0
 800aa26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa28:	230b      	movs	r3, #11
 800aa2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aa2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa30:	4619      	mov	r1, r3
 800aa32:	4814      	ldr	r0, [pc, #80]	@ (800aa84 <HAL_ETH_MspInit+0x1a4>)
 800aa34:	f7fa fd76 	bl	8005524 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800aa38:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800aa3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa3e:	2302      	movs	r3, #2
 800aa40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa46:	2300      	movs	r3, #0
 800aa48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aa4a:	230b      	movs	r3, #11
 800aa4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800aa4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa52:	4619      	mov	r1, r3
 800aa54:	480c      	ldr	r0, [pc, #48]	@ (800aa88 <HAL_ETH_MspInit+0x1a8>)
 800aa56:	f7fa fd65 	bl	8005524 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	2105      	movs	r1, #5
 800aa5e:	203d      	movs	r0, #61	@ 0x3d
 800aa60:	f7f7 f860 	bl	8001b24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800aa64:	203d      	movs	r0, #61	@ 0x3d
 800aa66:	f7f7 f877 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800aa6a:	bf00      	nop
 800aa6c:	3738      	adds	r7, #56	@ 0x38
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	40028000 	.word	0x40028000
 800aa78:	58024400 	.word	0x58024400
 800aa7c:	58020800 	.word	0x58020800
 800aa80:	58020000 	.word	0x58020000
 800aa84:	58020400 	.word	0x58020400
 800aa88:	58021800 	.word	0x58021800

0800aa8c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800aa90:	4802      	ldr	r0, [pc, #8]	@ (800aa9c <ETH_PHY_IO_Init+0x10>)
 800aa92:	f7f9 ff67 	bl	8004964 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800aa96:	2300      	movs	r3, #0
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	24005a2c 	.word	0x24005a2c

0800aaa0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	af00      	add	r7, sp, #0
  return 0;
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	68f9      	ldr	r1, [r7, #12]
 800aac2:	4807      	ldr	r0, [pc, #28]	@ (800aae0 <ETH_PHY_IO_ReadReg+0x30>)
 800aac4:	f7f9 fcb8 	bl	8004438 <HAL_ETH_ReadPHYRegister>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d002      	beq.n	800aad4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800aace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aad2:	e000      	b.n	800aad6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	24005a2c 	.word	0x24005a2c

0800aae4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b084      	sub	sp, #16
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	68ba      	ldr	r2, [r7, #8]
 800aaf4:	68f9      	ldr	r1, [r7, #12]
 800aaf6:	4807      	ldr	r0, [pc, #28]	@ (800ab14 <ETH_PHY_IO_WriteReg+0x30>)
 800aaf8:	f7f9 fcf2 	bl	80044e0 <HAL_ETH_WritePHYRegister>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ab02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab06:	e000      	b.n	800ab0a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	24005a2c 	.word	0x24005a2c

0800ab18 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ab1c:	f7f6 ff2a 	bl	8001974 <HAL_GetTick>
 800ab20:	4603      	mov	r3, r0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	bd80      	pop	{r7, pc}
	...

0800ab28 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b0a0      	sub	sp, #128	@ 0x80
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ab30:	f107 0308 	add.w	r3, r7, #8
 800ab34:	2264      	movs	r2, #100	@ 0x64
 800ab36:	2100      	movs	r1, #0
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f00d ff65 	bl	8018a08 <memset>
  int32_t PHYLinkState = 0;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800ab42:	2300      	movs	r3, #0
 800ab44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ab46:	2300      	movs	r3, #0
 800ab48:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ab52:	483a      	ldr	r0, [pc, #232]	@ (800ac3c <ethernet_link_thread+0x114>)
 800ab54:	f7f6 fe36 	bl	80017c4 <LAN8742_GetLinkState>
 800ab58:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800ab5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab5c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab60:	089b      	lsrs	r3, r3, #2
 800ab62:	f003 0301 	and.w	r3, r3, #1
 800ab66:	b2db      	uxtb	r3, r3
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d00c      	beq.n	800ab86 <ethernet_link_thread+0x5e>
 800ab6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	dc09      	bgt.n	800ab86 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ab72:	4833      	ldr	r0, [pc, #204]	@ (800ac40 <ethernet_link_thread+0x118>)
 800ab74:	f7f9 f8ec 	bl	8003d50 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ab78:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab7a:	f004 fb6d 	bl	800f258 <netif_set_down>
    netif_set_link_down(netif);
 800ab7e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ab80:	f004 fbd0 	bl	800f324 <netif_set_link_down>
 800ab84:	e055      	b.n	800ac32 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ab86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab88:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d14e      	bne.n	800ac32 <ethernet_link_thread+0x10a>
 800ab94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	dd4b      	ble.n	800ac32 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ab9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab9c:	3b02      	subs	r3, #2
 800ab9e:	2b03      	cmp	r3, #3
 800aba0:	d82a      	bhi.n	800abf8 <ethernet_link_thread+0xd0>
 800aba2:	a201      	add	r2, pc, #4	@ (adr r2, 800aba8 <ethernet_link_thread+0x80>)
 800aba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba8:	0800abb9 	.word	0x0800abb9
 800abac:	0800abcb 	.word	0x0800abcb
 800abb0:	0800abdb 	.word	0x0800abdb
 800abb4:	0800abeb 	.word	0x0800abeb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800abb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800abbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800abbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800abc2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800abc4:	2301      	movs	r3, #1
 800abc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800abc8:	e017      	b.n	800abfa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800abca:	2300      	movs	r3, #0
 800abcc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800abce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800abd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800abd4:	2301      	movs	r3, #1
 800abd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800abd8:	e00f      	b.n	800abfa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800abda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800abde:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800abe0:	2300      	movs	r3, #0
 800abe2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800abe4:	2301      	movs	r3, #1
 800abe6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800abe8:	e007      	b.n	800abfa <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800abea:	2300      	movs	r3, #0
 800abec:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800abee:	2300      	movs	r3, #0
 800abf0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800abf2:	2301      	movs	r3, #1
 800abf4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800abf6:	e000      	b.n	800abfa <ethernet_link_thread+0xd2>
    default:
      break;
 800abf8:	bf00      	nop
    }

    if(linkchanged)
 800abfa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d018      	beq.n	800ac32 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ac00:	f107 0308 	add.w	r3, r7, #8
 800ac04:	4619      	mov	r1, r3
 800ac06:	480e      	ldr	r0, [pc, #56]	@ (800ac40 <ethernet_link_thread+0x118>)
 800ac08:	f7f9 fcbe 	bl	8004588 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ac0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ac0e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800ac10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ac12:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	4619      	mov	r1, r3
 800ac1a:	4809      	ldr	r0, [pc, #36]	@ (800ac40 <ethernet_link_thread+0x118>)
 800ac1c:	f7f9 fe88 	bl	8004930 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800ac20:	4807      	ldr	r0, [pc, #28]	@ (800ac40 <ethernet_link_thread+0x118>)
 800ac22:	f7f9 f821 	bl	8003c68 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ac26:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac28:	f004 faaa 	bl	800f180 <netif_set_up>
      netif_set_link_up(netif);
 800ac2c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ac2e:	f004 fb45 	bl	800f2bc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ac32:	2064      	movs	r0, #100	@ 0x64
 800ac34:	f000 f936 	bl	800aea4 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ac38:	e78b      	b.n	800ab52 <ethernet_link_thread+0x2a>
 800ac3a:	bf00      	nop
 800ac3c:	24005b14 	.word	0x24005b14
 800ac40:	24005a2c 	.word	0x24005a2c

0800ac44 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af02      	add	r7, sp, #8
 800ac4a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ac4c:	4812      	ldr	r0, [pc, #72]	@ (800ac98 <HAL_ETH_RxAllocateCallback+0x54>)
 800ac4e:	f004 f80b 	bl	800ec68 <memp_malloc_pool>
 800ac52:	60f8      	str	r0, [r7, #12]
  if (p)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d014      	beq.n	800ac84 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f103 0220 	add.w	r2, r3, #32
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4a0d      	ldr	r2, [pc, #52]	@ (800ac9c <HAL_ETH_RxAllocateCallback+0x58>)
 800ac68:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ac72:	9201      	str	r2, [sp, #4]
 800ac74:	9300      	str	r3, [sp, #0]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2241      	movs	r2, #65	@ 0x41
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	f004 fd79 	bl	800f774 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ac82:	e005      	b.n	800ac90 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ac84:	4b06      	ldr	r3, [pc, #24]	@ (800aca0 <HAL_ETH_RxAllocateCallback+0x5c>)
 800ac86:	2201      	movs	r2, #1
 800ac88:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	601a      	str	r2, [r3, #0]
}
 800ac90:	bf00      	nop
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	0801c434 	.word	0x0801c434
 800ac9c:	0800a891 	.word	0x0800a891
 800aca0:	24005a20 	.word	0x24005a20

0800aca4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b08d      	sub	sp, #52	@ 0x34
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
 800acb0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	627b      	str	r3, [r7, #36]	@ 0x24
  struct pbuf *p = NULL;
 800acba:	2300      	movs	r3, #0
 800acbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	3b20      	subs	r3, #32
 800acc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  p->next = NULL;
 800acc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acc6:	2200      	movs	r2, #0
 800acc8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800acca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800accc:	2200      	movs	r2, #0
 800acce:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800acd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acd2:	887a      	ldrh	r2, [r7, #2]
 800acd4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d103      	bne.n	800ace6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800acde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ace2:	601a      	str	r2, [r3, #0]
 800ace4:	e003      	b.n	800acee <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800ace6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acec:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800acf2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800acf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800acfa:	e009      	b.n	800ad10 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800acfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfe:	891a      	ldrh	r2, [r3, #8]
 800ad00:	887b      	ldrh	r3, [r7, #2]
 800ad02:	4413      	add	r3, r2
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad08:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800ad0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d1f2      	bne.n	800acfc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800ad16:	887b      	ldrh	r3, [r7, #2]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	623a      	str	r2, [r7, #32]
 800ad1c:	61fb      	str	r3, [r7, #28]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800ad1e:	69fb      	ldr	r3, [r7, #28]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	dd1d      	ble.n	800ad60 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	f003 021f 	and.w	r2, r3, #31
 800ad2a:	69fb      	ldr	r3, [r7, #28]
 800ad2c:	4413      	add	r3, r2
 800ad2e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad34:	f3bf 8f4f 	dsb	sy
}
 800ad38:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800ad3a:	4a0d      	ldr	r2, [pc, #52]	@ (800ad70 <HAL_ETH_RxLinkCallback+0xcc>)
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	3320      	adds	r3, #32
 800ad46:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800ad48:	69bb      	ldr	r3, [r7, #24]
 800ad4a:	3b20      	subs	r3, #32
 800ad4c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dcf2      	bgt.n	800ad3a <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800ad54:	f3bf 8f4f 	dsb	sy
}
 800ad58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ad5a:	f3bf 8f6f 	isb	sy
}
 800ad5e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800ad60:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800ad62:	bf00      	nop
 800ad64:	3734      	adds	r7, #52	@ 0x34
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	e000ed00 	.word	0xe000ed00

0800ad74 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f004 feb3 	bl	800fae8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800ad82:	bf00      	nop
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}

0800ad8a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	b085      	sub	sp, #20
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	4603      	mov	r3, r0
 800ad92:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ad94:	2300      	movs	r3, #0
 800ad96:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ad98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad9c:	2b84      	cmp	r3, #132	@ 0x84
 800ad9e:	d005      	beq.n	800adac <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ada0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	3303      	adds	r3, #3
 800adaa:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800adac:	68fb      	ldr	r3, [r7, #12]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3714      	adds	r7, #20
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adc0:	f3ef 8305 	mrs	r3, IPSR
 800adc4:	607b      	str	r3, [r7, #4]
  return(result);
 800adc6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800adc8:	2b00      	cmp	r3, #0
 800adca:	bf14      	ite	ne
 800adcc:	2301      	movne	r3, #1
 800adce:	2300      	moveq	r3, #0
 800add0:	b2db      	uxtb	r3, r3
}
 800add2:	4618      	mov	r0, r3
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr

0800adde <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800ade2:	f001 fc95 	bl	800c710 <vTaskStartScheduler>
  
  return osOK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	bd80      	pop	{r7, pc}

0800adec <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800adf0:	f7ff ffe3 	bl	800adba <inHandlerMode>
 800adf4:	4603      	mov	r3, r0
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800adfa:	f001 fdaf 	bl	800c95c <xTaskGetTickCountFromISR>
 800adfe:	4603      	mov	r3, r0
 800ae00:	e002      	b.n	800ae08 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800ae02:	f001 fd9b 	bl	800c93c <xTaskGetTickCount>
 800ae06:	4603      	mov	r3, r0
  }
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ae0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae0e:	b089      	sub	sp, #36	@ 0x24
 800ae10:	af04      	add	r7, sp, #16
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d020      	beq.n	800ae60 <osThreadCreate+0x54>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01c      	beq.n	800ae60 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	685c      	ldr	r4, [r3, #4]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	691e      	ldr	r6, [r3, #16]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f7ff ffa6 	bl	800ad8a <makeFreeRtosPriority>
 800ae3e:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae48:	9202      	str	r2, [sp, #8]
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	9100      	str	r1, [sp, #0]
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	4632      	mov	r2, r6
 800ae52:	4629      	mov	r1, r5
 800ae54:	4620      	mov	r0, r4
 800ae56:	f001 fa75 	bl	800c344 <xTaskCreateStatic>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	e01c      	b.n	800ae9a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	685c      	ldr	r4, [r3, #4]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae6c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ae74:	4618      	mov	r0, r3
 800ae76:	f7ff ff88 	bl	800ad8a <makeFreeRtosPriority>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	f107 030c 	add.w	r3, r7, #12
 800ae80:	9301      	str	r3, [sp, #4]
 800ae82:	9200      	str	r2, [sp, #0]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	4632      	mov	r2, r6
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f001 faba 	bl	800c404 <xTaskCreate>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b01      	cmp	r3, #1
 800ae94:	d001      	beq.n	800ae9a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	e000      	b.n	800ae9c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aea4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b084      	sub	sp, #16
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <osDelay+0x16>
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	e000      	b.n	800aebc <osDelay+0x18>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 fbf1 	bl	800c6a4 <vTaskDelay>
  
  return osOK;
 800aec2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3710      	adds	r7, #16
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b082      	sub	sp, #8
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d007      	beq.n	800aeec <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	4619      	mov	r1, r3
 800aee2:	2001      	movs	r0, #1
 800aee4:	f000 fc47 	bl	800b776 <xQueueCreateMutexStatic>
 800aee8:	4603      	mov	r3, r0
 800aeea:	e003      	b.n	800aef4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800aeec:	2001      	movs	r0, #1
 800aeee:	f000 fc2a 	bl	800b746 <xQueueCreateMutex>
 800aef2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800af06:	2300      	movs	r3, #0
 800af08:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d101      	bne.n	800af14 <osMutexWait+0x18>
    return osErrorParameter;
 800af10:	2380      	movs	r3, #128	@ 0x80
 800af12:	e03a      	b.n	800af8a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800af14:	2300      	movs	r3, #0
 800af16:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af1e:	d103      	bne.n	800af28 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800af20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	e009      	b.n	800af3c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d006      	beq.n	800af3c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d101      	bne.n	800af3c <osMutexWait+0x40>
      ticks = 1;
 800af38:	2301      	movs	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800af3c:	f7ff ff3d 	bl	800adba <inHandlerMode>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d017      	beq.n	800af76 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800af46:	f107 0308 	add.w	r3, r7, #8
 800af4a:	461a      	mov	r2, r3
 800af4c:	2100      	movs	r1, #0
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f001 f84e 	bl	800bff0 <xQueueReceiveFromISR>
 800af54:	4603      	mov	r3, r0
 800af56:	2b01      	cmp	r3, #1
 800af58:	d001      	beq.n	800af5e <osMutexWait+0x62>
      return osErrorOS;
 800af5a:	23ff      	movs	r3, #255	@ 0xff
 800af5c:	e015      	b.n	800af8a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d011      	beq.n	800af88 <osMutexWait+0x8c>
 800af64:	4b0b      	ldr	r3, [pc, #44]	@ (800af94 <osMutexWait+0x98>)
 800af66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af6a:	601a      	str	r2, [r3, #0]
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	f3bf 8f6f 	isb	sy
 800af74:	e008      	b.n	800af88 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800af76:	68f9      	ldr	r1, [r7, #12]
 800af78:	6878      	ldr	r0, [r7, #4]
 800af7a:	f000 ff29 	bl	800bdd0 <xQueueSemaphoreTake>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b01      	cmp	r3, #1
 800af82:	d001      	beq.n	800af88 <osMutexWait+0x8c>
    return osErrorOS;
 800af84:	23ff      	movs	r3, #255	@ 0xff
 800af86:	e000      	b.n	800af8a <osMutexWait+0x8e>
  }
  
  return osOK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3710      	adds	r7, #16
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	e000ed04 	.word	0xe000ed04

0800af98 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800afa0:	2300      	movs	r3, #0
 800afa2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800afa8:	f7ff ff07 	bl	800adba <inHandlerMode>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d016      	beq.n	800afe0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800afb2:	f107 0308 	add.w	r3, r7, #8
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fd97 	bl	800baec <xQueueGiveFromISR>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d001      	beq.n	800afc8 <osMutexRelease+0x30>
      return osErrorOS;
 800afc4:	23ff      	movs	r3, #255	@ 0xff
 800afc6:	e017      	b.n	800aff8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d013      	beq.n	800aff6 <osMutexRelease+0x5e>
 800afce:	4b0c      	ldr	r3, [pc, #48]	@ (800b000 <osMutexRelease+0x68>)
 800afd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afd4:	601a      	str	r2, [r3, #0]
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	e00a      	b.n	800aff6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800afe0:	2300      	movs	r3, #0
 800afe2:	2200      	movs	r2, #0
 800afe4:	2100      	movs	r1, #0
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f000 fbe0 	bl	800b7ac <xQueueGenericSend>
 800afec:	4603      	mov	r3, r0
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d001      	beq.n	800aff6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800aff2:	23ff      	movs	r3, #255	@ 0xff
 800aff4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800aff6:	68fb      	ldr	r3, [r7, #12]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	e000ed04 	.word	0xe000ed04

0800b004 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b004:	b580      	push	{r7, lr}
 800b006:	b086      	sub	sp, #24
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	685b      	ldr	r3, [r3, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d00f      	beq.n	800b036 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d10a      	bne.n	800b032 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	2203      	movs	r2, #3
 800b022:	9200      	str	r2, [sp, #0]
 800b024:	2200      	movs	r2, #0
 800b026:	2100      	movs	r1, #0
 800b028:	2001      	movs	r0, #1
 800b02a:	f000 fa9b 	bl	800b564 <xQueueGenericCreateStatic>
 800b02e:	4603      	mov	r3, r0
 800b030:	e016      	b.n	800b060 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b032:	2300      	movs	r3, #0
 800b034:	e014      	b.n	800b060 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d110      	bne.n	800b05e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b03c:	2203      	movs	r2, #3
 800b03e:	2100      	movs	r1, #0
 800b040:	2001      	movs	r0, #1
 800b042:	f000 fb0c 	bl	800b65e <xQueueGenericCreate>
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <osSemaphoreCreate+0x56>
 800b04e:	2300      	movs	r3, #0
 800b050:	2200      	movs	r2, #0
 800b052:	2100      	movs	r1, #0
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 fba9 	bl	800b7ac <xQueueGenericSend>
      return sema;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	e000      	b.n	800b060 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b05e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b060:	4618      	mov	r0, r3
 800b062:	3710      	adds	r7, #16
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b072:	2300      	movs	r3, #0
 800b074:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b07c:	2380      	movs	r3, #128	@ 0x80
 800b07e:	e03a      	b.n	800b0f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b08a:	d103      	bne.n	800b094 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b08c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b090:	60fb      	str	r3, [r7, #12]
 800b092:	e009      	b.n	800b0a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d006      	beq.n	800b0a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <osSemaphoreWait+0x40>
      ticks = 1;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b0a8:	f7ff fe87 	bl	800adba <inHandlerMode>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d017      	beq.n	800b0e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b0b2:	f107 0308 	add.w	r3, r7, #8
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 ff98 	bl	800bff0 <xQueueReceiveFromISR>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d001      	beq.n	800b0ca <osSemaphoreWait+0x62>
      return osErrorOS;
 800b0c6:	23ff      	movs	r3, #255	@ 0xff
 800b0c8:	e015      	b.n	800b0f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d011      	beq.n	800b0f4 <osSemaphoreWait+0x8c>
 800b0d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b100 <osSemaphoreWait+0x98>)
 800b0d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	f3bf 8f4f 	dsb	sy
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	e008      	b.n	800b0f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b0e2:	68f9      	ldr	r1, [r7, #12]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fe73 	bl	800bdd0 <xQueueSemaphoreTake>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d001      	beq.n	800b0f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b0f0:	23ff      	movs	r3, #255	@ 0xff
 800b0f2:	e000      	b.n	800b0f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b0f4:	2300      	movs	r3, #0
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b110:	2300      	movs	r3, #0
 800b112:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b114:	f7ff fe51 	bl	800adba <inHandlerMode>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d016      	beq.n	800b14c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b11e:	f107 0308 	add.w	r3, r7, #8
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 fce1 	bl	800baec <xQueueGiveFromISR>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d001      	beq.n	800b134 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b130:	23ff      	movs	r3, #255	@ 0xff
 800b132:	e017      	b.n	800b164 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d013      	beq.n	800b162 <osSemaphoreRelease+0x5e>
 800b13a:	4b0c      	ldr	r3, [pc, #48]	@ (800b16c <osSemaphoreRelease+0x68>)
 800b13c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	e00a      	b.n	800b162 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b14c:	2300      	movs	r3, #0
 800b14e:	2200      	movs	r2, #0
 800b150:	2100      	movs	r1, #0
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 fb2a 	bl	800b7ac <xQueueGenericSend>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d001      	beq.n	800b162 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b15e:	23ff      	movs	r3, #255	@ 0xff
 800b160:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b162:	68fb      	ldr	r3, [r7, #12]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	e000ed04 	.word	0xe000ed04

0800b170 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b085      	sub	sp, #20
 800b174:	af02      	add	r7, sp, #8
 800b176:	6078      	str	r0, [r7, #4]
 800b178:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d011      	beq.n	800b1a6 <osMessageCreate+0x36>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d00d      	beq.n	800b1a6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6818      	ldr	r0, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6859      	ldr	r1, [r3, #4]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	689a      	ldr	r2, [r3, #8]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	2400      	movs	r4, #0
 800b19c:	9400      	str	r4, [sp, #0]
 800b19e:	f000 f9e1 	bl	800b564 <xQueueGenericCreateStatic>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	e008      	b.n	800b1b8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6818      	ldr	r0, [r3, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	4619      	mov	r1, r3
 800b1b2:	f000 fa54 	bl	800b65e <xQueueGenericCreate>
 800b1b6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd90      	pop	{r4, r7, pc}

0800b1c0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d101      	bne.n	800b1de <osMessagePut+0x1e>
    ticks = 1;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b1de:	f7ff fdec 	bl	800adba <inHandlerMode>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d018      	beq.n	800b21a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b1e8:	f107 0210 	add.w	r2, r7, #16
 800b1ec:	f107 0108 	add.w	r1, r7, #8
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	f000 fbdc 	bl	800b9b0 <xQueueGenericSendFromISR>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d001      	beq.n	800b202 <osMessagePut+0x42>
      return osErrorOS;
 800b1fe:	23ff      	movs	r3, #255	@ 0xff
 800b200:	e018      	b.n	800b234 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d014      	beq.n	800b232 <osMessagePut+0x72>
 800b208:	4b0c      	ldr	r3, [pc, #48]	@ (800b23c <osMessagePut+0x7c>)
 800b20a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b20e:	601a      	str	r2, [r3, #0]
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	f3bf 8f6f 	isb	sy
 800b218:	e00b      	b.n	800b232 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b21a:	f107 0108 	add.w	r1, r7, #8
 800b21e:	2300      	movs	r3, #0
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	68f8      	ldr	r0, [r7, #12]
 800b224:	f000 fac2 	bl	800b7ac <xQueueGenericSend>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	d001      	beq.n	800b232 <osMessagePut+0x72>
      return osErrorOS;
 800b22e:	23ff      	movs	r3, #255	@ 0xff
 800b230:	e000      	b.n	800b234 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	3718      	adds	r7, #24
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	e000ed04 	.word	0xe000ed04

0800b240 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b08b      	sub	sp, #44	@ 0x2c
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10a      	bne.n	800b270 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b25a:	2380      	movs	r3, #128	@ 0x80
 800b25c:	617b      	str	r3, [r7, #20]
    return event;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	461c      	mov	r4, r3
 800b262:	f107 0314 	add.w	r3, r7, #20
 800b266:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b26a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b26e:	e054      	b.n	800b31a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b270:	2300      	movs	r3, #0
 800b272:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b27e:	d103      	bne.n	800b288 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b284:	627b      	str	r3, [r7, #36]	@ 0x24
 800b286:	e009      	b.n	800b29c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d006      	beq.n	800b29c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800b292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	d101      	bne.n	800b29c <osMessageGet+0x5c>
      ticks = 1;
 800b298:	2301      	movs	r3, #1
 800b29a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b29c:	f7ff fd8d 	bl	800adba <inHandlerMode>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d01c      	beq.n	800b2e0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b2a6:	f107 0220 	add.w	r2, r7, #32
 800b2aa:	f107 0314 	add.w	r3, r7, #20
 800b2ae:	3304      	adds	r3, #4
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	68b8      	ldr	r0, [r7, #8]
 800b2b4:	f000 fe9c 	bl	800bff0 <xQueueReceiveFromISR>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d102      	bne.n	800b2c4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b2be:	2310      	movs	r3, #16
 800b2c0:	617b      	str	r3, [r7, #20]
 800b2c2:	e001      	b.n	800b2c8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b2c8:	6a3b      	ldr	r3, [r7, #32]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d01d      	beq.n	800b30a <osMessageGet+0xca>
 800b2ce:	4b15      	ldr	r3, [pc, #84]	@ (800b324 <osMessageGet+0xe4>)
 800b2d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2d4:	601a      	str	r2, [r3, #0]
 800b2d6:	f3bf 8f4f 	dsb	sy
 800b2da:	f3bf 8f6f 	isb	sy
 800b2de:	e014      	b.n	800b30a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b2e0:	f107 0314 	add.w	r3, r7, #20
 800b2e4:	3304      	adds	r3, #4
 800b2e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	68b8      	ldr	r0, [r7, #8]
 800b2ec:	f000 fc8e 	bl	800bc0c <xQueueReceive>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	2b01      	cmp	r3, #1
 800b2f4:	d102      	bne.n	800b2fc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b2f6:	2310      	movs	r3, #16
 800b2f8:	617b      	str	r3, [r7, #20]
 800b2fa:	e006      	b.n	800b30a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <osMessageGet+0xc6>
 800b302:	2300      	movs	r3, #0
 800b304:	e000      	b.n	800b308 <osMessageGet+0xc8>
 800b306:	2340      	movs	r3, #64	@ 0x40
 800b308:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	461c      	mov	r4, r3
 800b30e:	f107 0314 	add.w	r3, r7, #20
 800b312:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b316:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	372c      	adds	r7, #44	@ 0x2c
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd90      	pop	{r4, r7, pc}
 800b322:	bf00      	nop
 800b324:	e000ed04 	.word	0xe000ed04

0800b328 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f103 0208 	add.w	r2, r3, #8
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b340:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	f103 0208 	add.w	r2, r3, #8
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f103 0208 	add.w	r2, r3, #8
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b368:	b480      	push	{r7}
 800b36a:	b083      	sub	sp, #12
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
 800b38a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	68fa      	ldr	r2, [r7, #12]
 800b396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	689a      	ldr	r2, [r3, #8]
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	683a      	ldr	r2, [r7, #0]
 800b3a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	683a      	ldr	r2, [r7, #0]
 800b3ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	1c5a      	adds	r2, r3, #1
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
}
 800b3be:	bf00      	nop
 800b3c0:	3714      	adds	r7, #20
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b085      	sub	sp, #20
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
 800b3d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3e0:	d103      	bne.n	800b3ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	691b      	ldr	r3, [r3, #16]
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e00c      	b.n	800b404 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e002      	b.n	800b3f8 <vListInsert+0x2e>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	685b      	ldr	r3, [r3, #4]
 800b3f6:	60fb      	str	r3, [r7, #12]
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68ba      	ldr	r2, [r7, #8]
 800b400:	429a      	cmp	r2, r3
 800b402:	d2f6      	bcs.n	800b3f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	685a      	ldr	r2, [r3, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	683a      	ldr	r2, [r7, #0]
 800b412:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	1c5a      	adds	r2, r3, #1
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	601a      	str	r2, [r3, #0]
}
 800b430:	bf00      	nop
 800b432:	3714      	adds	r7, #20
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	687a      	ldr	r2, [r7, #4]
 800b450:	6892      	ldr	r2, [r2, #8]
 800b452:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	689b      	ldr	r3, [r3, #8]
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	6852      	ldr	r2, [r2, #4]
 800b45c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	429a      	cmp	r2, r3
 800b466:	d103      	bne.n	800b470 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	689a      	ldr	r2, [r3, #8]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2200      	movs	r2, #0
 800b474:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	1e5a      	subs	r2, r3, #1
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3714      	adds	r7, #20
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d10b      	bne.n	800b4bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a8:	f383 8811 	msr	BASEPRI, r3
 800b4ac:	f3bf 8f6f 	isb	sy
 800b4b0:	f3bf 8f4f 	dsb	sy
 800b4b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b4b6:	bf00      	nop
 800b4b8:	bf00      	nop
 800b4ba:	e7fd      	b.n	800b4b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b4bc:	f002 f9a4 	bl	800d808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4c8:	68f9      	ldr	r1, [r7, #12]
 800b4ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	441a      	add	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4ec:	3b01      	subs	r3, #1
 800b4ee:	68f9      	ldr	r1, [r7, #12]
 800b4f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800b4f2:	fb01 f303 	mul.w	r3, r1, r3
 800b4f6:	441a      	add	r2, r3
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	22ff      	movs	r2, #255	@ 0xff
 800b500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	22ff      	movs	r2, #255	@ 0xff
 800b508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d114      	bne.n	800b53c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d01a      	beq.n	800b550 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3310      	adds	r3, #16
 800b51e:	4618      	mov	r0, r3
 800b520:	f001 fb72 	bl	800cc08 <xTaskRemoveFromEventList>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d012      	beq.n	800b550 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b52a:	4b0d      	ldr	r3, [pc, #52]	@ (800b560 <xQueueGenericReset+0xd0>)
 800b52c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b530:	601a      	str	r2, [r3, #0]
 800b532:	f3bf 8f4f 	dsb	sy
 800b536:	f3bf 8f6f 	isb	sy
 800b53a:	e009      	b.n	800b550 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3310      	adds	r3, #16
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff fef1 	bl	800b328 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3324      	adds	r3, #36	@ 0x24
 800b54a:	4618      	mov	r0, r3
 800b54c:	f7ff feec 	bl	800b328 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b550:	f002 f98c 	bl	800d86c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b554:	2301      	movs	r3, #1
}
 800b556:	4618      	mov	r0, r3
 800b558:	3710      	adds	r7, #16
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	e000ed04 	.word	0xe000ed04

0800b564 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08e      	sub	sp, #56	@ 0x38
 800b568:	af02      	add	r7, sp, #8
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d10b      	bne.n	800b590 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800b578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57c:	f383 8811 	msr	BASEPRI, r3
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b58a:	bf00      	nop
 800b58c:	bf00      	nop
 800b58e:	e7fd      	b.n	800b58c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <xQueueGenericCreateStatic+0x56>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <xQueueGenericCreateStatic+0x5a>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e000      	b.n	800b5c0 <xQueueGenericCreateStatic+0x5c>
 800b5be:	2300      	movs	r3, #0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10b      	bne.n	800b5dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	623b      	str	r3, [r7, #32]
}
 800b5d6:	bf00      	nop
 800b5d8:	bf00      	nop
 800b5da:	e7fd      	b.n	800b5d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d102      	bne.n	800b5e8 <xQueueGenericCreateStatic+0x84>
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d101      	bne.n	800b5ec <xQueueGenericCreateStatic+0x88>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	e000      	b.n	800b5ee <xQueueGenericCreateStatic+0x8a>
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d10b      	bne.n	800b60a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800b5f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f6:	f383 8811 	msr	BASEPRI, r3
 800b5fa:	f3bf 8f6f 	isb	sy
 800b5fe:	f3bf 8f4f 	dsb	sy
 800b602:	61fb      	str	r3, [r7, #28]
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	e7fd      	b.n	800b606 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b60a:	2348      	movs	r3, #72	@ 0x48
 800b60c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	2b48      	cmp	r3, #72	@ 0x48
 800b612:	d00b      	beq.n	800b62c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800b614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	61bb      	str	r3, [r7, #24]
}
 800b626:	bf00      	nop
 800b628:	bf00      	nop
 800b62a:	e7fd      	b.n	800b628 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b62c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800b632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00d      	beq.n	800b654 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b640:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800b644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b646:	9300      	str	r3, [sp, #0]
 800b648:	4613      	mov	r3, r2
 800b64a:	687a      	ldr	r2, [r7, #4]
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	68f8      	ldr	r0, [r7, #12]
 800b650:	f000 f840 	bl	800b6d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800b656:	4618      	mov	r0, r3
 800b658:	3730      	adds	r7, #48	@ 0x30
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b08a      	sub	sp, #40	@ 0x28
 800b662:	af02      	add	r7, sp, #8
 800b664:	60f8      	str	r0, [r7, #12]
 800b666:	60b9      	str	r1, [r7, #8]
 800b668:	4613      	mov	r3, r2
 800b66a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d10b      	bne.n	800b68a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	613b      	str	r3, [r7, #16]
}
 800b684:	bf00      	nop
 800b686:	bf00      	nop
 800b688:	e7fd      	b.n	800b686 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	68ba      	ldr	r2, [r7, #8]
 800b68e:	fb02 f303 	mul.w	r3, r2, r3
 800b692:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	3348      	adds	r3, #72	@ 0x48
 800b698:	4618      	mov	r0, r3
 800b69a:	f002 f9d7 	bl	800da4c <pvPortMalloc>
 800b69e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b6a0:	69bb      	ldr	r3, [r7, #24]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d011      	beq.n	800b6ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b6aa:	697b      	ldr	r3, [r7, #20]
 800b6ac:	3348      	adds	r3, #72	@ 0x48
 800b6ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b6b8:	79fa      	ldrb	r2, [r7, #7]
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	4613      	mov	r3, r2
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	68b9      	ldr	r1, [r7, #8]
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f000 f805 	bl	800b6d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b6ca:	69bb      	ldr	r3, [r7, #24]
	}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3720      	adds	r7, #32
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}

0800b6d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
 800b6e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	69ba      	ldr	r2, [r7, #24]
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	e002      	b.n	800b6f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	687a      	ldr	r2, [r7, #4]
 800b6f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	68fa      	ldr	r2, [r7, #12]
 800b6fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	68ba      	ldr	r2, [r7, #8]
 800b700:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b702:	2101      	movs	r1, #1
 800b704:	69b8      	ldr	r0, [r7, #24]
 800b706:	f7ff fec3 	bl	800b490 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b712:	b580      	push	{r7, lr}
 800b714:	b082      	sub	sp, #8
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00e      	beq.n	800b73e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2200      	movs	r2, #0
 800b724:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2200      	movs	r2, #0
 800b72a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b732:	2300      	movs	r3, #0
 800b734:	2200      	movs	r2, #0
 800b736:	2100      	movs	r1, #0
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f837 	bl	800b7ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b73e:	bf00      	nop
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}

0800b746 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b746:	b580      	push	{r7, lr}
 800b748:	b086      	sub	sp, #24
 800b74a:	af00      	add	r7, sp, #0
 800b74c:	4603      	mov	r3, r0
 800b74e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b750:	2301      	movs	r3, #1
 800b752:	617b      	str	r3, [r7, #20]
 800b754:	2300      	movs	r3, #0
 800b756:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	461a      	mov	r2, r3
 800b75c:	6939      	ldr	r1, [r7, #16]
 800b75e:	6978      	ldr	r0, [r7, #20]
 800b760:	f7ff ff7d 	bl	800b65e <xQueueGenericCreate>
 800b764:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f7ff ffd3 	bl	800b712 <prvInitialiseMutex>

		return xNewQueue;
 800b76c:	68fb      	ldr	r3, [r7, #12]
	}
 800b76e:	4618      	mov	r0, r3
 800b770:	3718      	adds	r7, #24
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b776:	b580      	push	{r7, lr}
 800b778:	b088      	sub	sp, #32
 800b77a:	af02      	add	r7, sp, #8
 800b77c:	4603      	mov	r3, r0
 800b77e:	6039      	str	r1, [r7, #0]
 800b780:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b782:	2301      	movs	r3, #1
 800b784:	617b      	str	r3, [r7, #20]
 800b786:	2300      	movs	r3, #0
 800b788:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	9300      	str	r3, [sp, #0]
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	2200      	movs	r2, #0
 800b792:	6939      	ldr	r1, [r7, #16]
 800b794:	6978      	ldr	r0, [r7, #20]
 800b796:	f7ff fee5 	bl	800b564 <xQueueGenericCreateStatic>
 800b79a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff ffb8 	bl	800b712 <prvInitialiseMutex>

		return xNewQueue;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
	}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b08e      	sub	sp, #56	@ 0x38
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10b      	bne.n	800b7e0 <xQueueGenericSend+0x34>
	__asm volatile
 800b7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7cc:	f383 8811 	msr	BASEPRI, r3
 800b7d0:	f3bf 8f6f 	isb	sy
 800b7d4:	f3bf 8f4f 	dsb	sy
 800b7d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b7da:	bf00      	nop
 800b7dc:	bf00      	nop
 800b7de:	e7fd      	b.n	800b7dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d103      	bne.n	800b7ee <xQueueGenericSend+0x42>
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d101      	bne.n	800b7f2 <xQueueGenericSend+0x46>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e000      	b.n	800b7f4 <xQueueGenericSend+0x48>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d10b      	bne.n	800b810 <xQueueGenericSend+0x64>
	__asm volatile
 800b7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fc:	f383 8811 	msr	BASEPRI, r3
 800b800:	f3bf 8f6f 	isb	sy
 800b804:	f3bf 8f4f 	dsb	sy
 800b808:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b80a:	bf00      	nop
 800b80c:	bf00      	nop
 800b80e:	e7fd      	b.n	800b80c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d103      	bne.n	800b81e <xQueueGenericSend+0x72>
 800b816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d101      	bne.n	800b822 <xQueueGenericSend+0x76>
 800b81e:	2301      	movs	r3, #1
 800b820:	e000      	b.n	800b824 <xQueueGenericSend+0x78>
 800b822:	2300      	movs	r3, #0
 800b824:	2b00      	cmp	r3, #0
 800b826:	d10b      	bne.n	800b840 <xQueueGenericSend+0x94>
	__asm volatile
 800b828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b82c:	f383 8811 	msr	BASEPRI, r3
 800b830:	f3bf 8f6f 	isb	sy
 800b834:	f3bf 8f4f 	dsb	sy
 800b838:	623b      	str	r3, [r7, #32]
}
 800b83a:	bf00      	nop
 800b83c:	bf00      	nop
 800b83e:	e7fd      	b.n	800b83c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b840:	f001 fba8 	bl	800cf94 <xTaskGetSchedulerState>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <xQueueGenericSend+0xa4>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <xQueueGenericSend+0xa8>
 800b850:	2301      	movs	r3, #1
 800b852:	e000      	b.n	800b856 <xQueueGenericSend+0xaa>
 800b854:	2300      	movs	r3, #0
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10b      	bne.n	800b872 <xQueueGenericSend+0xc6>
	__asm volatile
 800b85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85e:	f383 8811 	msr	BASEPRI, r3
 800b862:	f3bf 8f6f 	isb	sy
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	61fb      	str	r3, [r7, #28]
}
 800b86c:	bf00      	nop
 800b86e:	bf00      	nop
 800b870:	e7fd      	b.n	800b86e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b872:	f001 ffc9 	bl	800d808 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b87c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b87e:	429a      	cmp	r2, r3
 800b880:	d302      	bcc.n	800b888 <xQueueGenericSend+0xdc>
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d129      	bne.n	800b8dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	68b9      	ldr	r1, [r7, #8]
 800b88c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b88e:	f000 fc49 	bl	800c124 <prvCopyDataToQueue>
 800b892:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d010      	beq.n	800b8be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b89e:	3324      	adds	r3, #36	@ 0x24
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f001 f9b1 	bl	800cc08 <xTaskRemoveFromEventList>
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d013      	beq.n	800b8d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b8ac:	4b3f      	ldr	r3, [pc, #252]	@ (800b9ac <xQueueGenericSend+0x200>)
 800b8ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	f3bf 8f4f 	dsb	sy
 800b8b8:	f3bf 8f6f 	isb	sy
 800b8bc:	e00a      	b.n	800b8d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b8be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d007      	beq.n	800b8d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b8c4:	4b39      	ldr	r3, [pc, #228]	@ (800b9ac <xQueueGenericSend+0x200>)
 800b8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ca:	601a      	str	r2, [r3, #0]
 800b8cc:	f3bf 8f4f 	dsb	sy
 800b8d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b8d4:	f001 ffca 	bl	800d86c <vPortExitCritical>
				return pdPASS;
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e063      	b.n	800b9a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d103      	bne.n	800b8ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b8e2:	f001 ffc3 	bl	800d86c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e05c      	b.n	800b9a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d106      	bne.n	800b8fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b8f0:	f107 0314 	add.w	r3, r7, #20
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f001 f9eb 	bl	800ccd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8fe:	f001 ffb5 	bl	800d86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b902:	f000 ff6f 	bl	800c7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b906:	f001 ff7f 	bl	800d808 <vPortEnterCritical>
 800b90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b90c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b910:	b25b      	sxtb	r3, r3
 800b912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b916:	d103      	bne.n	800b920 <xQueueGenericSend+0x174>
 800b918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b91a:	2200      	movs	r2, #0
 800b91c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b926:	b25b      	sxtb	r3, r3
 800b928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b92c:	d103      	bne.n	800b936 <xQueueGenericSend+0x18a>
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	2200      	movs	r2, #0
 800b932:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b936:	f001 ff99 	bl	800d86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b93a:	1d3a      	adds	r2, r7, #4
 800b93c:	f107 0314 	add.w	r3, r7, #20
 800b940:	4611      	mov	r1, r2
 800b942:	4618      	mov	r0, r3
 800b944:	f001 f9da 	bl	800ccfc <xTaskCheckForTimeOut>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d124      	bne.n	800b998 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b94e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b950:	f000 fce0 	bl	800c314 <prvIsQueueFull>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d018      	beq.n	800b98c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b95c:	3310      	adds	r3, #16
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	4611      	mov	r1, r2
 800b962:	4618      	mov	r0, r3
 800b964:	f001 f92a 	bl	800cbbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b96a:	f000 fc6b 	bl	800c244 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b96e:	f000 ff47 	bl	800c800 <xTaskResumeAll>
 800b972:	4603      	mov	r3, r0
 800b974:	2b00      	cmp	r3, #0
 800b976:	f47f af7c 	bne.w	800b872 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b97a:	4b0c      	ldr	r3, [pc, #48]	@ (800b9ac <xQueueGenericSend+0x200>)
 800b97c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	f3bf 8f4f 	dsb	sy
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	e772      	b.n	800b872 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b98c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b98e:	f000 fc59 	bl	800c244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b992:	f000 ff35 	bl	800c800 <xTaskResumeAll>
 800b996:	e76c      	b.n	800b872 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b998:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b99a:	f000 fc53 	bl	800c244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b99e:	f000 ff2f 	bl	800c800 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b9a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3738      	adds	r7, #56	@ 0x38
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	e000ed04 	.word	0xe000ed04

0800b9b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b090      	sub	sp, #64	@ 0x40
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
 800b9bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10b      	bne.n	800b9e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b9da:	bf00      	nop
 800b9dc:	bf00      	nop
 800b9de:	e7fd      	b.n	800b9dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d103      	bne.n	800b9ee <xQueueGenericSendFromISR+0x3e>
 800b9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d101      	bne.n	800b9f2 <xQueueGenericSendFromISR+0x42>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <xQueueGenericSendFromISR+0x44>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10b      	bne.n	800ba10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ba0a:	bf00      	nop
 800ba0c:	bf00      	nop
 800ba0e:	e7fd      	b.n	800ba0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d103      	bne.n	800ba1e <xQueueGenericSendFromISR+0x6e>
 800ba16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba1a:	2b01      	cmp	r3, #1
 800ba1c:	d101      	bne.n	800ba22 <xQueueGenericSendFromISR+0x72>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e000      	b.n	800ba24 <xQueueGenericSendFromISR+0x74>
 800ba22:	2300      	movs	r3, #0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10b      	bne.n	800ba40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2c:	f383 8811 	msr	BASEPRI, r3
 800ba30:	f3bf 8f6f 	isb	sy
 800ba34:	f3bf 8f4f 	dsb	sy
 800ba38:	623b      	str	r3, [r7, #32]
}
 800ba3a:	bf00      	nop
 800ba3c:	bf00      	nop
 800ba3e:	e7fd      	b.n	800ba3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ba40:	f001 ffc2 	bl	800d9c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ba44:	f3ef 8211 	mrs	r2, BASEPRI
 800ba48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba4c:	f383 8811 	msr	BASEPRI, r3
 800ba50:	f3bf 8f6f 	isb	sy
 800ba54:	f3bf 8f4f 	dsb	sy
 800ba58:	61fa      	str	r2, [r7, #28]
 800ba5a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ba5c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ba5e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ba60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d302      	bcc.n	800ba72 <xQueueGenericSendFromISR+0xc2>
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	2b02      	cmp	r3, #2
 800ba70:	d12f      	bne.n	800bad2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ba72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ba7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ba82:	683a      	ldr	r2, [r7, #0]
 800ba84:	68b9      	ldr	r1, [r7, #8]
 800ba86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ba88:	f000 fb4c 	bl	800c124 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ba8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba94:	d112      	bne.n	800babc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d016      	beq.n	800bacc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa0:	3324      	adds	r3, #36	@ 0x24
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 f8b0 	bl	800cc08 <xTaskRemoveFromEventList>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d00e      	beq.n	800bacc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	e007      	b.n	800bacc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800babc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800bac0:	3301      	adds	r3, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	b25a      	sxtb	r2, r3
 800bac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bacc:	2301      	movs	r3, #1
 800bace:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800bad0:	e001      	b.n	800bad6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bad2:	2300      	movs	r3, #0
 800bad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bae0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3740      	adds	r7, #64	@ 0x40
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}

0800baec <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b08e      	sub	sp, #56	@ 0x38
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800bafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10b      	bne.n	800bb18 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	623b      	str	r3, [r7, #32]
}
 800bb12:	bf00      	nop
 800bb14:	bf00      	nop
 800bb16:	e7fd      	b.n	800bb14 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00b      	beq.n	800bb38 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800bb20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb24:	f383 8811 	msr	BASEPRI, r3
 800bb28:	f3bf 8f6f 	isb	sy
 800bb2c:	f3bf 8f4f 	dsb	sy
 800bb30:	61fb      	str	r3, [r7, #28]
}
 800bb32:	bf00      	nop
 800bb34:	bf00      	nop
 800bb36:	e7fd      	b.n	800bb34 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d103      	bne.n	800bb48 <xQueueGiveFromISR+0x5c>
 800bb40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d101      	bne.n	800bb4c <xQueueGiveFromISR+0x60>
 800bb48:	2301      	movs	r3, #1
 800bb4a:	e000      	b.n	800bb4e <xQueueGiveFromISR+0x62>
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d10b      	bne.n	800bb6a <xQueueGiveFromISR+0x7e>
	__asm volatile
 800bb52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	61bb      	str	r3, [r7, #24]
}
 800bb64:	bf00      	nop
 800bb66:	bf00      	nop
 800bb68:	e7fd      	b.n	800bb66 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bb6a:	f001 ff2d 	bl	800d9c8 <vPortValidateInterruptPriority>
	__asm volatile
 800bb6e:	f3ef 8211 	mrs	r2, BASEPRI
 800bb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	617a      	str	r2, [r7, #20]
 800bb84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bb86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bb88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb8e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d22b      	bcs.n	800bbf2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bb9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bba0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba6:	1c5a      	adds	r2, r3, #1
 800bba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbaa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bbac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bbb0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbb4:	d112      	bne.n	800bbdc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bbb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d016      	beq.n	800bbec <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bbbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbc0:	3324      	adds	r3, #36	@ 0x24
 800bbc2:	4618      	mov	r0, r3
 800bbc4:	f001 f820 	bl	800cc08 <xTaskRemoveFromEventList>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00e      	beq.n	800bbec <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00b      	beq.n	800bbec <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	601a      	str	r2, [r3, #0]
 800bbda:	e007      	b.n	800bbec <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bbdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bbe0:	3301      	adds	r3, #1
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	b25a      	sxtb	r2, r3
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800bbec:	2301      	movs	r3, #1
 800bbee:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbf0:	e001      	b.n	800bbf6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbf8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f383 8811 	msr	BASEPRI, r3
}
 800bc00:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3738      	adds	r7, #56	@ 0x38
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08c      	sub	sp, #48	@ 0x30
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10b      	bne.n	800bc3e <xQueueReceive+0x32>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	623b      	str	r3, [r7, #32]
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	e7fd      	b.n	800bc3a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <xQueueReceive+0x40>
 800bc44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d101      	bne.n	800bc50 <xQueueReceive+0x44>
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e000      	b.n	800bc52 <xQueueReceive+0x46>
 800bc50:	2300      	movs	r3, #0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10b      	bne.n	800bc6e <xQueueReceive+0x62>
	__asm volatile
 800bc56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5a:	f383 8811 	msr	BASEPRI, r3
 800bc5e:	f3bf 8f6f 	isb	sy
 800bc62:	f3bf 8f4f 	dsb	sy
 800bc66:	61fb      	str	r3, [r7, #28]
}
 800bc68:	bf00      	nop
 800bc6a:	bf00      	nop
 800bc6c:	e7fd      	b.n	800bc6a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc6e:	f001 f991 	bl	800cf94 <xTaskGetSchedulerState>
 800bc72:	4603      	mov	r3, r0
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <xQueueReceive+0x72>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d101      	bne.n	800bc82 <xQueueReceive+0x76>
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e000      	b.n	800bc84 <xQueueReceive+0x78>
 800bc82:	2300      	movs	r3, #0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10b      	bne.n	800bca0 <xQueueReceive+0x94>
	__asm volatile
 800bc88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc8c:	f383 8811 	msr	BASEPRI, r3
 800bc90:	f3bf 8f6f 	isb	sy
 800bc94:	f3bf 8f4f 	dsb	sy
 800bc98:	61bb      	str	r3, [r7, #24]
}
 800bc9a:	bf00      	nop
 800bc9c:	bf00      	nop
 800bc9e:	e7fd      	b.n	800bc9c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bca0:	f001 fdb2 	bl	800d808 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bca8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d01f      	beq.n	800bcf0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bcb4:	f000 faa0 	bl	800c1f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcba:	1e5a      	subs	r2, r3, #1
 800bcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bcc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d00f      	beq.n	800bce8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bcc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcca:	3310      	adds	r3, #16
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 ff9b 	bl	800cc08 <xTaskRemoveFromEventList>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d007      	beq.n	800bce8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bcd8:	4b3c      	ldr	r3, [pc, #240]	@ (800bdcc <xQueueReceive+0x1c0>)
 800bcda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bcde:	601a      	str	r2, [r3, #0]
 800bce0:	f3bf 8f4f 	dsb	sy
 800bce4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bce8:	f001 fdc0 	bl	800d86c <vPortExitCritical>
				return pdPASS;
 800bcec:	2301      	movs	r3, #1
 800bcee:	e069      	b.n	800bdc4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d103      	bne.n	800bcfe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bcf6:	f001 fdb9 	bl	800d86c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	e062      	b.n	800bdc4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bcfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd04:	f107 0310 	add.w	r3, r7, #16
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f000 ffe1 	bl	800ccd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd12:	f001 fdab 	bl	800d86c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd16:	f000 fd65 	bl	800c7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd1a:	f001 fd75 	bl	800d808 <vPortEnterCritical>
 800bd1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bd24:	b25b      	sxtb	r3, r3
 800bd26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd2a:	d103      	bne.n	800bd34 <xQueueReceive+0x128>
 800bd2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd2e:	2200      	movs	r2, #0
 800bd30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bd34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bd3a:	b25b      	sxtb	r3, r3
 800bd3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd40:	d103      	bne.n	800bd4a <xQueueReceive+0x13e>
 800bd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd44:	2200      	movs	r2, #0
 800bd46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bd4a:	f001 fd8f 	bl	800d86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd4e:	1d3a      	adds	r2, r7, #4
 800bd50:	f107 0310 	add.w	r3, r7, #16
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f000 ffd0 	bl	800ccfc <xTaskCheckForTimeOut>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d123      	bne.n	800bdaa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bd62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd64:	f000 fac0 	bl	800c2e8 <prvIsQueueEmpty>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d017      	beq.n	800bd9e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bd6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd70:	3324      	adds	r3, #36	@ 0x24
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	4611      	mov	r1, r2
 800bd76:	4618      	mov	r0, r3
 800bd78:	f000 ff20 	bl	800cbbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bd7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bd7e:	f000 fa61 	bl	800c244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bd82:	f000 fd3d 	bl	800c800 <xTaskResumeAll>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d189      	bne.n	800bca0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800bd8c:	4b0f      	ldr	r3, [pc, #60]	@ (800bdcc <xQueueReceive+0x1c0>)
 800bd8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd92:	601a      	str	r2, [r3, #0]
 800bd94:	f3bf 8f4f 	dsb	sy
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	e780      	b.n	800bca0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800bd9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bda0:	f000 fa50 	bl	800c244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bda4:	f000 fd2c 	bl	800c800 <xTaskResumeAll>
 800bda8:	e77a      	b.n	800bca0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800bdaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdac:	f000 fa4a 	bl	800c244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdb0:	f000 fd26 	bl	800c800 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bdb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bdb6:	f000 fa97 	bl	800c2e8 <prvIsQueueEmpty>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f43f af6f 	beq.w	800bca0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bdc2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3730      	adds	r7, #48	@ 0x30
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	e000ed04 	.word	0xe000ed04

0800bdd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b08e      	sub	sp, #56	@ 0x38
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bdda:	2300      	movs	r3, #0
 800bddc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bde2:	2300      	movs	r3, #0
 800bde4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10b      	bne.n	800be04 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800bdec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	623b      	str	r3, [r7, #32]
}
 800bdfe:	bf00      	nop
 800be00:	bf00      	nop
 800be02:	e7fd      	b.n	800be00 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d00b      	beq.n	800be24 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be10:	f383 8811 	msr	BASEPRI, r3
 800be14:	f3bf 8f6f 	isb	sy
 800be18:	f3bf 8f4f 	dsb	sy
 800be1c:	61fb      	str	r3, [r7, #28]
}
 800be1e:	bf00      	nop
 800be20:	bf00      	nop
 800be22:	e7fd      	b.n	800be20 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be24:	f001 f8b6 	bl	800cf94 <xTaskGetSchedulerState>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d102      	bne.n	800be34 <xQueueSemaphoreTake+0x64>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <xQueueSemaphoreTake+0x68>
 800be34:	2301      	movs	r3, #1
 800be36:	e000      	b.n	800be3a <xQueueSemaphoreTake+0x6a>
 800be38:	2300      	movs	r3, #0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d10b      	bne.n	800be56 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be42:	f383 8811 	msr	BASEPRI, r3
 800be46:	f3bf 8f6f 	isb	sy
 800be4a:	f3bf 8f4f 	dsb	sy
 800be4e:	61bb      	str	r3, [r7, #24]
}
 800be50:	bf00      	nop
 800be52:	bf00      	nop
 800be54:	e7fd      	b.n	800be52 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be56:	f001 fcd7 	bl	800d808 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be5e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	2b00      	cmp	r3, #0
 800be64:	d024      	beq.n	800beb0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be68:	1e5a      	subs	r2, r3, #1
 800be6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be6c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d104      	bne.n	800be80 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800be76:	f001 fa39 	bl	800d2ec <pvTaskIncrementMutexHeldCount>
 800be7a:	4602      	mov	r2, r0
 800be7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be7e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d00f      	beq.n	800bea8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be8a:	3310      	adds	r3, #16
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 febb 	bl	800cc08 <xTaskRemoveFromEventList>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d007      	beq.n	800bea8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800be98:	4b54      	ldr	r3, [pc, #336]	@ (800bfec <xQueueSemaphoreTake+0x21c>)
 800be9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bea8:	f001 fce0 	bl	800d86c <vPortExitCritical>
				return pdPASS;
 800beac:	2301      	movs	r3, #1
 800beae:	e098      	b.n	800bfe2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d112      	bne.n	800bedc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800beb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00b      	beq.n	800bed4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	617b      	str	r3, [r7, #20]
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	e7fd      	b.n	800bed0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bed4:	f001 fcca 	bl	800d86c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bed8:	2300      	movs	r3, #0
 800beda:	e082      	b.n	800bfe2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d106      	bne.n	800bef0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bee2:	f107 030c 	add.w	r3, r7, #12
 800bee6:	4618      	mov	r0, r3
 800bee8:	f000 fef2 	bl	800ccd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800beec:	2301      	movs	r3, #1
 800beee:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bef0:	f001 fcbc 	bl	800d86c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bef4:	f000 fc76 	bl	800c7e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bef8:	f001 fc86 	bl	800d808 <vPortEnterCritical>
 800befc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bf02:	b25b      	sxtb	r3, r3
 800bf04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf08:	d103      	bne.n	800bf12 <xQueueSemaphoreTake+0x142>
 800bf0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf18:	b25b      	sxtb	r3, r3
 800bf1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bf1e:	d103      	bne.n	800bf28 <xQueueSemaphoreTake+0x158>
 800bf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf22:	2200      	movs	r2, #0
 800bf24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf28:	f001 fca0 	bl	800d86c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf2c:	463a      	mov	r2, r7
 800bf2e:	f107 030c 	add.w	r3, r7, #12
 800bf32:	4611      	mov	r1, r2
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 fee1 	bl	800ccfc <xTaskCheckForTimeOut>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d132      	bne.n	800bfa6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf42:	f000 f9d1 	bl	800c2e8 <prvIsQueueEmpty>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d026      	beq.n	800bf9a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d109      	bne.n	800bf68 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800bf54:	f001 fc58 	bl	800d808 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5a:	689b      	ldr	r3, [r3, #8]
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	f001 f837 	bl	800cfd0 <xTaskPriorityInherit>
 800bf62:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800bf64:	f001 fc82 	bl	800d86c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bf68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf6a:	3324      	adds	r3, #36	@ 0x24
 800bf6c:	683a      	ldr	r2, [r7, #0]
 800bf6e:	4611      	mov	r1, r2
 800bf70:	4618      	mov	r0, r3
 800bf72:	f000 fe23 	bl	800cbbc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bf76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf78:	f000 f964 	bl	800c244 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bf7c:	f000 fc40 	bl	800c800 <xTaskResumeAll>
 800bf80:	4603      	mov	r3, r0
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	f47f af67 	bne.w	800be56 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800bf88:	4b18      	ldr	r3, [pc, #96]	@ (800bfec <xQueueSemaphoreTake+0x21c>)
 800bf8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf8e:	601a      	str	r2, [r3, #0]
 800bf90:	f3bf 8f4f 	dsb	sy
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	e75d      	b.n	800be56 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bf9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bf9c:	f000 f952 	bl	800c244 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfa0:	f000 fc2e 	bl	800c800 <xTaskResumeAll>
 800bfa4:	e757      	b.n	800be56 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfa6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfa8:	f000 f94c 	bl	800c244 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfac:	f000 fc28 	bl	800c800 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfb0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfb2:	f000 f999 	bl	800c2e8 <prvIsQueueEmpty>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	f43f af4c 	beq.w	800be56 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00d      	beq.n	800bfe0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800bfc4:	f001 fc20 	bl	800d808 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bfc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800bfca:	f000 f893 	bl	800c0f4 <prvGetDisinheritPriorityAfterTimeout>
 800bfce:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bfd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfd2:	689b      	ldr	r3, [r3, #8]
 800bfd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 f8f8 	bl	800d1cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bfdc:	f001 fc46 	bl	800d86c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bfe0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3738      	adds	r7, #56	@ 0x38
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b08e      	sub	sp, #56	@ 0x38
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10b      	bne.n	800c01e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	623b      	str	r3, [r7, #32]
}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	e7fd      	b.n	800c01a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d103      	bne.n	800c02c <xQueueReceiveFromISR+0x3c>
 800c024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d101      	bne.n	800c030 <xQueueReceiveFromISR+0x40>
 800c02c:	2301      	movs	r3, #1
 800c02e:	e000      	b.n	800c032 <xQueueReceiveFromISR+0x42>
 800c030:	2300      	movs	r3, #0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10b      	bne.n	800c04e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	61fb      	str	r3, [r7, #28]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c04e:	f001 fcbb 	bl	800d9c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c052:	f3ef 8211 	mrs	r2, BASEPRI
 800c056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	61ba      	str	r2, [r7, #24]
 800c068:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c06a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c06c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c072:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c076:	2b00      	cmp	r3, #0
 800c078:	d02f      	beq.n	800c0da <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c07c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c080:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c084:	68b9      	ldr	r1, [r7, #8]
 800c086:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c088:	f000 f8b6 	bl	800c1f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08e:	1e5a      	subs	r2, r3, #1
 800c090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c092:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c094:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c09c:	d112      	bne.n	800c0c4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d016      	beq.n	800c0d4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0a8:	3310      	adds	r3, #16
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f000 fdac 	bl	800cc08 <xTaskRemoveFromEventList>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00e      	beq.n	800c0d4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d00b      	beq.n	800c0d4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2201      	movs	r2, #1
 800c0c0:	601a      	str	r2, [r3, #0]
 800c0c2:	e007      	b.n	800c0d4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c0c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	b25a      	sxtb	r2, r3
 800c0ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0d8:	e001      	b.n	800c0de <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	f383 8811 	msr	BASEPRI, r3
}
 800c0e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c0ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3738      	adds	r7, #56	@ 0x38
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c100:	2b00      	cmp	r3, #0
 800c102:	d006      	beq.n	800c112 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	f1c3 0307 	rsb	r3, r3, #7
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	e001      	b.n	800c116 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c112:	2300      	movs	r3, #0
 800c114:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c116:	68fb      	ldr	r3, [r7, #12]
	}
 800c118:	4618      	mov	r0, r3
 800c11a:	3714      	adds	r7, #20
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	60f8      	str	r0, [r7, #12]
 800c12c:	60b9      	str	r1, [r7, #8]
 800c12e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c130:	2300      	movs	r3, #0
 800c132:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c138:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10d      	bne.n	800c15e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d14d      	bne.n	800c1e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 ffb4 	bl	800d0bc <xTaskPriorityDisinherit>
 800c154:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2200      	movs	r2, #0
 800c15a:	609a      	str	r2, [r3, #8]
 800c15c:	e043      	b.n	800c1e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d119      	bne.n	800c198 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	6858      	ldr	r0, [r3, #4]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c16c:	461a      	mov	r2, r3
 800c16e:	68b9      	ldr	r1, [r7, #8]
 800c170:	f00c fccf 	bl	8018b12 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	685a      	ldr	r2, [r3, #4]
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c17c:	441a      	add	r2, r3
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d32b      	bcc.n	800c1e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681a      	ldr	r2, [r3, #0]
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	605a      	str	r2, [r3, #4]
 800c196:	e026      	b.n	800c1e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	68d8      	ldr	r0, [r3, #12]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	f00c fcb5 	bl	8018b12 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	68da      	ldr	r2, [r3, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1b0:	425b      	negs	r3, r3
 800c1b2:	441a      	add	r2, r3
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	68da      	ldr	r2, [r3, #12]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d207      	bcs.n	800c1d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	689a      	ldr	r2, [r3, #8]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1cc:	425b      	negs	r3, r3
 800c1ce:	441a      	add	r2, r3
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	d105      	bne.n	800c1e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d002      	beq.n	800c1e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	1c5a      	adds	r2, r3, #1
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800c1ee:	697b      	ldr	r3, [r7, #20]
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3718      	adds	r7, #24
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c206:	2b00      	cmp	r3, #0
 800c208:	d018      	beq.n	800c23c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	68da      	ldr	r2, [r3, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c212:	441a      	add	r2, r3
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	68da      	ldr	r2, [r3, #12]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	429a      	cmp	r2, r3
 800c222:	d303      	bcc.n	800c22c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681a      	ldr	r2, [r3, #0]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	68d9      	ldr	r1, [r3, #12]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c234:	461a      	mov	r2, r3
 800c236:	6838      	ldr	r0, [r7, #0]
 800c238:	f00c fc6b 	bl	8018b12 <memcpy>
	}
}
 800c23c:	bf00      	nop
 800c23e:	3708      	adds	r7, #8
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c24c:	f001 fadc 	bl	800d808 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c256:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c258:	e011      	b.n	800c27e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d012      	beq.n	800c288 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	3324      	adds	r3, #36	@ 0x24
 800c266:	4618      	mov	r0, r3
 800c268:	f000 fcce 	bl	800cc08 <xTaskRemoveFromEventList>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c272:	f000 fda7 	bl	800cdc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
 800c278:	3b01      	subs	r3, #1
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c27e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c282:	2b00      	cmp	r3, #0
 800c284:	dce9      	bgt.n	800c25a <prvUnlockQueue+0x16>
 800c286:	e000      	b.n	800c28a <prvUnlockQueue+0x46>
					break;
 800c288:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	22ff      	movs	r2, #255	@ 0xff
 800c28e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800c292:	f001 faeb 	bl	800d86c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c296:	f001 fab7 	bl	800d808 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c2a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2a2:	e011      	b.n	800c2c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	691b      	ldr	r3, [r3, #16]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d012      	beq.n	800c2d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	3310      	adds	r3, #16
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f000 fca9 	bl	800cc08 <xTaskRemoveFromEventList>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d001      	beq.n	800c2c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c2bc:	f000 fd82 	bl	800cdc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c2c0:	7bbb      	ldrb	r3, [r7, #14]
 800c2c2:	3b01      	subs	r3, #1
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c2c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	dce9      	bgt.n	800c2a4 <prvUnlockQueue+0x60>
 800c2d0:	e000      	b.n	800c2d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c2d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	22ff      	movs	r2, #255	@ 0xff
 800c2d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800c2dc:	f001 fac6 	bl	800d86c <vPortExitCritical>
}
 800c2e0:	bf00      	nop
 800c2e2:	3710      	adds	r7, #16
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c2f0:	f001 fa8a 	bl	800d808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d102      	bne.n	800c302 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	e001      	b.n	800c306 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c302:	2300      	movs	r3, #0
 800c304:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c306:	f001 fab1 	bl	800d86c <vPortExitCritical>

	return xReturn;
 800c30a:	68fb      	ldr	r3, [r7, #12]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3710      	adds	r7, #16
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b084      	sub	sp, #16
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c31c:	f001 fa74 	bl	800d808 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c328:	429a      	cmp	r2, r3
 800c32a:	d102      	bne.n	800c332 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c32c:	2301      	movs	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	e001      	b.n	800c336 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c336:	f001 fa99 	bl	800d86c <vPortExitCritical>

	return xReturn;
 800c33a:	68fb      	ldr	r3, [r7, #12]
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}

0800c344 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c344:	b580      	push	{r7, lr}
 800c346:	b08e      	sub	sp, #56	@ 0x38
 800c348:	af04      	add	r7, sp, #16
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10b      	bne.n	800c370 <xTaskCreateStatic+0x2c>
	__asm volatile
 800c358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c35c:	f383 8811 	msr	BASEPRI, r3
 800c360:	f3bf 8f6f 	isb	sy
 800c364:	f3bf 8f4f 	dsb	sy
 800c368:	623b      	str	r3, [r7, #32]
}
 800c36a:	bf00      	nop
 800c36c:	bf00      	nop
 800c36e:	e7fd      	b.n	800c36c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <xTaskCreateStatic+0x4a>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	61fb      	str	r3, [r7, #28]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c38e:	23a0      	movs	r3, #160	@ 0xa0
 800c390:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2ba0      	cmp	r3, #160	@ 0xa0
 800c396:	d00b      	beq.n	800c3b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800c398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39c:	f383 8811 	msr	BASEPRI, r3
 800c3a0:	f3bf 8f6f 	isb	sy
 800c3a4:	f3bf 8f4f 	dsb	sy
 800c3a8:	61bb      	str	r3, [r7, #24]
}
 800c3aa:	bf00      	nop
 800c3ac:	bf00      	nop
 800c3ae:	e7fd      	b.n	800c3ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c3b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d01e      	beq.n	800c3f6 <xTaskCreateStatic+0xb2>
 800c3b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d01b      	beq.n	800c3f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c3c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	9303      	str	r3, [sp, #12]
 800c3d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d6:	9302      	str	r3, [sp, #8]
 800c3d8:	f107 0314 	add.w	r3, r7, #20
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e0:	9300      	str	r3, [sp, #0]
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	68b9      	ldr	r1, [r7, #8]
 800c3e8:	68f8      	ldr	r0, [r7, #12]
 800c3ea:	f000 f851 	bl	800c490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c3ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c3f0:	f000 f8ee 	bl	800c5d0 <prvAddNewTaskToReadyList>
 800c3f4:	e001      	b.n	800c3fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c3fa:	697b      	ldr	r3, [r7, #20]
	}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	3728      	adds	r7, #40	@ 0x28
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}

0800c404 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c404:	b580      	push	{r7, lr}
 800c406:	b08c      	sub	sp, #48	@ 0x30
 800c408:	af04      	add	r7, sp, #16
 800c40a:	60f8      	str	r0, [r7, #12]
 800c40c:	60b9      	str	r1, [r7, #8]
 800c40e:	603b      	str	r3, [r7, #0]
 800c410:	4613      	mov	r3, r2
 800c412:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c414:	88fb      	ldrh	r3, [r7, #6]
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 fb17 	bl	800da4c <pvPortMalloc>
 800c41e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d00e      	beq.n	800c444 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c426:	20a0      	movs	r0, #160	@ 0xa0
 800c428:	f001 fb10 	bl	800da4c <pvPortMalloc>
 800c42c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d003      	beq.n	800c43c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	631a      	str	r2, [r3, #48]	@ 0x30
 800c43a:	e005      	b.n	800c448 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c43c:	6978      	ldr	r0, [r7, #20]
 800c43e:	f001 fbd3 	bl	800dbe8 <vPortFree>
 800c442:	e001      	b.n	800c448 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c444:	2300      	movs	r3, #0
 800c446:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d017      	beq.n	800c47e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c456:	88fa      	ldrh	r2, [r7, #6]
 800c458:	2300      	movs	r3, #0
 800c45a:	9303      	str	r3, [sp, #12]
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	9302      	str	r3, [sp, #8]
 800c460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c462:	9301      	str	r3, [sp, #4]
 800c464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c466:	9300      	str	r3, [sp, #0]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	68b9      	ldr	r1, [r7, #8]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 f80f 	bl	800c490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c472:	69f8      	ldr	r0, [r7, #28]
 800c474:	f000 f8ac 	bl	800c5d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c478:	2301      	movs	r3, #1
 800c47a:	61bb      	str	r3, [r7, #24]
 800c47c:	e002      	b.n	800c484 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c47e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c482:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c484:	69bb      	ldr	r3, [r7, #24]
	}
 800c486:	4618      	mov	r0, r3
 800c488:	3720      	adds	r7, #32
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	60b9      	str	r1, [r7, #8]
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c4a2:	6879      	ldr	r1, [r7, #4]
 800c4a4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800c4a8:	440b      	add	r3, r1
 800c4aa:	009b      	lsls	r3, r3, #2
 800c4ac:	4413      	add	r3, r2
 800c4ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	f023 0307 	bic.w	r3, r3, #7
 800c4b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	f003 0307 	and.w	r3, r3, #7
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d00b      	beq.n	800c4da <prvInitialiseNewTask+0x4a>
	__asm volatile
 800c4c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c6:	f383 8811 	msr	BASEPRI, r3
 800c4ca:	f3bf 8f6f 	isb	sy
 800c4ce:	f3bf 8f4f 	dsb	sy
 800c4d2:	617b      	str	r3, [r7, #20]
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop
 800c4d8:	e7fd      	b.n	800c4d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d01f      	beq.n	800c520 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	61fb      	str	r3, [r7, #28]
 800c4e4:	e012      	b.n	800c50c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	7819      	ldrb	r1, [r3, #0]
 800c4ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	3334      	adds	r3, #52	@ 0x34
 800c4f6:	460a      	mov	r2, r1
 800c4f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c4fa:	68ba      	ldr	r2, [r7, #8]
 800c4fc:	69fb      	ldr	r3, [r7, #28]
 800c4fe:	4413      	add	r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d006      	beq.n	800c514 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c506:	69fb      	ldr	r3, [r7, #28]
 800c508:	3301      	adds	r3, #1
 800c50a:	61fb      	str	r3, [r7, #28]
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	2b0f      	cmp	r3, #15
 800c510:	d9e9      	bls.n	800c4e6 <prvInitialiseNewTask+0x56>
 800c512:	e000      	b.n	800c516 <prvInitialiseNewTask+0x86>
			{
				break;
 800c514:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c518:	2200      	movs	r2, #0
 800c51a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c51e:	e003      	b.n	800c528 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c522:	2200      	movs	r2, #0
 800c524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52a:	2b06      	cmp	r3, #6
 800c52c:	d901      	bls.n	800c532 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c52e:	2306      	movs	r3, #6
 800c530:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c534:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c536:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c53c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c540:	2200      	movs	r2, #0
 800c542:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c546:	3304      	adds	r3, #4
 800c548:	4618      	mov	r0, r3
 800c54a:	f7fe ff0d 	bl	800b368 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c550:	3318      	adds	r3, #24
 800c552:	4618      	mov	r0, r3
 800c554:	f7fe ff08 	bl	800b368 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c55c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c560:	f1c3 0207 	rsb	r2, r3, #7
 800c564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c566:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c56c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c570:	2200      	movs	r2, #0
 800c572:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c578:	2200      	movs	r2, #0
 800c57a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c580:	334c      	adds	r3, #76	@ 0x4c
 800c582:	224c      	movs	r2, #76	@ 0x4c
 800c584:	2100      	movs	r1, #0
 800c586:	4618      	mov	r0, r3
 800c588:	f00c fa3e 	bl	8018a08 <memset>
 800c58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c58e:	4a0d      	ldr	r2, [pc, #52]	@ (800c5c4 <prvInitialiseNewTask+0x134>)
 800c590:	651a      	str	r2, [r3, #80]	@ 0x50
 800c592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c594:	4a0c      	ldr	r2, [pc, #48]	@ (800c5c8 <prvInitialiseNewTask+0x138>)
 800c596:	655a      	str	r2, [r3, #84]	@ 0x54
 800c598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59a:	4a0c      	ldr	r2, [pc, #48]	@ (800c5cc <prvInitialiseNewTask+0x13c>)
 800c59c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	68f9      	ldr	r1, [r7, #12]
 800c5a2:	69b8      	ldr	r0, [r7, #24]
 800c5a4:	f000 fffe 	bl	800d5a4 <pxPortInitialiseStack>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5ba:	bf00      	nop
 800c5bc:	3720      	adds	r7, #32
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}
 800c5c2:	bf00      	nop
 800c5c4:	240104b8 	.word	0x240104b8
 800c5c8:	24010520 	.word	0x24010520
 800c5cc:	24010588 	.word	0x24010588

0800c5d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b082      	sub	sp, #8
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c5d8:	f001 f916 	bl	800d808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c5dc:	4b2a      	ldr	r3, [pc, #168]	@ (800c688 <prvAddNewTaskToReadyList+0xb8>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	3301      	adds	r3, #1
 800c5e2:	4a29      	ldr	r2, [pc, #164]	@ (800c688 <prvAddNewTaskToReadyList+0xb8>)
 800c5e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c5e6:	4b29      	ldr	r3, [pc, #164]	@ (800c68c <prvAddNewTaskToReadyList+0xbc>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d109      	bne.n	800c602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c5ee:	4a27      	ldr	r2, [pc, #156]	@ (800c68c <prvAddNewTaskToReadyList+0xbc>)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c5f4:	4b24      	ldr	r3, [pc, #144]	@ (800c688 <prvAddNewTaskToReadyList+0xb8>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b01      	cmp	r3, #1
 800c5fa:	d110      	bne.n	800c61e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c5fc:	f000 fc06 	bl	800ce0c <prvInitialiseTaskLists>
 800c600:	e00d      	b.n	800c61e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c602:	4b23      	ldr	r3, [pc, #140]	@ (800c690 <prvAddNewTaskToReadyList+0xc0>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d109      	bne.n	800c61e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c60a:	4b20      	ldr	r3, [pc, #128]	@ (800c68c <prvAddNewTaskToReadyList+0xbc>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c614:	429a      	cmp	r2, r3
 800c616:	d802      	bhi.n	800c61e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c618:	4a1c      	ldr	r2, [pc, #112]	@ (800c68c <prvAddNewTaskToReadyList+0xbc>)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c61e:	4b1d      	ldr	r3, [pc, #116]	@ (800c694 <prvAddNewTaskToReadyList+0xc4>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3301      	adds	r3, #1
 800c624:	4a1b      	ldr	r2, [pc, #108]	@ (800c694 <prvAddNewTaskToReadyList+0xc4>)
 800c626:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c62c:	2201      	movs	r2, #1
 800c62e:	409a      	lsls	r2, r3
 800c630:	4b19      	ldr	r3, [pc, #100]	@ (800c698 <prvAddNewTaskToReadyList+0xc8>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4313      	orrs	r3, r2
 800c636:	4a18      	ldr	r2, [pc, #96]	@ (800c698 <prvAddNewTaskToReadyList+0xc8>)
 800c638:	6013      	str	r3, [r2, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c63e:	4613      	mov	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	009b      	lsls	r3, r3, #2
 800c646:	4a15      	ldr	r2, [pc, #84]	@ (800c69c <prvAddNewTaskToReadyList+0xcc>)
 800c648:	441a      	add	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	3304      	adds	r3, #4
 800c64e:	4619      	mov	r1, r3
 800c650:	4610      	mov	r0, r2
 800c652:	f7fe fe96 	bl	800b382 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c656:	f001 f909 	bl	800d86c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c65a:	4b0d      	ldr	r3, [pc, #52]	@ (800c690 <prvAddNewTaskToReadyList+0xc0>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00e      	beq.n	800c680 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c662:	4b0a      	ldr	r3, [pc, #40]	@ (800c68c <prvAddNewTaskToReadyList+0xbc>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c66c:	429a      	cmp	r2, r3
 800c66e:	d207      	bcs.n	800c680 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c670:	4b0b      	ldr	r3, [pc, #44]	@ (800c6a0 <prvAddNewTaskToReadyList+0xd0>)
 800c672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c680:	bf00      	nop
 800c682:	3708      	adds	r7, #8
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}
 800c688:	24005c34 	.word	0x24005c34
 800c68c:	24005b34 	.word	0x24005b34
 800c690:	24005c40 	.word	0x24005c40
 800c694:	24005c50 	.word	0x24005c50
 800c698:	24005c3c 	.word	0x24005c3c
 800c69c:	24005b38 	.word	0x24005b38
 800c6a0:	e000ed04 	.word	0xe000ed04

0800c6a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b084      	sub	sp, #16
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d018      	beq.n	800c6e8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c6b6:	4b14      	ldr	r3, [pc, #80]	@ (800c708 <vTaskDelay+0x64>)
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <vTaskDelay+0x32>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	60bb      	str	r3, [r7, #8]
}
 800c6d0:	bf00      	nop
 800c6d2:	bf00      	nop
 800c6d4:	e7fd      	b.n	800c6d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c6d6:	f000 f885 	bl	800c7e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6da:	2100      	movs	r1, #0
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f000 fefb 	bl	800d4d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6e2:	f000 f88d 	bl	800c800 <xTaskResumeAll>
 800c6e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d107      	bne.n	800c6fe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c6ee:	4b07      	ldr	r3, [pc, #28]	@ (800c70c <vTaskDelay+0x68>)
 800c6f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6f4:	601a      	str	r2, [r3, #0]
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6fe:	bf00      	nop
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	24005c5c 	.word	0x24005c5c
 800c70c:	e000ed04 	.word	0xe000ed04

0800c710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b08a      	sub	sp, #40	@ 0x28
 800c714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c716:	2300      	movs	r3, #0
 800c718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c71a:	2300      	movs	r3, #0
 800c71c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c71e:	463a      	mov	r2, r7
 800c720:	1d39      	adds	r1, r7, #4
 800c722:	f107 0308 	add.w	r3, r7, #8
 800c726:	4618      	mov	r0, r3
 800c728:	f7f3 fe42 	bl	80003b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	68ba      	ldr	r2, [r7, #8]
 800c732:	9202      	str	r2, [sp, #8]
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	2300      	movs	r3, #0
 800c738:	9300      	str	r3, [sp, #0]
 800c73a:	2300      	movs	r3, #0
 800c73c:	460a      	mov	r2, r1
 800c73e:	4921      	ldr	r1, [pc, #132]	@ (800c7c4 <vTaskStartScheduler+0xb4>)
 800c740:	4821      	ldr	r0, [pc, #132]	@ (800c7c8 <vTaskStartScheduler+0xb8>)
 800c742:	f7ff fdff 	bl	800c344 <xTaskCreateStatic>
 800c746:	4603      	mov	r3, r0
 800c748:	4a20      	ldr	r2, [pc, #128]	@ (800c7cc <vTaskStartScheduler+0xbc>)
 800c74a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c74c:	4b1f      	ldr	r3, [pc, #124]	@ (800c7cc <vTaskStartScheduler+0xbc>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d002      	beq.n	800c75a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c754:	2301      	movs	r3, #1
 800c756:	617b      	str	r3, [r7, #20]
 800c758:	e001      	b.n	800c75e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c75a:	2300      	movs	r3, #0
 800c75c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d11b      	bne.n	800c79c <vTaskStartScheduler+0x8c>
	__asm volatile
 800c764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c768:	f383 8811 	msr	BASEPRI, r3
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	f3bf 8f4f 	dsb	sy
 800c774:	613b      	str	r3, [r7, #16]
}
 800c776:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c778:	4b15      	ldr	r3, [pc, #84]	@ (800c7d0 <vTaskStartScheduler+0xc0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	334c      	adds	r3, #76	@ 0x4c
 800c77e:	4a15      	ldr	r2, [pc, #84]	@ (800c7d4 <vTaskStartScheduler+0xc4>)
 800c780:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c782:	4b15      	ldr	r3, [pc, #84]	@ (800c7d8 <vTaskStartScheduler+0xc8>)
 800c784:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c788:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c78a:	4b14      	ldr	r3, [pc, #80]	@ (800c7dc <vTaskStartScheduler+0xcc>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c790:	4b13      	ldr	r3, [pc, #76]	@ (800c7e0 <vTaskStartScheduler+0xd0>)
 800c792:	2200      	movs	r2, #0
 800c794:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c796:	f000 ff93 	bl	800d6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c79a:	e00f      	b.n	800c7bc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c79c:	697b      	ldr	r3, [r7, #20]
 800c79e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c7a2:	d10b      	bne.n	800c7bc <vTaskStartScheduler+0xac>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	60fb      	str	r3, [r7, #12]
}
 800c7b6:	bf00      	nop
 800c7b8:	bf00      	nop
 800c7ba:	e7fd      	b.n	800c7b8 <vTaskStartScheduler+0xa8>
}
 800c7bc:	bf00      	nop
 800c7be:	3718      	adds	r7, #24
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	0801998c 	.word	0x0801998c
 800c7c8:	0800cddd 	.word	0x0800cddd
 800c7cc:	24005c58 	.word	0x24005c58
 800c7d0:	24005b34 	.word	0x24005b34
 800c7d4:	240049cc 	.word	0x240049cc
 800c7d8:	24005c54 	.word	0x24005c54
 800c7dc:	24005c40 	.word	0x24005c40
 800c7e0:	24005c38 	.word	0x24005c38

0800c7e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c7e8:	4b04      	ldr	r3, [pc, #16]	@ (800c7fc <vTaskSuspendAll+0x18>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	4a03      	ldr	r2, [pc, #12]	@ (800c7fc <vTaskSuspendAll+0x18>)
 800c7f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c7f2:	bf00      	nop
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	24005c5c 	.word	0x24005c5c

0800c800 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c800:	b580      	push	{r7, lr}
 800c802:	b084      	sub	sp, #16
 800c804:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c806:	2300      	movs	r3, #0
 800c808:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c80a:	2300      	movs	r3, #0
 800c80c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c80e:	4b42      	ldr	r3, [pc, #264]	@ (800c918 <xTaskResumeAll+0x118>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10b      	bne.n	800c82e <xTaskResumeAll+0x2e>
	__asm volatile
 800c816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c81a:	f383 8811 	msr	BASEPRI, r3
 800c81e:	f3bf 8f6f 	isb	sy
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	603b      	str	r3, [r7, #0]
}
 800c828:	bf00      	nop
 800c82a:	bf00      	nop
 800c82c:	e7fd      	b.n	800c82a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c82e:	f000 ffeb 	bl	800d808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c832:	4b39      	ldr	r3, [pc, #228]	@ (800c918 <xTaskResumeAll+0x118>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	3b01      	subs	r3, #1
 800c838:	4a37      	ldr	r2, [pc, #220]	@ (800c918 <xTaskResumeAll+0x118>)
 800c83a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c83c:	4b36      	ldr	r3, [pc, #216]	@ (800c918 <xTaskResumeAll+0x118>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d161      	bne.n	800c908 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c844:	4b35      	ldr	r3, [pc, #212]	@ (800c91c <xTaskResumeAll+0x11c>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d05d      	beq.n	800c908 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c84c:	e02e      	b.n	800c8ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c84e:	4b34      	ldr	r3, [pc, #208]	@ (800c920 <xTaskResumeAll+0x120>)
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	3318      	adds	r3, #24
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7fe fdee 	bl	800b43c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	3304      	adds	r3, #4
 800c864:	4618      	mov	r0, r3
 800c866:	f7fe fde9 	bl	800b43c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86e:	2201      	movs	r2, #1
 800c870:	409a      	lsls	r2, r3
 800c872:	4b2c      	ldr	r3, [pc, #176]	@ (800c924 <xTaskResumeAll+0x124>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4313      	orrs	r3, r2
 800c878:	4a2a      	ldr	r2, [pc, #168]	@ (800c924 <xTaskResumeAll+0x124>)
 800c87a:	6013      	str	r3, [r2, #0]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c880:	4613      	mov	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4a27      	ldr	r2, [pc, #156]	@ (800c928 <xTaskResumeAll+0x128>)
 800c88a:	441a      	add	r2, r3
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	3304      	adds	r3, #4
 800c890:	4619      	mov	r1, r3
 800c892:	4610      	mov	r0, r2
 800c894:	f7fe fd75 	bl	800b382 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c89c:	4b23      	ldr	r3, [pc, #140]	@ (800c92c <xTaskResumeAll+0x12c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d302      	bcc.n	800c8ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800c8a6:	4b22      	ldr	r3, [pc, #136]	@ (800c930 <xTaskResumeAll+0x130>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8ac:	4b1c      	ldr	r3, [pc, #112]	@ (800c920 <xTaskResumeAll+0x120>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d1cc      	bne.n	800c84e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d001      	beq.n	800c8be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c8ba:	f000 fb4b 	bl	800cf54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8be:	4b1d      	ldr	r3, [pc, #116]	@ (800c934 <xTaskResumeAll+0x134>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d010      	beq.n	800c8ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c8ca:	f000 f859 	bl	800c980 <xTaskIncrementTick>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800c8d4:	4b16      	ldr	r3, [pc, #88]	@ (800c930 <xTaskResumeAll+0x130>)
 800c8d6:	2201      	movs	r2, #1
 800c8d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1f1      	bne.n	800c8ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800c8e6:	4b13      	ldr	r3, [pc, #76]	@ (800c934 <xTaskResumeAll+0x134>)
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8ec:	4b10      	ldr	r3, [pc, #64]	@ (800c930 <xTaskResumeAll+0x130>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d009      	beq.n	800c908 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c938 <xTaskResumeAll+0x138>)
 800c8fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c908:	f000 ffb0 	bl	800d86c <vPortExitCritical>

	return xAlreadyYielded;
 800c90c:	68bb      	ldr	r3, [r7, #8]
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}
 800c916:	bf00      	nop
 800c918:	24005c5c 	.word	0x24005c5c
 800c91c:	24005c34 	.word	0x24005c34
 800c920:	24005bf4 	.word	0x24005bf4
 800c924:	24005c3c 	.word	0x24005c3c
 800c928:	24005b38 	.word	0x24005b38
 800c92c:	24005b34 	.word	0x24005b34
 800c930:	24005c48 	.word	0x24005c48
 800c934:	24005c44 	.word	0x24005c44
 800c938:	e000ed04 	.word	0xe000ed04

0800c93c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c942:	4b05      	ldr	r3, [pc, #20]	@ (800c958 <xTaskGetTickCount+0x1c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c948:	687b      	ldr	r3, [r7, #4]
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c954:	4770      	bx	lr
 800c956:	bf00      	nop
 800c958:	24005c38 	.word	0x24005c38

0800c95c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b082      	sub	sp, #8
 800c960:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c962:	f001 f831 	bl	800d9c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800c966:	2300      	movs	r3, #0
 800c968:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800c96a:	4b04      	ldr	r3, [pc, #16]	@ (800c97c <xTaskGetTickCountFromISR+0x20>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c970:	683b      	ldr	r3, [r7, #0]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
 800c97a:	bf00      	nop
 800c97c:	24005c38 	.word	0x24005c38

0800c980 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c986:	2300      	movs	r3, #0
 800c988:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c98a:	4b4f      	ldr	r3, [pc, #316]	@ (800cac8 <xTaskIncrementTick+0x148>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	f040 808f 	bne.w	800cab2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c994:	4b4d      	ldr	r3, [pc, #308]	@ (800cacc <xTaskIncrementTick+0x14c>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	3301      	adds	r3, #1
 800c99a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c99c:	4a4b      	ldr	r2, [pc, #300]	@ (800cacc <xTaskIncrementTick+0x14c>)
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d121      	bne.n	800c9ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800c9a8:	4b49      	ldr	r3, [pc, #292]	@ (800cad0 <xTaskIncrementTick+0x150>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00b      	beq.n	800c9ca <xTaskIncrementTick+0x4a>
	__asm volatile
 800c9b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b6:	f383 8811 	msr	BASEPRI, r3
 800c9ba:	f3bf 8f6f 	isb	sy
 800c9be:	f3bf 8f4f 	dsb	sy
 800c9c2:	603b      	str	r3, [r7, #0]
}
 800c9c4:	bf00      	nop
 800c9c6:	bf00      	nop
 800c9c8:	e7fd      	b.n	800c9c6 <xTaskIncrementTick+0x46>
 800c9ca:	4b41      	ldr	r3, [pc, #260]	@ (800cad0 <xTaskIncrementTick+0x150>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	4b40      	ldr	r3, [pc, #256]	@ (800cad4 <xTaskIncrementTick+0x154>)
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a3e      	ldr	r2, [pc, #248]	@ (800cad0 <xTaskIncrementTick+0x150>)
 800c9d6:	6013      	str	r3, [r2, #0]
 800c9d8:	4a3e      	ldr	r2, [pc, #248]	@ (800cad4 <xTaskIncrementTick+0x154>)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	6013      	str	r3, [r2, #0]
 800c9de:	4b3e      	ldr	r3, [pc, #248]	@ (800cad8 <xTaskIncrementTick+0x158>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	4a3c      	ldr	r2, [pc, #240]	@ (800cad8 <xTaskIncrementTick+0x158>)
 800c9e6:	6013      	str	r3, [r2, #0]
 800c9e8:	f000 fab4 	bl	800cf54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c9ec:	4b3b      	ldr	r3, [pc, #236]	@ (800cadc <xTaskIncrementTick+0x15c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	693a      	ldr	r2, [r7, #16]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d348      	bcc.n	800ca88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9f6:	4b36      	ldr	r3, [pc, #216]	@ (800cad0 <xTaskIncrementTick+0x150>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d104      	bne.n	800ca0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca00:	4b36      	ldr	r3, [pc, #216]	@ (800cadc <xTaskIncrementTick+0x15c>)
 800ca02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca06:	601a      	str	r2, [r3, #0]
					break;
 800ca08:	e03e      	b.n	800ca88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca0a:	4b31      	ldr	r3, [pc, #196]	@ (800cad0 <xTaskIncrementTick+0x150>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68db      	ldr	r3, [r3, #12]
 800ca10:	68db      	ldr	r3, [r3, #12]
 800ca12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ca1a:	693a      	ldr	r2, [r7, #16]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d203      	bcs.n	800ca2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ca22:	4a2e      	ldr	r2, [pc, #184]	@ (800cadc <xTaskIncrementTick+0x15c>)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ca28:	e02e      	b.n	800ca88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca2a:	68bb      	ldr	r3, [r7, #8]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f7fe fd04 	bl	800b43c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d004      	beq.n	800ca46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	3318      	adds	r3, #24
 800ca40:	4618      	mov	r0, r3
 800ca42:	f7fe fcfb 	bl	800b43c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	409a      	lsls	r2, r3
 800ca4e:	4b24      	ldr	r3, [pc, #144]	@ (800cae0 <xTaskIncrementTick+0x160>)
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	4a22      	ldr	r2, [pc, #136]	@ (800cae0 <xTaskIncrementTick+0x160>)
 800ca56:	6013      	str	r3, [r2, #0]
 800ca58:	68bb      	ldr	r3, [r7, #8]
 800ca5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	4a1f      	ldr	r2, [pc, #124]	@ (800cae4 <xTaskIncrementTick+0x164>)
 800ca66:	441a      	add	r2, r3
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	4610      	mov	r0, r2
 800ca70:	f7fe fc87 	bl	800b382 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca78:	4b1b      	ldr	r3, [pc, #108]	@ (800cae8 <xTaskIncrementTick+0x168>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d3b9      	bcc.n	800c9f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ca82:	2301      	movs	r3, #1
 800ca84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca86:	e7b6      	b.n	800c9f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca88:	4b17      	ldr	r3, [pc, #92]	@ (800cae8 <xTaskIncrementTick+0x168>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ca8e:	4915      	ldr	r1, [pc, #84]	@ (800cae4 <xTaskIncrementTick+0x164>)
 800ca90:	4613      	mov	r3, r2
 800ca92:	009b      	lsls	r3, r3, #2
 800ca94:	4413      	add	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	440b      	add	r3, r1
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d901      	bls.n	800caa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800caa0:	2301      	movs	r3, #1
 800caa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800caa4:	4b11      	ldr	r3, [pc, #68]	@ (800caec <xTaskIncrementTick+0x16c>)
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d007      	beq.n	800cabc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800caac:	2301      	movs	r3, #1
 800caae:	617b      	str	r3, [r7, #20]
 800cab0:	e004      	b.n	800cabc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cab2:	4b0f      	ldr	r3, [pc, #60]	@ (800caf0 <xTaskIncrementTick+0x170>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3301      	adds	r3, #1
 800cab8:	4a0d      	ldr	r2, [pc, #52]	@ (800caf0 <xTaskIncrementTick+0x170>)
 800caba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cabc:	697b      	ldr	r3, [r7, #20]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	24005c5c 	.word	0x24005c5c
 800cacc:	24005c38 	.word	0x24005c38
 800cad0:	24005bec 	.word	0x24005bec
 800cad4:	24005bf0 	.word	0x24005bf0
 800cad8:	24005c4c 	.word	0x24005c4c
 800cadc:	24005c54 	.word	0x24005c54
 800cae0:	24005c3c 	.word	0x24005c3c
 800cae4:	24005b38 	.word	0x24005b38
 800cae8:	24005b34 	.word	0x24005b34
 800caec:	24005c48 	.word	0x24005c48
 800caf0:	24005c44 	.word	0x24005c44

0800caf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b087      	sub	sp, #28
 800caf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cafa:	4b2a      	ldr	r3, [pc, #168]	@ (800cba4 <vTaskSwitchContext+0xb0>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d003      	beq.n	800cb0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cb02:	4b29      	ldr	r3, [pc, #164]	@ (800cba8 <vTaskSwitchContext+0xb4>)
 800cb04:	2201      	movs	r2, #1
 800cb06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cb08:	e045      	b.n	800cb96 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800cb0a:	4b27      	ldr	r3, [pc, #156]	@ (800cba8 <vTaskSwitchContext+0xb4>)
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb10:	4b26      	ldr	r3, [pc, #152]	@ (800cbac <vTaskSwitchContext+0xb8>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	fab3 f383 	clz	r3, r3
 800cb1c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb1e:	7afb      	ldrb	r3, [r7, #11]
 800cb20:	f1c3 031f 	rsb	r3, r3, #31
 800cb24:	617b      	str	r3, [r7, #20]
 800cb26:	4922      	ldr	r1, [pc, #136]	@ (800cbb0 <vTaskSwitchContext+0xbc>)
 800cb28:	697a      	ldr	r2, [r7, #20]
 800cb2a:	4613      	mov	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	4413      	add	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	440b      	add	r3, r1
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10b      	bne.n	800cb52 <vTaskSwitchContext+0x5e>
	__asm volatile
 800cb3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3e:	f383 8811 	msr	BASEPRI, r3
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	607b      	str	r3, [r7, #4]
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	e7fd      	b.n	800cb4e <vTaskSwitchContext+0x5a>
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	4613      	mov	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4413      	add	r3, r2
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4a14      	ldr	r2, [pc, #80]	@ (800cbb0 <vTaskSwitchContext+0xbc>)
 800cb5e:	4413      	add	r3, r2
 800cb60:	613b      	str	r3, [r7, #16]
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	605a      	str	r2, [r3, #4]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	685a      	ldr	r2, [r3, #4]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	3308      	adds	r3, #8
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d104      	bne.n	800cb82 <vTaskSwitchContext+0x8e>
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	685b      	ldr	r3, [r3, #4]
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	605a      	str	r2, [r3, #4]
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	4a0a      	ldr	r2, [pc, #40]	@ (800cbb4 <vTaskSwitchContext+0xc0>)
 800cb8a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cb8c:	4b09      	ldr	r3, [pc, #36]	@ (800cbb4 <vTaskSwitchContext+0xc0>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	334c      	adds	r3, #76	@ 0x4c
 800cb92:	4a09      	ldr	r2, [pc, #36]	@ (800cbb8 <vTaskSwitchContext+0xc4>)
 800cb94:	6013      	str	r3, [r2, #0]
}
 800cb96:	bf00      	nop
 800cb98:	371c      	adds	r7, #28
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	24005c5c 	.word	0x24005c5c
 800cba8:	24005c48 	.word	0x24005c48
 800cbac:	24005c3c 	.word	0x24005c3c
 800cbb0:	24005b38 	.word	0x24005b38
 800cbb4:	24005b34 	.word	0x24005b34
 800cbb8:	240049cc 	.word	0x240049cc

0800cbbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d10b      	bne.n	800cbe4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800cbcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd0:	f383 8811 	msr	BASEPRI, r3
 800cbd4:	f3bf 8f6f 	isb	sy
 800cbd8:	f3bf 8f4f 	dsb	sy
 800cbdc:	60fb      	str	r3, [r7, #12]
}
 800cbde:	bf00      	nop
 800cbe0:	bf00      	nop
 800cbe2:	e7fd      	b.n	800cbe0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbe4:	4b07      	ldr	r3, [pc, #28]	@ (800cc04 <vTaskPlaceOnEventList+0x48>)
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	3318      	adds	r3, #24
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7fe fbec 	bl	800b3ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbf2:	2101      	movs	r1, #1
 800cbf4:	6838      	ldr	r0, [r7, #0]
 800cbf6:	f000 fc6f 	bl	800d4d8 <prvAddCurrentTaskToDelayedList>
}
 800cbfa:	bf00      	nop
 800cbfc:	3710      	adds	r7, #16
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}
 800cc02:	bf00      	nop
 800cc04:	24005b34 	.word	0x24005b34

0800cc08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d10b      	bne.n	800cc36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	60fb      	str	r3, [r7, #12]
}
 800cc30:	bf00      	nop
 800cc32:	bf00      	nop
 800cc34:	e7fd      	b.n	800cc32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	3318      	adds	r3, #24
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fe fbfe 	bl	800b43c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc40:	4b1d      	ldr	r3, [pc, #116]	@ (800ccb8 <xTaskRemoveFromEventList+0xb0>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d11c      	bne.n	800cc82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	3304      	adds	r3, #4
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7fe fbf5 	bl	800b43c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc56:	2201      	movs	r2, #1
 800cc58:	409a      	lsls	r2, r3
 800cc5a:	4b18      	ldr	r3, [pc, #96]	@ (800ccbc <xTaskRemoveFromEventList+0xb4>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	4a16      	ldr	r2, [pc, #88]	@ (800ccbc <xTaskRemoveFromEventList+0xb4>)
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc68:	4613      	mov	r3, r2
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	4a13      	ldr	r2, [pc, #76]	@ (800ccc0 <xTaskRemoveFromEventList+0xb8>)
 800cc72:	441a      	add	r2, r3
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	3304      	adds	r3, #4
 800cc78:	4619      	mov	r1, r3
 800cc7a:	4610      	mov	r0, r2
 800cc7c:	f7fe fb81 	bl	800b382 <vListInsertEnd>
 800cc80:	e005      	b.n	800cc8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	3318      	adds	r3, #24
 800cc86:	4619      	mov	r1, r3
 800cc88:	480e      	ldr	r0, [pc, #56]	@ (800ccc4 <xTaskRemoveFromEventList+0xbc>)
 800cc8a:	f7fe fb7a 	bl	800b382 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cc92:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc8 <xTaskRemoveFromEventList+0xc0>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d905      	bls.n	800cca8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cca0:	4b0a      	ldr	r3, [pc, #40]	@ (800cccc <xTaskRemoveFromEventList+0xc4>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	601a      	str	r2, [r3, #0]
 800cca6:	e001      	b.n	800ccac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ccac:	697b      	ldr	r3, [r7, #20]
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3718      	adds	r7, #24
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bd80      	pop	{r7, pc}
 800ccb6:	bf00      	nop
 800ccb8:	24005c5c 	.word	0x24005c5c
 800ccbc:	24005c3c 	.word	0x24005c3c
 800ccc0:	24005b38 	.word	0x24005b38
 800ccc4:	24005bf4 	.word	0x24005bf4
 800ccc8:	24005b34 	.word	0x24005b34
 800cccc:	24005c48 	.word	0x24005c48

0800ccd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b083      	sub	sp, #12
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ccd8:	4b06      	ldr	r3, [pc, #24]	@ (800ccf4 <vTaskInternalSetTimeOutState+0x24>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cce0:	4b05      	ldr	r3, [pc, #20]	@ (800ccf8 <vTaskInternalSetTimeOutState+0x28>)
 800cce2:	681a      	ldr	r2, [r3, #0]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	605a      	str	r2, [r3, #4]
}
 800cce8:	bf00      	nop
 800ccea:	370c      	adds	r7, #12
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr
 800ccf4:	24005c4c 	.word	0x24005c4c
 800ccf8:	24005c38 	.word	0x24005c38

0800ccfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b088      	sub	sp, #32
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10b      	bne.n	800cd24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800cd0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd10:	f383 8811 	msr	BASEPRI, r3
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	f3bf 8f4f 	dsb	sy
 800cd1c:	613b      	str	r3, [r7, #16]
}
 800cd1e:	bf00      	nop
 800cd20:	bf00      	nop
 800cd22:	e7fd      	b.n	800cd20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10b      	bne.n	800cd42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	60fb      	str	r3, [r7, #12]
}
 800cd3c:	bf00      	nop
 800cd3e:	bf00      	nop
 800cd40:	e7fd      	b.n	800cd3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800cd42:	f000 fd61 	bl	800d808 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd46:	4b1d      	ldr	r3, [pc, #116]	@ (800cdbc <xTaskCheckForTimeOut+0xc0>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	69ba      	ldr	r2, [r7, #24]
 800cd52:	1ad3      	subs	r3, r2, r3
 800cd54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cd5e:	d102      	bne.n	800cd66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd60:	2300      	movs	r3, #0
 800cd62:	61fb      	str	r3, [r7, #28]
 800cd64:	e023      	b.n	800cdae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	4b15      	ldr	r3, [pc, #84]	@ (800cdc0 <xTaskCheckForTimeOut+0xc4>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d007      	beq.n	800cd82 <xTaskCheckForTimeOut+0x86>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	69ba      	ldr	r2, [r7, #24]
 800cd78:	429a      	cmp	r2, r3
 800cd7a:	d302      	bcc.n	800cd82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	61fb      	str	r3, [r7, #28]
 800cd80:	e015      	b.n	800cdae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d20b      	bcs.n	800cda4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	681a      	ldr	r2, [r3, #0]
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	1ad2      	subs	r2, r2, r3
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	f7ff ff99 	bl	800ccd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	61fb      	str	r3, [r7, #28]
 800cda2:	e004      	b.n	800cdae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	2200      	movs	r2, #0
 800cda8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cdae:	f000 fd5d 	bl	800d86c <vPortExitCritical>

	return xReturn;
 800cdb2:	69fb      	ldr	r3, [r7, #28]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3720      	adds	r7, #32
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	24005c38 	.word	0x24005c38
 800cdc0:	24005c4c 	.word	0x24005c4c

0800cdc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdc8:	4b03      	ldr	r3, [pc, #12]	@ (800cdd8 <vTaskMissedYield+0x14>)
 800cdca:	2201      	movs	r2, #1
 800cdcc:	601a      	str	r2, [r3, #0]
}
 800cdce:	bf00      	nop
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd6:	4770      	bx	lr
 800cdd8:	24005c48 	.word	0x24005c48

0800cddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cde4:	f000 f852 	bl	800ce8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cde8:	4b06      	ldr	r3, [pc, #24]	@ (800ce04 <prvIdleTask+0x28>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d9f9      	bls.n	800cde4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cdf0:	4b05      	ldr	r3, [pc, #20]	@ (800ce08 <prvIdleTask+0x2c>)
 800cdf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cdf6:	601a      	str	r2, [r3, #0]
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ce00:	e7f0      	b.n	800cde4 <prvIdleTask+0x8>
 800ce02:	bf00      	nop
 800ce04:	24005b38 	.word	0x24005b38
 800ce08:	e000ed04 	.word	0xe000ed04

0800ce0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce12:	2300      	movs	r3, #0
 800ce14:	607b      	str	r3, [r7, #4]
 800ce16:	e00c      	b.n	800ce32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4413      	add	r3, r2
 800ce20:	009b      	lsls	r3, r3, #2
 800ce22:	4a12      	ldr	r2, [pc, #72]	@ (800ce6c <prvInitialiseTaskLists+0x60>)
 800ce24:	4413      	add	r3, r2
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fe fa7e 	bl	800b328 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	3301      	adds	r3, #1
 800ce30:	607b      	str	r3, [r7, #4]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2b06      	cmp	r3, #6
 800ce36:	d9ef      	bls.n	800ce18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce38:	480d      	ldr	r0, [pc, #52]	@ (800ce70 <prvInitialiseTaskLists+0x64>)
 800ce3a:	f7fe fa75 	bl	800b328 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce3e:	480d      	ldr	r0, [pc, #52]	@ (800ce74 <prvInitialiseTaskLists+0x68>)
 800ce40:	f7fe fa72 	bl	800b328 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce44:	480c      	ldr	r0, [pc, #48]	@ (800ce78 <prvInitialiseTaskLists+0x6c>)
 800ce46:	f7fe fa6f 	bl	800b328 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce4a:	480c      	ldr	r0, [pc, #48]	@ (800ce7c <prvInitialiseTaskLists+0x70>)
 800ce4c:	f7fe fa6c 	bl	800b328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce50:	480b      	ldr	r0, [pc, #44]	@ (800ce80 <prvInitialiseTaskLists+0x74>)
 800ce52:	f7fe fa69 	bl	800b328 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce56:	4b0b      	ldr	r3, [pc, #44]	@ (800ce84 <prvInitialiseTaskLists+0x78>)
 800ce58:	4a05      	ldr	r2, [pc, #20]	@ (800ce70 <prvInitialiseTaskLists+0x64>)
 800ce5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce5c:	4b0a      	ldr	r3, [pc, #40]	@ (800ce88 <prvInitialiseTaskLists+0x7c>)
 800ce5e:	4a05      	ldr	r2, [pc, #20]	@ (800ce74 <prvInitialiseTaskLists+0x68>)
 800ce60:	601a      	str	r2, [r3, #0]
}
 800ce62:	bf00      	nop
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	24005b38 	.word	0x24005b38
 800ce70:	24005bc4 	.word	0x24005bc4
 800ce74:	24005bd8 	.word	0x24005bd8
 800ce78:	24005bf4 	.word	0x24005bf4
 800ce7c:	24005c08 	.word	0x24005c08
 800ce80:	24005c20 	.word	0x24005c20
 800ce84:	24005bec 	.word	0x24005bec
 800ce88:	24005bf0 	.word	0x24005bf0

0800ce8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce92:	e019      	b.n	800cec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce94:	f000 fcb8 	bl	800d808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce98:	4b10      	ldr	r3, [pc, #64]	@ (800cedc <prvCheckTasksWaitingTermination+0x50>)
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	68db      	ldr	r3, [r3, #12]
 800ce9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	3304      	adds	r3, #4
 800cea4:	4618      	mov	r0, r3
 800cea6:	f7fe fac9 	bl	800b43c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ceaa:	4b0d      	ldr	r3, [pc, #52]	@ (800cee0 <prvCheckTasksWaitingTermination+0x54>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	3b01      	subs	r3, #1
 800ceb0:	4a0b      	ldr	r2, [pc, #44]	@ (800cee0 <prvCheckTasksWaitingTermination+0x54>)
 800ceb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ceb4:	4b0b      	ldr	r3, [pc, #44]	@ (800cee4 <prvCheckTasksWaitingTermination+0x58>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	3b01      	subs	r3, #1
 800ceba:	4a0a      	ldr	r2, [pc, #40]	@ (800cee4 <prvCheckTasksWaitingTermination+0x58>)
 800cebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cebe:	f000 fcd5 	bl	800d86c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 f810 	bl	800cee8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cec8:	4b06      	ldr	r3, [pc, #24]	@ (800cee4 <prvCheckTasksWaitingTermination+0x58>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1e1      	bne.n	800ce94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ced0:	bf00      	nop
 800ced2:	bf00      	nop
 800ced4:	3708      	adds	r7, #8
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	24005c08 	.word	0x24005c08
 800cee0:	24005c34 	.word	0x24005c34
 800cee4:	24005c1c 	.word	0x24005c1c

0800cee8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b084      	sub	sp, #16
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	334c      	adds	r3, #76	@ 0x4c
 800cef4:	4618      	mov	r0, r3
 800cef6:	f00b fd8f 	bl	8018a18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d108      	bne.n	800cf16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf08:	4618      	mov	r0, r3
 800cf0a:	f000 fe6d 	bl	800dbe8 <vPortFree>
				vPortFree( pxTCB );
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fe6a 	bl	800dbe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cf14:	e019      	b.n	800cf4a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d103      	bne.n	800cf28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 fe61 	bl	800dbe8 <vPortFree>
	}
 800cf26:	e010      	b.n	800cf4a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d00b      	beq.n	800cf4a <prvDeleteTCB+0x62>
	__asm volatile
 800cf32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf36:	f383 8811 	msr	BASEPRI, r3
 800cf3a:	f3bf 8f6f 	isb	sy
 800cf3e:	f3bf 8f4f 	dsb	sy
 800cf42:	60fb      	str	r3, [r7, #12]
}
 800cf44:	bf00      	nop
 800cf46:	bf00      	nop
 800cf48:	e7fd      	b.n	800cf46 <prvDeleteTCB+0x5e>
	}
 800cf4a:	bf00      	nop
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}
	...

0800cf54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf5a:	4b0c      	ldr	r3, [pc, #48]	@ (800cf8c <prvResetNextTaskUnblockTime+0x38>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d104      	bne.n	800cf6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf64:	4b0a      	ldr	r3, [pc, #40]	@ (800cf90 <prvResetNextTaskUnblockTime+0x3c>)
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf6c:	e008      	b.n	800cf80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf6e:	4b07      	ldr	r3, [pc, #28]	@ (800cf8c <prvResetNextTaskUnblockTime+0x38>)
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	68db      	ldr	r3, [r3, #12]
 800cf76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	685b      	ldr	r3, [r3, #4]
 800cf7c:	4a04      	ldr	r2, [pc, #16]	@ (800cf90 <prvResetNextTaskUnblockTime+0x3c>)
 800cf7e:	6013      	str	r3, [r2, #0]
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	24005bec 	.word	0x24005bec
 800cf90:	24005c54 	.word	0x24005c54

0800cf94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf9a:	4b0b      	ldr	r3, [pc, #44]	@ (800cfc8 <xTaskGetSchedulerState+0x34>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d102      	bne.n	800cfa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	607b      	str	r3, [r7, #4]
 800cfa6:	e008      	b.n	800cfba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cfa8:	4b08      	ldr	r3, [pc, #32]	@ (800cfcc <xTaskGetSchedulerState+0x38>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d102      	bne.n	800cfb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cfb0:	2302      	movs	r3, #2
 800cfb2:	607b      	str	r3, [r7, #4]
 800cfb4:	e001      	b.n	800cfba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfba:	687b      	ldr	r3, [r7, #4]
	}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	24005c40 	.word	0x24005c40
 800cfcc:	24005c5c 	.word	0x24005c5c

0800cfd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d05e      	beq.n	800d0a4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfea:	4b31      	ldr	r3, [pc, #196]	@ (800d0b0 <xTaskPriorityInherit+0xe0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d24e      	bcs.n	800d092 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	699b      	ldr	r3, [r3, #24]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	db06      	blt.n	800d00a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cffc:	4b2c      	ldr	r3, [pc, #176]	@ (800d0b0 <xTaskPriorityInherit+0xe0>)
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d002:	f1c3 0207 	rsb	r2, r3, #7
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	6959      	ldr	r1, [r3, #20]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d012:	4613      	mov	r3, r2
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	4413      	add	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4a26      	ldr	r2, [pc, #152]	@ (800d0b4 <xTaskPriorityInherit+0xe4>)
 800d01c:	4413      	add	r3, r2
 800d01e:	4299      	cmp	r1, r3
 800d020:	d12f      	bne.n	800d082 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	3304      	adds	r3, #4
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe fa08 	bl	800b43c <uxListRemove>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d10a      	bne.n	800d048 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d036:	2201      	movs	r2, #1
 800d038:	fa02 f303 	lsl.w	r3, r2, r3
 800d03c:	43da      	mvns	r2, r3
 800d03e:	4b1e      	ldr	r3, [pc, #120]	@ (800d0b8 <xTaskPriorityInherit+0xe8>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4013      	ands	r3, r2
 800d044:	4a1c      	ldr	r2, [pc, #112]	@ (800d0b8 <xTaskPriorityInherit+0xe8>)
 800d046:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d048:	4b19      	ldr	r3, [pc, #100]	@ (800d0b0 <xTaskPriorityInherit+0xe0>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d056:	2201      	movs	r2, #1
 800d058:	409a      	lsls	r2, r3
 800d05a:	4b17      	ldr	r3, [pc, #92]	@ (800d0b8 <xTaskPriorityInherit+0xe8>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4313      	orrs	r3, r2
 800d060:	4a15      	ldr	r2, [pc, #84]	@ (800d0b8 <xTaskPriorityInherit+0xe8>)
 800d062:	6013      	str	r3, [r2, #0]
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d068:	4613      	mov	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	4a10      	ldr	r2, [pc, #64]	@ (800d0b4 <xTaskPriorityInherit+0xe4>)
 800d072:	441a      	add	r2, r3
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	3304      	adds	r3, #4
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7fe f981 	bl	800b382 <vListInsertEnd>
 800d080:	e004      	b.n	800d08c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d082:	4b0b      	ldr	r3, [pc, #44]	@ (800d0b0 <xTaskPriorityInherit+0xe0>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d08c:	2301      	movs	r3, #1
 800d08e:	60fb      	str	r3, [r7, #12]
 800d090:	e008      	b.n	800d0a4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d096:	4b06      	ldr	r3, [pc, #24]	@ (800d0b0 <xTaskPriorityInherit+0xe0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d201      	bcs.n	800d0a4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
	}
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
 800d0ae:	bf00      	nop
 800d0b0:	24005b34 	.word	0x24005b34
 800d0b4:	24005b38 	.word	0x24005b38
 800d0b8:	24005c3c 	.word	0x24005c3c

0800d0bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b086      	sub	sp, #24
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d070      	beq.n	800d1b4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0d2:	4b3b      	ldr	r3, [pc, #236]	@ (800d1c0 <xTaskPriorityDisinherit+0x104>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	693a      	ldr	r2, [r7, #16]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d00b      	beq.n	800d0f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800d0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0e0:	f383 8811 	msr	BASEPRI, r3
 800d0e4:	f3bf 8f6f 	isb	sy
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	60fb      	str	r3, [r7, #12]
}
 800d0ee:	bf00      	nop
 800d0f0:	bf00      	nop
 800d0f2:	e7fd      	b.n	800d0f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d10b      	bne.n	800d114 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800d0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	60bb      	str	r3, [r7, #8]
}
 800d10e:	bf00      	nop
 800d110:	bf00      	nop
 800d112:	e7fd      	b.n	800d110 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d118:	1e5a      	subs	r2, r3, #1
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d126:	429a      	cmp	r2, r3
 800d128:	d044      	beq.n	800d1b4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d140      	bne.n	800d1b4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe f980 	bl	800b43c <uxListRemove>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d115      	bne.n	800d16e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d146:	491f      	ldr	r1, [pc, #124]	@ (800d1c4 <xTaskPriorityDisinherit+0x108>)
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	440b      	add	r3, r1
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10a      	bne.n	800d16e <xTaskPriorityDisinherit+0xb2>
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d15c:	2201      	movs	r2, #1
 800d15e:	fa02 f303 	lsl.w	r3, r2, r3
 800d162:	43da      	mvns	r2, r3
 800d164:	4b18      	ldr	r3, [pc, #96]	@ (800d1c8 <xTaskPriorityDisinherit+0x10c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4013      	ands	r3, r2
 800d16a:	4a17      	ldr	r2, [pc, #92]	@ (800d1c8 <xTaskPriorityDisinherit+0x10c>)
 800d16c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d17a:	f1c3 0207 	rsb	r2, r3, #7
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d186:	2201      	movs	r2, #1
 800d188:	409a      	lsls	r2, r3
 800d18a:	4b0f      	ldr	r3, [pc, #60]	@ (800d1c8 <xTaskPriorityDisinherit+0x10c>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4313      	orrs	r3, r2
 800d190:	4a0d      	ldr	r2, [pc, #52]	@ (800d1c8 <xTaskPriorityDisinherit+0x10c>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4a08      	ldr	r2, [pc, #32]	@ (800d1c4 <xTaskPriorityDisinherit+0x108>)
 800d1a2:	441a      	add	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fe f8e9 	bl	800b382 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1b4:	697b      	ldr	r3, [r7, #20]
	}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	24005b34 	.word	0x24005b34
 800d1c4:	24005b38 	.word	0x24005b38
 800d1c8:	24005c3c 	.word	0x24005c3c

0800d1cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d079      	beq.n	800d2d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10b      	bne.n	800d204 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	60fb      	str	r3, [r7, #12]
}
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
 800d202:	e7fd      	b.n	800d200 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d208:	683a      	ldr	r2, [r7, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d902      	bls.n	800d214 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	61fb      	str	r3, [r7, #28]
 800d212:	e002      	b.n	800d21a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d218:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d21a:	69bb      	ldr	r3, [r7, #24]
 800d21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d21e:	69fa      	ldr	r2, [r7, #28]
 800d220:	429a      	cmp	r2, r3
 800d222:	d059      	beq.n	800d2d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d228:	697a      	ldr	r2, [r7, #20]
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d154      	bne.n	800d2d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d22e:	4b2c      	ldr	r3, [pc, #176]	@ (800d2e0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	69ba      	ldr	r2, [r7, #24]
 800d234:	429a      	cmp	r2, r3
 800d236:	d10b      	bne.n	800d250 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	60bb      	str	r3, [r7, #8]
}
 800d24a:	bf00      	nop
 800d24c:	bf00      	nop
 800d24e:	e7fd      	b.n	800d24c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d250:	69bb      	ldr	r3, [r7, #24]
 800d252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d254:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	69fa      	ldr	r2, [r7, #28]
 800d25a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	2b00      	cmp	r3, #0
 800d262:	db04      	blt.n	800d26e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	f1c3 0207 	rsb	r2, r3, #7
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d26e:	69bb      	ldr	r3, [r7, #24]
 800d270:	6959      	ldr	r1, [r3, #20]
 800d272:	693a      	ldr	r2, [r7, #16]
 800d274:	4613      	mov	r3, r2
 800d276:	009b      	lsls	r3, r3, #2
 800d278:	4413      	add	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4a19      	ldr	r2, [pc, #100]	@ (800d2e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d27e:	4413      	add	r3, r2
 800d280:	4299      	cmp	r1, r3
 800d282:	d129      	bne.n	800d2d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d284:	69bb      	ldr	r3, [r7, #24]
 800d286:	3304      	adds	r3, #4
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fe f8d7 	bl	800b43c <uxListRemove>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10a      	bne.n	800d2aa <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d294:	69bb      	ldr	r3, [r7, #24]
 800d296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d298:	2201      	movs	r2, #1
 800d29a:	fa02 f303 	lsl.w	r3, r2, r3
 800d29e:	43da      	mvns	r2, r3
 800d2a0:	4b11      	ldr	r3, [pc, #68]	@ (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	4a10      	ldr	r2, [pc, #64]	@ (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d2a8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2aa:	69bb      	ldr	r3, [r7, #24]
 800d2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	409a      	lsls	r2, r3
 800d2b2:	4b0d      	ldr	r3, [pc, #52]	@ (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	4313      	orrs	r3, r2
 800d2b8:	4a0b      	ldr	r2, [pc, #44]	@ (800d2e8 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4a06      	ldr	r2, [pc, #24]	@ (800d2e4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d2ca:	441a      	add	r2, r3
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	4610      	mov	r0, r2
 800d2d4:	f7fe f855 	bl	800b382 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2d8:	bf00      	nop
 800d2da:	3720      	adds	r7, #32
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	24005b34 	.word	0x24005b34
 800d2e4:	24005b38 	.word	0x24005b38
 800d2e8:	24005c3c 	.word	0x24005c3c

0800d2ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d2f0:	4b07      	ldr	r3, [pc, #28]	@ (800d310 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d004      	beq.n	800d302 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d2f8:	4b05      	ldr	r3, [pc, #20]	@ (800d310 <pvTaskIncrementMutexHeldCount+0x24>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d2fe:	3201      	adds	r2, #1
 800d300:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800d302:	4b03      	ldr	r3, [pc, #12]	@ (800d310 <pvTaskIncrementMutexHeldCount+0x24>)
 800d304:	681b      	ldr	r3, [r3, #0]
	}
 800d306:	4618      	mov	r0, r3
 800d308:	46bd      	mov	sp, r7
 800d30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d30e:	4770      	bx	lr
 800d310:	24005b34 	.word	0x24005b34

0800d314 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800d314:	b580      	push	{r7, lr}
 800d316:	b084      	sub	sp, #16
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800d31e:	f000 fa73 	bl	800d808 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800d322:	4b20      	ldr	r3, [pc, #128]	@ (800d3a4 <ulTaskNotifyTake+0x90>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d113      	bne.n	800d356 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800d32e:	4b1d      	ldr	r3, [pc, #116]	@ (800d3a4 <ulTaskNotifyTake+0x90>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00b      	beq.n	800d356 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d33e:	2101      	movs	r1, #1
 800d340:	6838      	ldr	r0, [r7, #0]
 800d342:	f000 f8c9 	bl	800d4d8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800d346:	4b18      	ldr	r3, [pc, #96]	@ (800d3a8 <ulTaskNotifyTake+0x94>)
 800d348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d34c:	601a      	str	r2, [r3, #0]
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800d356:	f000 fa89 	bl	800d86c <vPortExitCritical>

		taskENTER_CRITICAL();
 800d35a:	f000 fa55 	bl	800d808 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800d35e:	4b11      	ldr	r3, [pc, #68]	@ (800d3a4 <ulTaskNotifyTake+0x90>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d366:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00e      	beq.n	800d38c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d005      	beq.n	800d380 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800d374:	4b0b      	ldr	r3, [pc, #44]	@ (800d3a4 <ulTaskNotifyTake+0x90>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2200      	movs	r2, #0
 800d37a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800d37e:	e005      	b.n	800d38c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800d380:	4b08      	ldr	r3, [pc, #32]	@ (800d3a4 <ulTaskNotifyTake+0x90>)
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	68fa      	ldr	r2, [r7, #12]
 800d386:	3a01      	subs	r2, #1
 800d388:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d38c:	4b05      	ldr	r3, [pc, #20]	@ (800d3a4 <ulTaskNotifyTake+0x90>)
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	2200      	movs	r2, #0
 800d392:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
		}
		taskEXIT_CRITICAL();
 800d396:	f000 fa69 	bl	800d86c <vPortExitCritical>

		return ulReturn;
 800d39a:	68fb      	ldr	r3, [r7, #12]
	}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	24005b34 	.word	0x24005b34
 800d3a8:	e000ed04 	.word	0xe000ed04

0800d3ac <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08a      	sub	sp, #40	@ 0x28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d10b      	bne.n	800d3d4 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800d3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3c0:	f383 8811 	msr	BASEPRI, r3
 800d3c4:	f3bf 8f6f 	isb	sy
 800d3c8:	f3bf 8f4f 	dsb	sy
 800d3cc:	61bb      	str	r3, [r7, #24]
}
 800d3ce:	bf00      	nop
 800d3d0:	bf00      	nop
 800d3d2:	e7fd      	b.n	800d3d0 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3d4:	f000 faf8 	bl	800d9c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800d3dc:	f3ef 8211 	mrs	r2, BASEPRI
 800d3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e4:	f383 8811 	msr	BASEPRI, r3
 800d3e8:	f3bf 8f6f 	isb	sy
 800d3ec:	f3bf 8f4f 	dsb	sy
 800d3f0:	617a      	str	r2, [r7, #20]
 800d3f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d3f4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3f6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3fa:	f893 309c 	ldrb.w	r3, [r3, #156]	@ 0x9c
 800d3fe:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800d400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d402:	2202      	movs	r2, #2
 800d404:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800d408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d40a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d40e:	1c5a      	adds	r2, r3, #1
 800d410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d412:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800d416:	7ffb      	ldrb	r3, [r7, #31]
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d146      	bne.n	800d4aa <vTaskNotifyGiveFromISR+0xfe>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800d41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d420:	2b00      	cmp	r3, #0
 800d422:	d00b      	beq.n	800d43c <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800d424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d428:	f383 8811 	msr	BASEPRI, r3
 800d42c:	f3bf 8f6f 	isb	sy
 800d430:	f3bf 8f4f 	dsb	sy
 800d434:	60fb      	str	r3, [r7, #12]
}
 800d436:	bf00      	nop
 800d438:	bf00      	nop
 800d43a:	e7fd      	b.n	800d438 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d43c:	4b20      	ldr	r3, [pc, #128]	@ (800d4c0 <vTaskNotifyGiveFromISR+0x114>)
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d11c      	bne.n	800d47e <vTaskNotifyGiveFromISR+0xd2>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d446:	3304      	adds	r3, #4
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fd fff7 	bl	800b43c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d452:	2201      	movs	r2, #1
 800d454:	409a      	lsls	r2, r3
 800d456:	4b1b      	ldr	r3, [pc, #108]	@ (800d4c4 <vTaskNotifyGiveFromISR+0x118>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	4a19      	ldr	r2, [pc, #100]	@ (800d4c4 <vTaskNotifyGiveFromISR+0x118>)
 800d45e:	6013      	str	r3, [r2, #0]
 800d460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d464:	4613      	mov	r3, r2
 800d466:	009b      	lsls	r3, r3, #2
 800d468:	4413      	add	r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	4a16      	ldr	r2, [pc, #88]	@ (800d4c8 <vTaskNotifyGiveFromISR+0x11c>)
 800d46e:	441a      	add	r2, r3
 800d470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d472:	3304      	adds	r3, #4
 800d474:	4619      	mov	r1, r3
 800d476:	4610      	mov	r0, r2
 800d478:	f7fd ff83 	bl	800b382 <vListInsertEnd>
 800d47c:	e005      	b.n	800d48a <vTaskNotifyGiveFromISR+0xde>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800d47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d480:	3318      	adds	r3, #24
 800d482:	4619      	mov	r1, r3
 800d484:	4811      	ldr	r0, [pc, #68]	@ (800d4cc <vTaskNotifyGiveFromISR+0x120>)
 800d486:	f7fd ff7c 	bl	800b382 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d48c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d48e:	4b10      	ldr	r3, [pc, #64]	@ (800d4d0 <vTaskNotifyGiveFromISR+0x124>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d494:	429a      	cmp	r2, r3
 800d496:	d908      	bls.n	800d4aa <vTaskNotifyGiveFromISR+0xfe>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800d498:	683b      	ldr	r3, [r7, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d002      	beq.n	800d4a4 <vTaskNotifyGiveFromISR+0xf8>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800d4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800d4d4 <vTaskNotifyGiveFromISR+0x128>)
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800d4ae:	68bb      	ldr	r3, [r7, #8]
 800d4b0:	f383 8811 	msr	BASEPRI, r3
}
 800d4b4:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800d4b6:	bf00      	nop
 800d4b8:	3728      	adds	r7, #40	@ 0x28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	24005c5c 	.word	0x24005c5c
 800d4c4:	24005c3c 	.word	0x24005c3c
 800d4c8:	24005b38 	.word	0x24005b38
 800d4cc:	24005bf4 	.word	0x24005bf4
 800d4d0:	24005b34 	.word	0x24005b34
 800d4d4:	24005c48 	.word	0x24005c48

0800d4d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b084      	sub	sp, #16
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4e2:	4b29      	ldr	r3, [pc, #164]	@ (800d588 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4e8:	4b28      	ldr	r3, [pc, #160]	@ (800d58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3304      	adds	r3, #4
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fd ffa4 	bl	800b43c <uxListRemove>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d10b      	bne.n	800d512 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d4fa:	4b24      	ldr	r3, [pc, #144]	@ (800d58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d500:	2201      	movs	r2, #1
 800d502:	fa02 f303 	lsl.w	r3, r2, r3
 800d506:	43da      	mvns	r2, r3
 800d508:	4b21      	ldr	r3, [pc, #132]	@ (800d590 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4013      	ands	r3, r2
 800d50e:	4a20      	ldr	r2, [pc, #128]	@ (800d590 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d510:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d518:	d10a      	bne.n	800d530 <prvAddCurrentTaskToDelayedList+0x58>
 800d51a:	683b      	ldr	r3, [r7, #0]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d007      	beq.n	800d530 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d520:	4b1a      	ldr	r3, [pc, #104]	@ (800d58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	3304      	adds	r3, #4
 800d526:	4619      	mov	r1, r3
 800d528:	481a      	ldr	r0, [pc, #104]	@ (800d594 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d52a:	f7fd ff2a 	bl	800b382 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d52e:	e026      	b.n	800d57e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d530:	68fa      	ldr	r2, [r7, #12]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4413      	add	r3, r2
 800d536:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d538:	4b14      	ldr	r3, [pc, #80]	@ (800d58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68ba      	ldr	r2, [r7, #8]
 800d53e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	429a      	cmp	r2, r3
 800d546:	d209      	bcs.n	800d55c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d548:	4b13      	ldr	r3, [pc, #76]	@ (800d598 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	4b0f      	ldr	r3, [pc, #60]	@ (800d58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3304      	adds	r3, #4
 800d552:	4619      	mov	r1, r3
 800d554:	4610      	mov	r0, r2
 800d556:	f7fd ff38 	bl	800b3ca <vListInsert>
}
 800d55a:	e010      	b.n	800d57e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d55c:	4b0f      	ldr	r3, [pc, #60]	@ (800d59c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	4b0a      	ldr	r3, [pc, #40]	@ (800d58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	3304      	adds	r3, #4
 800d566:	4619      	mov	r1, r3
 800d568:	4610      	mov	r0, r2
 800d56a:	f7fd ff2e 	bl	800b3ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d56e:	4b0c      	ldr	r3, [pc, #48]	@ (800d5a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	68ba      	ldr	r2, [r7, #8]
 800d574:	429a      	cmp	r2, r3
 800d576:	d202      	bcs.n	800d57e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d578:	4a09      	ldr	r2, [pc, #36]	@ (800d5a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	6013      	str	r3, [r2, #0]
}
 800d57e:	bf00      	nop
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	24005c38 	.word	0x24005c38
 800d58c:	24005b34 	.word	0x24005b34
 800d590:	24005c3c 	.word	0x24005c3c
 800d594:	24005c20 	.word	0x24005c20
 800d598:	24005bf0 	.word	0x24005bf0
 800d59c:	24005bec 	.word	0x24005bec
 800d5a0:	24005c54 	.word	0x24005c54

0800d5a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b085      	sub	sp, #20
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	60f8      	str	r0, [r7, #12]
 800d5ac:	60b9      	str	r1, [r7, #8]
 800d5ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3b04      	subs	r3, #4
 800d5b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800d5bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3b04      	subs	r3, #4
 800d5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	f023 0201 	bic.w	r2, r3, #1
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3b04      	subs	r3, #4
 800d5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5d4:	4a0c      	ldr	r2, [pc, #48]	@ (800d608 <pxPortInitialiseStack+0x64>)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3b14      	subs	r3, #20
 800d5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5e0:	687a      	ldr	r2, [r7, #4]
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	3b04      	subs	r3, #4
 800d5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f06f 0202 	mvn.w	r2, #2
 800d5f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	3b20      	subs	r3, #32
 800d5f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr
 800d608:	0800d60d 	.word	0x0800d60d

0800d60c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d612:	2300      	movs	r3, #0
 800d614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d616:	4b13      	ldr	r3, [pc, #76]	@ (800d664 <prvTaskExitError+0x58>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d61e:	d00b      	beq.n	800d638 <prvTaskExitError+0x2c>
	__asm volatile
 800d620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	60fb      	str	r3, [r7, #12]
}
 800d632:	bf00      	nop
 800d634:	bf00      	nop
 800d636:	e7fd      	b.n	800d634 <prvTaskExitError+0x28>
	__asm volatile
 800d638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d63c:	f383 8811 	msr	BASEPRI, r3
 800d640:	f3bf 8f6f 	isb	sy
 800d644:	f3bf 8f4f 	dsb	sy
 800d648:	60bb      	str	r3, [r7, #8]
}
 800d64a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d64c:	bf00      	nop
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d0fc      	beq.n	800d64e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d654:	bf00      	nop
 800d656:	bf00      	nop
 800d658:	3714      	adds	r7, #20
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	240049b0 	.word	0x240049b0
	...

0800d670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d670:	4b07      	ldr	r3, [pc, #28]	@ (800d690 <pxCurrentTCBConst2>)
 800d672:	6819      	ldr	r1, [r3, #0]
 800d674:	6808      	ldr	r0, [r1, #0]
 800d676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67a:	f380 8809 	msr	PSP, r0
 800d67e:	f3bf 8f6f 	isb	sy
 800d682:	f04f 0000 	mov.w	r0, #0
 800d686:	f380 8811 	msr	BASEPRI, r0
 800d68a:	4770      	bx	lr
 800d68c:	f3af 8000 	nop.w

0800d690 <pxCurrentTCBConst2>:
 800d690:	24005b34 	.word	0x24005b34
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d694:	bf00      	nop
 800d696:	bf00      	nop

0800d698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d698:	4808      	ldr	r0, [pc, #32]	@ (800d6bc <prvPortStartFirstTask+0x24>)
 800d69a:	6800      	ldr	r0, [r0, #0]
 800d69c:	6800      	ldr	r0, [r0, #0]
 800d69e:	f380 8808 	msr	MSP, r0
 800d6a2:	f04f 0000 	mov.w	r0, #0
 800d6a6:	f380 8814 	msr	CONTROL, r0
 800d6aa:	b662      	cpsie	i
 800d6ac:	b661      	cpsie	f
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	df00      	svc	0
 800d6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6ba:	bf00      	nop
 800d6bc:	e000ed08 	.word	0xe000ed08

0800d6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6c0:	b580      	push	{r7, lr}
 800d6c2:	b086      	sub	sp, #24
 800d6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6c6:	4b47      	ldr	r3, [pc, #284]	@ (800d7e4 <xPortStartScheduler+0x124>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	4a47      	ldr	r2, [pc, #284]	@ (800d7e8 <xPortStartScheduler+0x128>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d10b      	bne.n	800d6e8 <xPortStartScheduler+0x28>
	__asm volatile
 800d6d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d4:	f383 8811 	msr	BASEPRI, r3
 800d6d8:	f3bf 8f6f 	isb	sy
 800d6dc:	f3bf 8f4f 	dsb	sy
 800d6e0:	613b      	str	r3, [r7, #16]
}
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
 800d6e6:	e7fd      	b.n	800d6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6e8:	4b3e      	ldr	r3, [pc, #248]	@ (800d7e4 <xPortStartScheduler+0x124>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a3f      	ldr	r2, [pc, #252]	@ (800d7ec <xPortStartScheduler+0x12c>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d10b      	bne.n	800d70a <xPortStartScheduler+0x4a>
	__asm volatile
 800d6f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6f6:	f383 8811 	msr	BASEPRI, r3
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	f3bf 8f4f 	dsb	sy
 800d702:	60fb      	str	r3, [r7, #12]
}
 800d704:	bf00      	nop
 800d706:	bf00      	nop
 800d708:	e7fd      	b.n	800d706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d70a:	4b39      	ldr	r3, [pc, #228]	@ (800d7f0 <xPortStartScheduler+0x130>)
 800d70c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	22ff      	movs	r2, #255	@ 0xff
 800d71a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	b2db      	uxtb	r3, r3
 800d722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d724:	78fb      	ldrb	r3, [r7, #3]
 800d726:	b2db      	uxtb	r3, r3
 800d728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d72c:	b2da      	uxtb	r2, r3
 800d72e:	4b31      	ldr	r3, [pc, #196]	@ (800d7f4 <xPortStartScheduler+0x134>)
 800d730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d732:	4b31      	ldr	r3, [pc, #196]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d734:	2207      	movs	r2, #7
 800d736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d738:	e009      	b.n	800d74e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800d73a:	4b2f      	ldr	r3, [pc, #188]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	3b01      	subs	r3, #1
 800d740:	4a2d      	ldr	r2, [pc, #180]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d744:	78fb      	ldrb	r3, [r7, #3]
 800d746:	b2db      	uxtb	r3, r3
 800d748:	005b      	lsls	r3, r3, #1
 800d74a:	b2db      	uxtb	r3, r3
 800d74c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d74e:	78fb      	ldrb	r3, [r7, #3]
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d756:	2b80      	cmp	r3, #128	@ 0x80
 800d758:	d0ef      	beq.n	800d73a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d75a:	4b27      	ldr	r3, [pc, #156]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f1c3 0307 	rsb	r3, r3, #7
 800d762:	2b04      	cmp	r3, #4
 800d764:	d00b      	beq.n	800d77e <xPortStartScheduler+0xbe>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	60bb      	str	r3, [r7, #8]
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	e7fd      	b.n	800d77a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d77e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	021b      	lsls	r3, r3, #8
 800d784:	4a1c      	ldr	r2, [pc, #112]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d788:	4b1b      	ldr	r3, [pc, #108]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d790:	4a19      	ldr	r2, [pc, #100]	@ (800d7f8 <xPortStartScheduler+0x138>)
 800d792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	b2da      	uxtb	r2, r3
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d79c:	4b17      	ldr	r3, [pc, #92]	@ (800d7fc <xPortStartScheduler+0x13c>)
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	4a16      	ldr	r2, [pc, #88]	@ (800d7fc <xPortStartScheduler+0x13c>)
 800d7a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d7a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d7a8:	4b14      	ldr	r3, [pc, #80]	@ (800d7fc <xPortStartScheduler+0x13c>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	4a13      	ldr	r2, [pc, #76]	@ (800d7fc <xPortStartScheduler+0x13c>)
 800d7ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d7b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d7b4:	f000 f8da 	bl	800d96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7b8:	4b11      	ldr	r3, [pc, #68]	@ (800d800 <xPortStartScheduler+0x140>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7be:	f000 f8f9 	bl	800d9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7c2:	4b10      	ldr	r3, [pc, #64]	@ (800d804 <xPortStartScheduler+0x144>)
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	4a0f      	ldr	r2, [pc, #60]	@ (800d804 <xPortStartScheduler+0x144>)
 800d7c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d7cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7ce:	f7ff ff63 	bl	800d698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7d2:	f7ff f98f 	bl	800caf4 <vTaskSwitchContext>
	prvTaskExitError();
 800d7d6:	f7ff ff19 	bl	800d60c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3718      	adds	r7, #24
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	bd80      	pop	{r7, pc}
 800d7e4:	e000ed00 	.word	0xe000ed00
 800d7e8:	410fc271 	.word	0x410fc271
 800d7ec:	410fc270 	.word	0x410fc270
 800d7f0:	e000e400 	.word	0xe000e400
 800d7f4:	24005c60 	.word	0x24005c60
 800d7f8:	24005c64 	.word	0x24005c64
 800d7fc:	e000ed20 	.word	0xe000ed20
 800d800:	240049b0 	.word	0x240049b0
 800d804:	e000ef34 	.word	0xe000ef34

0800d808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
	__asm volatile
 800d80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	607b      	str	r3, [r7, #4]
}
 800d820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d822:	4b10      	ldr	r3, [pc, #64]	@ (800d864 <vPortEnterCritical+0x5c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3301      	adds	r3, #1
 800d828:	4a0e      	ldr	r2, [pc, #56]	@ (800d864 <vPortEnterCritical+0x5c>)
 800d82a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d82c:	4b0d      	ldr	r3, [pc, #52]	@ (800d864 <vPortEnterCritical+0x5c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b01      	cmp	r3, #1
 800d832:	d110      	bne.n	800d856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d834:	4b0c      	ldr	r3, [pc, #48]	@ (800d868 <vPortEnterCritical+0x60>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00b      	beq.n	800d856 <vPortEnterCritical+0x4e>
	__asm volatile
 800d83e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d842:	f383 8811 	msr	BASEPRI, r3
 800d846:	f3bf 8f6f 	isb	sy
 800d84a:	f3bf 8f4f 	dsb	sy
 800d84e:	603b      	str	r3, [r7, #0]
}
 800d850:	bf00      	nop
 800d852:	bf00      	nop
 800d854:	e7fd      	b.n	800d852 <vPortEnterCritical+0x4a>
	}
}
 800d856:	bf00      	nop
 800d858:	370c      	adds	r7, #12
 800d85a:	46bd      	mov	sp, r7
 800d85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d860:	4770      	bx	lr
 800d862:	bf00      	nop
 800d864:	240049b0 	.word	0x240049b0
 800d868:	e000ed04 	.word	0xe000ed04

0800d86c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d872:	4b12      	ldr	r3, [pc, #72]	@ (800d8bc <vPortExitCritical+0x50>)
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	d10b      	bne.n	800d892 <vPortExitCritical+0x26>
	__asm volatile
 800d87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d87e:	f383 8811 	msr	BASEPRI, r3
 800d882:	f3bf 8f6f 	isb	sy
 800d886:	f3bf 8f4f 	dsb	sy
 800d88a:	607b      	str	r3, [r7, #4]
}
 800d88c:	bf00      	nop
 800d88e:	bf00      	nop
 800d890:	e7fd      	b.n	800d88e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d892:	4b0a      	ldr	r3, [pc, #40]	@ (800d8bc <vPortExitCritical+0x50>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	3b01      	subs	r3, #1
 800d898:	4a08      	ldr	r2, [pc, #32]	@ (800d8bc <vPortExitCritical+0x50>)
 800d89a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d89c:	4b07      	ldr	r3, [pc, #28]	@ (800d8bc <vPortExitCritical+0x50>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d105      	bne.n	800d8b0 <vPortExitCritical+0x44>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	f383 8811 	msr	BASEPRI, r3
}
 800d8ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d8b0:	bf00      	nop
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr
 800d8bc:	240049b0 	.word	0x240049b0

0800d8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8c0:	f3ef 8009 	mrs	r0, PSP
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	4b15      	ldr	r3, [pc, #84]	@ (800d920 <pxCurrentTCBConst>)
 800d8ca:	681a      	ldr	r2, [r3, #0]
 800d8cc:	f01e 0f10 	tst.w	lr, #16
 800d8d0:	bf08      	it	eq
 800d8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8da:	6010      	str	r0, [r2, #0]
 800d8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d8e4:	f380 8811 	msr	BASEPRI, r0
 800d8e8:	f3bf 8f4f 	dsb	sy
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f7ff f900 	bl	800caf4 <vTaskSwitchContext>
 800d8f4:	f04f 0000 	mov.w	r0, #0
 800d8f8:	f380 8811 	msr	BASEPRI, r0
 800d8fc:	bc09      	pop	{r0, r3}
 800d8fe:	6819      	ldr	r1, [r3, #0]
 800d900:	6808      	ldr	r0, [r1, #0]
 800d902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d906:	f01e 0f10 	tst.w	lr, #16
 800d90a:	bf08      	it	eq
 800d90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d910:	f380 8809 	msr	PSP, r0
 800d914:	f3bf 8f6f 	isb	sy
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	f3af 8000 	nop.w

0800d920 <pxCurrentTCBConst>:
 800d920:	24005b34 	.word	0x24005b34
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d924:	bf00      	nop
 800d926:	bf00      	nop

0800d928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
	__asm volatile
 800d92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d932:	f383 8811 	msr	BASEPRI, r3
 800d936:	f3bf 8f6f 	isb	sy
 800d93a:	f3bf 8f4f 	dsb	sy
 800d93e:	607b      	str	r3, [r7, #4]
}
 800d940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d942:	f7ff f81d 	bl	800c980 <xTaskIncrementTick>
 800d946:	4603      	mov	r3, r0
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d003      	beq.n	800d954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d94c:	4b06      	ldr	r3, [pc, #24]	@ (800d968 <SysTick_Handler+0x40>)
 800d94e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d952:	601a      	str	r2, [r3, #0]
 800d954:	2300      	movs	r3, #0
 800d956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	f383 8811 	msr	BASEPRI, r3
}
 800d95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}
 800d968:	e000ed04 	.word	0xe000ed04

0800d96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d96c:	b480      	push	{r7}
 800d96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d970:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a0 <vPortSetupTimerInterrupt+0x34>)
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d976:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a4 <vPortSetupTimerInterrupt+0x38>)
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d97c:	4b0a      	ldr	r3, [pc, #40]	@ (800d9a8 <vPortSetupTimerInterrupt+0x3c>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4a0a      	ldr	r2, [pc, #40]	@ (800d9ac <vPortSetupTimerInterrupt+0x40>)
 800d982:	fba2 2303 	umull	r2, r3, r2, r3
 800d986:	099b      	lsrs	r3, r3, #6
 800d988:	4a09      	ldr	r2, [pc, #36]	@ (800d9b0 <vPortSetupTimerInterrupt+0x44>)
 800d98a:	3b01      	subs	r3, #1
 800d98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d98e:	4b04      	ldr	r3, [pc, #16]	@ (800d9a0 <vPortSetupTimerInterrupt+0x34>)
 800d990:	2207      	movs	r2, #7
 800d992:	601a      	str	r2, [r3, #0]
}
 800d994:	bf00      	nop
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	e000e010 	.word	0xe000e010
 800d9a4:	e000e018 	.word	0xe000e018
 800d9a8:	2400498c 	.word	0x2400498c
 800d9ac:	10624dd3 	.word	0x10624dd3
 800d9b0:	e000e014 	.word	0xe000e014

0800d9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d9c4 <vPortEnableVFP+0x10>
 800d9b8:	6801      	ldr	r1, [r0, #0]
 800d9ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d9be:	6001      	str	r1, [r0, #0]
 800d9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9c2:	bf00      	nop
 800d9c4:	e000ed88 	.word	0xe000ed88

0800d9c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9ce:	f3ef 8305 	mrs	r3, IPSR
 800d9d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b0f      	cmp	r3, #15
 800d9d8:	d915      	bls.n	800da06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9da:	4a18      	ldr	r2, [pc, #96]	@ (800da3c <vPortValidateInterruptPriority+0x74>)
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	4413      	add	r3, r2
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9e4:	4b16      	ldr	r3, [pc, #88]	@ (800da40 <vPortValidateInterruptPriority+0x78>)
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	7afa      	ldrb	r2, [r7, #11]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d20b      	bcs.n	800da06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9f2:	f383 8811 	msr	BASEPRI, r3
 800d9f6:	f3bf 8f6f 	isb	sy
 800d9fa:	f3bf 8f4f 	dsb	sy
 800d9fe:	607b      	str	r3, [r7, #4]
}
 800da00:	bf00      	nop
 800da02:	bf00      	nop
 800da04:	e7fd      	b.n	800da02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800da06:	4b0f      	ldr	r3, [pc, #60]	@ (800da44 <vPortValidateInterruptPriority+0x7c>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800da0e:	4b0e      	ldr	r3, [pc, #56]	@ (800da48 <vPortValidateInterruptPriority+0x80>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	429a      	cmp	r2, r3
 800da14:	d90b      	bls.n	800da2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800da16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	603b      	str	r3, [r7, #0]
}
 800da28:	bf00      	nop
 800da2a:	bf00      	nop
 800da2c:	e7fd      	b.n	800da2a <vPortValidateInterruptPriority+0x62>
	}
 800da2e:	bf00      	nop
 800da30:	3714      	adds	r7, #20
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	e000e3f0 	.word	0xe000e3f0
 800da40:	24005c60 	.word	0x24005c60
 800da44:	e000ed0c 	.word	0xe000ed0c
 800da48:	24005c64 	.word	0x24005c64

0800da4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b08a      	sub	sp, #40	@ 0x28
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da54:	2300      	movs	r3, #0
 800da56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da58:	f7fe fec4 	bl	800c7e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da5c:	4b5c      	ldr	r3, [pc, #368]	@ (800dbd0 <pvPortMalloc+0x184>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d101      	bne.n	800da68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da64:	f000 f924 	bl	800dcb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da68:	4b5a      	ldr	r3, [pc, #360]	@ (800dbd4 <pvPortMalloc+0x188>)
 800da6a:	681a      	ldr	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	4013      	ands	r3, r2
 800da70:	2b00      	cmp	r3, #0
 800da72:	f040 8095 	bne.w	800dba0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d01e      	beq.n	800daba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800da7c:	2208      	movs	r2, #8
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	4413      	add	r3, r2
 800da82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d015      	beq.n	800daba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f023 0307 	bic.w	r3, r3, #7
 800da94:	3308      	adds	r3, #8
 800da96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f003 0307 	and.w	r3, r3, #7
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00b      	beq.n	800daba <pvPortMalloc+0x6e>
	__asm volatile
 800daa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa6:	f383 8811 	msr	BASEPRI, r3
 800daaa:	f3bf 8f6f 	isb	sy
 800daae:	f3bf 8f4f 	dsb	sy
 800dab2:	617b      	str	r3, [r7, #20]
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop
 800dab8:	e7fd      	b.n	800dab6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d06f      	beq.n	800dba0 <pvPortMalloc+0x154>
 800dac0:	4b45      	ldr	r3, [pc, #276]	@ (800dbd8 <pvPortMalloc+0x18c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	429a      	cmp	r2, r3
 800dac8:	d86a      	bhi.n	800dba0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800daca:	4b44      	ldr	r3, [pc, #272]	@ (800dbdc <pvPortMalloc+0x190>)
 800dacc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dace:	4b43      	ldr	r3, [pc, #268]	@ (800dbdc <pvPortMalloc+0x190>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dad4:	e004      	b.n	800dae0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae2:	685b      	ldr	r3, [r3, #4]
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	429a      	cmp	r2, r3
 800dae8:	d903      	bls.n	800daf2 <pvPortMalloc+0xa6>
 800daea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1f1      	bne.n	800dad6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800daf2:	4b37      	ldr	r3, [pc, #220]	@ (800dbd0 <pvPortMalloc+0x184>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d051      	beq.n	800dba0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dafc:	6a3b      	ldr	r3, [r7, #32]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	2208      	movs	r2, #8
 800db02:	4413      	add	r3, r2
 800db04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db10:	685a      	ldr	r2, [r3, #4]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	1ad2      	subs	r2, r2, r3
 800db16:	2308      	movs	r3, #8
 800db18:	005b      	lsls	r3, r3, #1
 800db1a:	429a      	cmp	r2, r3
 800db1c:	d920      	bls.n	800db60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4413      	add	r3, r2
 800db24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db26:	69bb      	ldr	r3, [r7, #24]
 800db28:	f003 0307 	and.w	r3, r3, #7
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d00b      	beq.n	800db48 <pvPortMalloc+0xfc>
	__asm volatile
 800db30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db34:	f383 8811 	msr	BASEPRI, r3
 800db38:	f3bf 8f6f 	isb	sy
 800db3c:	f3bf 8f4f 	dsb	sy
 800db40:	613b      	str	r3, [r7, #16]
}
 800db42:	bf00      	nop
 800db44:	bf00      	nop
 800db46:	e7fd      	b.n	800db44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db4a:	685a      	ldr	r2, [r3, #4]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	1ad2      	subs	r2, r2, r3
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db5a:	69b8      	ldr	r0, [r7, #24]
 800db5c:	f000 f90a 	bl	800dd74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db60:	4b1d      	ldr	r3, [pc, #116]	@ (800dbd8 <pvPortMalloc+0x18c>)
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	4a1b      	ldr	r2, [pc, #108]	@ (800dbd8 <pvPortMalloc+0x18c>)
 800db6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db6e:	4b1a      	ldr	r3, [pc, #104]	@ (800dbd8 <pvPortMalloc+0x18c>)
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	4b1b      	ldr	r3, [pc, #108]	@ (800dbe0 <pvPortMalloc+0x194>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d203      	bcs.n	800db82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db7a:	4b17      	ldr	r3, [pc, #92]	@ (800dbd8 <pvPortMalloc+0x18c>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	4a18      	ldr	r2, [pc, #96]	@ (800dbe0 <pvPortMalloc+0x194>)
 800db80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db84:	685a      	ldr	r2, [r3, #4]
 800db86:	4b13      	ldr	r3, [pc, #76]	@ (800dbd4 <pvPortMalloc+0x188>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	431a      	orrs	r2, r3
 800db8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db92:	2200      	movs	r2, #0
 800db94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db96:	4b13      	ldr	r3, [pc, #76]	@ (800dbe4 <pvPortMalloc+0x198>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	3301      	adds	r3, #1
 800db9c:	4a11      	ldr	r2, [pc, #68]	@ (800dbe4 <pvPortMalloc+0x198>)
 800db9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dba0:	f7fe fe2e 	bl	800c800 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dba4:	69fb      	ldr	r3, [r7, #28]
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00b      	beq.n	800dbc6 <pvPortMalloc+0x17a>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	60fb      	str	r3, [r7, #12]
}
 800dbc0:	bf00      	nop
 800dbc2:	bf00      	nop
 800dbc4:	e7fd      	b.n	800dbc2 <pvPortMalloc+0x176>
	return pvReturn;
 800dbc6:	69fb      	ldr	r3, [r7, #28]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3728      	adds	r7, #40	@ 0x28
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	24009870 	.word	0x24009870
 800dbd4:	24009884 	.word	0x24009884
 800dbd8:	24009874 	.word	0x24009874
 800dbdc:	24009868 	.word	0x24009868
 800dbe0:	24009878 	.word	0x24009878
 800dbe4:	2400987c 	.word	0x2400987c

0800dbe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d04f      	beq.n	800dc9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbfa:	2308      	movs	r3, #8
 800dbfc:	425b      	negs	r3, r3
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	4413      	add	r3, r2
 800dc02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	4b25      	ldr	r3, [pc, #148]	@ (800dca4 <vPortFree+0xbc>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4013      	ands	r3, r2
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d10b      	bne.n	800dc2e <vPortFree+0x46>
	__asm volatile
 800dc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	60fb      	str	r3, [r7, #12]
}
 800dc28:	bf00      	nop
 800dc2a:	bf00      	nop
 800dc2c:	e7fd      	b.n	800dc2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d00b      	beq.n	800dc4e <vPortFree+0x66>
	__asm volatile
 800dc36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	60bb      	str	r3, [r7, #8]
}
 800dc48:	bf00      	nop
 800dc4a:	bf00      	nop
 800dc4c:	e7fd      	b.n	800dc4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	685a      	ldr	r2, [r3, #4]
 800dc52:	4b14      	ldr	r3, [pc, #80]	@ (800dca4 <vPortFree+0xbc>)
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4013      	ands	r3, r2
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d01e      	beq.n	800dc9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d11a      	bne.n	800dc9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	685a      	ldr	r2, [r3, #4]
 800dc68:	4b0e      	ldr	r3, [pc, #56]	@ (800dca4 <vPortFree+0xbc>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	43db      	mvns	r3, r3
 800dc6e:	401a      	ands	r2, r3
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc74:	f7fe fdb6 	bl	800c7e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dca8 <vPortFree+0xc0>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	4413      	add	r3, r2
 800dc82:	4a09      	ldr	r2, [pc, #36]	@ (800dca8 <vPortFree+0xc0>)
 800dc84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc86:	6938      	ldr	r0, [r7, #16]
 800dc88:	f000 f874 	bl	800dd74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc8c:	4b07      	ldr	r3, [pc, #28]	@ (800dcac <vPortFree+0xc4>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	3301      	adds	r3, #1
 800dc92:	4a06      	ldr	r2, [pc, #24]	@ (800dcac <vPortFree+0xc4>)
 800dc94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc96:	f7fe fdb3 	bl	800c800 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc9a:	bf00      	nop
 800dc9c:	3718      	adds	r7, #24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	24009884 	.word	0x24009884
 800dca8:	24009874 	.word	0x24009874
 800dcac:	24009880 	.word	0x24009880

0800dcb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcb0:	b480      	push	{r7}
 800dcb2:	b085      	sub	sp, #20
 800dcb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcb6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800dcba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dcbc:	4b27      	ldr	r3, [pc, #156]	@ (800dd5c <prvHeapInit+0xac>)
 800dcbe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f003 0307 	and.w	r3, r3, #7
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d00c      	beq.n	800dce4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	3307      	adds	r3, #7
 800dcce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f023 0307 	bic.w	r3, r3, #7
 800dcd6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	1ad3      	subs	r3, r2, r3
 800dcde:	4a1f      	ldr	r2, [pc, #124]	@ (800dd5c <prvHeapInit+0xac>)
 800dce0:	4413      	add	r3, r2
 800dce2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dce8:	4a1d      	ldr	r2, [pc, #116]	@ (800dd60 <prvHeapInit+0xb0>)
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcee:	4b1c      	ldr	r3, [pc, #112]	@ (800dd60 <prvHeapInit+0xb0>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	68ba      	ldr	r2, [r7, #8]
 800dcf8:	4413      	add	r3, r2
 800dcfa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dcfc:	2208      	movs	r2, #8
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	1a9b      	subs	r3, r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f023 0307 	bic.w	r3, r3, #7
 800dd0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4a15      	ldr	r2, [pc, #84]	@ (800dd64 <prvHeapInit+0xb4>)
 800dd10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd12:	4b14      	ldr	r3, [pc, #80]	@ (800dd64 <prvHeapInit+0xb4>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2200      	movs	r2, #0
 800dd18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd1a:	4b12      	ldr	r3, [pc, #72]	@ (800dd64 <prvHeapInit+0xb4>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	1ad2      	subs	r2, r2, r3
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd30:	4b0c      	ldr	r3, [pc, #48]	@ (800dd64 <prvHeapInit+0xb4>)
 800dd32:	681a      	ldr	r2, [r3, #0]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	4a0a      	ldr	r2, [pc, #40]	@ (800dd68 <prvHeapInit+0xb8>)
 800dd3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	4a09      	ldr	r2, [pc, #36]	@ (800dd6c <prvHeapInit+0xbc>)
 800dd46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd48:	4b09      	ldr	r3, [pc, #36]	@ (800dd70 <prvHeapInit+0xc0>)
 800dd4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800dd4e:	601a      	str	r2, [r3, #0]
}
 800dd50:	bf00      	nop
 800dd52:	3714      	adds	r7, #20
 800dd54:	46bd      	mov	sp, r7
 800dd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5a:	4770      	bx	lr
 800dd5c:	24005c68 	.word	0x24005c68
 800dd60:	24009868 	.word	0x24009868
 800dd64:	24009870 	.word	0x24009870
 800dd68:	24009878 	.word	0x24009878
 800dd6c:	24009874 	.word	0x24009874
 800dd70:	24009884 	.word	0x24009884

0800dd74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd7c:	4b28      	ldr	r3, [pc, #160]	@ (800de20 <prvInsertBlockIntoFreeList+0xac>)
 800dd7e:	60fb      	str	r3, [r7, #12]
 800dd80:	e002      	b.n	800dd88 <prvInsertBlockIntoFreeList+0x14>
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	687a      	ldr	r2, [r7, #4]
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d8f7      	bhi.n	800dd82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	68ba      	ldr	r2, [r7, #8]
 800dd9c:	4413      	add	r3, r2
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	429a      	cmp	r2, r3
 800dda2:	d108      	bne.n	800ddb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	685a      	ldr	r2, [r3, #4]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	441a      	add	r2, r3
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	68ba      	ldr	r2, [r7, #8]
 800ddc0:	441a      	add	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d118      	bne.n	800ddfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681a      	ldr	r2, [r3, #0]
 800ddce:	4b15      	ldr	r3, [pc, #84]	@ (800de24 <prvInsertBlockIntoFreeList+0xb0>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d00d      	beq.n	800ddf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	685a      	ldr	r2, [r3, #4]
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	441a      	add	r2, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	601a      	str	r2, [r3, #0]
 800ddf0:	e008      	b.n	800de04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddf2:	4b0c      	ldr	r3, [pc, #48]	@ (800de24 <prvInsertBlockIntoFreeList+0xb0>)
 800ddf4:	681a      	ldr	r2, [r3, #0]
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	601a      	str	r2, [r3, #0]
 800ddfa:	e003      	b.n	800de04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	681a      	ldr	r2, [r3, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	429a      	cmp	r2, r3
 800de0a:	d002      	beq.n	800de12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	687a      	ldr	r2, [r7, #4]
 800de10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de12:	bf00      	nop
 800de14:	3714      	adds	r7, #20
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	24009868 	.word	0x24009868
 800de24:	24009870 	.word	0x24009870

0800de28 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b084      	sub	sp, #16
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800de32:	f007 fba3 	bl	801557c <sys_timeouts_sleeptime>
 800de36:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de3e:	d10b      	bne.n	800de58 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800de40:	4813      	ldr	r0, [pc, #76]	@ (800de90 <tcpip_timeouts_mbox_fetch+0x68>)
 800de42:	f00a fc6e 	bl	8018722 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800de46:	2200      	movs	r2, #0
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f00a fbe0 	bl	8018610 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800de50:	480f      	ldr	r0, [pc, #60]	@ (800de90 <tcpip_timeouts_mbox_fetch+0x68>)
 800de52:	f00a fc57 	bl	8018704 <sys_mutex_lock>
    return;
 800de56:	e018      	b.n	800de8a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d102      	bne.n	800de64 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800de5e:	f007 fb53 	bl	8015508 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800de62:	e7e6      	b.n	800de32 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800de64:	480a      	ldr	r0, [pc, #40]	@ (800de90 <tcpip_timeouts_mbox_fetch+0x68>)
 800de66:	f00a fc5c 	bl	8018722 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	6839      	ldr	r1, [r7, #0]
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f00a fbce 	bl	8018610 <sys_arch_mbox_fetch>
 800de74:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800de76:	4806      	ldr	r0, [pc, #24]	@ (800de90 <tcpip_timeouts_mbox_fetch+0x68>)
 800de78:	f00a fc44 	bl	8018704 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de82:	d102      	bne.n	800de8a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800de84:	f007 fb40 	bl	8015508 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800de88:	e7d3      	b.n	800de32 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	24009894 	.word	0x24009894

0800de94 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800de9c:	4810      	ldr	r0, [pc, #64]	@ (800dee0 <tcpip_thread+0x4c>)
 800de9e:	f00a fc31 	bl	8018704 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800dea2:	4b10      	ldr	r3, [pc, #64]	@ (800dee4 <tcpip_thread+0x50>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d005      	beq.n	800deb6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800deaa:	4b0e      	ldr	r3, [pc, #56]	@ (800dee4 <tcpip_thread+0x50>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a0e      	ldr	r2, [pc, #56]	@ (800dee8 <tcpip_thread+0x54>)
 800deb0:	6812      	ldr	r2, [r2, #0]
 800deb2:	4610      	mov	r0, r2
 800deb4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800deb6:	f107 030c 	add.w	r3, r7, #12
 800deba:	4619      	mov	r1, r3
 800debc:	480b      	ldr	r0, [pc, #44]	@ (800deec <tcpip_thread+0x58>)
 800debe:	f7ff ffb3 	bl	800de28 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d106      	bne.n	800ded6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800dec8:	4b09      	ldr	r3, [pc, #36]	@ (800def0 <tcpip_thread+0x5c>)
 800deca:	2291      	movs	r2, #145	@ 0x91
 800decc:	4909      	ldr	r1, [pc, #36]	@ (800def4 <tcpip_thread+0x60>)
 800dece:	480a      	ldr	r0, [pc, #40]	@ (800def8 <tcpip_thread+0x64>)
 800ded0:	f00a fd78 	bl	80189c4 <iprintf>
      continue;
 800ded4:	e003      	b.n	800dede <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	4618      	mov	r0, r3
 800deda:	f000 f80f 	bl	800defc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800dede:	e7ea      	b.n	800deb6 <tcpip_thread+0x22>
 800dee0:	24009894 	.word	0x24009894
 800dee4:	24009888 	.word	0x24009888
 800dee8:	2400988c 	.word	0x2400988c
 800deec:	24009890 	.word	0x24009890
 800def0:	08019994 	.word	0x08019994
 800def4:	080199c4 	.word	0x080199c4
 800def8:	080199e4 	.word	0x080199e4

0800defc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b082      	sub	sp, #8
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d026      	beq.n	800df5a <tcpip_thread_handle_msg+0x5e>
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	dc2b      	bgt.n	800df68 <tcpip_thread_handle_msg+0x6c>
 800df10:	2b00      	cmp	r3, #0
 800df12:	d002      	beq.n	800df1a <tcpip_thread_handle_msg+0x1e>
 800df14:	2b01      	cmp	r3, #1
 800df16:	d015      	beq.n	800df44 <tcpip_thread_handle_msg+0x48>
 800df18:	e026      	b.n	800df68 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	68db      	ldr	r3, [r3, #12]
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	6850      	ldr	r0, [r2, #4]
 800df22:	687a      	ldr	r2, [r7, #4]
 800df24:	6892      	ldr	r2, [r2, #8]
 800df26:	4611      	mov	r1, r2
 800df28:	4798      	blx	r3
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	685b      	ldr	r3, [r3, #4]
 800df34:	4618      	mov	r0, r3
 800df36:	f001 fdd7 	bl	800fae8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800df3a:	6879      	ldr	r1, [r7, #4]
 800df3c:	2009      	movs	r0, #9
 800df3e:	f000 ff2b 	bl	800ed98 <memp_free>
      break;
 800df42:	e018      	b.n	800df76 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	685b      	ldr	r3, [r3, #4]
 800df48:	687a      	ldr	r2, [r7, #4]
 800df4a:	6892      	ldr	r2, [r2, #8]
 800df4c:	4610      	mov	r0, r2
 800df4e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800df50:	6879      	ldr	r1, [r7, #4]
 800df52:	2008      	movs	r0, #8
 800df54:	f000 ff20 	bl	800ed98 <memp_free>
      break;
 800df58:	e00d      	b.n	800df76 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	685b      	ldr	r3, [r3, #4]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	6892      	ldr	r2, [r2, #8]
 800df62:	4610      	mov	r0, r2
 800df64:	4798      	blx	r3
      break;
 800df66:	e006      	b.n	800df76 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800df68:	4b05      	ldr	r3, [pc, #20]	@ (800df80 <tcpip_thread_handle_msg+0x84>)
 800df6a:	22cf      	movs	r2, #207	@ 0xcf
 800df6c:	4905      	ldr	r1, [pc, #20]	@ (800df84 <tcpip_thread_handle_msg+0x88>)
 800df6e:	4806      	ldr	r0, [pc, #24]	@ (800df88 <tcpip_thread_handle_msg+0x8c>)
 800df70:	f00a fd28 	bl	80189c4 <iprintf>
      break;
 800df74:	bf00      	nop
  }
}
 800df76:	bf00      	nop
 800df78:	3708      	adds	r7, #8
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}
 800df7e:	bf00      	nop
 800df80:	08019994 	.word	0x08019994
 800df84:	080199c4 	.word	0x080199c4
 800df88:	080199e4 	.word	0x080199e4

0800df8c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b086      	sub	sp, #24
 800df90:	af00      	add	r7, sp, #0
 800df92:	60f8      	str	r0, [r7, #12]
 800df94:	60b9      	str	r1, [r7, #8]
 800df96:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800df98:	481a      	ldr	r0, [pc, #104]	@ (800e004 <tcpip_inpkt+0x78>)
 800df9a:	f00a fb78 	bl	801868e <sys_mbox_valid>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d105      	bne.n	800dfb0 <tcpip_inpkt+0x24>
 800dfa4:	4b18      	ldr	r3, [pc, #96]	@ (800e008 <tcpip_inpkt+0x7c>)
 800dfa6:	22fc      	movs	r2, #252	@ 0xfc
 800dfa8:	4918      	ldr	r1, [pc, #96]	@ (800e00c <tcpip_inpkt+0x80>)
 800dfaa:	4819      	ldr	r0, [pc, #100]	@ (800e010 <tcpip_inpkt+0x84>)
 800dfac:	f00a fd0a 	bl	80189c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800dfb0:	2009      	movs	r0, #9
 800dfb2:	f000 fe7b 	bl	800ecac <memp_malloc>
 800dfb6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d102      	bne.n	800dfc4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800dfbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfc2:	e01a      	b.n	800dffa <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800dfd0:	697b      	ldr	r3, [r7, #20]
 800dfd2:	68ba      	ldr	r2, [r7, #8]
 800dfd4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800dfdc:	6979      	ldr	r1, [r7, #20]
 800dfde:	4809      	ldr	r0, [pc, #36]	@ (800e004 <tcpip_inpkt+0x78>)
 800dfe0:	f00a fafc 	bl	80185dc <sys_mbox_trypost>
 800dfe4:	4603      	mov	r3, r0
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d006      	beq.n	800dff8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800dfea:	6979      	ldr	r1, [r7, #20]
 800dfec:	2009      	movs	r0, #9
 800dfee:	f000 fed3 	bl	800ed98 <memp_free>
    return ERR_MEM;
 800dff2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dff6:	e000      	b.n	800dffa <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800dff8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	3718      	adds	r7, #24
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	bf00      	nop
 800e004:	24009890 	.word	0x24009890
 800e008:	08019994 	.word	0x08019994
 800e00c:	08019a0c 	.word	0x08019a0c
 800e010:	080199e4 	.word	0x080199e4

0800e014 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800e024:	f003 0318 	and.w	r3, r3, #24
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d006      	beq.n	800e03a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800e02c:	4a08      	ldr	r2, [pc, #32]	@ (800e050 <tcpip_input+0x3c>)
 800e02e:	6839      	ldr	r1, [r7, #0]
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f7ff ffab 	bl	800df8c <tcpip_inpkt>
 800e036:	4603      	mov	r3, r0
 800e038:	e005      	b.n	800e046 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800e03a:	4a06      	ldr	r2, [pc, #24]	@ (800e054 <tcpip_input+0x40>)
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff ffa4 	bl	800df8c <tcpip_inpkt>
 800e044:	4603      	mov	r3, r0
}
 800e046:	4618      	mov	r0, r3
 800e048:	3708      	adds	r7, #8
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	080183ed 	.word	0x080183ed
 800e054:	080172f5 	.word	0x080172f5

0800e058 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e062:	4819      	ldr	r0, [pc, #100]	@ (800e0c8 <tcpip_try_callback+0x70>)
 800e064:	f00a fb13 	bl	801868e <sys_mbox_valid>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d106      	bne.n	800e07c <tcpip_try_callback+0x24>
 800e06e:	4b17      	ldr	r3, [pc, #92]	@ (800e0cc <tcpip_try_callback+0x74>)
 800e070:	f240 125d 	movw	r2, #349	@ 0x15d
 800e074:	4916      	ldr	r1, [pc, #88]	@ (800e0d0 <tcpip_try_callback+0x78>)
 800e076:	4817      	ldr	r0, [pc, #92]	@ (800e0d4 <tcpip_try_callback+0x7c>)
 800e078:	f00a fca4 	bl	80189c4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800e07c:	2008      	movs	r0, #8
 800e07e:	f000 fe15 	bl	800ecac <memp_malloc>
 800e082:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d102      	bne.n	800e090 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800e08a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e08e:	e017      	b.n	800e0c0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	2201      	movs	r2, #1
 800e094:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	683a      	ldr	r2, [r7, #0]
 800e0a0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e0a2:	68f9      	ldr	r1, [r7, #12]
 800e0a4:	4808      	ldr	r0, [pc, #32]	@ (800e0c8 <tcpip_try_callback+0x70>)
 800e0a6:	f00a fa99 	bl	80185dc <sys_mbox_trypost>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d006      	beq.n	800e0be <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800e0b0:	68f9      	ldr	r1, [r7, #12]
 800e0b2:	2008      	movs	r0, #8
 800e0b4:	f000 fe70 	bl	800ed98 <memp_free>
    return ERR_MEM;
 800e0b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e0bc:	e000      	b.n	800e0c0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800e0be:	2300      	movs	r3, #0
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3710      	adds	r7, #16
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	24009890 	.word	0x24009890
 800e0cc:	08019994 	.word	0x08019994
 800e0d0:	08019a0c 	.word	0x08019a0c
 800e0d4:	080199e4 	.word	0x080199e4

0800e0d8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b084      	sub	sp, #16
 800e0dc:	af02      	add	r7, sp, #8
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800e0e2:	f000 f92d 	bl	800e340 <lwip_init>

  tcpip_init_done = initfunc;
 800e0e6:	4a17      	ldr	r2, [pc, #92]	@ (800e144 <tcpip_init+0x6c>)
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800e0ec:	4a16      	ldr	r2, [pc, #88]	@ (800e148 <tcpip_init+0x70>)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800e0f2:	2106      	movs	r1, #6
 800e0f4:	4815      	ldr	r0, [pc, #84]	@ (800e14c <tcpip_init+0x74>)
 800e0f6:	f00a fa4f 	bl	8018598 <sys_mbox_new>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d006      	beq.n	800e10e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800e100:	4b13      	ldr	r3, [pc, #76]	@ (800e150 <tcpip_init+0x78>)
 800e102:	f240 2261 	movw	r2, #609	@ 0x261
 800e106:	4913      	ldr	r1, [pc, #76]	@ (800e154 <tcpip_init+0x7c>)
 800e108:	4813      	ldr	r0, [pc, #76]	@ (800e158 <tcpip_init+0x80>)
 800e10a:	f00a fc5b 	bl	80189c4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800e10e:	4813      	ldr	r0, [pc, #76]	@ (800e15c <tcpip_init+0x84>)
 800e110:	f00a fadc 	bl	80186cc <sys_mutex_new>
 800e114:	4603      	mov	r3, r0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d006      	beq.n	800e128 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800e11a:	4b0d      	ldr	r3, [pc, #52]	@ (800e150 <tcpip_init+0x78>)
 800e11c:	f240 2265 	movw	r2, #613	@ 0x265
 800e120:	490f      	ldr	r1, [pc, #60]	@ (800e160 <tcpip_init+0x88>)
 800e122:	480d      	ldr	r0, [pc, #52]	@ (800e158 <tcpip_init+0x80>)
 800e124:	f00a fc4e 	bl	80189c4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800e128:	2300      	movs	r3, #0
 800e12a:	9300      	str	r3, [sp, #0]
 800e12c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e130:	2200      	movs	r2, #0
 800e132:	490c      	ldr	r1, [pc, #48]	@ (800e164 <tcpip_init+0x8c>)
 800e134:	480c      	ldr	r0, [pc, #48]	@ (800e168 <tcpip_init+0x90>)
 800e136:	f00a fb01 	bl	801873c <sys_thread_new>
}
 800e13a:	bf00      	nop
 800e13c:	3708      	adds	r7, #8
 800e13e:	46bd      	mov	sp, r7
 800e140:	bd80      	pop	{r7, pc}
 800e142:	bf00      	nop
 800e144:	24009888 	.word	0x24009888
 800e148:	2400988c 	.word	0x2400988c
 800e14c:	24009890 	.word	0x24009890
 800e150:	08019994 	.word	0x08019994
 800e154:	08019a1c 	.word	0x08019a1c
 800e158:	080199e4 	.word	0x080199e4
 800e15c:	24009894 	.word	0x24009894
 800e160:	08019a40 	.word	0x08019a40
 800e164:	0800de95 	.word	0x0800de95
 800e168:	08019a64 	.word	0x08019a64

0800e16c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	4603      	mov	r3, r0
 800e174:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e176:	88fb      	ldrh	r3, [r7, #6]
 800e178:	021b      	lsls	r3, r3, #8
 800e17a:	b21a      	sxth	r2, r3
 800e17c:	88fb      	ldrh	r3, [r7, #6]
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	b29b      	uxth	r3, r3
 800e182:	b21b      	sxth	r3, r3
 800e184:	4313      	orrs	r3, r2
 800e186:	b21b      	sxth	r3, r3
 800e188:	b29b      	uxth	r3, r3
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	370c      	adds	r7, #12
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr

0800e196 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e196:	b480      	push	{r7}
 800e198:	b083      	sub	sp, #12
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	061a      	lsls	r2, r3, #24
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	021b      	lsls	r3, r3, #8
 800e1a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1b4:	431a      	orrs	r2, r3
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	0e1b      	lsrs	r3, r3, #24
 800e1ba:	4313      	orrs	r3, r2
}
 800e1bc:	4618      	mov	r0, r3
 800e1be:	370c      	adds	r7, #12
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e1c8:	b480      	push	{r7}
 800e1ca:	b089      	sub	sp, #36	@ 0x24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
 800e1d0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e1de:	69fb      	ldr	r3, [r7, #28]
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d00d      	beq.n	800e208 <lwip_standard_chksum+0x40>
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd0a      	ble.n	800e208 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	1c53      	adds	r3, r2, #1
 800e1f6:	61fb      	str	r3, [r7, #28]
 800e1f8:	f107 030e 	add.w	r3, r7, #14
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	7812      	ldrb	r2, [r2, #0]
 800e200:	701a      	strb	r2, [r3, #0]
    len--;
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	3b01      	subs	r3, #1
 800e206:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e20c:	e00a      	b.n	800e224 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	1c9a      	adds	r2, r3, #2
 800e212:	61ba      	str	r2, [r7, #24]
 800e214:	881b      	ldrh	r3, [r3, #0]
 800e216:	461a      	mov	r2, r3
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	4413      	add	r3, r2
 800e21c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	3b02      	subs	r3, #2
 800e222:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	2b01      	cmp	r3, #1
 800e228:	dcf1      	bgt.n	800e20e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	dd04      	ble.n	800e23a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e230:	f107 030e 	add.w	r3, r7, #14
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	7812      	ldrb	r2, [r2, #0]
 800e238:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e23a:	89fb      	ldrh	r3, [r7, #14]
 800e23c:	461a      	mov	r2, r3
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	4413      	add	r3, r2
 800e242:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	0c1a      	lsrs	r2, r3, #16
 800e248:	697b      	ldr	r3, [r7, #20]
 800e24a:	b29b      	uxth	r3, r3
 800e24c:	4413      	add	r3, r2
 800e24e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	0c1a      	lsrs	r2, r3, #16
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	b29b      	uxth	r3, r3
 800e258:	4413      	add	r3, r2
 800e25a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d007      	beq.n	800e272 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e262:	697b      	ldr	r3, [r7, #20]
 800e264:	021b      	lsls	r3, r3, #8
 800e266:	b29a      	uxth	r2, r3
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	0a1b      	lsrs	r3, r3, #8
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	4313      	orrs	r3, r2
 800e270:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	b29b      	uxth	r3, r3
}
 800e276:	4618      	mov	r0, r3
 800e278:	3724      	adds	r7, #36	@ 0x24
 800e27a:	46bd      	mov	sp, r7
 800e27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e280:	4770      	bx	lr

0800e282 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b082      	sub	sp, #8
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	460b      	mov	r3, r1
 800e28c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e28e:	887b      	ldrh	r3, [r7, #2]
 800e290:	4619      	mov	r1, r3
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f7ff ff98 	bl	800e1c8 <lwip_standard_chksum>
 800e298:	4603      	mov	r3, r0
 800e29a:	43db      	mvns	r3, r3
 800e29c:	b29b      	uxth	r3, r3
}
 800e29e:	4618      	mov	r0, r3
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b086      	sub	sp, #24
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	613b      	str	r3, [r7, #16]
 800e2ba:	e02b      	b.n	800e314 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	895b      	ldrh	r3, [r3, #10]
 800e2c4:	4619      	mov	r1, r3
 800e2c6:	4610      	mov	r0, r2
 800e2c8:	f7ff ff7e 	bl	800e1c8 <lwip_standard_chksum>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	0c1a      	lsrs	r2, r3, #16
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	b29b      	uxth	r3, r3
 800e2de:	4413      	add	r3, r2
 800e2e0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	895b      	ldrh	r3, [r3, #10]
 800e2e6:	f003 0301 	and.w	r3, r3, #1
 800e2ea:	b29b      	uxth	r3, r3
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00e      	beq.n	800e30e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	bf0c      	ite	eq
 800e2f6:	2301      	moveq	r3, #1
 800e2f8:	2300      	movne	r3, #0
 800e2fa:	b2db      	uxtb	r3, r3
 800e2fc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	021b      	lsls	r3, r3, #8
 800e302:	b29a      	uxth	r2, r3
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	0a1b      	lsrs	r3, r3, #8
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	4313      	orrs	r3, r2
 800e30c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e30e:	693b      	ldr	r3, [r7, #16]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	613b      	str	r3, [r7, #16]
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d1d0      	bne.n	800e2bc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d007      	beq.n	800e330 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	021b      	lsls	r3, r3, #8
 800e324:	b29a      	uxth	r2, r3
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	0a1b      	lsrs	r3, r3, #8
 800e32a:	b2db      	uxtb	r3, r3
 800e32c:	4313      	orrs	r3, r2
 800e32e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	b29b      	uxth	r3, r3
 800e334:	43db      	mvns	r3, r3
 800e336:	b29b      	uxth	r3, r3
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b082      	sub	sp, #8
 800e344:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e346:	2300      	movs	r3, #0
 800e348:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800e34a:	f00a f9b1 	bl	80186b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800e34e:	f000 f8d9 	bl	800e504 <mem_init>
  memp_init();
 800e352:	f000 fc3d 	bl	800ebd0 <memp_init>
  pbuf_init();
  netif_init();
 800e356:	f000 fd49 	bl	800edec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e35a:	f007 f947 	bl	80155ec <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e35e:	f001 fe6d 	bl	801003c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e362:	f007 f889 	bl	8015478 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e366:	bf00      	nop
 800e368:	3708      	adds	r7, #8
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
	...

0800e370 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e37a:	4b05      	ldr	r3, [pc, #20]	@ (800e390 <ptr_to_mem+0x20>)
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	88fb      	ldrh	r3, [r7, #6]
 800e380:	4413      	add	r3, r2
}
 800e382:	4618      	mov	r0, r3
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	240098b0 	.word	0x240098b0

0800e394 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e39c:	4b05      	ldr	r3, [pc, #20]	@ (800e3b4 <mem_to_ptr+0x20>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	687a      	ldr	r2, [r7, #4]
 800e3a2:	1ad3      	subs	r3, r2, r3
 800e3a4:	b29b      	uxth	r3, r3
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	370c      	adds	r7, #12
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3b0:	4770      	bx	lr
 800e3b2:	bf00      	nop
 800e3b4:	240098b0 	.word	0x240098b0

0800e3b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e3b8:	b590      	push	{r4, r7, lr}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e3c0:	4b47      	ldr	r3, [pc, #284]	@ (800e4e0 <plug_holes+0x128>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d206      	bcs.n	800e3d8 <plug_holes+0x20>
 800e3ca:	4b46      	ldr	r3, [pc, #280]	@ (800e4e4 <plug_holes+0x12c>)
 800e3cc:	f240 12df 	movw	r2, #479	@ 0x1df
 800e3d0:	4945      	ldr	r1, [pc, #276]	@ (800e4e8 <plug_holes+0x130>)
 800e3d2:	4846      	ldr	r0, [pc, #280]	@ (800e4ec <plug_holes+0x134>)
 800e3d4:	f00a faf6 	bl	80189c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e3d8:	4b45      	ldr	r3, [pc, #276]	@ (800e4f0 <plug_holes+0x138>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d306      	bcc.n	800e3f0 <plug_holes+0x38>
 800e3e2:	4b40      	ldr	r3, [pc, #256]	@ (800e4e4 <plug_holes+0x12c>)
 800e3e4:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e3e8:	4942      	ldr	r1, [pc, #264]	@ (800e4f4 <plug_holes+0x13c>)
 800e3ea:	4840      	ldr	r0, [pc, #256]	@ (800e4ec <plug_holes+0x134>)
 800e3ec:	f00a faea 	bl	80189c4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	791b      	ldrb	r3, [r3, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d006      	beq.n	800e406 <plug_holes+0x4e>
 800e3f8:	4b3a      	ldr	r3, [pc, #232]	@ (800e4e4 <plug_holes+0x12c>)
 800e3fa:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800e3fe:	493e      	ldr	r1, [pc, #248]	@ (800e4f8 <plug_holes+0x140>)
 800e400:	483a      	ldr	r0, [pc, #232]	@ (800e4ec <plug_holes+0x134>)
 800e402:	f00a fadf 	bl	80189c4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e40e:	4293      	cmp	r3, r2
 800e410:	d906      	bls.n	800e420 <plug_holes+0x68>
 800e412:	4b34      	ldr	r3, [pc, #208]	@ (800e4e4 <plug_holes+0x12c>)
 800e414:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800e418:	4938      	ldr	r1, [pc, #224]	@ (800e4fc <plug_holes+0x144>)
 800e41a:	4834      	ldr	r0, [pc, #208]	@ (800e4ec <plug_holes+0x134>)
 800e41c:	f00a fad2 	bl	80189c4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	881b      	ldrh	r3, [r3, #0]
 800e424:	4618      	mov	r0, r3
 800e426:	f7ff ffa3 	bl	800e370 <ptr_to_mem>
 800e42a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e42c:	687a      	ldr	r2, [r7, #4]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	429a      	cmp	r2, r3
 800e432:	d025      	beq.n	800e480 <plug_holes+0xc8>
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	791b      	ldrb	r3, [r3, #4]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d121      	bne.n	800e480 <plug_holes+0xc8>
 800e43c:	4b2c      	ldr	r3, [pc, #176]	@ (800e4f0 <plug_holes+0x138>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68fa      	ldr	r2, [r7, #12]
 800e442:	429a      	cmp	r2, r3
 800e444:	d01c      	beq.n	800e480 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e446:	4b2e      	ldr	r3, [pc, #184]	@ (800e500 <plug_holes+0x148>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	68fa      	ldr	r2, [r7, #12]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d102      	bne.n	800e456 <plug_holes+0x9e>
      lfree = mem;
 800e450:	4a2b      	ldr	r2, [pc, #172]	@ (800e500 <plug_holes+0x148>)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	881a      	ldrh	r2, [r3, #0]
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e466:	4293      	cmp	r3, r2
 800e468:	d00a      	beq.n	800e480 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	881b      	ldrh	r3, [r3, #0]
 800e46e:	4618      	mov	r0, r3
 800e470:	f7ff ff7e 	bl	800e370 <ptr_to_mem>
 800e474:	4604      	mov	r4, r0
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff ff8c 	bl	800e394 <mem_to_ptr>
 800e47c:	4603      	mov	r3, r0
 800e47e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	885b      	ldrh	r3, [r3, #2]
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff ff73 	bl	800e370 <ptr_to_mem>
 800e48a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e48c:	68ba      	ldr	r2, [r7, #8]
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	429a      	cmp	r2, r3
 800e492:	d020      	beq.n	800e4d6 <plug_holes+0x11e>
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	791b      	ldrb	r3, [r3, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d11c      	bne.n	800e4d6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e49c:	4b18      	ldr	r3, [pc, #96]	@ (800e500 <plug_holes+0x148>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d102      	bne.n	800e4ac <plug_holes+0xf4>
      lfree = pmem;
 800e4a6:	4a16      	ldr	r2, [pc, #88]	@ (800e500 <plug_holes+0x148>)
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	881a      	ldrh	r2, [r3, #0]
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	881b      	ldrh	r3, [r3, #0]
 800e4b8:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d00a      	beq.n	800e4d6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	881b      	ldrh	r3, [r3, #0]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7ff ff53 	bl	800e370 <ptr_to_mem>
 800e4ca:	4604      	mov	r4, r0
 800e4cc:	68b8      	ldr	r0, [r7, #8]
 800e4ce:	f7ff ff61 	bl	800e394 <mem_to_ptr>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e4d6:	bf00      	nop
 800e4d8:	3714      	adds	r7, #20
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd90      	pop	{r4, r7, pc}
 800e4de:	bf00      	nop
 800e4e0:	240098b0 	.word	0x240098b0
 800e4e4:	08019a74 	.word	0x08019a74
 800e4e8:	08019aa4 	.word	0x08019aa4
 800e4ec:	08019abc 	.word	0x08019abc
 800e4f0:	240098b4 	.word	0x240098b4
 800e4f4:	08019ae4 	.word	0x08019ae4
 800e4f8:	08019b00 	.word	0x08019b00
 800e4fc:	08019b1c 	.word	0x08019b1c
 800e500:	240098bc 	.word	0x240098bc

0800e504 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e50a:	4b1d      	ldr	r3, [pc, #116]	@ (800e580 <mem_init+0x7c>)
 800e50c:	4a1d      	ldr	r2, [pc, #116]	@ (800e584 <mem_init+0x80>)
 800e50e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e510:	4b1b      	ldr	r3, [pc, #108]	@ (800e580 <mem_init+0x7c>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e51c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2200      	movs	r2, #0
 800e528:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e52a:	f647 50e8 	movw	r0, #32232	@ 0x7de8
 800e52e:	f7ff ff1f 	bl	800e370 <ptr_to_mem>
 800e532:	4603      	mov	r3, r0
 800e534:	4a14      	ldr	r2, [pc, #80]	@ (800e588 <mem_init+0x84>)
 800e536:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e538:	4b13      	ldr	r3, [pc, #76]	@ (800e588 <mem_init+0x84>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	2201      	movs	r2, #1
 800e53e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e540:	4b11      	ldr	r3, [pc, #68]	@ (800e588 <mem_init+0x84>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e548:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e54a:	4b0f      	ldr	r3, [pc, #60]	@ (800e588 <mem_init+0x84>)
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e552:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e554:	4b0a      	ldr	r3, [pc, #40]	@ (800e580 <mem_init+0x7c>)
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	4a0c      	ldr	r2, [pc, #48]	@ (800e58c <mem_init+0x88>)
 800e55a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800e55c:	480c      	ldr	r0, [pc, #48]	@ (800e590 <mem_init+0x8c>)
 800e55e:	f00a f8b5 	bl	80186cc <sys_mutex_new>
 800e562:	4603      	mov	r3, r0
 800e564:	2b00      	cmp	r3, #0
 800e566:	d006      	beq.n	800e576 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800e568:	4b0a      	ldr	r3, [pc, #40]	@ (800e594 <mem_init+0x90>)
 800e56a:	f240 221f 	movw	r2, #543	@ 0x21f
 800e56e:	490a      	ldr	r1, [pc, #40]	@ (800e598 <mem_init+0x94>)
 800e570:	480a      	ldr	r0, [pc, #40]	@ (800e59c <mem_init+0x98>)
 800e572:	f00a fa27 	bl	80189c4 <iprintf>
  }
}
 800e576:	bf00      	nop
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	240098b0 	.word	0x240098b0
 800e584:	30000200 	.word	0x30000200
 800e588:	240098b4 	.word	0x240098b4
 800e58c:	240098bc 	.word	0x240098bc
 800e590:	240098b8 	.word	0x240098b8
 800e594:	08019a74 	.word	0x08019a74
 800e598:	08019b48 	.word	0x08019b48
 800e59c:	08019abc 	.word	0x08019abc

0800e5a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff fef3 	bl	800e394 <mem_to_ptr>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff feda 	bl	800e370 <ptr_to_mem>
 800e5bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	885b      	ldrh	r3, [r3, #2]
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	f7ff fed4 	bl	800e370 <ptr_to_mem>
 800e5c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d819      	bhi.n	800e60a <mem_link_valid+0x6a>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	885b      	ldrh	r3, [r3, #2]
 800e5da:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d813      	bhi.n	800e60a <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e5e6:	8afa      	ldrh	r2, [r7, #22]
 800e5e8:	429a      	cmp	r2, r3
 800e5ea:	d004      	beq.n	800e5f6 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	8afa      	ldrh	r2, [r7, #22]
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d109      	bne.n	800e60a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e5f6:	4b08      	ldr	r3, [pc, #32]	@ (800e618 <mem_link_valid+0x78>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e5fa:	693a      	ldr	r2, [r7, #16]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d006      	beq.n	800e60e <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	885b      	ldrh	r3, [r3, #2]
 800e604:	8afa      	ldrh	r2, [r7, #22]
 800e606:	429a      	cmp	r2, r3
 800e608:	d001      	beq.n	800e60e <mem_link_valid+0x6e>
    return 0;
 800e60a:	2300      	movs	r3, #0
 800e60c:	e000      	b.n	800e610 <mem_link_valid+0x70>
  }
  return 1;
 800e60e:	2301      	movs	r3, #1
}
 800e610:	4618      	mov	r0, r3
 800e612:	3718      	adds	r7, #24
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}
 800e618:	240098b4 	.word	0x240098b4

0800e61c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b088      	sub	sp, #32
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d070      	beq.n	800e70c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f003 0303 	and.w	r3, r3, #3
 800e630:	2b00      	cmp	r3, #0
 800e632:	d00d      	beq.n	800e650 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e634:	4b37      	ldr	r3, [pc, #220]	@ (800e714 <mem_free+0xf8>)
 800e636:	f240 2273 	movw	r2, #627	@ 0x273
 800e63a:	4937      	ldr	r1, [pc, #220]	@ (800e718 <mem_free+0xfc>)
 800e63c:	4837      	ldr	r0, [pc, #220]	@ (800e71c <mem_free+0x100>)
 800e63e:	f00a f9c1 	bl	80189c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e642:	f00a f8a1 	bl	8018788 <sys_arch_protect>
 800e646:	60f8      	str	r0, [r7, #12]
 800e648:	68f8      	ldr	r0, [r7, #12]
 800e64a:	f00a f8ab 	bl	80187a4 <sys_arch_unprotect>
    return;
 800e64e:	e05e      	b.n	800e70e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3b08      	subs	r3, #8
 800e654:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e656:	4b32      	ldr	r3, [pc, #200]	@ (800e720 <mem_free+0x104>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	69fa      	ldr	r2, [r7, #28]
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d306      	bcc.n	800e66e <mem_free+0x52>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f103 020c 	add.w	r2, r3, #12
 800e666:	4b2f      	ldr	r3, [pc, #188]	@ (800e724 <mem_free+0x108>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	429a      	cmp	r2, r3
 800e66c:	d90d      	bls.n	800e68a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e66e:	4b29      	ldr	r3, [pc, #164]	@ (800e714 <mem_free+0xf8>)
 800e670:	f240 227f 	movw	r2, #639	@ 0x27f
 800e674:	492c      	ldr	r1, [pc, #176]	@ (800e728 <mem_free+0x10c>)
 800e676:	4829      	ldr	r0, [pc, #164]	@ (800e71c <mem_free+0x100>)
 800e678:	f00a f9a4 	bl	80189c4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e67c:	f00a f884 	bl	8018788 <sys_arch_protect>
 800e680:	6138      	str	r0, [r7, #16]
 800e682:	6938      	ldr	r0, [r7, #16]
 800e684:	f00a f88e 	bl	80187a4 <sys_arch_unprotect>
    return;
 800e688:	e041      	b.n	800e70e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e68a:	4828      	ldr	r0, [pc, #160]	@ (800e72c <mem_free+0x110>)
 800e68c:	f00a f83a 	bl	8018704 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800e690:	69fb      	ldr	r3, [r7, #28]
 800e692:	791b      	ldrb	r3, [r3, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d110      	bne.n	800e6ba <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e698:	4b1e      	ldr	r3, [pc, #120]	@ (800e714 <mem_free+0xf8>)
 800e69a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800e69e:	4924      	ldr	r1, [pc, #144]	@ (800e730 <mem_free+0x114>)
 800e6a0:	481e      	ldr	r0, [pc, #120]	@ (800e71c <mem_free+0x100>)
 800e6a2:	f00a f98f 	bl	80189c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e6a6:	4821      	ldr	r0, [pc, #132]	@ (800e72c <mem_free+0x110>)
 800e6a8:	f00a f83b 	bl	8018722 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e6ac:	f00a f86c 	bl	8018788 <sys_arch_protect>
 800e6b0:	6178      	str	r0, [r7, #20]
 800e6b2:	6978      	ldr	r0, [r7, #20]
 800e6b4:	f00a f876 	bl	80187a4 <sys_arch_unprotect>
    return;
 800e6b8:	e029      	b.n	800e70e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800e6ba:	69f8      	ldr	r0, [r7, #28]
 800e6bc:	f7ff ff70 	bl	800e5a0 <mem_link_valid>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d110      	bne.n	800e6e8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e6c6:	4b13      	ldr	r3, [pc, #76]	@ (800e714 <mem_free+0xf8>)
 800e6c8:	f240 2295 	movw	r2, #661	@ 0x295
 800e6cc:	4919      	ldr	r1, [pc, #100]	@ (800e734 <mem_free+0x118>)
 800e6ce:	4813      	ldr	r0, [pc, #76]	@ (800e71c <mem_free+0x100>)
 800e6d0:	f00a f978 	bl	80189c4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800e6d4:	4815      	ldr	r0, [pc, #84]	@ (800e72c <mem_free+0x110>)
 800e6d6:	f00a f824 	bl	8018722 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e6da:	f00a f855 	bl	8018788 <sys_arch_protect>
 800e6de:	61b8      	str	r0, [r7, #24]
 800e6e0:	69b8      	ldr	r0, [r7, #24]
 800e6e2:	f00a f85f 	bl	80187a4 <sys_arch_unprotect>
    return;
 800e6e6:	e012      	b.n	800e70e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e6e8:	69fb      	ldr	r3, [r7, #28]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e6ee:	4b12      	ldr	r3, [pc, #72]	@ (800e738 <mem_free+0x11c>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	69fa      	ldr	r2, [r7, #28]
 800e6f4:	429a      	cmp	r2, r3
 800e6f6:	d202      	bcs.n	800e6fe <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e6f8:	4a0f      	ldr	r2, [pc, #60]	@ (800e738 <mem_free+0x11c>)
 800e6fa:	69fb      	ldr	r3, [r7, #28]
 800e6fc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e6fe:	69f8      	ldr	r0, [r7, #28]
 800e700:	f7ff fe5a 	bl	800e3b8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e704:	4809      	ldr	r0, [pc, #36]	@ (800e72c <mem_free+0x110>)
 800e706:	f00a f80c 	bl	8018722 <sys_mutex_unlock>
 800e70a:	e000      	b.n	800e70e <mem_free+0xf2>
    return;
 800e70c:	bf00      	nop
}
 800e70e:	3720      	adds	r7, #32
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}
 800e714:	08019a74 	.word	0x08019a74
 800e718:	08019b64 	.word	0x08019b64
 800e71c:	08019abc 	.word	0x08019abc
 800e720:	240098b0 	.word	0x240098b0
 800e724:	240098b4 	.word	0x240098b4
 800e728:	08019b88 	.word	0x08019b88
 800e72c:	240098b8 	.word	0x240098b8
 800e730:	08019ba4 	.word	0x08019ba4
 800e734:	08019bcc 	.word	0x08019bcc
 800e738:	240098bc 	.word	0x240098bc

0800e73c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800e73c:	b580      	push	{r7, lr}
 800e73e:	b088      	sub	sp, #32
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
 800e744:	460b      	mov	r3, r1
 800e746:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800e748:	887b      	ldrh	r3, [r7, #2]
 800e74a:	3303      	adds	r3, #3
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	f023 0303 	bic.w	r3, r3, #3
 800e752:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800e754:	8bfb      	ldrh	r3, [r7, #30]
 800e756:	2b0b      	cmp	r3, #11
 800e758:	d801      	bhi.n	800e75e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800e75a:	230c      	movs	r3, #12
 800e75c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800e75e:	8bfb      	ldrh	r3, [r7, #30]
 800e760:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e764:	4293      	cmp	r3, r2
 800e766:	d803      	bhi.n	800e770 <mem_trim+0x34>
 800e768:	8bfa      	ldrh	r2, [r7, #30]
 800e76a:	887b      	ldrh	r3, [r7, #2]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d201      	bcs.n	800e774 <mem_trim+0x38>
    return NULL;
 800e770:	2300      	movs	r3, #0
 800e772:	e0dc      	b.n	800e92e <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800e774:	4b70      	ldr	r3, [pc, #448]	@ (800e938 <mem_trim+0x1fc>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	687a      	ldr	r2, [r7, #4]
 800e77a:	429a      	cmp	r2, r3
 800e77c:	d304      	bcc.n	800e788 <mem_trim+0x4c>
 800e77e:	4b6f      	ldr	r3, [pc, #444]	@ (800e93c <mem_trim+0x200>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	687a      	ldr	r2, [r7, #4]
 800e784:	429a      	cmp	r2, r3
 800e786:	d306      	bcc.n	800e796 <mem_trim+0x5a>
 800e788:	4b6d      	ldr	r3, [pc, #436]	@ (800e940 <mem_trim+0x204>)
 800e78a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800e78e:	496d      	ldr	r1, [pc, #436]	@ (800e944 <mem_trim+0x208>)
 800e790:	486d      	ldr	r0, [pc, #436]	@ (800e948 <mem_trim+0x20c>)
 800e792:	f00a f917 	bl	80189c4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800e796:	4b68      	ldr	r3, [pc, #416]	@ (800e938 <mem_trim+0x1fc>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	687a      	ldr	r2, [r7, #4]
 800e79c:	429a      	cmp	r2, r3
 800e79e:	d304      	bcc.n	800e7aa <mem_trim+0x6e>
 800e7a0:	4b66      	ldr	r3, [pc, #408]	@ (800e93c <mem_trim+0x200>)
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	687a      	ldr	r2, [r7, #4]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d307      	bcc.n	800e7ba <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800e7aa:	f009 ffed 	bl	8018788 <sys_arch_protect>
 800e7ae:	60b8      	str	r0, [r7, #8]
 800e7b0:	68b8      	ldr	r0, [r7, #8]
 800e7b2:	f009 fff7 	bl	80187a4 <sys_arch_unprotect>
    return rmem;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	e0b9      	b.n	800e92e <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	3b08      	subs	r3, #8
 800e7be:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800e7c0:	69b8      	ldr	r0, [r7, #24]
 800e7c2:	f7ff fde7 	bl	800e394 <mem_to_ptr>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	881a      	ldrh	r2, [r3, #0]
 800e7ce:	8afb      	ldrh	r3, [r7, #22]
 800e7d0:	1ad3      	subs	r3, r2, r3
 800e7d2:	b29b      	uxth	r3, r3
 800e7d4:	3b08      	subs	r3, #8
 800e7d6:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800e7d8:	8bfa      	ldrh	r2, [r7, #30]
 800e7da:	8abb      	ldrh	r3, [r7, #20]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d906      	bls.n	800e7ee <mem_trim+0xb2>
 800e7e0:	4b57      	ldr	r3, [pc, #348]	@ (800e940 <mem_trim+0x204>)
 800e7e2:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800e7e6:	4959      	ldr	r1, [pc, #356]	@ (800e94c <mem_trim+0x210>)
 800e7e8:	4857      	ldr	r0, [pc, #348]	@ (800e948 <mem_trim+0x20c>)
 800e7ea:	f00a f8eb 	bl	80189c4 <iprintf>
  if (newsize > size) {
 800e7ee:	8bfa      	ldrh	r2, [r7, #30]
 800e7f0:	8abb      	ldrh	r3, [r7, #20]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d901      	bls.n	800e7fa <mem_trim+0xbe>
    /* not supported */
    return NULL;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	e099      	b.n	800e92e <mem_trim+0x1f2>
  }
  if (newsize == size) {
 800e7fa:	8bfa      	ldrh	r2, [r7, #30]
 800e7fc:	8abb      	ldrh	r3, [r7, #20]
 800e7fe:	429a      	cmp	r2, r3
 800e800:	d101      	bne.n	800e806 <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	e093      	b.n	800e92e <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800e806:	4852      	ldr	r0, [pc, #328]	@ (800e950 <mem_trim+0x214>)
 800e808:	f009 ff7c 	bl	8018704 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	881b      	ldrh	r3, [r3, #0]
 800e810:	4618      	mov	r0, r3
 800e812:	f7ff fdad 	bl	800e370 <ptr_to_mem>
 800e816:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	791b      	ldrb	r3, [r3, #4]
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d141      	bne.n	800e8a4 <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e820:	69bb      	ldr	r3, [r7, #24]
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e828:	4293      	cmp	r3, r2
 800e82a:	d106      	bne.n	800e83a <mem_trim+0xfe>
 800e82c:	4b44      	ldr	r3, [pc, #272]	@ (800e940 <mem_trim+0x204>)
 800e82e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800e832:	4948      	ldr	r1, [pc, #288]	@ (800e954 <mem_trim+0x218>)
 800e834:	4844      	ldr	r0, [pc, #272]	@ (800e948 <mem_trim+0x20c>)
 800e836:	f00a f8c5 	bl	80189c4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	881b      	ldrh	r3, [r3, #0]
 800e83e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e840:	8afa      	ldrh	r2, [r7, #22]
 800e842:	8bfb      	ldrh	r3, [r7, #30]
 800e844:	4413      	add	r3, r2
 800e846:	b29b      	uxth	r3, r3
 800e848:	3308      	adds	r3, #8
 800e84a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800e84c:	4b42      	ldr	r3, [pc, #264]	@ (800e958 <mem_trim+0x21c>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	693a      	ldr	r2, [r7, #16]
 800e852:	429a      	cmp	r2, r3
 800e854:	d106      	bne.n	800e864 <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 800e856:	89fb      	ldrh	r3, [r7, #14]
 800e858:	4618      	mov	r0, r3
 800e85a:	f7ff fd89 	bl	800e370 <ptr_to_mem>
 800e85e:	4603      	mov	r3, r0
 800e860:	4a3d      	ldr	r2, [pc, #244]	@ (800e958 <mem_trim+0x21c>)
 800e862:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800e864:	89fb      	ldrh	r3, [r7, #14]
 800e866:	4618      	mov	r0, r3
 800e868:	f7ff fd82 	bl	800e370 <ptr_to_mem>
 800e86c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	2200      	movs	r2, #0
 800e872:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	89ba      	ldrh	r2, [r7, #12]
 800e878:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	8afa      	ldrh	r2, [r7, #22]
 800e87e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800e880:	69bb      	ldr	r3, [r7, #24]
 800e882:	89fa      	ldrh	r2, [r7, #14]
 800e884:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e88e:	4293      	cmp	r3, r2
 800e890:	d049      	beq.n	800e926 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	881b      	ldrh	r3, [r3, #0]
 800e896:	4618      	mov	r0, r3
 800e898:	f7ff fd6a 	bl	800e370 <ptr_to_mem>
 800e89c:	4602      	mov	r2, r0
 800e89e:	89fb      	ldrh	r3, [r7, #14]
 800e8a0:	8053      	strh	r3, [r2, #2]
 800e8a2:	e040      	b.n	800e926 <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800e8a4:	8bfb      	ldrh	r3, [r7, #30]
 800e8a6:	f103 0214 	add.w	r2, r3, #20
 800e8aa:	8abb      	ldrh	r3, [r7, #20]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d83a      	bhi.n	800e926 <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800e8b0:	8afa      	ldrh	r2, [r7, #22]
 800e8b2:	8bfb      	ldrh	r3, [r7, #30]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	3308      	adds	r3, #8
 800e8ba:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800e8bc:	69bb      	ldr	r3, [r7, #24]
 800e8be:	881b      	ldrh	r3, [r3, #0]
 800e8c0:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e8c4:	4293      	cmp	r3, r2
 800e8c6:	d106      	bne.n	800e8d6 <mem_trim+0x19a>
 800e8c8:	4b1d      	ldr	r3, [pc, #116]	@ (800e940 <mem_trim+0x204>)
 800e8ca:	f240 3216 	movw	r2, #790	@ 0x316
 800e8ce:	4921      	ldr	r1, [pc, #132]	@ (800e954 <mem_trim+0x218>)
 800e8d0:	481d      	ldr	r0, [pc, #116]	@ (800e948 <mem_trim+0x20c>)
 800e8d2:	f00a f877 	bl	80189c4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800e8d6:	89fb      	ldrh	r3, [r7, #14]
 800e8d8:	4618      	mov	r0, r3
 800e8da:	f7ff fd49 	bl	800e370 <ptr_to_mem>
 800e8de:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800e8e0:	4b1d      	ldr	r3, [pc, #116]	@ (800e958 <mem_trim+0x21c>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	693a      	ldr	r2, [r7, #16]
 800e8e6:	429a      	cmp	r2, r3
 800e8e8:	d202      	bcs.n	800e8f0 <mem_trim+0x1b4>
      lfree = mem2;
 800e8ea:	4a1b      	ldr	r2, [pc, #108]	@ (800e958 <mem_trim+0x21c>)
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800e8f6:	69bb      	ldr	r3, [r7, #24]
 800e8f8:	881a      	ldrh	r2, [r3, #0]
 800e8fa:	693b      	ldr	r3, [r7, #16]
 800e8fc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800e8fe:	693b      	ldr	r3, [r7, #16]
 800e900:	8afa      	ldrh	r2, [r7, #22]
 800e902:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	89fa      	ldrh	r2, [r7, #14]
 800e908:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	881b      	ldrh	r3, [r3, #0]
 800e90e:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e912:	4293      	cmp	r3, r2
 800e914:	d007      	beq.n	800e926 <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	881b      	ldrh	r3, [r3, #0]
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7ff fd28 	bl	800e370 <ptr_to_mem>
 800e920:	4602      	mov	r2, r0
 800e922:	89fb      	ldrh	r3, [r7, #14]
 800e924:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800e926:	480a      	ldr	r0, [pc, #40]	@ (800e950 <mem_trim+0x214>)
 800e928:	f009 fefb 	bl	8018722 <sys_mutex_unlock>
  return rmem;
 800e92c:	687b      	ldr	r3, [r7, #4]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3720      	adds	r7, #32
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	240098b0 	.word	0x240098b0
 800e93c:	240098b4 	.word	0x240098b4
 800e940:	08019a74 	.word	0x08019a74
 800e944:	08019c00 	.word	0x08019c00
 800e948:	08019abc 	.word	0x08019abc
 800e94c:	08019c18 	.word	0x08019c18
 800e950:	240098b8 	.word	0x240098b8
 800e954:	08019c38 	.word	0x08019c38
 800e958:	240098bc 	.word	0x240098bc

0800e95c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b088      	sub	sp, #32
 800e960:	af00      	add	r7, sp, #0
 800e962:	4603      	mov	r3, r0
 800e964:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800e966:	88fb      	ldrh	r3, [r7, #6]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d101      	bne.n	800e970 <mem_malloc+0x14>
    return NULL;
 800e96c:	2300      	movs	r3, #0
 800e96e:	e0e6      	b.n	800eb3e <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800e970:	88fb      	ldrh	r3, [r7, #6]
 800e972:	3303      	adds	r3, #3
 800e974:	b29b      	uxth	r3, r3
 800e976:	f023 0303 	bic.w	r3, r3, #3
 800e97a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800e97c:	8bbb      	ldrh	r3, [r7, #28]
 800e97e:	2b0b      	cmp	r3, #11
 800e980:	d801      	bhi.n	800e986 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800e982:	230c      	movs	r3, #12
 800e984:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800e986:	8bbb      	ldrh	r3, [r7, #28]
 800e988:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800e98c:	4293      	cmp	r3, r2
 800e98e:	d803      	bhi.n	800e998 <mem_malloc+0x3c>
 800e990:	8bba      	ldrh	r2, [r7, #28]
 800e992:	88fb      	ldrh	r3, [r7, #6]
 800e994:	429a      	cmp	r2, r3
 800e996:	d201      	bcs.n	800e99c <mem_malloc+0x40>
    return NULL;
 800e998:	2300      	movs	r3, #0
 800e99a:	e0d0      	b.n	800eb3e <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800e99c:	486a      	ldr	r0, [pc, #424]	@ (800eb48 <mem_malloc+0x1ec>)
 800e99e:	f009 feb1 	bl	8018704 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e9a2:	4b6a      	ldr	r3, [pc, #424]	@ (800eb4c <mem_malloc+0x1f0>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f7ff fcf4 	bl	800e394 <mem_to_ptr>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	83fb      	strh	r3, [r7, #30]
 800e9b0:	e0b9      	b.n	800eb26 <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800e9b2:	8bfb      	ldrh	r3, [r7, #30]
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7ff fcdb 	bl	800e370 <ptr_to_mem>
 800e9ba:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	791b      	ldrb	r3, [r3, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f040 80a9 	bne.w	800eb18 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	881b      	ldrh	r3, [r3, #0]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	8bfb      	ldrh	r3, [r7, #30]
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	f1a3 0208 	sub.w	r2, r3, #8
 800e9d4:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	f0c0 809e 	bcc.w	800eb18 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	881b      	ldrh	r3, [r3, #0]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	8bfb      	ldrh	r3, [r7, #30]
 800e9e4:	1ad3      	subs	r3, r2, r3
 800e9e6:	f1a3 0208 	sub.w	r2, r3, #8
 800e9ea:	8bbb      	ldrh	r3, [r7, #28]
 800e9ec:	3314      	adds	r3, #20
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d335      	bcc.n	800ea5e <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800e9f2:	8bfa      	ldrh	r2, [r7, #30]
 800e9f4:	8bbb      	ldrh	r3, [r7, #28]
 800e9f6:	4413      	add	r3, r2
 800e9f8:	b29b      	uxth	r3, r3
 800e9fa:	3308      	adds	r3, #8
 800e9fc:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800e9fe:	8a7b      	ldrh	r3, [r7, #18]
 800ea00:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d106      	bne.n	800ea16 <mem_malloc+0xba>
 800ea08:	4b51      	ldr	r3, [pc, #324]	@ (800eb50 <mem_malloc+0x1f4>)
 800ea0a:	f240 3287 	movw	r2, #903	@ 0x387
 800ea0e:	4951      	ldr	r1, [pc, #324]	@ (800eb54 <mem_malloc+0x1f8>)
 800ea10:	4851      	ldr	r0, [pc, #324]	@ (800eb58 <mem_malloc+0x1fc>)
 800ea12:	f009 ffd7 	bl	80189c4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ea16:	8a7b      	ldrh	r3, [r7, #18]
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7ff fca9 	bl	800e370 <ptr_to_mem>
 800ea1e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	2200      	movs	r2, #0
 800ea24:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	881a      	ldrh	r2, [r3, #0]
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
 800ea30:	8bfa      	ldrh	r2, [r7, #30]
 800ea32:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	8a7a      	ldrh	r2, [r7, #18]
 800ea38:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ea3a:	697b      	ldr	r3, [r7, #20]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	881b      	ldrh	r3, [r3, #0]
 800ea44:	f647 52e8 	movw	r2, #32232	@ 0x7de8
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d00b      	beq.n	800ea64 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	881b      	ldrh	r3, [r3, #0]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7ff fc8d 	bl	800e370 <ptr_to_mem>
 800ea56:	4602      	mov	r2, r0
 800ea58:	8a7b      	ldrh	r3, [r7, #18]
 800ea5a:	8053      	strh	r3, [r2, #2]
 800ea5c:	e002      	b.n	800ea64 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	2201      	movs	r2, #1
 800ea62:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ea64:	4b39      	ldr	r3, [pc, #228]	@ (800eb4c <mem_malloc+0x1f0>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d127      	bne.n	800eabe <mem_malloc+0x162>
          struct mem *cur = lfree;
 800ea6e:	4b37      	ldr	r3, [pc, #220]	@ (800eb4c <mem_malloc+0x1f0>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ea74:	e005      	b.n	800ea82 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f7ff fc78 	bl	800e370 <ptr_to_mem>
 800ea80:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ea82:	69bb      	ldr	r3, [r7, #24]
 800ea84:	791b      	ldrb	r3, [r3, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d004      	beq.n	800ea94 <mem_malloc+0x138>
 800ea8a:	4b34      	ldr	r3, [pc, #208]	@ (800eb5c <mem_malloc+0x200>)
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	69ba      	ldr	r2, [r7, #24]
 800ea90:	429a      	cmp	r2, r3
 800ea92:	d1f0      	bne.n	800ea76 <mem_malloc+0x11a>
          }
          lfree = cur;
 800ea94:	4a2d      	ldr	r2, [pc, #180]	@ (800eb4c <mem_malloc+0x1f0>)
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ea9a:	4b2c      	ldr	r3, [pc, #176]	@ (800eb4c <mem_malloc+0x1f0>)
 800ea9c:	681a      	ldr	r2, [r3, #0]
 800ea9e:	4b2f      	ldr	r3, [pc, #188]	@ (800eb5c <mem_malloc+0x200>)
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d00b      	beq.n	800eabe <mem_malloc+0x162>
 800eaa6:	4b29      	ldr	r3, [pc, #164]	@ (800eb4c <mem_malloc+0x1f0>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	791b      	ldrb	r3, [r3, #4]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d006      	beq.n	800eabe <mem_malloc+0x162>
 800eab0:	4b27      	ldr	r3, [pc, #156]	@ (800eb50 <mem_malloc+0x1f4>)
 800eab2:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800eab6:	492a      	ldr	r1, [pc, #168]	@ (800eb60 <mem_malloc+0x204>)
 800eab8:	4827      	ldr	r0, [pc, #156]	@ (800eb58 <mem_malloc+0x1fc>)
 800eaba:	f009 ff83 	bl	80189c4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800eabe:	4822      	ldr	r0, [pc, #136]	@ (800eb48 <mem_malloc+0x1ec>)
 800eac0:	f009 fe2f 	bl	8018722 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800eac4:	8bba      	ldrh	r2, [r7, #28]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	4413      	add	r3, r2
 800eaca:	3308      	adds	r3, #8
 800eacc:	4a23      	ldr	r2, [pc, #140]	@ (800eb5c <mem_malloc+0x200>)
 800eace:	6812      	ldr	r2, [r2, #0]
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d906      	bls.n	800eae2 <mem_malloc+0x186>
 800ead4:	4b1e      	ldr	r3, [pc, #120]	@ (800eb50 <mem_malloc+0x1f4>)
 800ead6:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800eada:	4922      	ldr	r1, [pc, #136]	@ (800eb64 <mem_malloc+0x208>)
 800eadc:	481e      	ldr	r0, [pc, #120]	@ (800eb58 <mem_malloc+0x1fc>)
 800eade:	f009 ff71 	bl	80189c4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	f003 0303 	and.w	r3, r3, #3
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d006      	beq.n	800eafa <mem_malloc+0x19e>
 800eaec:	4b18      	ldr	r3, [pc, #96]	@ (800eb50 <mem_malloc+0x1f4>)
 800eaee:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800eaf2:	491d      	ldr	r1, [pc, #116]	@ (800eb68 <mem_malloc+0x20c>)
 800eaf4:	4818      	ldr	r0, [pc, #96]	@ (800eb58 <mem_malloc+0x1fc>)
 800eaf6:	f009 ff65 	bl	80189c4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800eafa:	697b      	ldr	r3, [r7, #20]
 800eafc:	f003 0303 	and.w	r3, r3, #3
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d006      	beq.n	800eb12 <mem_malloc+0x1b6>
 800eb04:	4b12      	ldr	r3, [pc, #72]	@ (800eb50 <mem_malloc+0x1f4>)
 800eb06:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800eb0a:	4918      	ldr	r1, [pc, #96]	@ (800eb6c <mem_malloc+0x210>)
 800eb0c:	4812      	ldr	r0, [pc, #72]	@ (800eb58 <mem_malloc+0x1fc>)
 800eb0e:	f009 ff59 	bl	80189c4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	3308      	adds	r3, #8
 800eb16:	e012      	b.n	800eb3e <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 800eb18:	8bfb      	ldrh	r3, [r7, #30]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7ff fc28 	bl	800e370 <ptr_to_mem>
 800eb20:	4603      	mov	r3, r0
 800eb22:	881b      	ldrh	r3, [r3, #0]
 800eb24:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800eb26:	8bfa      	ldrh	r2, [r7, #30]
 800eb28:	8bb9      	ldrh	r1, [r7, #28]
 800eb2a:	f647 53e8 	movw	r3, #32232	@ 0x7de8
 800eb2e:	1a5b      	subs	r3, r3, r1
 800eb30:	429a      	cmp	r2, r3
 800eb32:	f4ff af3e 	bcc.w	800e9b2 <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800eb36:	4804      	ldr	r0, [pc, #16]	@ (800eb48 <mem_malloc+0x1ec>)
 800eb38:	f009 fdf3 	bl	8018722 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3720      	adds	r7, #32
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	240098b8 	.word	0x240098b8
 800eb4c:	240098bc 	.word	0x240098bc
 800eb50:	08019a74 	.word	0x08019a74
 800eb54:	08019c38 	.word	0x08019c38
 800eb58:	08019abc 	.word	0x08019abc
 800eb5c:	240098b4 	.word	0x240098b4
 800eb60:	08019c4c 	.word	0x08019c4c
 800eb64:	08019c68 	.word	0x08019c68
 800eb68:	08019c98 	.word	0x08019c98
 800eb6c:	08019cc8 	.word	0x08019cc8

0800eb70 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b085      	sub	sp, #20
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	689b      	ldr	r3, [r3, #8]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	3303      	adds	r3, #3
 800eb86:	f023 0303 	bic.w	r3, r3, #3
 800eb8a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	e011      	b.n	800ebb6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	689b      	ldr	r3, [r3, #8]
 800eb96:	681a      	ldr	r2, [r3, #0]
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	689b      	ldr	r3, [r3, #8]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	461a      	mov	r2, r3
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	4413      	add	r3, r2
 800ebae:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	3301      	adds	r3, #1
 800ebb4:	60fb      	str	r3, [r7, #12]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	885b      	ldrh	r3, [r3, #2]
 800ebba:	461a      	mov	r2, r3
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	dbe7      	blt.n	800eb92 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ebc2:	bf00      	nop
 800ebc4:	bf00      	nop
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	80fb      	strh	r3, [r7, #6]
 800ebda:	e009      	b.n	800ebf0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ebdc:	88fb      	ldrh	r3, [r7, #6]
 800ebde:	4a08      	ldr	r2, [pc, #32]	@ (800ec00 <memp_init+0x30>)
 800ebe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7ff ffc3 	bl	800eb70 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ebea:	88fb      	ldrh	r3, [r7, #6]
 800ebec:	3301      	adds	r3, #1
 800ebee:	80fb      	strh	r3, [r7, #6]
 800ebf0:	88fb      	ldrh	r3, [r7, #6]
 800ebf2:	2b0c      	cmp	r3, #12
 800ebf4:	d9f2      	bls.n	800ebdc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ebf6:	bf00      	nop
 800ebf8:	bf00      	nop
 800ebfa:	3708      	adds	r7, #8
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	0801c4dc 	.word	0x0801c4dc

0800ec04 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ec0c:	f009 fdbc 	bl	8018788 <sys_arch_protect>
 800ec10:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d015      	beq.n	800ec4c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	68ba      	ldr	r2, [r7, #8]
 800ec26:	6812      	ldr	r2, [r2, #0]
 800ec28:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	f003 0303 	and.w	r3, r3, #3
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d006      	beq.n	800ec42 <do_memp_malloc_pool+0x3e>
 800ec34:	4b09      	ldr	r3, [pc, #36]	@ (800ec5c <do_memp_malloc_pool+0x58>)
 800ec36:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800ec3a:	4909      	ldr	r1, [pc, #36]	@ (800ec60 <do_memp_malloc_pool+0x5c>)
 800ec3c:	4809      	ldr	r0, [pc, #36]	@ (800ec64 <do_memp_malloc_pool+0x60>)
 800ec3e:	f009 fec1 	bl	80189c4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ec42:	68f8      	ldr	r0, [r7, #12]
 800ec44:	f009 fdae 	bl	80187a4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	e003      	b.n	800ec54 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	f009 fda9 	bl	80187a4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ec52:	2300      	movs	r3, #0
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3710      	adds	r7, #16
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	08019cec 	.word	0x08019cec
 800ec60:	08019d1c 	.word	0x08019d1c
 800ec64:	08019d40 	.word	0x08019d40

0800ec68 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d106      	bne.n	800ec84 <memp_malloc_pool+0x1c>
 800ec76:	4b0a      	ldr	r3, [pc, #40]	@ (800eca0 <memp_malloc_pool+0x38>)
 800ec78:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ec7c:	4909      	ldr	r1, [pc, #36]	@ (800eca4 <memp_malloc_pool+0x3c>)
 800ec7e:	480a      	ldr	r0, [pc, #40]	@ (800eca8 <memp_malloc_pool+0x40>)
 800ec80:	f009 fea0 	bl	80189c4 <iprintf>
  if (desc == NULL) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d101      	bne.n	800ec8e <memp_malloc_pool+0x26>
    return NULL;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	e003      	b.n	800ec96 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f7ff ffb8 	bl	800ec04 <do_memp_malloc_pool>
 800ec94:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3708      	adds	r7, #8
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}
 800ec9e:	bf00      	nop
 800eca0:	08019cec 	.word	0x08019cec
 800eca4:	08019d68 	.word	0x08019d68
 800eca8:	08019d40 	.word	0x08019d40

0800ecac <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b084      	sub	sp, #16
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ecb6:	79fb      	ldrb	r3, [r7, #7]
 800ecb8:	2b0c      	cmp	r3, #12
 800ecba:	d908      	bls.n	800ecce <memp_malloc+0x22>
 800ecbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ece8 <memp_malloc+0x3c>)
 800ecbe:	f240 1257 	movw	r2, #343	@ 0x157
 800ecc2:	490a      	ldr	r1, [pc, #40]	@ (800ecec <memp_malloc+0x40>)
 800ecc4:	480a      	ldr	r0, [pc, #40]	@ (800ecf0 <memp_malloc+0x44>)
 800ecc6:	f009 fe7d 	bl	80189c4 <iprintf>
 800ecca:	2300      	movs	r3, #0
 800eccc:	e008      	b.n	800ece0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	4a08      	ldr	r2, [pc, #32]	@ (800ecf4 <memp_malloc+0x48>)
 800ecd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7ff ff94 	bl	800ec04 <do_memp_malloc_pool>
 800ecdc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ecde:	68fb      	ldr	r3, [r7, #12]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	08019cec 	.word	0x08019cec
 800ecec:	08019d7c 	.word	0x08019d7c
 800ecf0:	08019d40 	.word	0x08019d40
 800ecf4:	0801c4dc 	.word	0x0801c4dc

0800ecf8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	f003 0303 	and.w	r3, r3, #3
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d006      	beq.n	800ed1a <do_memp_free_pool+0x22>
 800ed0c:	4b0d      	ldr	r3, [pc, #52]	@ (800ed44 <do_memp_free_pool+0x4c>)
 800ed0e:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ed12:	490d      	ldr	r1, [pc, #52]	@ (800ed48 <do_memp_free_pool+0x50>)
 800ed14:	480d      	ldr	r0, [pc, #52]	@ (800ed4c <do_memp_free_pool+0x54>)
 800ed16:	f009 fe55 	bl	80189c4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ed1a:	683b      	ldr	r3, [r7, #0]
 800ed1c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ed1e:	f009 fd33 	bl	8018788 <sys_arch_protect>
 800ed22:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	689b      	ldr	r3, [r3, #8]
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	689b      	ldr	r3, [r3, #8]
 800ed32:	68fa      	ldr	r2, [r7, #12]
 800ed34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ed36:	68b8      	ldr	r0, [r7, #8]
 800ed38:	f009 fd34 	bl	80187a4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ed3c:	bf00      	nop
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	08019cec 	.word	0x08019cec
 800ed48:	08019d9c 	.word	0x08019d9c
 800ed4c:	08019d40 	.word	0x08019d40

0800ed50 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b082      	sub	sp, #8
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d106      	bne.n	800ed6e <memp_free_pool+0x1e>
 800ed60:	4b0a      	ldr	r3, [pc, #40]	@ (800ed8c <memp_free_pool+0x3c>)
 800ed62:	f240 1295 	movw	r2, #405	@ 0x195
 800ed66:	490a      	ldr	r1, [pc, #40]	@ (800ed90 <memp_free_pool+0x40>)
 800ed68:	480a      	ldr	r0, [pc, #40]	@ (800ed94 <memp_free_pool+0x44>)
 800ed6a:	f009 fe2b 	bl	80189c4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d007      	beq.n	800ed84 <memp_free_pool+0x34>
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d004      	beq.n	800ed84 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800ed7a:	6839      	ldr	r1, [r7, #0]
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff ffbb 	bl	800ecf8 <do_memp_free_pool>
 800ed82:	e000      	b.n	800ed86 <memp_free_pool+0x36>
    return;
 800ed84:	bf00      	nop
}
 800ed86:	3708      	adds	r7, #8
 800ed88:	46bd      	mov	sp, r7
 800ed8a:	bd80      	pop	{r7, pc}
 800ed8c:	08019cec 	.word	0x08019cec
 800ed90:	08019d68 	.word	0x08019d68
 800ed94:	08019d40 	.word	0x08019d40

0800ed98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	4603      	mov	r3, r0
 800eda0:	6039      	str	r1, [r7, #0]
 800eda2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800eda4:	79fb      	ldrb	r3, [r7, #7]
 800eda6:	2b0c      	cmp	r3, #12
 800eda8:	d907      	bls.n	800edba <memp_free+0x22>
 800edaa:	4b0c      	ldr	r3, [pc, #48]	@ (800eddc <memp_free+0x44>)
 800edac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800edb0:	490b      	ldr	r1, [pc, #44]	@ (800ede0 <memp_free+0x48>)
 800edb2:	480c      	ldr	r0, [pc, #48]	@ (800ede4 <memp_free+0x4c>)
 800edb4:	f009 fe06 	bl	80189c4 <iprintf>
 800edb8:	e00c      	b.n	800edd4 <memp_free+0x3c>

  if (mem == NULL) {
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d008      	beq.n	800edd2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800edc0:	79fb      	ldrb	r3, [r7, #7]
 800edc2:	4a09      	ldr	r2, [pc, #36]	@ (800ede8 <memp_free+0x50>)
 800edc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edc8:	6839      	ldr	r1, [r7, #0]
 800edca:	4618      	mov	r0, r3
 800edcc:	f7ff ff94 	bl	800ecf8 <do_memp_free_pool>
 800edd0:	e000      	b.n	800edd4 <memp_free+0x3c>
    return;
 800edd2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800edd4:	3708      	adds	r7, #8
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}
 800edda:	bf00      	nop
 800eddc:	08019cec 	.word	0x08019cec
 800ede0:	08019dbc 	.word	0x08019dbc
 800ede4:	08019d40 	.word	0x08019d40
 800ede8:	0801c4dc 	.word	0x0801c4dc

0800edec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800edec:	b480      	push	{r7}
 800edee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800edf0:	bf00      	nop
 800edf2:	46bd      	mov	sp, r7
 800edf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf8:	4770      	bx	lr
	...

0800edfc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b086      	sub	sp, #24
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	60f8      	str	r0, [r7, #12]
 800ee04:	60b9      	str	r1, [r7, #8]
 800ee06:	607a      	str	r2, [r7, #4]
 800ee08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d108      	bne.n	800ee22 <netif_add+0x26>
 800ee10:	4b57      	ldr	r3, [pc, #348]	@ (800ef70 <netif_add+0x174>)
 800ee12:	f240 1227 	movw	r2, #295	@ 0x127
 800ee16:	4957      	ldr	r1, [pc, #348]	@ (800ef74 <netif_add+0x178>)
 800ee18:	4857      	ldr	r0, [pc, #348]	@ (800ef78 <netif_add+0x17c>)
 800ee1a:	f009 fdd3 	bl	80189c4 <iprintf>
 800ee1e:	2300      	movs	r3, #0
 800ee20:	e0a2      	b.n	800ef68 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ee22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d108      	bne.n	800ee3a <netif_add+0x3e>
 800ee28:	4b51      	ldr	r3, [pc, #324]	@ (800ef70 <netif_add+0x174>)
 800ee2a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800ee2e:	4953      	ldr	r1, [pc, #332]	@ (800ef7c <netif_add+0x180>)
 800ee30:	4851      	ldr	r0, [pc, #324]	@ (800ef78 <netif_add+0x17c>)
 800ee32:	f009 fdc7 	bl	80189c4 <iprintf>
 800ee36:	2300      	movs	r3, #0
 800ee38:	e096      	b.n	800ef68 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ee3a:	68bb      	ldr	r3, [r7, #8]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d101      	bne.n	800ee44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ee40:	4b4f      	ldr	r3, [pc, #316]	@ (800ef80 <netif_add+0x184>)
 800ee42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d101      	bne.n	800ee4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ee4a:	4b4d      	ldr	r3, [pc, #308]	@ (800ef80 <netif_add+0x184>)
 800ee4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d101      	bne.n	800ee58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ee54:	4b4a      	ldr	r3, [pc, #296]	@ (800ef80 <netif_add+0x184>)
 800ee56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	2200      	movs	r2, #0
 800ee5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	2200      	movs	r2, #0
 800ee68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	4a45      	ldr	r2, [pc, #276]	@ (800ef84 <netif_add+0x188>)
 800ee6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2200      	movs	r2, #0
 800ee74:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2200      	movs	r2, #0
 800ee82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	6a3a      	ldr	r2, [r7, #32]
 800ee88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ee8a:	4b3f      	ldr	r3, [pc, #252]	@ (800ef88 <netif_add+0x18c>)
 800ee8c:	781a      	ldrb	r2, [r3, #0]
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	687a      	ldr	r2, [r7, #4]
 800ee9e:	68b9      	ldr	r1, [r7, #8]
 800eea0:	68f8      	ldr	r0, [r7, #12]
 800eea2:	f000 f913 	bl	800f0cc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800eea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	4798      	blx	r3
 800eeac:	4603      	mov	r3, r0
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d001      	beq.n	800eeb6 <netif_add+0xba>
    return NULL;
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	e058      	b.n	800ef68 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eebc:	2bff      	cmp	r3, #255	@ 0xff
 800eebe:	d103      	bne.n	800eec8 <netif_add+0xcc>
        netif->num = 0;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800eec8:	2300      	movs	r3, #0
 800eeca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800eecc:	4b2f      	ldr	r3, [pc, #188]	@ (800ef8c <netif_add+0x190>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	617b      	str	r3, [r7, #20]
 800eed2:	e02b      	b.n	800ef2c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800eed4:	697a      	ldr	r2, [r7, #20]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	429a      	cmp	r2, r3
 800eeda:	d106      	bne.n	800eeea <netif_add+0xee>
 800eedc:	4b24      	ldr	r3, [pc, #144]	@ (800ef70 <netif_add+0x174>)
 800eede:	f240 128b 	movw	r2, #395	@ 0x18b
 800eee2:	492b      	ldr	r1, [pc, #172]	@ (800ef90 <netif_add+0x194>)
 800eee4:	4824      	ldr	r0, [pc, #144]	@ (800ef78 <netif_add+0x17c>)
 800eee6:	f009 fd6d 	bl	80189c4 <iprintf>
        num_netifs++;
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	3301      	adds	r3, #1
 800eeee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	2bff      	cmp	r3, #255	@ 0xff
 800eef4:	dd06      	ble.n	800ef04 <netif_add+0x108>
 800eef6:	4b1e      	ldr	r3, [pc, #120]	@ (800ef70 <netif_add+0x174>)
 800eef8:	f240 128d 	movw	r2, #397	@ 0x18d
 800eefc:	4925      	ldr	r1, [pc, #148]	@ (800ef94 <netif_add+0x198>)
 800eefe:	481e      	ldr	r0, [pc, #120]	@ (800ef78 <netif_add+0x17c>)
 800ef00:	f009 fd60 	bl	80189c4 <iprintf>
        if (netif2->num == netif->num) {
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d108      	bne.n	800ef26 <netif_add+0x12a>
          netif->num++;
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	b2da      	uxtb	r2, r3
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800ef24:	e005      	b.n	800ef32 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800ef26:	697b      	ldr	r3, [r7, #20]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	617b      	str	r3, [r7, #20]
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1d0      	bne.n	800eed4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d1be      	bne.n	800eeb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef3e:	2bfe      	cmp	r3, #254	@ 0xfe
 800ef40:	d103      	bne.n	800ef4a <netif_add+0x14e>
    netif_num = 0;
 800ef42:	4b11      	ldr	r3, [pc, #68]	@ (800ef88 <netif_add+0x18c>)
 800ef44:	2200      	movs	r2, #0
 800ef46:	701a      	strb	r2, [r3, #0]
 800ef48:	e006      	b.n	800ef58 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ef50:	3301      	adds	r3, #1
 800ef52:	b2da      	uxtb	r2, r3
 800ef54:	4b0c      	ldr	r3, [pc, #48]	@ (800ef88 <netif_add+0x18c>)
 800ef56:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ef58:	4b0c      	ldr	r3, [pc, #48]	@ (800ef8c <netif_add+0x190>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ef60:	4a0a      	ldr	r2, [pc, #40]	@ (800ef8c <netif_add+0x190>)
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800ef66:	68fb      	ldr	r3, [r7, #12]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3718      	adds	r7, #24
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	08019dd8 	.word	0x08019dd8
 800ef74:	08019e6c 	.word	0x08019e6c
 800ef78:	08019e28 	.word	0x08019e28
 800ef7c:	08019e88 	.word	0x08019e88
 800ef80:	0801c550 	.word	0x0801c550
 800ef84:	0800f3a7 	.word	0x0800f3a7
 800ef88:	24010354 	.word	0x24010354
 800ef8c:	2401034c 	.word	0x2401034c
 800ef90:	08019eac 	.word	0x08019eac
 800ef94:	08019ec0 	.word	0x08019ec0

0800ef98 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800efa2:	6839      	ldr	r1, [r7, #0]
 800efa4:	6878      	ldr	r0, [r7, #4]
 800efa6:	f002 fb97 	bl	80116d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800efaa:	6839      	ldr	r1, [r7, #0]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f006 ffd7 	bl	8015f60 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800efb2:	bf00      	nop
 800efb4:	3708      	adds	r7, #8
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}
	...

0800efbc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b086      	sub	sp, #24
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	60f8      	str	r0, [r7, #12]
 800efc4:	60b9      	str	r1, [r7, #8]
 800efc6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d106      	bne.n	800efdc <netif_do_set_ipaddr+0x20>
 800efce:	4b1d      	ldr	r3, [pc, #116]	@ (800f044 <netif_do_set_ipaddr+0x88>)
 800efd0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800efd4:	491c      	ldr	r1, [pc, #112]	@ (800f048 <netif_do_set_ipaddr+0x8c>)
 800efd6:	481d      	ldr	r0, [pc, #116]	@ (800f04c <netif_do_set_ipaddr+0x90>)
 800efd8:	f009 fcf4 	bl	80189c4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d106      	bne.n	800eff0 <netif_do_set_ipaddr+0x34>
 800efe2:	4b18      	ldr	r3, [pc, #96]	@ (800f044 <netif_do_set_ipaddr+0x88>)
 800efe4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800efe8:	4917      	ldr	r1, [pc, #92]	@ (800f048 <netif_do_set_ipaddr+0x8c>)
 800efea:	4818      	ldr	r0, [pc, #96]	@ (800f04c <netif_do_set_ipaddr+0x90>)
 800efec:	f009 fcea 	bl	80189c4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	3304      	adds	r3, #4
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	429a      	cmp	r2, r3
 800effc:	d01c      	beq.n	800f038 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	3304      	adds	r3, #4
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f00e:	f107 0314 	add.w	r3, r7, #20
 800f012:	4619      	mov	r1, r3
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7ff ffbf 	bl	800ef98 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d002      	beq.n	800f026 <netif_do_set_ipaddr+0x6a>
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	e000      	b.n	800f028 <netif_do_set_ipaddr+0x6c>
 800f026:	2300      	movs	r3, #0
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f02c:	2101      	movs	r1, #1
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f000 f8d2 	bl	800f1d8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f034:	2301      	movs	r3, #1
 800f036:	e000      	b.n	800f03a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3718      	adds	r7, #24
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}
 800f042:	bf00      	nop
 800f044:	08019dd8 	.word	0x08019dd8
 800f048:	08019ef0 	.word	0x08019ef0
 800f04c:	08019e28 	.word	0x08019e28

0800f050 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	60f8      	str	r0, [r7, #12]
 800f058:	60b9      	str	r1, [r7, #8]
 800f05a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	3308      	adds	r3, #8
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	429a      	cmp	r2, r3
 800f068:	d00a      	beq.n	800f080 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <netif_do_set_netmask+0x26>
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	e000      	b.n	800f078 <netif_do_set_netmask+0x28>
 800f076:	2300      	movs	r3, #0
 800f078:	68fa      	ldr	r2, [r7, #12]
 800f07a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f07c:	2301      	movs	r3, #1
 800f07e:	e000      	b.n	800f082 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f080:	2300      	movs	r3, #0
}
 800f082:	4618      	mov	r0, r3
 800f084:	3714      	adds	r7, #20
 800f086:	46bd      	mov	sp, r7
 800f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f08c:	4770      	bx	lr

0800f08e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f08e:	b480      	push	{r7}
 800f090:	b085      	sub	sp, #20
 800f092:	af00      	add	r7, sp, #0
 800f094:	60f8      	str	r0, [r7, #12]
 800f096:	60b9      	str	r1, [r7, #8]
 800f098:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	681a      	ldr	r2, [r3, #0]
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	330c      	adds	r3, #12
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d00a      	beq.n	800f0be <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d002      	beq.n	800f0b4 <netif_do_set_gw+0x26>
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	e000      	b.n	800f0b6 <netif_do_set_gw+0x28>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	68fa      	ldr	r2, [r7, #12]
 800f0b8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	e000      	b.n	800f0c0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr

0800f0cc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b088      	sub	sp, #32
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	60f8      	str	r0, [r7, #12]
 800f0d4:	60b9      	str	r1, [r7, #8]
 800f0d6:	607a      	str	r2, [r7, #4]
 800f0d8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d101      	bne.n	800f0ec <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800f15c <netif_set_addr+0x90>)
 800f0ea:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d101      	bne.n	800f0f6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f0f2:	4b1a      	ldr	r3, [pc, #104]	@ (800f15c <netif_set_addr+0x90>)
 800f0f4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d101      	bne.n	800f100 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f0fc:	4b17      	ldr	r3, [pc, #92]	@ (800f15c <netif_set_addr+0x90>)
 800f0fe:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f100:	68bb      	ldr	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d003      	beq.n	800f10e <netif_set_addr+0x42>
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d101      	bne.n	800f112 <netif_set_addr+0x46>
 800f10e:	2301      	movs	r3, #1
 800f110:	e000      	b.n	800f114 <netif_set_addr+0x48>
 800f112:	2300      	movs	r3, #0
 800f114:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d006      	beq.n	800f12a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f11c:	f107 0310 	add.w	r3, r7, #16
 800f120:	461a      	mov	r2, r3
 800f122:	68b9      	ldr	r1, [r7, #8]
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f7ff ff49 	bl	800efbc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f12a:	69fa      	ldr	r2, [r7, #28]
 800f12c:	6879      	ldr	r1, [r7, #4]
 800f12e:	68f8      	ldr	r0, [r7, #12]
 800f130:	f7ff ff8e 	bl	800f050 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f7ff ffa8 	bl	800f08e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d106      	bne.n	800f152 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f144:	f107 0310 	add.w	r3, r7, #16
 800f148:	461a      	mov	r2, r3
 800f14a:	68b9      	ldr	r1, [r7, #8]
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff ff35 	bl	800efbc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f152:	bf00      	nop
 800f154:	3720      	adds	r7, #32
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop
 800f15c:	0801c550 	.word	0x0801c550

0800f160 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f168:	4a04      	ldr	r2, [pc, #16]	@ (800f17c <netif_set_default+0x1c>)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f16e:	bf00      	nop
 800f170:	370c      	adds	r7, #12
 800f172:	46bd      	mov	sp, r7
 800f174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f178:	4770      	bx	lr
 800f17a:	bf00      	nop
 800f17c:	24010350 	.word	0x24010350

0800f180 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d107      	bne.n	800f19e <netif_set_up+0x1e>
 800f18e:	4b0f      	ldr	r3, [pc, #60]	@ (800f1cc <netif_set_up+0x4c>)
 800f190:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800f194:	490e      	ldr	r1, [pc, #56]	@ (800f1d0 <netif_set_up+0x50>)
 800f196:	480f      	ldr	r0, [pc, #60]	@ (800f1d4 <netif_set_up+0x54>)
 800f198:	f009 fc14 	bl	80189c4 <iprintf>
 800f19c:	e013      	b.n	800f1c6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1a4:	f003 0301 	and.w	r3, r3, #1
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d10c      	bne.n	800f1c6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1b2:	f043 0301 	orr.w	r3, r3, #1
 800f1b6:	b2da      	uxtb	r2, r3
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f1be:	2103      	movs	r1, #3
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 f809 	bl	800f1d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f1c6:	3708      	adds	r7, #8
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	bd80      	pop	{r7, pc}
 800f1cc:	08019dd8 	.word	0x08019dd8
 800f1d0:	08019f60 	.word	0x08019f60
 800f1d4:	08019e28 	.word	0x08019e28

0800f1d8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b082      	sub	sp, #8
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
 800f1e0:	460b      	mov	r3, r1
 800f1e2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d106      	bne.n	800f1f8 <netif_issue_reports+0x20>
 800f1ea:	4b18      	ldr	r3, [pc, #96]	@ (800f24c <netif_issue_reports+0x74>)
 800f1ec:	f240 326d 	movw	r2, #877	@ 0x36d
 800f1f0:	4917      	ldr	r1, [pc, #92]	@ (800f250 <netif_issue_reports+0x78>)
 800f1f2:	4818      	ldr	r0, [pc, #96]	@ (800f254 <netif_issue_reports+0x7c>)
 800f1f4:	f009 fbe6 	bl	80189c4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f1fe:	f003 0304 	and.w	r3, r3, #4
 800f202:	2b00      	cmp	r3, #0
 800f204:	d01e      	beq.n	800f244 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f20c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f210:	2b00      	cmp	r3, #0
 800f212:	d017      	beq.n	800f244 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f214:	78fb      	ldrb	r3, [r7, #3]
 800f216:	f003 0301 	and.w	r3, r3, #1
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d013      	beq.n	800f246 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	3304      	adds	r3, #4
 800f222:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f224:	2b00      	cmp	r3, #0
 800f226:	d00e      	beq.n	800f246 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f22e:	f003 0308 	and.w	r3, r3, #8
 800f232:	2b00      	cmp	r3, #0
 800f234:	d007      	beq.n	800f246 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	3304      	adds	r3, #4
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f007 fdf9 	bl	8016e34 <etharp_request>
 800f242:	e000      	b.n	800f246 <netif_issue_reports+0x6e>
    return;
 800f244:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f246:	3708      	adds	r7, #8
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}
 800f24c:	08019dd8 	.word	0x08019dd8
 800f250:	08019f7c 	.word	0x08019f7c
 800f254:	08019e28 	.word	0x08019e28

0800f258 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b082      	sub	sp, #8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d107      	bne.n	800f276 <netif_set_down+0x1e>
 800f266:	4b12      	ldr	r3, [pc, #72]	@ (800f2b0 <netif_set_down+0x58>)
 800f268:	f240 329b 	movw	r2, #923	@ 0x39b
 800f26c:	4911      	ldr	r1, [pc, #68]	@ (800f2b4 <netif_set_down+0x5c>)
 800f26e:	4812      	ldr	r0, [pc, #72]	@ (800f2b8 <netif_set_down+0x60>)
 800f270:	f009 fba8 	bl	80189c4 <iprintf>
 800f274:	e019      	b.n	800f2aa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f27c:	f003 0301 	and.w	r3, r3, #1
 800f280:	2b00      	cmp	r3, #0
 800f282:	d012      	beq.n	800f2aa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f28a:	f023 0301 	bic.w	r3, r3, #1
 800f28e:	b2da      	uxtb	r2, r3
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f29c:	f003 0308 	and.w	r3, r3, #8
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f007 f983 	bl	80165b0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f2aa:	3708      	adds	r7, #8
 800f2ac:	46bd      	mov	sp, r7
 800f2ae:	bd80      	pop	{r7, pc}
 800f2b0:	08019dd8 	.word	0x08019dd8
 800f2b4:	08019fa0 	.word	0x08019fa0
 800f2b8:	08019e28 	.word	0x08019e28

0800f2bc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b082      	sub	sp, #8
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d107      	bne.n	800f2da <netif_set_link_up+0x1e>
 800f2ca:	4b13      	ldr	r3, [pc, #76]	@ (800f318 <netif_set_link_up+0x5c>)
 800f2cc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800f2d0:	4912      	ldr	r1, [pc, #72]	@ (800f31c <netif_set_link_up+0x60>)
 800f2d2:	4813      	ldr	r0, [pc, #76]	@ (800f320 <netif_set_link_up+0x64>)
 800f2d4:	f009 fb76 	bl	80189c4 <iprintf>
 800f2d8:	e01b      	b.n	800f312 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2e0:	f003 0304 	and.w	r3, r3, #4
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d114      	bne.n	800f312 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f2ee:	f043 0304 	orr.w	r3, r3, #4
 800f2f2:	b2da      	uxtb	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f2fa:	2103      	movs	r1, #3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff ff6b 	bl	800f1d8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	69db      	ldr	r3, [r3, #28]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d003      	beq.n	800f312 <netif_set_link_up+0x56>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	69db      	ldr	r3, [r3, #28]
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	08019dd8 	.word	0x08019dd8
 800f31c:	08019fc0 	.word	0x08019fc0
 800f320:	08019e28 	.word	0x08019e28

0800f324 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b082      	sub	sp, #8
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d107      	bne.n	800f342 <netif_set_link_down+0x1e>
 800f332:	4b11      	ldr	r3, [pc, #68]	@ (800f378 <netif_set_link_down+0x54>)
 800f334:	f240 4206 	movw	r2, #1030	@ 0x406
 800f338:	4910      	ldr	r1, [pc, #64]	@ (800f37c <netif_set_link_down+0x58>)
 800f33a:	4811      	ldr	r0, [pc, #68]	@ (800f380 <netif_set_link_down+0x5c>)
 800f33c:	f009 fb42 	bl	80189c4 <iprintf>
 800f340:	e017      	b.n	800f372 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f348:	f003 0304 	and.w	r3, r3, #4
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d010      	beq.n	800f372 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800f356:	f023 0304 	bic.w	r3, r3, #4
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	69db      	ldr	r3, [r3, #28]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <netif_set_link_down+0x4e>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	69db      	ldr	r3, [r3, #28]
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f372:	3708      	adds	r7, #8
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	08019dd8 	.word	0x08019dd8
 800f37c:	08019fe4 	.word	0x08019fe4
 800f380:	08019e28 	.word	0x08019e28

0800f384 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f384:	b480      	push	{r7}
 800f386:	b083      	sub	sp, #12
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d002      	beq.n	800f39a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	683a      	ldr	r2, [r7, #0]
 800f398:	61da      	str	r2, [r3, #28]
  }
}
 800f39a:	bf00      	nop
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b085      	sub	sp, #20
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	60f8      	str	r0, [r7, #12]
 800f3ae:	60b9      	str	r1, [r7, #8]
 800f3b0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f3b2:	f06f 030b 	mvn.w	r3, #11
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3714      	adds	r7, #20
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c0:	4770      	bx	lr
	...

0800f3c4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b085      	sub	sp, #20
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d013      	beq.n	800f3fc <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f3d4:	4b0d      	ldr	r3, [pc, #52]	@ (800f40c <netif_get_by_index+0x48>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	60fb      	str	r3, [r7, #12]
 800f3da:	e00c      	b.n	800f3f6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	79fa      	ldrb	r2, [r7, #7]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d101      	bne.n	800f3f0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	e006      	b.n	800f3fe <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	60fb      	str	r3, [r7, #12]
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d1ef      	bne.n	800f3dc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f3fc:	2300      	movs	r3, #0
}
 800f3fe:	4618      	mov	r0, r3
 800f400:	3714      	adds	r7, #20
 800f402:	46bd      	mov	sp, r7
 800f404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f408:	4770      	bx	lr
 800f40a:	bf00      	nop
 800f40c:	2401034c 	.word	0x2401034c

0800f410 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800f416:	f009 f9b7 	bl	8018788 <sys_arch_protect>
 800f41a:	6038      	str	r0, [r7, #0]
 800f41c:	4b0d      	ldr	r3, [pc, #52]	@ (800f454 <pbuf_free_ooseq+0x44>)
 800f41e:	2200      	movs	r2, #0
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	6838      	ldr	r0, [r7, #0]
 800f424:	f009 f9be 	bl	80187a4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f428:	4b0b      	ldr	r3, [pc, #44]	@ (800f458 <pbuf_free_ooseq+0x48>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	607b      	str	r3, [r7, #4]
 800f42e:	e00a      	b.n	800f446 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f002 f98b 	bl	8011754 <tcp_free_ooseq>
      return;
 800f43e:	e005      	b.n	800f44c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	607b      	str	r3, [r7, #4]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d1f1      	bne.n	800f430 <pbuf_free_ooseq+0x20>
    }
  }
}
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	24010355 	.word	0x24010355
 800f458:	24010364 	.word	0x24010364

0800f45c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800f464:	f7ff ffd4 	bl	800f410 <pbuf_free_ooseq>
}
 800f468:	bf00      	nop
 800f46a:	3708      	adds	r7, #8
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800f476:	f009 f987 	bl	8018788 <sys_arch_protect>
 800f47a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800f47c:	4b0f      	ldr	r3, [pc, #60]	@ (800f4bc <pbuf_pool_is_empty+0x4c>)
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800f482:	4b0e      	ldr	r3, [pc, #56]	@ (800f4bc <pbuf_pool_is_empty+0x4c>)
 800f484:	2201      	movs	r2, #1
 800f486:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f009 f98b 	bl	80187a4 <sys_arch_unprotect>

  if (!queued) {
 800f48e:	78fb      	ldrb	r3, [r7, #3]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d10f      	bne.n	800f4b4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800f494:	2100      	movs	r1, #0
 800f496:	480a      	ldr	r0, [pc, #40]	@ (800f4c0 <pbuf_pool_is_empty+0x50>)
 800f498:	f7fe fdde 	bl	800e058 <tcpip_try_callback>
 800f49c:	4603      	mov	r3, r0
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d008      	beq.n	800f4b4 <pbuf_pool_is_empty+0x44>
 800f4a2:	f009 f971 	bl	8018788 <sys_arch_protect>
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	4b04      	ldr	r3, [pc, #16]	@ (800f4bc <pbuf_pool_is_empty+0x4c>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	701a      	strb	r2, [r3, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f009 f978 	bl	80187a4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f4b4:	bf00      	nop
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}
 800f4bc:	24010355 	.word	0x24010355
 800f4c0:	0800f45d 	.word	0x0800f45d

0800f4c4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b085      	sub	sp, #20
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	60f8      	str	r0, [r7, #12]
 800f4cc:	60b9      	str	r1, [r7, #8]
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	461a      	mov	r2, r3
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	80fb      	strh	r3, [r7, #6]
 800f4d6:	4613      	mov	r3, r2
 800f4d8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	68ba      	ldr	r2, [r7, #8]
 800f4e4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	88fa      	ldrh	r2, [r7, #6]
 800f4ea:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	88ba      	ldrh	r2, [r7, #4]
 800f4f0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f4f2:	8b3b      	ldrh	r3, [r7, #24]
 800f4f4:	b2da      	uxtb	r2, r3
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	7f3a      	ldrb	r2, [r7, #28]
 800f4fe:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2201      	movs	r2, #1
 800f504:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2200      	movs	r2, #0
 800f50a:	73da      	strb	r2, [r3, #15]
}
 800f50c:	bf00      	nop
 800f50e:	3714      	adds	r7, #20
 800f510:	46bd      	mov	sp, r7
 800f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f516:	4770      	bx	lr

0800f518 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b08c      	sub	sp, #48	@ 0x30
 800f51c:	af02      	add	r7, sp, #8
 800f51e:	4603      	mov	r3, r0
 800f520:	71fb      	strb	r3, [r7, #7]
 800f522:	460b      	mov	r3, r1
 800f524:	80bb      	strh	r3, [r7, #4]
 800f526:	4613      	mov	r3, r2
 800f528:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f52a:	79fb      	ldrb	r3, [r7, #7]
 800f52c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f52e:	887b      	ldrh	r3, [r7, #2]
 800f530:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f534:	f000 8082 	beq.w	800f63c <pbuf_alloc+0x124>
 800f538:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800f53c:	f300 80ca 	bgt.w	800f6d4 <pbuf_alloc+0x1bc>
 800f540:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f544:	d010      	beq.n	800f568 <pbuf_alloc+0x50>
 800f546:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800f54a:	f300 80c3 	bgt.w	800f6d4 <pbuf_alloc+0x1bc>
 800f54e:	2b01      	cmp	r3, #1
 800f550:	d002      	beq.n	800f558 <pbuf_alloc+0x40>
 800f552:	2b41      	cmp	r3, #65	@ 0x41
 800f554:	f040 80be 	bne.w	800f6d4 <pbuf_alloc+0x1bc>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f558:	887a      	ldrh	r2, [r7, #2]
 800f55a:	88bb      	ldrh	r3, [r7, #4]
 800f55c:	4619      	mov	r1, r3
 800f55e:	2000      	movs	r0, #0
 800f560:	f000 f8d4 	bl	800f70c <pbuf_alloc_reference>
 800f564:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800f566:	e0bf      	b.n	800f6e8 <pbuf_alloc+0x1d0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f568:	2300      	movs	r3, #0
 800f56a:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800f56c:	2300      	movs	r3, #0
 800f56e:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f570:	88bb      	ldrh	r3, [r7, #4]
 800f572:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f574:	200c      	movs	r0, #12
 800f576:	f7ff fb99 	bl	800ecac <memp_malloc>
 800f57a:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d109      	bne.n	800f596 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 800f582:	f7ff ff75 	bl	800f470 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d002      	beq.n	800f592 <pbuf_alloc+0x7a>
            pbuf_free(p);
 800f58c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f58e:	f000 faab 	bl	800fae8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f592:	2300      	movs	r3, #0
 800f594:	e0a9      	b.n	800f6ea <pbuf_alloc+0x1d2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f596:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f598:	3303      	adds	r3, #3
 800f59a:	b29b      	uxth	r3, r3
 800f59c:	f023 0303 	bic.w	r3, r3, #3
 800f5a0:	b29a      	uxth	r2, r3
 800f5a2:	f240 53ec 	movw	r3, #1516	@ 0x5ec
 800f5a6:	1a9b      	subs	r3, r3, r2
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	8b7a      	ldrh	r2, [r7, #26]
 800f5ac:	4293      	cmp	r3, r2
 800f5ae:	bf28      	it	cs
 800f5b0:	4613      	movcs	r3, r2
 800f5b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f5b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f5b6:	3310      	adds	r3, #16
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	4413      	add	r3, r2
 800f5bc:	3303      	adds	r3, #3
 800f5be:	f023 0303 	bic.w	r3, r3, #3
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	89f9      	ldrh	r1, [r7, #14]
 800f5c6:	8b7a      	ldrh	r2, [r7, #26]
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	9301      	str	r3, [sp, #4]
 800f5cc:	887b      	ldrh	r3, [r7, #2]
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	460b      	mov	r3, r1
 800f5d2:	4601      	mov	r1, r0
 800f5d4:	6938      	ldr	r0, [r7, #16]
 800f5d6:	f7ff ff75 	bl	800f4c4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	f003 0303 	and.w	r3, r3, #3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d006      	beq.n	800f5f4 <pbuf_alloc+0xdc>
 800f5e6:	4b43      	ldr	r3, [pc, #268]	@ (800f6f4 <pbuf_alloc+0x1dc>)
 800f5e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f5ec:	4942      	ldr	r1, [pc, #264]	@ (800f6f8 <pbuf_alloc+0x1e0>)
 800f5ee:	4843      	ldr	r0, [pc, #268]	@ (800f6fc <pbuf_alloc+0x1e4>)
 800f5f0:	f009 f9e8 	bl	80189c4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f5f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f5f6:	3303      	adds	r3, #3
 800f5f8:	f023 0303 	bic.w	r3, r3, #3
 800f5fc:	f240 52ec 	movw	r2, #1516	@ 0x5ec
 800f600:	4293      	cmp	r3, r2
 800f602:	d106      	bne.n	800f612 <pbuf_alloc+0xfa>
 800f604:	4b3b      	ldr	r3, [pc, #236]	@ (800f6f4 <pbuf_alloc+0x1dc>)
 800f606:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f60a:	493d      	ldr	r1, [pc, #244]	@ (800f700 <pbuf_alloc+0x1e8>)
 800f60c:	483b      	ldr	r0, [pc, #236]	@ (800f6fc <pbuf_alloc+0x1e4>)
 800f60e:	f009 f9d9 	bl	80189c4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f614:	2b00      	cmp	r3, #0
 800f616:	d102      	bne.n	800f61e <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f61c:	e002      	b.n	800f624 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f61e:	69fb      	ldr	r3, [r7, #28]
 800f620:	693a      	ldr	r2, [r7, #16]
 800f622:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f624:	693b      	ldr	r3, [r7, #16]
 800f626:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f628:	8b7a      	ldrh	r2, [r7, #26]
 800f62a:	89fb      	ldrh	r3, [r7, #14]
 800f62c:	1ad3      	subs	r3, r2, r3
 800f62e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f630:	2300      	movs	r3, #0
 800f632:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800f634:	8b7b      	ldrh	r3, [r7, #26]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d19c      	bne.n	800f574 <pbuf_alloc+0x5c>
      break;
 800f63a:	e055      	b.n	800f6e8 <pbuf_alloc+0x1d0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f63c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f63e:	3303      	adds	r3, #3
 800f640:	b29b      	uxth	r3, r3
 800f642:	f023 0303 	bic.w	r3, r3, #3
 800f646:	b29a      	uxth	r2, r3
 800f648:	88bb      	ldrh	r3, [r7, #4]
 800f64a:	3303      	adds	r3, #3
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	f023 0303 	bic.w	r3, r3, #3
 800f652:	b29b      	uxth	r3, r3
 800f654:	4413      	add	r3, r2
 800f656:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f658:	8b3b      	ldrh	r3, [r7, #24]
 800f65a:	3310      	adds	r3, #16
 800f65c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f65e:	8b3a      	ldrh	r2, [r7, #24]
 800f660:	88bb      	ldrh	r3, [r7, #4]
 800f662:	3303      	adds	r3, #3
 800f664:	f023 0303 	bic.w	r3, r3, #3
 800f668:	429a      	cmp	r2, r3
 800f66a:	d306      	bcc.n	800f67a <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f66c:	8afa      	ldrh	r2, [r7, #22]
 800f66e:	88bb      	ldrh	r3, [r7, #4]
 800f670:	3303      	adds	r3, #3
 800f672:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f676:	429a      	cmp	r2, r3
 800f678:	d201      	bcs.n	800f67e <pbuf_alloc+0x166>
        return NULL;
 800f67a:	2300      	movs	r3, #0
 800f67c:	e035      	b.n	800f6ea <pbuf_alloc+0x1d2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f67e:	8afb      	ldrh	r3, [r7, #22]
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff f96b 	bl	800e95c <mem_malloc>
 800f686:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800f688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <pbuf_alloc+0x17a>
        return NULL;
 800f68e:	2300      	movs	r3, #0
 800f690:	e02b      	b.n	800f6ea <pbuf_alloc+0x1d2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f692:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f694:	3310      	adds	r3, #16
 800f696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f698:	4413      	add	r3, r2
 800f69a:	3303      	adds	r3, #3
 800f69c:	f023 0303 	bic.w	r3, r3, #3
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	88b9      	ldrh	r1, [r7, #4]
 800f6a4:	88ba      	ldrh	r2, [r7, #4]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9301      	str	r3, [sp, #4]
 800f6aa:	887b      	ldrh	r3, [r7, #2]
 800f6ac:	9300      	str	r3, [sp, #0]
 800f6ae:	460b      	mov	r3, r1
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f6b4:	f7ff ff06 	bl	800f4c4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ba:	685b      	ldr	r3, [r3, #4]
 800f6bc:	f003 0303 	and.w	r3, r3, #3
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d010      	beq.n	800f6e6 <pbuf_alloc+0x1ce>
 800f6c4:	4b0b      	ldr	r3, [pc, #44]	@ (800f6f4 <pbuf_alloc+0x1dc>)
 800f6c6:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800f6ca:	490e      	ldr	r1, [pc, #56]	@ (800f704 <pbuf_alloc+0x1ec>)
 800f6cc:	480b      	ldr	r0, [pc, #44]	@ (800f6fc <pbuf_alloc+0x1e4>)
 800f6ce:	f009 f979 	bl	80189c4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f6d2:	e008      	b.n	800f6e6 <pbuf_alloc+0x1ce>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f6d4:	4b07      	ldr	r3, [pc, #28]	@ (800f6f4 <pbuf_alloc+0x1dc>)
 800f6d6:	f240 1227 	movw	r2, #295	@ 0x127
 800f6da:	490b      	ldr	r1, [pc, #44]	@ (800f708 <pbuf_alloc+0x1f0>)
 800f6dc:	4807      	ldr	r0, [pc, #28]	@ (800f6fc <pbuf_alloc+0x1e4>)
 800f6de:	f009 f971 	bl	80189c4 <iprintf>
      return NULL;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	e001      	b.n	800f6ea <pbuf_alloc+0x1d2>
      break;
 800f6e6:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3728      	adds	r7, #40	@ 0x28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	0801a008 	.word	0x0801a008
 800f6f8:	0801a038 	.word	0x0801a038
 800f6fc:	0801a068 	.word	0x0801a068
 800f700:	0801a090 	.word	0x0801a090
 800f704:	0801a0c4 	.word	0x0801a0c4
 800f708:	0801a0f0 	.word	0x0801a0f0

0800f70c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b086      	sub	sp, #24
 800f710:	af02      	add	r7, sp, #8
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	460b      	mov	r3, r1
 800f716:	807b      	strh	r3, [r7, #2]
 800f718:	4613      	mov	r3, r2
 800f71a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f71c:	883b      	ldrh	r3, [r7, #0]
 800f71e:	2b41      	cmp	r3, #65	@ 0x41
 800f720:	d009      	beq.n	800f736 <pbuf_alloc_reference+0x2a>
 800f722:	883b      	ldrh	r3, [r7, #0]
 800f724:	2b01      	cmp	r3, #1
 800f726:	d006      	beq.n	800f736 <pbuf_alloc_reference+0x2a>
 800f728:	4b0f      	ldr	r3, [pc, #60]	@ (800f768 <pbuf_alloc_reference+0x5c>)
 800f72a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800f72e:	490f      	ldr	r1, [pc, #60]	@ (800f76c <pbuf_alloc_reference+0x60>)
 800f730:	480f      	ldr	r0, [pc, #60]	@ (800f770 <pbuf_alloc_reference+0x64>)
 800f732:	f009 f947 	bl	80189c4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f736:	200b      	movs	r0, #11
 800f738:	f7ff fab8 	bl	800ecac <memp_malloc>
 800f73c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f744:	2300      	movs	r3, #0
 800f746:	e00b      	b.n	800f760 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f748:	8879      	ldrh	r1, [r7, #2]
 800f74a:	887a      	ldrh	r2, [r7, #2]
 800f74c:	2300      	movs	r3, #0
 800f74e:	9301      	str	r3, [sp, #4]
 800f750:	883b      	ldrh	r3, [r7, #0]
 800f752:	9300      	str	r3, [sp, #0]
 800f754:	460b      	mov	r3, r1
 800f756:	6879      	ldr	r1, [r7, #4]
 800f758:	68f8      	ldr	r0, [r7, #12]
 800f75a:	f7ff feb3 	bl	800f4c4 <pbuf_init_alloced_pbuf>
  return p;
 800f75e:	68fb      	ldr	r3, [r7, #12]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3710      	adds	r7, #16
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	0801a008 	.word	0x0801a008
 800f76c:	0801a10c 	.word	0x0801a10c
 800f770:	0801a068 	.word	0x0801a068

0800f774 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af02      	add	r7, sp, #8
 800f77a:	607b      	str	r3, [r7, #4]
 800f77c:	4603      	mov	r3, r0
 800f77e:	73fb      	strb	r3, [r7, #15]
 800f780:	460b      	mov	r3, r1
 800f782:	81bb      	strh	r3, [r7, #12]
 800f784:	4613      	mov	r3, r2
 800f786:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f788:	7bfb      	ldrb	r3, [r7, #15]
 800f78a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f78c:	8a7b      	ldrh	r3, [r7, #18]
 800f78e:	3303      	adds	r3, #3
 800f790:	f023 0203 	bic.w	r2, r3, #3
 800f794:	89bb      	ldrh	r3, [r7, #12]
 800f796:	441a      	add	r2, r3
 800f798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d901      	bls.n	800f7a2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	e018      	b.n	800f7d4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f7a2:	6a3b      	ldr	r3, [r7, #32]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d007      	beq.n	800f7b8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f7a8:	8a7b      	ldrh	r3, [r7, #18]
 800f7aa:	3303      	adds	r3, #3
 800f7ac:	f023 0303 	bic.w	r3, r3, #3
 800f7b0:	6a3a      	ldr	r2, [r7, #32]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	617b      	str	r3, [r7, #20]
 800f7b6:	e001      	b.n	800f7bc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	89b9      	ldrh	r1, [r7, #12]
 800f7c0:	89ba      	ldrh	r2, [r7, #12]
 800f7c2:	2302      	movs	r3, #2
 800f7c4:	9301      	str	r3, [sp, #4]
 800f7c6:	897b      	ldrh	r3, [r7, #10]
 800f7c8:	9300      	str	r3, [sp, #0]
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	6979      	ldr	r1, [r7, #20]
 800f7ce:	f7ff fe79 	bl	800f4c4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f7d2:	687b      	ldr	r3, [r7, #4]
}
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	3718      	adds	r7, #24
 800f7d8:	46bd      	mov	sp, r7
 800f7da:	bd80      	pop	{r7, pc}

0800f7dc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b084      	sub	sp, #16
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
 800f7e4:	460b      	mov	r3, r1
 800f7e6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d106      	bne.n	800f7fc <pbuf_realloc+0x20>
 800f7ee:	4b3a      	ldr	r3, [pc, #232]	@ (800f8d8 <pbuf_realloc+0xfc>)
 800f7f0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800f7f4:	4939      	ldr	r1, [pc, #228]	@ (800f8dc <pbuf_realloc+0x100>)
 800f7f6:	483a      	ldr	r0, [pc, #232]	@ (800f8e0 <pbuf_realloc+0x104>)
 800f7f8:	f009 f8e4 	bl	80189c4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	891b      	ldrh	r3, [r3, #8]
 800f800:	887a      	ldrh	r2, [r7, #2]
 800f802:	429a      	cmp	r2, r3
 800f804:	d263      	bcs.n	800f8ce <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	891a      	ldrh	r2, [r3, #8]
 800f80a:	887b      	ldrh	r3, [r7, #2]
 800f80c:	1ad3      	subs	r3, r2, r3
 800f80e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f810:	887b      	ldrh	r3, [r7, #2]
 800f812:	817b      	strh	r3, [r7, #10]
  q = p;
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f818:	e018      	b.n	800f84c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	895b      	ldrh	r3, [r3, #10]
 800f81e:	897a      	ldrh	r2, [r7, #10]
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	891a      	ldrh	r2, [r3, #8]
 800f828:	893b      	ldrh	r3, [r7, #8]
 800f82a:	1ad3      	subs	r3, r2, r3
 800f82c:	b29a      	uxth	r2, r3
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d106      	bne.n	800f84c <pbuf_realloc+0x70>
 800f83e:	4b26      	ldr	r3, [pc, #152]	@ (800f8d8 <pbuf_realloc+0xfc>)
 800f840:	f240 12af 	movw	r2, #431	@ 0x1af
 800f844:	4927      	ldr	r1, [pc, #156]	@ (800f8e4 <pbuf_realloc+0x108>)
 800f846:	4826      	ldr	r0, [pc, #152]	@ (800f8e0 <pbuf_realloc+0x104>)
 800f848:	f009 f8bc 	bl	80189c4 <iprintf>
  while (rem_len > q->len) {
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	895b      	ldrh	r3, [r3, #10]
 800f850:	897a      	ldrh	r2, [r7, #10]
 800f852:	429a      	cmp	r2, r3
 800f854:	d8e1      	bhi.n	800f81a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	7b1b      	ldrb	r3, [r3, #12]
 800f85a:	f003 030f 	and.w	r3, r3, #15
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d121      	bne.n	800f8a6 <pbuf_realloc+0xca>
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	895b      	ldrh	r3, [r3, #10]
 800f866:	897a      	ldrh	r2, [r7, #10]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d01c      	beq.n	800f8a6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	7b5b      	ldrb	r3, [r3, #13]
 800f870:	f003 0302 	and.w	r3, r3, #2
 800f874:	2b00      	cmp	r3, #0
 800f876:	d116      	bne.n	800f8a6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	685a      	ldr	r2, [r3, #4]
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	1ad3      	subs	r3, r2, r3
 800f880:	b29a      	uxth	r2, r3
 800f882:	897b      	ldrh	r3, [r7, #10]
 800f884:	4413      	add	r3, r2
 800f886:	b29b      	uxth	r3, r3
 800f888:	4619      	mov	r1, r3
 800f88a:	68f8      	ldr	r0, [r7, #12]
 800f88c:	f7fe ff56 	bl	800e73c <mem_trim>
 800f890:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d106      	bne.n	800f8a6 <pbuf_realloc+0xca>
 800f898:	4b0f      	ldr	r3, [pc, #60]	@ (800f8d8 <pbuf_realloc+0xfc>)
 800f89a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800f89e:	4912      	ldr	r1, [pc, #72]	@ (800f8e8 <pbuf_realloc+0x10c>)
 800f8a0:	480f      	ldr	r0, [pc, #60]	@ (800f8e0 <pbuf_realloc+0x104>)
 800f8a2:	f009 f88f 	bl	80189c4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	897a      	ldrh	r2, [r7, #10]
 800f8aa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	895a      	ldrh	r2, [r3, #10]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d004      	beq.n	800f8c6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f000 f911 	bl	800fae8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	601a      	str	r2, [r3, #0]
 800f8cc:	e000      	b.n	800f8d0 <pbuf_realloc+0xf4>
    return;
 800f8ce:	bf00      	nop

}
 800f8d0:	3710      	adds	r7, #16
 800f8d2:	46bd      	mov	sp, r7
 800f8d4:	bd80      	pop	{r7, pc}
 800f8d6:	bf00      	nop
 800f8d8:	0801a008 	.word	0x0801a008
 800f8dc:	0801a120 	.word	0x0801a120
 800f8e0:	0801a068 	.word	0x0801a068
 800f8e4:	0801a138 	.word	0x0801a138
 800f8e8:	0801a150 	.word	0x0801a150

0800f8ec <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b086      	sub	sp, #24
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d106      	bne.n	800f90e <pbuf_add_header_impl+0x22>
 800f900:	4b2b      	ldr	r3, [pc, #172]	@ (800f9b0 <pbuf_add_header_impl+0xc4>)
 800f902:	f240 12df 	movw	r2, #479	@ 0x1df
 800f906:	492b      	ldr	r1, [pc, #172]	@ (800f9b4 <pbuf_add_header_impl+0xc8>)
 800f908:	482b      	ldr	r0, [pc, #172]	@ (800f9b8 <pbuf_add_header_impl+0xcc>)
 800f90a:	f009 f85b 	bl	80189c4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d003      	beq.n	800f91c <pbuf_add_header_impl+0x30>
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f91a:	d301      	bcc.n	800f920 <pbuf_add_header_impl+0x34>
    return 1;
 800f91c:	2301      	movs	r3, #1
 800f91e:	e043      	b.n	800f9a8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800f920:	68bb      	ldr	r3, [r7, #8]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d101      	bne.n	800f92a <pbuf_add_header_impl+0x3e>
    return 0;
 800f926:	2300      	movs	r3, #0
 800f928:	e03e      	b.n	800f9a8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	891a      	ldrh	r2, [r3, #8]
 800f932:	8a7b      	ldrh	r3, [r7, #18]
 800f934:	4413      	add	r3, r2
 800f936:	b29b      	uxth	r3, r3
 800f938:	8a7a      	ldrh	r2, [r7, #18]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d901      	bls.n	800f942 <pbuf_add_header_impl+0x56>
    return 1;
 800f93e:	2301      	movs	r3, #1
 800f940:	e032      	b.n	800f9a8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	7b1b      	ldrb	r3, [r3, #12]
 800f946:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800f948:	8a3b      	ldrh	r3, [r7, #16]
 800f94a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d00c      	beq.n	800f96c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	685a      	ldr	r2, [r3, #4]
 800f956:	68bb      	ldr	r3, [r7, #8]
 800f958:	425b      	negs	r3, r3
 800f95a:	4413      	add	r3, r2
 800f95c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	3310      	adds	r3, #16
 800f962:	697a      	ldr	r2, [r7, #20]
 800f964:	429a      	cmp	r2, r3
 800f966:	d20d      	bcs.n	800f984 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800f968:	2301      	movs	r3, #1
 800f96a:	e01d      	b.n	800f9a8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800f96c:	79fb      	ldrb	r3, [r7, #7]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d006      	beq.n	800f980 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	685a      	ldr	r2, [r3, #4]
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	425b      	negs	r3, r3
 800f97a:	4413      	add	r3, r2
 800f97c:	617b      	str	r3, [r7, #20]
 800f97e:	e001      	b.n	800f984 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800f980:	2301      	movs	r3, #1
 800f982:	e011      	b.n	800f9a8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	697a      	ldr	r2, [r7, #20]
 800f988:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	895a      	ldrh	r2, [r3, #10]
 800f98e:	8a7b      	ldrh	r3, [r7, #18]
 800f990:	4413      	add	r3, r2
 800f992:	b29a      	uxth	r2, r3
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	891a      	ldrh	r2, [r3, #8]
 800f99c:	8a7b      	ldrh	r3, [r7, #18]
 800f99e:	4413      	add	r3, r2
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	811a      	strh	r2, [r3, #8]


  return 0;
 800f9a6:	2300      	movs	r3, #0
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	3718      	adds	r7, #24
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}
 800f9b0:	0801a008 	.word	0x0801a008
 800f9b4:	0801a16c 	.word	0x0801a16c
 800f9b8:	0801a068 	.word	0x0801a068

0800f9bc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	6839      	ldr	r1, [r7, #0]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f7ff ff8e 	bl	800f8ec <pbuf_add_header_impl>
 800f9d0:	4603      	mov	r3, r0
}
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	3708      	adds	r7, #8
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}
	...

0800f9dc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b084      	sub	sp, #16
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d106      	bne.n	800f9fa <pbuf_remove_header+0x1e>
 800f9ec:	4b20      	ldr	r3, [pc, #128]	@ (800fa70 <pbuf_remove_header+0x94>)
 800f9ee:	f240 224b 	movw	r2, #587	@ 0x24b
 800f9f2:	4920      	ldr	r1, [pc, #128]	@ (800fa74 <pbuf_remove_header+0x98>)
 800f9f4:	4820      	ldr	r0, [pc, #128]	@ (800fa78 <pbuf_remove_header+0x9c>)
 800f9f6:	f008 ffe5 	bl	80189c4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d003      	beq.n	800fa08 <pbuf_remove_header+0x2c>
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fa06:	d301      	bcc.n	800fa0c <pbuf_remove_header+0x30>
    return 1;
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e02c      	b.n	800fa66 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d101      	bne.n	800fa16 <pbuf_remove_header+0x3a>
    return 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	e027      	b.n	800fa66 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	895b      	ldrh	r3, [r3, #10]
 800fa1e:	89fa      	ldrh	r2, [r7, #14]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d908      	bls.n	800fa36 <pbuf_remove_header+0x5a>
 800fa24:	4b12      	ldr	r3, [pc, #72]	@ (800fa70 <pbuf_remove_header+0x94>)
 800fa26:	f240 2255 	movw	r2, #597	@ 0x255
 800fa2a:	4914      	ldr	r1, [pc, #80]	@ (800fa7c <pbuf_remove_header+0xa0>)
 800fa2c:	4812      	ldr	r0, [pc, #72]	@ (800fa78 <pbuf_remove_header+0x9c>)
 800fa2e:	f008 ffc9 	bl	80189c4 <iprintf>
 800fa32:	2301      	movs	r3, #1
 800fa34:	e017      	b.n	800fa66 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685a      	ldr	r2, [r3, #4]
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	441a      	add	r2, r3
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	895a      	ldrh	r2, [r3, #10]
 800fa4c:	89fb      	ldrh	r3, [r7, #14]
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	891a      	ldrh	r2, [r3, #8]
 800fa5a:	89fb      	ldrh	r3, [r7, #14]
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800fa64:	2300      	movs	r3, #0
}
 800fa66:	4618      	mov	r0, r3
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	0801a008 	.word	0x0801a008
 800fa74:	0801a16c 	.word	0x0801a16c
 800fa78:	0801a068 	.word	0x0801a068
 800fa7c:	0801a178 	.word	0x0801a178

0800fa80 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	6078      	str	r0, [r7, #4]
 800fa88:	460b      	mov	r3, r1
 800fa8a:	807b      	strh	r3, [r7, #2]
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800fa90:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	da08      	bge.n	800faaa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800fa98:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fa9c:	425b      	negs	r3, r3
 800fa9e:	4619      	mov	r1, r3
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f7ff ff9b 	bl	800f9dc <pbuf_remove_header>
 800faa6:	4603      	mov	r3, r0
 800faa8:	e007      	b.n	800faba <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800faaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800faae:	787a      	ldrb	r2, [r7, #1]
 800fab0:	4619      	mov	r1, r3
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	f7ff ff1a 	bl	800f8ec <pbuf_add_header_impl>
 800fab8:	4603      	mov	r3, r0
  }
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3708      	adds	r7, #8
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	460b      	mov	r3, r1
 800facc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800face:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fad2:	2201      	movs	r2, #1
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff ffd2 	bl	800fa80 <pbuf_header_impl>
 800fadc:	4603      	mov	r3, r0
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3708      	adds	r7, #8
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}
	...

0800fae8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b088      	sub	sp, #32
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d10b      	bne.n	800fb0e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d106      	bne.n	800fb0a <pbuf_free+0x22>
 800fafc:	4b3b      	ldr	r3, [pc, #236]	@ (800fbec <pbuf_free+0x104>)
 800fafe:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800fb02:	493b      	ldr	r1, [pc, #236]	@ (800fbf0 <pbuf_free+0x108>)
 800fb04:	483b      	ldr	r0, [pc, #236]	@ (800fbf4 <pbuf_free+0x10c>)
 800fb06:	f008 ff5d 	bl	80189c4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	e069      	b.n	800fbe2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fb12:	e062      	b.n	800fbda <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800fb14:	f008 fe38 	bl	8018788 <sys_arch_protect>
 800fb18:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	7b9b      	ldrb	r3, [r3, #14]
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d106      	bne.n	800fb30 <pbuf_free+0x48>
 800fb22:	4b32      	ldr	r3, [pc, #200]	@ (800fbec <pbuf_free+0x104>)
 800fb24:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800fb28:	4933      	ldr	r1, [pc, #204]	@ (800fbf8 <pbuf_free+0x110>)
 800fb2a:	4832      	ldr	r0, [pc, #200]	@ (800fbf4 <pbuf_free+0x10c>)
 800fb2c:	f008 ff4a 	bl	80189c4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	7b9b      	ldrb	r3, [r3, #14]
 800fb34:	3b01      	subs	r3, #1
 800fb36:	b2da      	uxtb	r2, r3
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	739a      	strb	r2, [r3, #14]
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	7b9b      	ldrb	r3, [r3, #14]
 800fb40:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800fb42:	69b8      	ldr	r0, [r7, #24]
 800fb44:	f008 fe2e 	bl	80187a4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d143      	bne.n	800fbd6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	7b1b      	ldrb	r3, [r3, #12]
 800fb58:	f003 030f 	and.w	r3, r3, #15
 800fb5c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	7b5b      	ldrb	r3, [r3, #13]
 800fb62:	f003 0302 	and.w	r3, r3, #2
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d011      	beq.n	800fb8e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	691b      	ldr	r3, [r3, #16]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d106      	bne.n	800fb84 <pbuf_free+0x9c>
 800fb76:	4b1d      	ldr	r3, [pc, #116]	@ (800fbec <pbuf_free+0x104>)
 800fb78:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800fb7c:	491f      	ldr	r1, [pc, #124]	@ (800fbfc <pbuf_free+0x114>)
 800fb7e:	481d      	ldr	r0, [pc, #116]	@ (800fbf4 <pbuf_free+0x10c>)
 800fb80:	f008 ff20 	bl	80189c4 <iprintf>
        pc->custom_free_function(p);
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	691b      	ldr	r3, [r3, #16]
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	4798      	blx	r3
 800fb8c:	e01d      	b.n	800fbca <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fb8e:	7bfb      	ldrb	r3, [r7, #15]
 800fb90:	2b02      	cmp	r3, #2
 800fb92:	d104      	bne.n	800fb9e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800fb94:	6879      	ldr	r1, [r7, #4]
 800fb96:	200c      	movs	r0, #12
 800fb98:	f7ff f8fe 	bl	800ed98 <memp_free>
 800fb9c:	e015      	b.n	800fbca <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800fb9e:	7bfb      	ldrb	r3, [r7, #15]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d104      	bne.n	800fbae <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800fba4:	6879      	ldr	r1, [r7, #4]
 800fba6:	200b      	movs	r0, #11
 800fba8:	f7ff f8f6 	bl	800ed98 <memp_free>
 800fbac:	e00d      	b.n	800fbca <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d103      	bne.n	800fbbc <pbuf_free+0xd4>
          mem_free(p);
 800fbb4:	6878      	ldr	r0, [r7, #4]
 800fbb6:	f7fe fd31 	bl	800e61c <mem_free>
 800fbba:	e006      	b.n	800fbca <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fbbc:	4b0b      	ldr	r3, [pc, #44]	@ (800fbec <pbuf_free+0x104>)
 800fbbe:	f240 320f 	movw	r2, #783	@ 0x30f
 800fbc2:	490f      	ldr	r1, [pc, #60]	@ (800fc00 <pbuf_free+0x118>)
 800fbc4:	480b      	ldr	r0, [pc, #44]	@ (800fbf4 <pbuf_free+0x10c>)
 800fbc6:	f008 fefd 	bl	80189c4 <iprintf>
        }
      }
      count++;
 800fbca:	7ffb      	ldrb	r3, [r7, #31]
 800fbcc:	3301      	adds	r3, #1
 800fbce:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	607b      	str	r3, [r7, #4]
 800fbd4:	e001      	b.n	800fbda <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d199      	bne.n	800fb14 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fbe0:	7ffb      	ldrb	r3, [r7, #31]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3720      	adds	r7, #32
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	0801a008 	.word	0x0801a008
 800fbf0:	0801a16c 	.word	0x0801a16c
 800fbf4:	0801a068 	.word	0x0801a068
 800fbf8:	0801a198 	.word	0x0801a198
 800fbfc:	0801a1b0 	.word	0x0801a1b0
 800fc00:	0801a1d4 	.word	0x0801a1d4

0800fc04 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fc10:	e005      	b.n	800fc1e <pbuf_clen+0x1a>
    ++len;
 800fc12:	89fb      	ldrh	r3, [r7, #14]
 800fc14:	3301      	adds	r3, #1
 800fc16:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d1f6      	bne.n	800fc12 <pbuf_clen+0xe>
  }
  return len;
 800fc24:	89fb      	ldrh	r3, [r7, #14]
}
 800fc26:	4618      	mov	r0, r3
 800fc28:	3714      	adds	r7, #20
 800fc2a:	46bd      	mov	sp, r7
 800fc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc30:	4770      	bx	lr
	...

0800fc34 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d016      	beq.n	800fc70 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fc42:	f008 fda1 	bl	8018788 <sys_arch_protect>
 800fc46:	60f8      	str	r0, [r7, #12]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	7b9b      	ldrb	r3, [r3, #14]
 800fc4c:	3301      	adds	r3, #1
 800fc4e:	b2da      	uxtb	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	739a      	strb	r2, [r3, #14]
 800fc54:	68f8      	ldr	r0, [r7, #12]
 800fc56:	f008 fda5 	bl	80187a4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	7b9b      	ldrb	r3, [r3, #14]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d106      	bne.n	800fc70 <pbuf_ref+0x3c>
 800fc62:	4b05      	ldr	r3, [pc, #20]	@ (800fc78 <pbuf_ref+0x44>)
 800fc64:	f240 3242 	movw	r2, #834	@ 0x342
 800fc68:	4904      	ldr	r1, [pc, #16]	@ (800fc7c <pbuf_ref+0x48>)
 800fc6a:	4805      	ldr	r0, [pc, #20]	@ (800fc80 <pbuf_ref+0x4c>)
 800fc6c:	f008 feaa 	bl	80189c4 <iprintf>
  }
}
 800fc70:	bf00      	nop
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	0801a008 	.word	0x0801a008
 800fc7c:	0801a1e8 	.word	0x0801a1e8
 800fc80:	0801a068 	.word	0x0801a068

0800fc84 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d002      	beq.n	800fc9a <pbuf_cat+0x16>
 800fc94:	683b      	ldr	r3, [r7, #0]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d107      	bne.n	800fcaa <pbuf_cat+0x26>
 800fc9a:	4b20      	ldr	r3, [pc, #128]	@ (800fd1c <pbuf_cat+0x98>)
 800fc9c:	f240 3259 	movw	r2, #857	@ 0x359
 800fca0:	491f      	ldr	r1, [pc, #124]	@ (800fd20 <pbuf_cat+0x9c>)
 800fca2:	4820      	ldr	r0, [pc, #128]	@ (800fd24 <pbuf_cat+0xa0>)
 800fca4:	f008 fe8e 	bl	80189c4 <iprintf>
 800fca8:	e034      	b.n	800fd14 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	60fb      	str	r3, [r7, #12]
 800fcae:	e00a      	b.n	800fcc6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	891a      	ldrh	r2, [r3, #8]
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	891b      	ldrh	r3, [r3, #8]
 800fcb8:	4413      	add	r3, r2
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	60fb      	str	r3, [r7, #12]
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1f0      	bne.n	800fcb0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	891a      	ldrh	r2, [r3, #8]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	895b      	ldrh	r3, [r3, #10]
 800fcd6:	429a      	cmp	r2, r3
 800fcd8:	d006      	beq.n	800fce8 <pbuf_cat+0x64>
 800fcda:	4b10      	ldr	r3, [pc, #64]	@ (800fd1c <pbuf_cat+0x98>)
 800fcdc:	f240 3262 	movw	r2, #866	@ 0x362
 800fce0:	4911      	ldr	r1, [pc, #68]	@ (800fd28 <pbuf_cat+0xa4>)
 800fce2:	4810      	ldr	r0, [pc, #64]	@ (800fd24 <pbuf_cat+0xa0>)
 800fce4:	f008 fe6e 	bl	80189c4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d006      	beq.n	800fcfe <pbuf_cat+0x7a>
 800fcf0:	4b0a      	ldr	r3, [pc, #40]	@ (800fd1c <pbuf_cat+0x98>)
 800fcf2:	f240 3263 	movw	r2, #867	@ 0x363
 800fcf6:	490d      	ldr	r1, [pc, #52]	@ (800fd2c <pbuf_cat+0xa8>)
 800fcf8:	480a      	ldr	r0, [pc, #40]	@ (800fd24 <pbuf_cat+0xa0>)
 800fcfa:	f008 fe63 	bl	80189c4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	891a      	ldrh	r2, [r3, #8]
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	891b      	ldrh	r3, [r3, #8]
 800fd06:	4413      	add	r3, r2
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	683a      	ldr	r2, [r7, #0]
 800fd12:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800fd14:	3710      	adds	r7, #16
 800fd16:	46bd      	mov	sp, r7
 800fd18:	bd80      	pop	{r7, pc}
 800fd1a:	bf00      	nop
 800fd1c:	0801a008 	.word	0x0801a008
 800fd20:	0801a1fc 	.word	0x0801a1fc
 800fd24:	0801a068 	.word	0x0801a068
 800fd28:	0801a234 	.word	0x0801a234
 800fd2c:	0801a264 	.word	0x0801a264

0800fd30 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800fd3a:	6839      	ldr	r1, [r7, #0]
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f7ff ffa1 	bl	800fc84 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800fd42:	6838      	ldr	r0, [r7, #0]
 800fd44:	f7ff ff76 	bl	800fc34 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800fd48:	bf00      	nop
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b086      	sub	sp, #24
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	617b      	str	r3, [r7, #20]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d008      	beq.n	800fd7a <pbuf_copy+0x2a>
 800fd68:	683b      	ldr	r3, [r7, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d005      	beq.n	800fd7a <pbuf_copy+0x2a>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	891a      	ldrh	r2, [r3, #8]
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	891b      	ldrh	r3, [r3, #8]
 800fd76:	429a      	cmp	r2, r3
 800fd78:	d209      	bcs.n	800fd8e <pbuf_copy+0x3e>
 800fd7a:	4b57      	ldr	r3, [pc, #348]	@ (800fed8 <pbuf_copy+0x188>)
 800fd7c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800fd80:	4956      	ldr	r1, [pc, #344]	@ (800fedc <pbuf_copy+0x18c>)
 800fd82:	4857      	ldr	r0, [pc, #348]	@ (800fee0 <pbuf_copy+0x190>)
 800fd84:	f008 fe1e 	bl	80189c4 <iprintf>
 800fd88:	f06f 030f 	mvn.w	r3, #15
 800fd8c:	e09f      	b.n	800fece <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	895b      	ldrh	r3, [r3, #10]
 800fd92:	461a      	mov	r2, r3
 800fd94:	697b      	ldr	r3, [r7, #20]
 800fd96:	1ad2      	subs	r2, r2, r3
 800fd98:	683b      	ldr	r3, [r7, #0]
 800fd9a:	895b      	ldrh	r3, [r3, #10]
 800fd9c:	4619      	mov	r1, r3
 800fd9e:	693b      	ldr	r3, [r7, #16]
 800fda0:	1acb      	subs	r3, r1, r3
 800fda2:	429a      	cmp	r2, r3
 800fda4:	d306      	bcc.n	800fdb4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	895b      	ldrh	r3, [r3, #10]
 800fdaa:	461a      	mov	r2, r3
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	1ad3      	subs	r3, r2, r3
 800fdb0:	60fb      	str	r3, [r7, #12]
 800fdb2:	e005      	b.n	800fdc0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	895b      	ldrh	r3, [r3, #10]
 800fdb8:	461a      	mov	r2, r3
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	1ad3      	subs	r3, r2, r3
 800fdbe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685a      	ldr	r2, [r3, #4]
 800fdc4:	697b      	ldr	r3, [r7, #20]
 800fdc6:	18d0      	adds	r0, r2, r3
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	685a      	ldr	r2, [r3, #4]
 800fdcc:	693b      	ldr	r3, [r7, #16]
 800fdce:	4413      	add	r3, r2
 800fdd0:	68fa      	ldr	r2, [r7, #12]
 800fdd2:	4619      	mov	r1, r3
 800fdd4:	f008 fe9d 	bl	8018b12 <memcpy>
    offset_to += len;
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	4413      	add	r3, r2
 800fdde:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800fde0:	693a      	ldr	r2, [r7, #16]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	4413      	add	r3, r2
 800fde6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	895b      	ldrh	r3, [r3, #10]
 800fdec:	461a      	mov	r2, r3
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d906      	bls.n	800fe02 <pbuf_copy+0xb2>
 800fdf4:	4b38      	ldr	r3, [pc, #224]	@ (800fed8 <pbuf_copy+0x188>)
 800fdf6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800fdfa:	493a      	ldr	r1, [pc, #232]	@ (800fee4 <pbuf_copy+0x194>)
 800fdfc:	4838      	ldr	r0, [pc, #224]	@ (800fee0 <pbuf_copy+0x190>)
 800fdfe:	f008 fde1 	bl	80189c4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	895b      	ldrh	r3, [r3, #10]
 800fe06:	461a      	mov	r2, r3
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d906      	bls.n	800fe1c <pbuf_copy+0xcc>
 800fe0e:	4b32      	ldr	r3, [pc, #200]	@ (800fed8 <pbuf_copy+0x188>)
 800fe10:	f240 32da 	movw	r2, #986	@ 0x3da
 800fe14:	4934      	ldr	r1, [pc, #208]	@ (800fee8 <pbuf_copy+0x198>)
 800fe16:	4832      	ldr	r0, [pc, #200]	@ (800fee0 <pbuf_copy+0x190>)
 800fe18:	f008 fdd4 	bl	80189c4 <iprintf>
    if (offset_from >= p_from->len) {
 800fe1c:	683b      	ldr	r3, [r7, #0]
 800fe1e:	895b      	ldrh	r3, [r3, #10]
 800fe20:	461a      	mov	r2, r3
 800fe22:	693b      	ldr	r3, [r7, #16]
 800fe24:	4293      	cmp	r3, r2
 800fe26:	d304      	bcc.n	800fe32 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800fe2c:	683b      	ldr	r3, [r7, #0]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	895b      	ldrh	r3, [r3, #10]
 800fe36:	461a      	mov	r2, r3
 800fe38:	697b      	ldr	r3, [r7, #20]
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d114      	bne.n	800fe68 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10c      	bne.n	800fe68 <pbuf_copy+0x118>
 800fe4e:	683b      	ldr	r3, [r7, #0]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d009      	beq.n	800fe68 <pbuf_copy+0x118>
 800fe54:	4b20      	ldr	r3, [pc, #128]	@ (800fed8 <pbuf_copy+0x188>)
 800fe56:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800fe5a:	4924      	ldr	r1, [pc, #144]	@ (800feec <pbuf_copy+0x19c>)
 800fe5c:	4820      	ldr	r0, [pc, #128]	@ (800fee0 <pbuf_copy+0x190>)
 800fe5e:	f008 fdb1 	bl	80189c4 <iprintf>
 800fe62:	f06f 030f 	mvn.w	r3, #15
 800fe66:	e032      	b.n	800fece <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800fe68:	683b      	ldr	r3, [r7, #0]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d013      	beq.n	800fe96 <pbuf_copy+0x146>
 800fe6e:	683b      	ldr	r3, [r7, #0]
 800fe70:	895a      	ldrh	r2, [r3, #10]
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	891b      	ldrh	r3, [r3, #8]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d10d      	bne.n	800fe96 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d009      	beq.n	800fe96 <pbuf_copy+0x146>
 800fe82:	4b15      	ldr	r3, [pc, #84]	@ (800fed8 <pbuf_copy+0x188>)
 800fe84:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800fe88:	4919      	ldr	r1, [pc, #100]	@ (800fef0 <pbuf_copy+0x1a0>)
 800fe8a:	4815      	ldr	r0, [pc, #84]	@ (800fee0 <pbuf_copy+0x190>)
 800fe8c:	f008 fd9a 	bl	80189c4 <iprintf>
 800fe90:	f06f 0305 	mvn.w	r3, #5
 800fe94:	e01b      	b.n	800fece <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d013      	beq.n	800fec4 <pbuf_copy+0x174>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	895a      	ldrh	r2, [r3, #10]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	891b      	ldrh	r3, [r3, #8]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d10d      	bne.n	800fec4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d009      	beq.n	800fec4 <pbuf_copy+0x174>
 800feb0:	4b09      	ldr	r3, [pc, #36]	@ (800fed8 <pbuf_copy+0x188>)
 800feb2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800feb6:	490e      	ldr	r1, [pc, #56]	@ (800fef0 <pbuf_copy+0x1a0>)
 800feb8:	4809      	ldr	r0, [pc, #36]	@ (800fee0 <pbuf_copy+0x190>)
 800feba:	f008 fd83 	bl	80189c4 <iprintf>
 800febe:	f06f 0305 	mvn.w	r3, #5
 800fec2:	e004      	b.n	800fece <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800fec4:	683b      	ldr	r3, [r7, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f47f af61 	bne.w	800fd8e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800fecc:	2300      	movs	r3, #0
}
 800fece:	4618      	mov	r0, r3
 800fed0:	3718      	adds	r7, #24
 800fed2:	46bd      	mov	sp, r7
 800fed4:	bd80      	pop	{r7, pc}
 800fed6:	bf00      	nop
 800fed8:	0801a008 	.word	0x0801a008
 800fedc:	0801a2b0 	.word	0x0801a2b0
 800fee0:	0801a068 	.word	0x0801a068
 800fee4:	0801a2e0 	.word	0x0801a2e0
 800fee8:	0801a2f8 	.word	0x0801a2f8
 800feec:	0801a314 	.word	0x0801a314
 800fef0:	0801a324 	.word	0x0801a324

0800fef4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b088      	sub	sp, #32
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	4611      	mov	r1, r2
 800ff00:	461a      	mov	r2, r3
 800ff02:	460b      	mov	r3, r1
 800ff04:	80fb      	strh	r3, [r7, #6]
 800ff06:	4613      	mov	r3, r2
 800ff08:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d108      	bne.n	800ff2a <pbuf_copy_partial+0x36>
 800ff18:	4b2b      	ldr	r3, [pc, #172]	@ (800ffc8 <pbuf_copy_partial+0xd4>)
 800ff1a:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ff1e:	492b      	ldr	r1, [pc, #172]	@ (800ffcc <pbuf_copy_partial+0xd8>)
 800ff20:	482b      	ldr	r0, [pc, #172]	@ (800ffd0 <pbuf_copy_partial+0xdc>)
 800ff22:	f008 fd4f 	bl	80189c4 <iprintf>
 800ff26:	2300      	movs	r3, #0
 800ff28:	e04a      	b.n	800ffc0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ff2a:	68bb      	ldr	r3, [r7, #8]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d108      	bne.n	800ff42 <pbuf_copy_partial+0x4e>
 800ff30:	4b25      	ldr	r3, [pc, #148]	@ (800ffc8 <pbuf_copy_partial+0xd4>)
 800ff32:	f240 420b 	movw	r2, #1035	@ 0x40b
 800ff36:	4927      	ldr	r1, [pc, #156]	@ (800ffd4 <pbuf_copy_partial+0xe0>)
 800ff38:	4825      	ldr	r0, [pc, #148]	@ (800ffd0 <pbuf_copy_partial+0xdc>)
 800ff3a:	f008 fd43 	bl	80189c4 <iprintf>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	e03e      	b.n	800ffc0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	61fb      	str	r3, [r7, #28]
 800ff46:	e034      	b.n	800ffb2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ff48:	88bb      	ldrh	r3, [r7, #4]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d00a      	beq.n	800ff64 <pbuf_copy_partial+0x70>
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	895b      	ldrh	r3, [r3, #10]
 800ff52:	88ba      	ldrh	r2, [r7, #4]
 800ff54:	429a      	cmp	r2, r3
 800ff56:	d305      	bcc.n	800ff64 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ff58:	69fb      	ldr	r3, [r7, #28]
 800ff5a:	895b      	ldrh	r3, [r3, #10]
 800ff5c:	88ba      	ldrh	r2, [r7, #4]
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	80bb      	strh	r3, [r7, #4]
 800ff62:	e023      	b.n	800ffac <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ff64:	69fb      	ldr	r3, [r7, #28]
 800ff66:	895a      	ldrh	r2, [r3, #10]
 800ff68:	88bb      	ldrh	r3, [r7, #4]
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ff6e:	8b3a      	ldrh	r2, [r7, #24]
 800ff70:	88fb      	ldrh	r3, [r7, #6]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d901      	bls.n	800ff7a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ff76:	88fb      	ldrh	r3, [r7, #6]
 800ff78:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ff7a:	8b7b      	ldrh	r3, [r7, #26]
 800ff7c:	68ba      	ldr	r2, [r7, #8]
 800ff7e:	18d0      	adds	r0, r2, r3
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	685a      	ldr	r2, [r3, #4]
 800ff84:	88bb      	ldrh	r3, [r7, #4]
 800ff86:	4413      	add	r3, r2
 800ff88:	8b3a      	ldrh	r2, [r7, #24]
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	f008 fdc1 	bl	8018b12 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ff90:	8afa      	ldrh	r2, [r7, #22]
 800ff92:	8b3b      	ldrh	r3, [r7, #24]
 800ff94:	4413      	add	r3, r2
 800ff96:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ff98:	8b7a      	ldrh	r2, [r7, #26]
 800ff9a:	8b3b      	ldrh	r3, [r7, #24]
 800ff9c:	4413      	add	r3, r2
 800ff9e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ffa0:	88fa      	ldrh	r2, [r7, #6]
 800ffa2:	8b3b      	ldrh	r3, [r7, #24]
 800ffa4:	1ad3      	subs	r3, r2, r3
 800ffa6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ffa8:	2300      	movs	r3, #0
 800ffaa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ffac:	69fb      	ldr	r3, [r7, #28]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	61fb      	str	r3, [r7, #28]
 800ffb2:	88fb      	ldrh	r3, [r7, #6]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d002      	beq.n	800ffbe <pbuf_copy_partial+0xca>
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d1c4      	bne.n	800ff48 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ffbe:	8afb      	ldrh	r3, [r7, #22]
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3720      	adds	r7, #32
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	0801a008 	.word	0x0801a008
 800ffcc:	0801a350 	.word	0x0801a350
 800ffd0:	0801a068 	.word	0x0801a068
 800ffd4:	0801a370 	.word	0x0801a370

0800ffd8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	4603      	mov	r3, r0
 800ffe0:	603a      	str	r2, [r7, #0]
 800ffe2:	71fb      	strb	r3, [r7, #7]
 800ffe4:	460b      	mov	r3, r1
 800ffe6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	8919      	ldrh	r1, [r3, #8]
 800ffec:	88ba      	ldrh	r2, [r7, #4]
 800ffee:	79fb      	ldrb	r3, [r7, #7]
 800fff0:	4618      	mov	r0, r3
 800fff2:	f7ff fa91 	bl	800f518 <pbuf_alloc>
 800fff6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d101      	bne.n	8010002 <pbuf_clone+0x2a>
    return NULL;
 800fffe:	2300      	movs	r3, #0
 8010000:	e011      	b.n	8010026 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010002:	6839      	ldr	r1, [r7, #0]
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	f7ff fea3 	bl	800fd50 <pbuf_copy>
 801000a:	4603      	mov	r3, r0
 801000c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801000e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d006      	beq.n	8010024 <pbuf_clone+0x4c>
 8010016:	4b06      	ldr	r3, [pc, #24]	@ (8010030 <pbuf_clone+0x58>)
 8010018:	f240 5224 	movw	r2, #1316	@ 0x524
 801001c:	4905      	ldr	r1, [pc, #20]	@ (8010034 <pbuf_clone+0x5c>)
 801001e:	4806      	ldr	r0, [pc, #24]	@ (8010038 <pbuf_clone+0x60>)
 8010020:	f008 fcd0 	bl	80189c4 <iprintf>
  return q;
 8010024:	68fb      	ldr	r3, [r7, #12]
}
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	0801a008 	.word	0x0801a008
 8010034:	0801a47c 	.word	0x0801a47c
 8010038:	0801a068 	.word	0x0801a068

0801003c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010040:	f008 fbc0 	bl	80187c4 <rand>
 8010044:	4603      	mov	r3, r0
 8010046:	b29b      	uxth	r3, r3
 8010048:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801004c:	b29b      	uxth	r3, r3
 801004e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010052:	b29a      	uxth	r2, r3
 8010054:	4b01      	ldr	r3, [pc, #4]	@ (801005c <tcp_init+0x20>)
 8010056:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010058:	bf00      	nop
 801005a:	bd80      	pop	{r7, pc}
 801005c:	240049b4 	.word	0x240049b4

08010060 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	7d1b      	ldrb	r3, [r3, #20]
 801006c:	2b01      	cmp	r3, #1
 801006e:	d105      	bne.n	801007c <tcp_free+0x1c>
 8010070:	4b06      	ldr	r3, [pc, #24]	@ (801008c <tcp_free+0x2c>)
 8010072:	22d4      	movs	r2, #212	@ 0xd4
 8010074:	4906      	ldr	r1, [pc, #24]	@ (8010090 <tcp_free+0x30>)
 8010076:	4807      	ldr	r0, [pc, #28]	@ (8010094 <tcp_free+0x34>)
 8010078:	f008 fca4 	bl	80189c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801007c:	6879      	ldr	r1, [r7, #4]
 801007e:	2001      	movs	r0, #1
 8010080:	f7fe fe8a 	bl	800ed98 <memp_free>
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	0801a508 	.word	0x0801a508
 8010090:	0801a538 	.word	0x0801a538
 8010094:	0801a54c 	.word	0x0801a54c

08010098 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	7d1b      	ldrb	r3, [r3, #20]
 80100a4:	2b01      	cmp	r3, #1
 80100a6:	d105      	bne.n	80100b4 <tcp_free_listen+0x1c>
 80100a8:	4b06      	ldr	r3, [pc, #24]	@ (80100c4 <tcp_free_listen+0x2c>)
 80100aa:	22df      	movs	r2, #223	@ 0xdf
 80100ac:	4906      	ldr	r1, [pc, #24]	@ (80100c8 <tcp_free_listen+0x30>)
 80100ae:	4807      	ldr	r0, [pc, #28]	@ (80100cc <tcp_free_listen+0x34>)
 80100b0:	f008 fc88 	bl	80189c4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80100b4:	6879      	ldr	r1, [r7, #4]
 80100b6:	2002      	movs	r0, #2
 80100b8:	f7fe fe6e 	bl	800ed98 <memp_free>
}
 80100bc:	bf00      	nop
 80100be:	3708      	adds	r7, #8
 80100c0:	46bd      	mov	sp, r7
 80100c2:	bd80      	pop	{r7, pc}
 80100c4:	0801a508 	.word	0x0801a508
 80100c8:	0801a574 	.word	0x0801a574
 80100cc:	0801a54c 	.word	0x0801a54c

080100d0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80100d4:	f000 fea6 	bl	8010e24 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80100d8:	4b07      	ldr	r3, [pc, #28]	@ (80100f8 <tcp_tmr+0x28>)
 80100da:	781b      	ldrb	r3, [r3, #0]
 80100dc:	3301      	adds	r3, #1
 80100de:	b2da      	uxtb	r2, r3
 80100e0:	4b05      	ldr	r3, [pc, #20]	@ (80100f8 <tcp_tmr+0x28>)
 80100e2:	701a      	strb	r2, [r3, #0]
 80100e4:	4b04      	ldr	r3, [pc, #16]	@ (80100f8 <tcp_tmr+0x28>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d001      	beq.n	80100f4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80100f0:	f000 fb56 	bl	80107a0 <tcp_slowtmr>
  }
}
 80100f4:	bf00      	nop
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	2401036d 	.word	0x2401036d

080100fc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
 8010104:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d105      	bne.n	8010118 <tcp_remove_listener+0x1c>
 801010c:	4b0d      	ldr	r3, [pc, #52]	@ (8010144 <tcp_remove_listener+0x48>)
 801010e:	22ff      	movs	r2, #255	@ 0xff
 8010110:	490d      	ldr	r1, [pc, #52]	@ (8010148 <tcp_remove_listener+0x4c>)
 8010112:	480e      	ldr	r0, [pc, #56]	@ (801014c <tcp_remove_listener+0x50>)
 8010114:	f008 fc56 	bl	80189c4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	60fb      	str	r3, [r7, #12]
 801011c:	e00a      	b.n	8010134 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010122:	683a      	ldr	r2, [r7, #0]
 8010124:	429a      	cmp	r2, r3
 8010126:	d102      	bne.n	801012e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	2200      	movs	r2, #0
 801012c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	68db      	ldr	r3, [r3, #12]
 8010132:	60fb      	str	r3, [r7, #12]
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d1f1      	bne.n	801011e <tcp_remove_listener+0x22>
    }
  }
}
 801013a:	bf00      	nop
 801013c:	bf00      	nop
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}
 8010144:	0801a508 	.word	0x0801a508
 8010148:	0801a590 	.word	0x0801a590
 801014c:	0801a54c 	.word	0x0801a54c

08010150 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b084      	sub	sp, #16
 8010154:	af00      	add	r7, sp, #0
 8010156:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d106      	bne.n	801016c <tcp_listen_closed+0x1c>
 801015e:	4b14      	ldr	r3, [pc, #80]	@ (80101b0 <tcp_listen_closed+0x60>)
 8010160:	f240 1211 	movw	r2, #273	@ 0x111
 8010164:	4913      	ldr	r1, [pc, #76]	@ (80101b4 <tcp_listen_closed+0x64>)
 8010166:	4814      	ldr	r0, [pc, #80]	@ (80101b8 <tcp_listen_closed+0x68>)
 8010168:	f008 fc2c 	bl	80189c4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	7d1b      	ldrb	r3, [r3, #20]
 8010170:	2b01      	cmp	r3, #1
 8010172:	d006      	beq.n	8010182 <tcp_listen_closed+0x32>
 8010174:	4b0e      	ldr	r3, [pc, #56]	@ (80101b0 <tcp_listen_closed+0x60>)
 8010176:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801017a:	4910      	ldr	r1, [pc, #64]	@ (80101bc <tcp_listen_closed+0x6c>)
 801017c:	480e      	ldr	r0, [pc, #56]	@ (80101b8 <tcp_listen_closed+0x68>)
 801017e:	f008 fc21 	bl	80189c4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010182:	2301      	movs	r3, #1
 8010184:	60fb      	str	r3, [r7, #12]
 8010186:	e00b      	b.n	80101a0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010188:	4a0d      	ldr	r2, [pc, #52]	@ (80101c0 <tcp_listen_closed+0x70>)
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	6879      	ldr	r1, [r7, #4]
 8010194:	4618      	mov	r0, r3
 8010196:	f7ff ffb1 	bl	80100fc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	3301      	adds	r3, #1
 801019e:	60fb      	str	r3, [r7, #12]
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d9f0      	bls.n	8010188 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80101a6:	bf00      	nop
 80101a8:	bf00      	nop
 80101aa:	3710      	adds	r7, #16
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}
 80101b0:	0801a508 	.word	0x0801a508
 80101b4:	0801a5b8 	.word	0x0801a5b8
 80101b8:	0801a54c 	.word	0x0801a54c
 80101bc:	0801a5c4 	.word	0x0801a5c4
 80101c0:	0801c528 	.word	0x0801c528

080101c4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80101c4:	b5b0      	push	{r4, r5, r7, lr}
 80101c6:	b088      	sub	sp, #32
 80101c8:	af04      	add	r7, sp, #16
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	460b      	mov	r3, r1
 80101ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d106      	bne.n	80101e4 <tcp_close_shutdown+0x20>
 80101d6:	4b63      	ldr	r3, [pc, #396]	@ (8010364 <tcp_close_shutdown+0x1a0>)
 80101d8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80101dc:	4962      	ldr	r1, [pc, #392]	@ (8010368 <tcp_close_shutdown+0x1a4>)
 80101de:	4863      	ldr	r0, [pc, #396]	@ (801036c <tcp_close_shutdown+0x1a8>)
 80101e0:	f008 fbf0 	bl	80189c4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80101e4:	78fb      	ldrb	r3, [r7, #3]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d067      	beq.n	80102ba <tcp_close_shutdown+0xf6>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	7d1b      	ldrb	r3, [r3, #20]
 80101ee:	2b04      	cmp	r3, #4
 80101f0:	d003      	beq.n	80101fa <tcp_close_shutdown+0x36>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7d1b      	ldrb	r3, [r3, #20]
 80101f6:	2b07      	cmp	r3, #7
 80101f8:	d15f      	bne.n	80102ba <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d105      	bne.n	801020e <tcp_close_shutdown+0x4a>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010206:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 801020a:	4293      	cmp	r3, r2
 801020c:	d055      	beq.n	80102ba <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	8b5b      	ldrh	r3, [r3, #26]
 8010212:	f003 0310 	and.w	r3, r3, #16
 8010216:	2b00      	cmp	r3, #0
 8010218:	d106      	bne.n	8010228 <tcp_close_shutdown+0x64>
 801021a:	4b52      	ldr	r3, [pc, #328]	@ (8010364 <tcp_close_shutdown+0x1a0>)
 801021c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8010220:	4953      	ldr	r1, [pc, #332]	@ (8010370 <tcp_close_shutdown+0x1ac>)
 8010222:	4852      	ldr	r0, [pc, #328]	@ (801036c <tcp_close_shutdown+0x1a8>)
 8010224:	f008 fbce 	bl	80189c4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010230:	687d      	ldr	r5, [r7, #4]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3304      	adds	r3, #4
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	8ad2      	ldrh	r2, [r2, #22]
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	8b09      	ldrh	r1, [r1, #24]
 801023e:	9102      	str	r1, [sp, #8]
 8010240:	9201      	str	r2, [sp, #4]
 8010242:	9300      	str	r3, [sp, #0]
 8010244:	462b      	mov	r3, r5
 8010246:	4622      	mov	r2, r4
 8010248:	4601      	mov	r1, r0
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f004 fe92 	bl	8014f74 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010250:	6878      	ldr	r0, [r7, #4]
 8010252:	f001 f8cb 	bl	80113ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010256:	4b47      	ldr	r3, [pc, #284]	@ (8010374 <tcp_close_shutdown+0x1b0>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	429a      	cmp	r2, r3
 801025e:	d105      	bne.n	801026c <tcp_close_shutdown+0xa8>
 8010260:	4b44      	ldr	r3, [pc, #272]	@ (8010374 <tcp_close_shutdown+0x1b0>)
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	4a43      	ldr	r2, [pc, #268]	@ (8010374 <tcp_close_shutdown+0x1b0>)
 8010268:	6013      	str	r3, [r2, #0]
 801026a:	e013      	b.n	8010294 <tcp_close_shutdown+0xd0>
 801026c:	4b41      	ldr	r3, [pc, #260]	@ (8010374 <tcp_close_shutdown+0x1b0>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	60fb      	str	r3, [r7, #12]
 8010272:	e00c      	b.n	801028e <tcp_close_shutdown+0xca>
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	687a      	ldr	r2, [r7, #4]
 801027a:	429a      	cmp	r2, r3
 801027c:	d104      	bne.n	8010288 <tcp_close_shutdown+0xc4>
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	68da      	ldr	r2, [r3, #12]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	60da      	str	r2, [r3, #12]
 8010286:	e005      	b.n	8010294 <tcp_close_shutdown+0xd0>
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	68db      	ldr	r3, [r3, #12]
 801028c:	60fb      	str	r3, [r7, #12]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1ef      	bne.n	8010274 <tcp_close_shutdown+0xb0>
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2200      	movs	r2, #0
 8010298:	60da      	str	r2, [r3, #12]
 801029a:	4b37      	ldr	r3, [pc, #220]	@ (8010378 <tcp_close_shutdown+0x1b4>)
 801029c:	2201      	movs	r2, #1
 801029e:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80102a0:	4b36      	ldr	r3, [pc, #216]	@ (801037c <tcp_close_shutdown+0x1b8>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d102      	bne.n	80102b0 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80102aa:	f003 fd61 	bl	8013d70 <tcp_trigger_input_pcb_close>
 80102ae:	e002      	b.n	80102b6 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f7ff fed5 	bl	8010060 <tcp_free>
      }
      return ERR_OK;
 80102b6:	2300      	movs	r3, #0
 80102b8:	e050      	b.n	801035c <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	7d1b      	ldrb	r3, [r3, #20]
 80102be:	2b02      	cmp	r3, #2
 80102c0:	d03b      	beq.n	801033a <tcp_close_shutdown+0x176>
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	dc44      	bgt.n	8010350 <tcp_close_shutdown+0x18c>
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d002      	beq.n	80102d0 <tcp_close_shutdown+0x10c>
 80102ca:	2b01      	cmp	r3, #1
 80102cc:	d02a      	beq.n	8010324 <tcp_close_shutdown+0x160>
 80102ce:	e03f      	b.n	8010350 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	8adb      	ldrh	r3, [r3, #22]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d021      	beq.n	801031c <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80102d8:	4b29      	ldr	r3, [pc, #164]	@ (8010380 <tcp_close_shutdown+0x1bc>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	687a      	ldr	r2, [r7, #4]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d105      	bne.n	80102ee <tcp_close_shutdown+0x12a>
 80102e2:	4b27      	ldr	r3, [pc, #156]	@ (8010380 <tcp_close_shutdown+0x1bc>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	4a25      	ldr	r2, [pc, #148]	@ (8010380 <tcp_close_shutdown+0x1bc>)
 80102ea:	6013      	str	r3, [r2, #0]
 80102ec:	e013      	b.n	8010316 <tcp_close_shutdown+0x152>
 80102ee:	4b24      	ldr	r3, [pc, #144]	@ (8010380 <tcp_close_shutdown+0x1bc>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	60bb      	str	r3, [r7, #8]
 80102f4:	e00c      	b.n	8010310 <tcp_close_shutdown+0x14c>
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	68db      	ldr	r3, [r3, #12]
 80102fa:	687a      	ldr	r2, [r7, #4]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d104      	bne.n	801030a <tcp_close_shutdown+0x146>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	68da      	ldr	r2, [r3, #12]
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	60da      	str	r2, [r3, #12]
 8010308:	e005      	b.n	8010316 <tcp_close_shutdown+0x152>
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	68db      	ldr	r3, [r3, #12]
 801030e:	60bb      	str	r3, [r7, #8]
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d1ef      	bne.n	80102f6 <tcp_close_shutdown+0x132>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f7ff fe9f 	bl	8010060 <tcp_free>
      break;
 8010322:	e01a      	b.n	801035a <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010324:	6878      	ldr	r0, [r7, #4]
 8010326:	f7ff ff13 	bl	8010150 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801032a:	6879      	ldr	r1, [r7, #4]
 801032c:	4815      	ldr	r0, [pc, #84]	@ (8010384 <tcp_close_shutdown+0x1c0>)
 801032e:	f001 f8ad 	bl	801148c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010332:	6878      	ldr	r0, [r7, #4]
 8010334:	f7ff feb0 	bl	8010098 <tcp_free_listen>
      break;
 8010338:	e00f      	b.n	801035a <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	480d      	ldr	r0, [pc, #52]	@ (8010374 <tcp_close_shutdown+0x1b0>)
 801033e:	f001 f8a5 	bl	801148c <tcp_pcb_remove>
 8010342:	4b0d      	ldr	r3, [pc, #52]	@ (8010378 <tcp_close_shutdown+0x1b4>)
 8010344:	2201      	movs	r2, #1
 8010346:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f7ff fe89 	bl	8010060 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801034e:	e004      	b.n	801035a <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 f819 	bl	8010388 <tcp_close_shutdown_fin>
 8010356:	4603      	mov	r3, r0
 8010358:	e000      	b.n	801035c <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 801035a:	2300      	movs	r3, #0
}
 801035c:	4618      	mov	r0, r3
 801035e:	3710      	adds	r7, #16
 8010360:	46bd      	mov	sp, r7
 8010362:	bdb0      	pop	{r4, r5, r7, pc}
 8010364:	0801a508 	.word	0x0801a508
 8010368:	0801a5dc 	.word	0x0801a5dc
 801036c:	0801a54c 	.word	0x0801a54c
 8010370:	0801a5fc 	.word	0x0801a5fc
 8010374:	24010364 	.word	0x24010364
 8010378:	2401036c 	.word	0x2401036c
 801037c:	240103a4 	.word	0x240103a4
 8010380:	2401035c 	.word	0x2401035c
 8010384:	24010360 	.word	0x24010360

08010388 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d106      	bne.n	80103a4 <tcp_close_shutdown_fin+0x1c>
 8010396:	4b2e      	ldr	r3, [pc, #184]	@ (8010450 <tcp_close_shutdown_fin+0xc8>)
 8010398:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801039c:	492d      	ldr	r1, [pc, #180]	@ (8010454 <tcp_close_shutdown_fin+0xcc>)
 801039e:	482e      	ldr	r0, [pc, #184]	@ (8010458 <tcp_close_shutdown_fin+0xd0>)
 80103a0:	f008 fb10 	bl	80189c4 <iprintf>

  switch (pcb->state) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	7d1b      	ldrb	r3, [r3, #20]
 80103a8:	2b07      	cmp	r3, #7
 80103aa:	d020      	beq.n	80103ee <tcp_close_shutdown_fin+0x66>
 80103ac:	2b07      	cmp	r3, #7
 80103ae:	dc2b      	bgt.n	8010408 <tcp_close_shutdown_fin+0x80>
 80103b0:	2b03      	cmp	r3, #3
 80103b2:	d002      	beq.n	80103ba <tcp_close_shutdown_fin+0x32>
 80103b4:	2b04      	cmp	r3, #4
 80103b6:	d00d      	beq.n	80103d4 <tcp_close_shutdown_fin+0x4c>
 80103b8:	e026      	b.n	8010408 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f003 fee8 	bl	8014190 <tcp_send_fin>
 80103c0:	4603      	mov	r3, r0
 80103c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80103c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d11f      	bne.n	801040c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2205      	movs	r2, #5
 80103d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80103d2:	e01b      	b.n	801040c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f003 fedb 	bl	8014190 <tcp_send_fin>
 80103da:	4603      	mov	r3, r0
 80103dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80103de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d114      	bne.n	8010410 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2205      	movs	r2, #5
 80103ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 80103ec:	e010      	b.n	8010410 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f003 fece 	bl	8014190 <tcp_send_fin>
 80103f4:	4603      	mov	r3, r0
 80103f6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80103f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d109      	bne.n	8010414 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2209      	movs	r2, #9
 8010404:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010406:	e005      	b.n	8010414 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010408:	2300      	movs	r3, #0
 801040a:	e01c      	b.n	8010446 <tcp_close_shutdown_fin+0xbe>
      break;
 801040c:	bf00      	nop
 801040e:	e002      	b.n	8010416 <tcp_close_shutdown_fin+0x8e>
      break;
 8010410:	bf00      	nop
 8010412:	e000      	b.n	8010416 <tcp_close_shutdown_fin+0x8e>
      break;
 8010414:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d103      	bne.n	8010426 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801041e:	6878      	ldr	r0, [r7, #4]
 8010420:	f003 fff4 	bl	801440c <tcp_output>
 8010424:	e00d      	b.n	8010442 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801042a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801042e:	d108      	bne.n	8010442 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	8b5b      	ldrh	r3, [r3, #26]
 8010434:	f043 0308 	orr.w	r3, r3, #8
 8010438:	b29a      	uxth	r2, r3
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	e001      	b.n	8010446 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010442:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010446:	4618      	mov	r0, r3
 8010448:	3710      	adds	r7, #16
 801044a:	46bd      	mov	sp, r7
 801044c:	bd80      	pop	{r7, pc}
 801044e:	bf00      	nop
 8010450:	0801a508 	.word	0x0801a508
 8010454:	0801a5b8 	.word	0x0801a5b8
 8010458:	0801a54c 	.word	0x0801a54c

0801045c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b082      	sub	sp, #8
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d109      	bne.n	801047e <tcp_close+0x22>
 801046a:	4b0f      	ldr	r3, [pc, #60]	@ (80104a8 <tcp_close+0x4c>)
 801046c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8010470:	490e      	ldr	r1, [pc, #56]	@ (80104ac <tcp_close+0x50>)
 8010472:	480f      	ldr	r0, [pc, #60]	@ (80104b0 <tcp_close+0x54>)
 8010474:	f008 faa6 	bl	80189c4 <iprintf>
 8010478:	f06f 030f 	mvn.w	r3, #15
 801047c:	e00f      	b.n	801049e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	7d1b      	ldrb	r3, [r3, #20]
 8010482:	2b01      	cmp	r3, #1
 8010484:	d006      	beq.n	8010494 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	8b5b      	ldrh	r3, [r3, #26]
 801048a:	f043 0310 	orr.w	r3, r3, #16
 801048e:	b29a      	uxth	r2, r3
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010494:	2101      	movs	r1, #1
 8010496:	6878      	ldr	r0, [r7, #4]
 8010498:	f7ff fe94 	bl	80101c4 <tcp_close_shutdown>
 801049c:	4603      	mov	r3, r0
}
 801049e:	4618      	mov	r0, r3
 80104a0:	3708      	adds	r7, #8
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	0801a508 	.word	0x0801a508
 80104ac:	0801a618 	.word	0x0801a618
 80104b0:	0801a54c 	.word	0x0801a54c

080104b4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b08e      	sub	sp, #56	@ 0x38
 80104b8:	af04      	add	r7, sp, #16
 80104ba:	6078      	str	r0, [r7, #4]
 80104bc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d107      	bne.n	80104d4 <tcp_abandon+0x20>
 80104c4:	4b52      	ldr	r3, [pc, #328]	@ (8010610 <tcp_abandon+0x15c>)
 80104c6:	f240 223d 	movw	r2, #573	@ 0x23d
 80104ca:	4952      	ldr	r1, [pc, #328]	@ (8010614 <tcp_abandon+0x160>)
 80104cc:	4852      	ldr	r0, [pc, #328]	@ (8010618 <tcp_abandon+0x164>)
 80104ce:	f008 fa79 	bl	80189c4 <iprintf>
 80104d2:	e099      	b.n	8010608 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7d1b      	ldrb	r3, [r3, #20]
 80104d8:	2b01      	cmp	r3, #1
 80104da:	d106      	bne.n	80104ea <tcp_abandon+0x36>
 80104dc:	4b4c      	ldr	r3, [pc, #304]	@ (8010610 <tcp_abandon+0x15c>)
 80104de:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80104e2:	494e      	ldr	r1, [pc, #312]	@ (801061c <tcp_abandon+0x168>)
 80104e4:	484c      	ldr	r0, [pc, #304]	@ (8010618 <tcp_abandon+0x164>)
 80104e6:	f008 fa6d 	bl	80189c4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	7d1b      	ldrb	r3, [r3, #20]
 80104ee:	2b0a      	cmp	r3, #10
 80104f0:	d107      	bne.n	8010502 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80104f2:	6879      	ldr	r1, [r7, #4]
 80104f4:	484a      	ldr	r0, [pc, #296]	@ (8010620 <tcp_abandon+0x16c>)
 80104f6:	f000 ffc9 	bl	801148c <tcp_pcb_remove>
    tcp_free(pcb);
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7ff fdb0 	bl	8010060 <tcp_free>
 8010500:	e082      	b.n	8010608 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010502:	2300      	movs	r3, #0
 8010504:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8010506:	2300      	movs	r3, #0
 8010508:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801050e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010514:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801051c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	691b      	ldr	r3, [r3, #16]
 8010522:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	7d1b      	ldrb	r3, [r3, #20]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d126      	bne.n	801057a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	8adb      	ldrh	r3, [r3, #22]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d02e      	beq.n	8010592 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010534:	4b3b      	ldr	r3, [pc, #236]	@ (8010624 <tcp_abandon+0x170>)
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	429a      	cmp	r2, r3
 801053c:	d105      	bne.n	801054a <tcp_abandon+0x96>
 801053e:	4b39      	ldr	r3, [pc, #228]	@ (8010624 <tcp_abandon+0x170>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	68db      	ldr	r3, [r3, #12]
 8010544:	4a37      	ldr	r2, [pc, #220]	@ (8010624 <tcp_abandon+0x170>)
 8010546:	6013      	str	r3, [r2, #0]
 8010548:	e013      	b.n	8010572 <tcp_abandon+0xbe>
 801054a:	4b36      	ldr	r3, [pc, #216]	@ (8010624 <tcp_abandon+0x170>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	61fb      	str	r3, [r7, #28]
 8010550:	e00c      	b.n	801056c <tcp_abandon+0xb8>
 8010552:	69fb      	ldr	r3, [r7, #28]
 8010554:	68db      	ldr	r3, [r3, #12]
 8010556:	687a      	ldr	r2, [r7, #4]
 8010558:	429a      	cmp	r2, r3
 801055a:	d104      	bne.n	8010566 <tcp_abandon+0xb2>
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	68da      	ldr	r2, [r3, #12]
 8010560:	69fb      	ldr	r3, [r7, #28]
 8010562:	60da      	str	r2, [r3, #12]
 8010564:	e005      	b.n	8010572 <tcp_abandon+0xbe>
 8010566:	69fb      	ldr	r3, [r7, #28]
 8010568:	68db      	ldr	r3, [r3, #12]
 801056a:	61fb      	str	r3, [r7, #28]
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1ef      	bne.n	8010552 <tcp_abandon+0x9e>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2200      	movs	r2, #0
 8010576:	60da      	str	r2, [r3, #12]
 8010578:	e00b      	b.n	8010592 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	8adb      	ldrh	r3, [r3, #22]
 8010582:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010584:	6879      	ldr	r1, [r7, #4]
 8010586:	4828      	ldr	r0, [pc, #160]	@ (8010628 <tcp_abandon+0x174>)
 8010588:	f000 ff80 	bl	801148c <tcp_pcb_remove>
 801058c:	4b27      	ldr	r3, [pc, #156]	@ (801062c <tcp_abandon+0x178>)
 801058e:	2201      	movs	r2, #1
 8010590:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010596:	2b00      	cmp	r3, #0
 8010598:	d004      	beq.n	80105a4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 fd22 	bl	8010fe8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d004      	beq.n	80105b6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 fd19 	bl	8010fe8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d004      	beq.n	80105c8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80105c2:	4618      	mov	r0, r3
 80105c4:	f000 fd10 	bl	8010fe8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80105c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d00e      	beq.n	80105ec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80105ce:	6879      	ldr	r1, [r7, #4]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	3304      	adds	r3, #4
 80105d4:	687a      	ldr	r2, [r7, #4]
 80105d6:	8b12      	ldrh	r2, [r2, #24]
 80105d8:	9202      	str	r2, [sp, #8]
 80105da:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80105dc:	9201      	str	r2, [sp, #4]
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	460b      	mov	r3, r1
 80105e2:	697a      	ldr	r2, [r7, #20]
 80105e4:	69b9      	ldr	r1, [r7, #24]
 80105e6:	6878      	ldr	r0, [r7, #4]
 80105e8:	f004 fcc4 	bl	8014f74 <tcp_rst>
    }
    last_state = pcb->state;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	7d1b      	ldrb	r3, [r3, #20]
 80105f0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80105f2:	6878      	ldr	r0, [r7, #4]
 80105f4:	f7ff fd34 	bl	8010060 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d004      	beq.n	8010608 <tcp_abandon+0x154>
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	f06f 010c 	mvn.w	r1, #12
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	4798      	blx	r3
  }
}
 8010608:	3728      	adds	r7, #40	@ 0x28
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	0801a508 	.word	0x0801a508
 8010614:	0801a64c 	.word	0x0801a64c
 8010618:	0801a54c 	.word	0x0801a54c
 801061c:	0801a668 	.word	0x0801a668
 8010620:	24010368 	.word	0x24010368
 8010624:	2401035c 	.word	0x2401035c
 8010628:	24010364 	.word	0x24010364
 801062c:	2401036c 	.word	0x2401036c

08010630 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010630:	b580      	push	{r7, lr}
 8010632:	b082      	sub	sp, #8
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8010638:	2101      	movs	r1, #1
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f7ff ff3a 	bl	80104b4 <tcp_abandon>
}
 8010640:	bf00      	nop
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <tcp_update_rcv_ann_wnd+0x1c>
 8010656:	4b25      	ldr	r3, [pc, #148]	@ (80106ec <tcp_update_rcv_ann_wnd+0xa4>)
 8010658:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801065c:	4924      	ldr	r1, [pc, #144]	@ (80106f0 <tcp_update_rcv_ann_wnd+0xa8>)
 801065e:	4825      	ldr	r0, [pc, #148]	@ (80106f4 <tcp_update_rcv_ann_wnd+0xac>)
 8010660:	f008 f9b0 	bl	80189c4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 801066c:	4413      	add	r3, r2
 801066e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8010678:	f640 3168 	movw	r1, #2920	@ 0xb68
 801067c:	428a      	cmp	r2, r1
 801067e:	bf28      	it	cs
 8010680:	460a      	movcs	r2, r1
 8010682:	b292      	uxth	r2, r2
 8010684:	4413      	add	r3, r2
 8010686:	68fa      	ldr	r2, [r7, #12]
 8010688:	1ad3      	subs	r3, r2, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	db08      	blt.n	80106a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801069a:	68fa      	ldr	r2, [r7, #12]
 801069c:	1ad3      	subs	r3, r2, r3
 801069e:	e020      	b.n	80106e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106a8:	1ad3      	subs	r3, r2, r3
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	dd03      	ble.n	80106b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80106b4:	e014      	b.n	80106e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80106be:	1ad3      	subs	r3, r2, r3
 80106c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80106c8:	d306      	bcc.n	80106d8 <tcp_update_rcv_ann_wnd+0x90>
 80106ca:	4b08      	ldr	r3, [pc, #32]	@ (80106ec <tcp_update_rcv_ann_wnd+0xa4>)
 80106cc:	f240 32b6 	movw	r2, #950	@ 0x3b6
 80106d0:	4909      	ldr	r1, [pc, #36]	@ (80106f8 <tcp_update_rcv_ann_wnd+0xb0>)
 80106d2:	4808      	ldr	r0, [pc, #32]	@ (80106f4 <tcp_update_rcv_ann_wnd+0xac>)
 80106d4:	f008 f976 	bl	80189c4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	b29a      	uxth	r2, r3
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 80106e0:	2300      	movs	r3, #0
  }
}
 80106e2:	4618      	mov	r0, r3
 80106e4:	3710      	adds	r7, #16
 80106e6:	46bd      	mov	sp, r7
 80106e8:	bd80      	pop	{r7, pc}
 80106ea:	bf00      	nop
 80106ec:	0801a508 	.word	0x0801a508
 80106f0:	0801a764 	.word	0x0801a764
 80106f4:	0801a54c 	.word	0x0801a54c
 80106f8:	0801a788 	.word	0x0801a788

080106fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	460b      	mov	r3, r1
 8010706:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d107      	bne.n	801071e <tcp_recved+0x22>
 801070e:	4b20      	ldr	r3, [pc, #128]	@ (8010790 <tcp_recved+0x94>)
 8010710:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8010714:	491f      	ldr	r1, [pc, #124]	@ (8010794 <tcp_recved+0x98>)
 8010716:	4820      	ldr	r0, [pc, #128]	@ (8010798 <tcp_recved+0x9c>)
 8010718:	f008 f954 	bl	80189c4 <iprintf>
 801071c:	e034      	b.n	8010788 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	7d1b      	ldrb	r3, [r3, #20]
 8010722:	2b01      	cmp	r3, #1
 8010724:	d106      	bne.n	8010734 <tcp_recved+0x38>
 8010726:	4b1a      	ldr	r3, [pc, #104]	@ (8010790 <tcp_recved+0x94>)
 8010728:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801072c:	491b      	ldr	r1, [pc, #108]	@ (801079c <tcp_recved+0xa0>)
 801072e:	481a      	ldr	r0, [pc, #104]	@ (8010798 <tcp_recved+0x9c>)
 8010730:	f008 f948 	bl	80189c4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010738:	887b      	ldrh	r3, [r7, #2]
 801073a:	4413      	add	r3, r2
 801073c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801073e:	89fb      	ldrh	r3, [r7, #14]
 8010740:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010744:	4293      	cmp	r3, r2
 8010746:	d804      	bhi.n	8010752 <tcp_recved+0x56>
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801074c:	89fa      	ldrh	r2, [r7, #14]
 801074e:	429a      	cmp	r2, r3
 8010750:	d204      	bcs.n	801075c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010758:	851a      	strh	r2, [r3, #40]	@ 0x28
 801075a:	e002      	b.n	8010762 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	89fa      	ldrh	r2, [r7, #14]
 8010760:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010762:	6878      	ldr	r0, [r7, #4]
 8010764:	f7ff ff70 	bl	8010648 <tcp_update_rcv_ann_wnd>
 8010768:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010770:	4293      	cmp	r3, r2
 8010772:	d909      	bls.n	8010788 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	8b5b      	ldrh	r3, [r3, #26]
 8010778:	f043 0302 	orr.w	r3, r3, #2
 801077c:	b29a      	uxth	r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010782:	6878      	ldr	r0, [r7, #4]
 8010784:	f003 fe42 	bl	801440c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	0801a508 	.word	0x0801a508
 8010794:	0801a7a4 	.word	0x0801a7a4
 8010798:	0801a54c 	.word	0x0801a54c
 801079c:	0801a7bc 	.word	0x0801a7bc

080107a0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80107a0:	b5b0      	push	{r4, r5, r7, lr}
 80107a2:	b090      	sub	sp, #64	@ 0x40
 80107a4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80107a6:	2300      	movs	r3, #0
 80107a8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80107ac:	4b95      	ldr	r3, [pc, #596]	@ (8010a04 <tcp_slowtmr+0x264>)
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	3301      	adds	r3, #1
 80107b2:	4a94      	ldr	r2, [pc, #592]	@ (8010a04 <tcp_slowtmr+0x264>)
 80107b4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80107b6:	4b94      	ldr	r3, [pc, #592]	@ (8010a08 <tcp_slowtmr+0x268>)
 80107b8:	781b      	ldrb	r3, [r3, #0]
 80107ba:	3301      	adds	r3, #1
 80107bc:	b2da      	uxtb	r2, r3
 80107be:	4b92      	ldr	r3, [pc, #584]	@ (8010a08 <tcp_slowtmr+0x268>)
 80107c0:	701a      	strb	r2, [r3, #0]
 80107c2:	e000      	b.n	80107c6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80107c4:	bf00      	nop
  prev = NULL;
 80107c6:	2300      	movs	r3, #0
 80107c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80107ca:	4b90      	ldr	r3, [pc, #576]	@ (8010a0c <tcp_slowtmr+0x26c>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80107d0:	e29d      	b.n	8010d0e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80107d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d4:	7d1b      	ldrb	r3, [r3, #20]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <tcp_slowtmr+0x48>
 80107da:	4b8d      	ldr	r3, [pc, #564]	@ (8010a10 <tcp_slowtmr+0x270>)
 80107dc:	f240 42be 	movw	r2, #1214	@ 0x4be
 80107e0:	498c      	ldr	r1, [pc, #560]	@ (8010a14 <tcp_slowtmr+0x274>)
 80107e2:	488d      	ldr	r0, [pc, #564]	@ (8010a18 <tcp_slowtmr+0x278>)
 80107e4:	f008 f8ee 	bl	80189c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80107e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107ea:	7d1b      	ldrb	r3, [r3, #20]
 80107ec:	2b01      	cmp	r3, #1
 80107ee:	d106      	bne.n	80107fe <tcp_slowtmr+0x5e>
 80107f0:	4b87      	ldr	r3, [pc, #540]	@ (8010a10 <tcp_slowtmr+0x270>)
 80107f2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 80107f6:	4989      	ldr	r1, [pc, #548]	@ (8010a1c <tcp_slowtmr+0x27c>)
 80107f8:	4887      	ldr	r0, [pc, #540]	@ (8010a18 <tcp_slowtmr+0x278>)
 80107fa:	f008 f8e3 	bl	80189c4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80107fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010800:	7d1b      	ldrb	r3, [r3, #20]
 8010802:	2b0a      	cmp	r3, #10
 8010804:	d106      	bne.n	8010814 <tcp_slowtmr+0x74>
 8010806:	4b82      	ldr	r3, [pc, #520]	@ (8010a10 <tcp_slowtmr+0x270>)
 8010808:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801080c:	4984      	ldr	r1, [pc, #528]	@ (8010a20 <tcp_slowtmr+0x280>)
 801080e:	4882      	ldr	r0, [pc, #520]	@ (8010a18 <tcp_slowtmr+0x278>)
 8010810:	f008 f8d8 	bl	80189c4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010816:	7f9a      	ldrb	r2, [r3, #30]
 8010818:	4b7b      	ldr	r3, [pc, #492]	@ (8010a08 <tcp_slowtmr+0x268>)
 801081a:	781b      	ldrb	r3, [r3, #0]
 801081c:	429a      	cmp	r2, r3
 801081e:	d105      	bne.n	801082c <tcp_slowtmr+0x8c>
      prev = pcb;
 8010820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010822:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801082a:	e270      	b.n	8010d0e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801082c:	4b76      	ldr	r3, [pc, #472]	@ (8010a08 <tcp_slowtmr+0x268>)
 801082e:	781a      	ldrb	r2, [r3, #0]
 8010830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010832:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8010834:	2300      	movs	r3, #0
 8010836:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801083a:	2300      	movs	r3, #0
 801083c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010842:	7d1b      	ldrb	r3, [r3, #20]
 8010844:	2b02      	cmp	r3, #2
 8010846:	d10a      	bne.n	801085e <tcp_slowtmr+0xbe>
 8010848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801084a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801084e:	2b05      	cmp	r3, #5
 8010850:	d905      	bls.n	801085e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8010852:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010856:	3301      	adds	r3, #1
 8010858:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801085c:	e11e      	b.n	8010a9c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801085e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010860:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010864:	2b0b      	cmp	r3, #11
 8010866:	d905      	bls.n	8010874 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8010868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801086c:	3301      	adds	r3, #1
 801086e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010872:	e113      	b.n	8010a9c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8010874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010876:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801087a:	2b00      	cmp	r3, #0
 801087c:	d075      	beq.n	801096a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801087e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010880:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010882:	2b00      	cmp	r3, #0
 8010884:	d006      	beq.n	8010894 <tcp_slowtmr+0xf4>
 8010886:	4b62      	ldr	r3, [pc, #392]	@ (8010a10 <tcp_slowtmr+0x270>)
 8010888:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 801088c:	4965      	ldr	r1, [pc, #404]	@ (8010a24 <tcp_slowtmr+0x284>)
 801088e:	4862      	ldr	r0, [pc, #392]	@ (8010a18 <tcp_slowtmr+0x278>)
 8010890:	f008 f898 	bl	80189c4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010896:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010898:	2b00      	cmp	r3, #0
 801089a:	d106      	bne.n	80108aa <tcp_slowtmr+0x10a>
 801089c:	4b5c      	ldr	r3, [pc, #368]	@ (8010a10 <tcp_slowtmr+0x270>)
 801089e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80108a2:	4961      	ldr	r1, [pc, #388]	@ (8010a28 <tcp_slowtmr+0x288>)
 80108a4:	485c      	ldr	r0, [pc, #368]	@ (8010a18 <tcp_slowtmr+0x278>)
 80108a6:	f008 f88d 	bl	80189c4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80108aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ac:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80108b0:	2b0b      	cmp	r3, #11
 80108b2:	d905      	bls.n	80108c0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80108b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108b8:	3301      	adds	r3, #1
 80108ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80108be:	e0ed      	b.n	8010a9c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80108c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108c2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80108c6:	3b01      	subs	r3, #1
 80108c8:	4a58      	ldr	r2, [pc, #352]	@ (8010a2c <tcp_slowtmr+0x28c>)
 80108ca:	5cd3      	ldrb	r3, [r2, r3]
 80108cc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80108ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108d0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80108d4:	7c7a      	ldrb	r2, [r7, #17]
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d907      	bls.n	80108ea <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80108da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108dc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80108e0:	3301      	adds	r3, #1
 80108e2:	b2da      	uxtb	r2, r3
 80108e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108e6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80108ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108ec:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80108f0:	7c7a      	ldrb	r2, [r7, #17]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	f200 80d2 	bhi.w	8010a9c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 80108f8:	2301      	movs	r3, #1
 80108fa:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 80108fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80108fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010902:	2b00      	cmp	r3, #0
 8010904:	d108      	bne.n	8010918 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010906:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010908:	f004 fc28 	bl	801515c <tcp_zero_window_probe>
 801090c:	4603      	mov	r3, r0
 801090e:	2b00      	cmp	r3, #0
 8010910:	d014      	beq.n	801093c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8010912:	2300      	movs	r3, #0
 8010914:	623b      	str	r3, [r7, #32]
 8010916:	e011      	b.n	801093c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801091e:	4619      	mov	r1, r3
 8010920:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010922:	f003 faed 	bl	8013f00 <tcp_split_unsent_seg>
 8010926:	4603      	mov	r3, r0
 8010928:	2b00      	cmp	r3, #0
 801092a:	d107      	bne.n	801093c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801092c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801092e:	f003 fd6d 	bl	801440c <tcp_output>
 8010932:	4603      	mov	r3, r0
 8010934:	2b00      	cmp	r3, #0
 8010936:	d101      	bne.n	801093c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8010938:	2300      	movs	r3, #0
 801093a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 801093c:	6a3b      	ldr	r3, [r7, #32]
 801093e:	2b00      	cmp	r3, #0
 8010940:	f000 80ac 	beq.w	8010a9c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8010944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010946:	2200      	movs	r2, #0
 8010948:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801094e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8010952:	2b06      	cmp	r3, #6
 8010954:	f200 80a2 	bhi.w	8010a9c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8010958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801095a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801095e:	3301      	adds	r3, #1
 8010960:	b2da      	uxtb	r2, r3
 8010962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010964:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8010968:	e098      	b.n	8010a9c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801096a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801096c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010970:	2b00      	cmp	r3, #0
 8010972:	db0f      	blt.n	8010994 <tcp_slowtmr+0x1f4>
 8010974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010976:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801097a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801097e:	4293      	cmp	r3, r2
 8010980:	d008      	beq.n	8010994 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8010982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010984:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010988:	b29b      	uxth	r3, r3
 801098a:	3301      	adds	r3, #1
 801098c:	b29b      	uxth	r3, r3
 801098e:	b21a      	sxth	r2, r3
 8010990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010992:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8010994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010996:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801099a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801099c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80109a0:	429a      	cmp	r2, r3
 80109a2:	db7b      	blt.n	8010a9c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80109a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80109a6:	f004 f825 	bl	80149f4 <tcp_rexmit_rto_prepare>
 80109aa:	4603      	mov	r3, r0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d007      	beq.n	80109c0 <tcp_slowtmr+0x220>
 80109b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d171      	bne.n	8010a9c <tcp_slowtmr+0x2fc>
 80109b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d06d      	beq.n	8010a9c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80109c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109c2:	7d1b      	ldrb	r3, [r3, #20]
 80109c4:	2b02      	cmp	r3, #2
 80109c6:	d03a      	beq.n	8010a3e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80109c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109ce:	2b0c      	cmp	r3, #12
 80109d0:	bf28      	it	cs
 80109d2:	230c      	movcs	r3, #12
 80109d4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80109d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80109dc:	10db      	asrs	r3, r3, #3
 80109de:	b21b      	sxth	r3, r3
 80109e0:	461a      	mov	r2, r3
 80109e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80109e8:	4413      	add	r3, r2
 80109ea:	7efa      	ldrb	r2, [r7, #27]
 80109ec:	4910      	ldr	r1, [pc, #64]	@ (8010a30 <tcp_slowtmr+0x290>)
 80109ee:	5c8a      	ldrb	r2, [r1, r2]
 80109f0:	4093      	lsls	r3, r2
 80109f2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 80109fa:	4293      	cmp	r3, r2
 80109fc:	dc1a      	bgt.n	8010a34 <tcp_slowtmr+0x294>
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	b21a      	sxth	r2, r3
 8010a02:	e019      	b.n	8010a38 <tcp_slowtmr+0x298>
 8010a04:	24010358 	.word	0x24010358
 8010a08:	2401036e 	.word	0x2401036e
 8010a0c:	24010364 	.word	0x24010364
 8010a10:	0801a508 	.word	0x0801a508
 8010a14:	0801a84c 	.word	0x0801a84c
 8010a18:	0801a54c 	.word	0x0801a54c
 8010a1c:	0801a878 	.word	0x0801a878
 8010a20:	0801a8a4 	.word	0x0801a8a4
 8010a24:	0801a8d4 	.word	0x0801a8d4
 8010a28:	0801a908 	.word	0x0801a908
 8010a2c:	0801c520 	.word	0x0801c520
 8010a30:	0801c510 	.word	0x0801c510
 8010a34:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8010a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8010a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a40:	2200      	movs	r2, #0
 8010a42:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010a50:	4293      	cmp	r3, r2
 8010a52:	bf28      	it	cs
 8010a54:	4613      	movcs	r3, r2
 8010a56:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010a58:	8a7b      	ldrh	r3, [r7, #18]
 8010a5a:	085b      	lsrs	r3, r3, #1
 8010a5c:	b29a      	uxth	r2, r3
 8010a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a60:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a66:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a6e:	005b      	lsls	r3, r3, #1
 8010a70:	b29b      	uxth	r3, r3
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d206      	bcs.n	8010a84 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010a7a:	005b      	lsls	r3, r3, #1
 8010a7c:	b29a      	uxth	r2, r3
 8010a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a80:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8010a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a86:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8010a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a8a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8010a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a90:	2200      	movs	r2, #0
 8010a92:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8010a96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a98:	f004 f81c 	bl	8014ad4 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8010a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a9e:	7d1b      	ldrb	r3, [r3, #20]
 8010aa0:	2b06      	cmp	r3, #6
 8010aa2:	d111      	bne.n	8010ac8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8010aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aa6:	8b5b      	ldrh	r3, [r3, #26]
 8010aa8:	f003 0310 	and.w	r3, r3, #16
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d00b      	beq.n	8010ac8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ab0:	4b9c      	ldr	r3, [pc, #624]	@ (8010d24 <tcp_slowtmr+0x584>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ab6:	6a1b      	ldr	r3, [r3, #32]
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	2b28      	cmp	r3, #40	@ 0x28
 8010abc:	d904      	bls.n	8010ac8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8010abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aca:	7a5b      	ldrb	r3, [r3, #9]
 8010acc:	f003 0308 	and.w	r3, r3, #8
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d04a      	beq.n	8010b6a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8010ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ad6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010ad8:	2b04      	cmp	r3, #4
 8010ada:	d003      	beq.n	8010ae4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8010adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ade:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010ae0:	2b07      	cmp	r3, #7
 8010ae2:	d142      	bne.n	8010b6a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010ae4:	4b8f      	ldr	r3, [pc, #572]	@ (8010d24 <tcp_slowtmr+0x584>)
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010aea:	6a1b      	ldr	r3, [r3, #32]
 8010aec:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010af0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010af4:	4b8c      	ldr	r3, [pc, #560]	@ (8010d28 <tcp_slowtmr+0x588>)
 8010af6:	440b      	add	r3, r1
 8010af8:	498c      	ldr	r1, [pc, #560]	@ (8010d2c <tcp_slowtmr+0x58c>)
 8010afa:	fba1 1303 	umull	r1, r3, r1, r3
 8010afe:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b00:	429a      	cmp	r2, r3
 8010b02:	d90a      	bls.n	8010b1a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8010b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b08:	3301      	adds	r3, #1
 8010b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8010b0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010b12:	3301      	adds	r3, #1
 8010b14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8010b18:	e027      	b.n	8010b6a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b1a:	4b82      	ldr	r3, [pc, #520]	@ (8010d24 <tcp_slowtmr+0x584>)
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b20:	6a1b      	ldr	r3, [r3, #32]
 8010b22:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b26:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8010b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b2c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010b30:	4618      	mov	r0, r3
 8010b32:	4b7f      	ldr	r3, [pc, #508]	@ (8010d30 <tcp_slowtmr+0x590>)
 8010b34:	fb00 f303 	mul.w	r3, r0, r3
 8010b38:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010b3a:	497c      	ldr	r1, [pc, #496]	@ (8010d2c <tcp_slowtmr+0x58c>)
 8010b3c:	fba1 1303 	umull	r1, r3, r1, r3
 8010b40:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d911      	bls.n	8010b6a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8010b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b48:	f004 fac8 	bl	80150dc <tcp_keepalive>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8010b52:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d107      	bne.n	8010b6a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b5c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8010b60:	3301      	adds	r3, #1
 8010b62:	b2da      	uxtb	r2, r3
 8010b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b66:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8010b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d011      	beq.n	8010b96 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010b72:	4b6c      	ldr	r3, [pc, #432]	@ (8010d24 <tcp_slowtmr+0x584>)
 8010b74:	681a      	ldr	r2, [r3, #0]
 8010b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b78:	6a1b      	ldr	r3, [r3, #32]
 8010b7a:	1ad2      	subs	r2, r2, r3
 8010b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b7e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8010b82:	4619      	mov	r1, r3
 8010b84:	460b      	mov	r3, r1
 8010b86:	005b      	lsls	r3, r3, #1
 8010b88:	440b      	add	r3, r1
 8010b8a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d302      	bcc.n	8010b96 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8010b90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b92:	f000 fddf 	bl	8011754 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8010b96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b98:	7d1b      	ldrb	r3, [r3, #20]
 8010b9a:	2b03      	cmp	r3, #3
 8010b9c:	d10b      	bne.n	8010bb6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010b9e:	4b61      	ldr	r3, [pc, #388]	@ (8010d24 <tcp_slowtmr+0x584>)
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ba4:	6a1b      	ldr	r3, [r3, #32]
 8010ba6:	1ad3      	subs	r3, r2, r3
 8010ba8:	2b28      	cmp	r3, #40	@ 0x28
 8010baa:	d904      	bls.n	8010bb6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 8010bac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8010bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb8:	7d1b      	ldrb	r3, [r3, #20]
 8010bba:	2b09      	cmp	r3, #9
 8010bbc:	d10b      	bne.n	8010bd6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010bbe:	4b59      	ldr	r3, [pc, #356]	@ (8010d24 <tcp_slowtmr+0x584>)
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bc4:	6a1b      	ldr	r3, [r3, #32]
 8010bc6:	1ad3      	subs	r3, r2, r3
 8010bc8:	2bf0      	cmp	r3, #240	@ 0xf0
 8010bca:	d904      	bls.n	8010bd6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8010bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bd0:	3301      	adds	r3, #1
 8010bd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8010bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d060      	beq.n	8010ca0 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 8010bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010be4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8010be6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010be8:	f000 fc00 	bl	80113ec <tcp_pcb_purge>
      if (prev != NULL) {
 8010bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d010      	beq.n	8010c14 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010bf2:	4b50      	ldr	r3, [pc, #320]	@ (8010d34 <tcp_slowtmr+0x594>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d106      	bne.n	8010c0a <tcp_slowtmr+0x46a>
 8010bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8010d38 <tcp_slowtmr+0x598>)
 8010bfe:	f240 526d 	movw	r2, #1389	@ 0x56d
 8010c02:	494e      	ldr	r1, [pc, #312]	@ (8010d3c <tcp_slowtmr+0x59c>)
 8010c04:	484e      	ldr	r0, [pc, #312]	@ (8010d40 <tcp_slowtmr+0x5a0>)
 8010c06:	f007 fedd 	bl	80189c4 <iprintf>
        prev->next = pcb->next;
 8010c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0c:	68da      	ldr	r2, [r3, #12]
 8010c0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010c10:	60da      	str	r2, [r3, #12]
 8010c12:	e00f      	b.n	8010c34 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010c14:	4b47      	ldr	r3, [pc, #284]	@ (8010d34 <tcp_slowtmr+0x594>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d006      	beq.n	8010c2c <tcp_slowtmr+0x48c>
 8010c1e:	4b46      	ldr	r3, [pc, #280]	@ (8010d38 <tcp_slowtmr+0x598>)
 8010c20:	f240 5271 	movw	r2, #1393	@ 0x571
 8010c24:	4947      	ldr	r1, [pc, #284]	@ (8010d44 <tcp_slowtmr+0x5a4>)
 8010c26:	4846      	ldr	r0, [pc, #280]	@ (8010d40 <tcp_slowtmr+0x5a0>)
 8010c28:	f007 fecc 	bl	80189c4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	4a40      	ldr	r2, [pc, #256]	@ (8010d34 <tcp_slowtmr+0x594>)
 8010c32:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8010c34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d013      	beq.n	8010c64 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c3e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8010c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c42:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8010c44:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8010c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c48:	3304      	adds	r3, #4
 8010c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010c4c:	8ad2      	ldrh	r2, [r2, #22]
 8010c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010c50:	8b09      	ldrh	r1, [r1, #24]
 8010c52:	9102      	str	r1, [sp, #8]
 8010c54:	9201      	str	r2, [sp, #4]
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	462b      	mov	r3, r5
 8010c5a:	4622      	mov	r2, r4
 8010c5c:	4601      	mov	r1, r0
 8010c5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010c60:	f004 f988 	bl	8014f74 <tcp_rst>
      err_arg = pcb->callback_arg;
 8010c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c66:	691b      	ldr	r3, [r3, #16]
 8010c68:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c6c:	7d1b      	ldrb	r3, [r3, #20]
 8010c6e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c72:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010c7a:	6838      	ldr	r0, [r7, #0]
 8010c7c:	f7ff f9f0 	bl	8010060 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8010c80:	4b31      	ldr	r3, [pc, #196]	@ (8010d48 <tcp_slowtmr+0x5a8>)
 8010c82:	2200      	movs	r2, #0
 8010c84:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d004      	beq.n	8010c96 <tcp_slowtmr+0x4f6>
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	f06f 010c 	mvn.w	r1, #12
 8010c92:	68b8      	ldr	r0, [r7, #8]
 8010c94:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010c96:	4b2c      	ldr	r3, [pc, #176]	@ (8010d48 <tcp_slowtmr+0x5a8>)
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d037      	beq.n	8010d0e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8010c9e:	e592      	b.n	80107c6 <tcp_slowtmr+0x26>
      prev = pcb;
 8010ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ca6:	68db      	ldr	r3, [r3, #12]
 8010ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8010caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cac:	7f1b      	ldrb	r3, [r3, #28]
 8010cae:	3301      	adds	r3, #1
 8010cb0:	b2da      	uxtb	r2, r3
 8010cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb8:	7f1a      	ldrb	r2, [r3, #28]
 8010cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cbc:	7f5b      	ldrb	r3, [r3, #29]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d325      	bcc.n	8010d0e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8010cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc4:	2200      	movs	r2, #0
 8010cc6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8010cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8010d48 <tcp_slowtmr+0x5a8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00b      	beq.n	8010cf0 <tcp_slowtmr+0x550>
 8010cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ce0:	6912      	ldr	r2, [r2, #16]
 8010ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010ce4:	4610      	mov	r0, r2
 8010ce6:	4798      	blx	r3
 8010ce8:	4603      	mov	r3, r0
 8010cea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8010cee:	e002      	b.n	8010cf6 <tcp_slowtmr+0x556>
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8010cf6:	4b14      	ldr	r3, [pc, #80]	@ (8010d48 <tcp_slowtmr+0x5a8>)
 8010cf8:	781b      	ldrb	r3, [r3, #0]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	f47f ad62 	bne.w	80107c4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010d00:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010d08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d0a:	f003 fb7f 	bl	801440c <tcp_output>
  while (pcb != NULL) {
 8010d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	f47f ad5e 	bne.w	80107d2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8010d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8010d4c <tcp_slowtmr+0x5ac>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010d20:	e069      	b.n	8010df6 <tcp_slowtmr+0x656>
 8010d22:	bf00      	nop
 8010d24:	24010358 	.word	0x24010358
 8010d28:	000a4cb8 	.word	0x000a4cb8
 8010d2c:	10624dd3 	.word	0x10624dd3
 8010d30:	000124f8 	.word	0x000124f8
 8010d34:	24010364 	.word	0x24010364
 8010d38:	0801a508 	.word	0x0801a508
 8010d3c:	0801a940 	.word	0x0801a940
 8010d40:	0801a54c 	.word	0x0801a54c
 8010d44:	0801a96c 	.word	0x0801a96c
 8010d48:	2401036c 	.word	0x2401036c
 8010d4c:	24010368 	.word	0x24010368
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d52:	7d1b      	ldrb	r3, [r3, #20]
 8010d54:	2b0a      	cmp	r3, #10
 8010d56:	d006      	beq.n	8010d66 <tcp_slowtmr+0x5c6>
 8010d58:	4b2b      	ldr	r3, [pc, #172]	@ (8010e08 <tcp_slowtmr+0x668>)
 8010d5a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8010d5e:	492b      	ldr	r1, [pc, #172]	@ (8010e0c <tcp_slowtmr+0x66c>)
 8010d60:	482b      	ldr	r0, [pc, #172]	@ (8010e10 <tcp_slowtmr+0x670>)
 8010d62:	f007 fe2f 	bl	80189c4 <iprintf>
    pcb_remove = 0;
 8010d66:	2300      	movs	r3, #0
 8010d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010d6c:	4b29      	ldr	r3, [pc, #164]	@ (8010e14 <tcp_slowtmr+0x674>)
 8010d6e:	681a      	ldr	r2, [r3, #0]
 8010d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d72:	6a1b      	ldr	r3, [r3, #32]
 8010d74:	1ad3      	subs	r3, r2, r3
 8010d76:	2bf0      	cmp	r3, #240	@ 0xf0
 8010d78:	d904      	bls.n	8010d84 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8010d7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d7e:	3301      	adds	r3, #1
 8010d80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010d84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d02f      	beq.n	8010dec <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010d8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d8e:	f000 fb2d 	bl	80113ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d010      	beq.n	8010dba <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010d98:	4b1f      	ldr	r3, [pc, #124]	@ (8010e18 <tcp_slowtmr+0x678>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d106      	bne.n	8010db0 <tcp_slowtmr+0x610>
 8010da2:	4b19      	ldr	r3, [pc, #100]	@ (8010e08 <tcp_slowtmr+0x668>)
 8010da4:	f240 52af 	movw	r2, #1455	@ 0x5af
 8010da8:	491c      	ldr	r1, [pc, #112]	@ (8010e1c <tcp_slowtmr+0x67c>)
 8010daa:	4819      	ldr	r0, [pc, #100]	@ (8010e10 <tcp_slowtmr+0x670>)
 8010dac:	f007 fe0a 	bl	80189c4 <iprintf>
        prev->next = pcb->next;
 8010db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010db2:	68da      	ldr	r2, [r3, #12]
 8010db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db6:	60da      	str	r2, [r3, #12]
 8010db8:	e00f      	b.n	8010dda <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010dba:	4b17      	ldr	r3, [pc, #92]	@ (8010e18 <tcp_slowtmr+0x678>)
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d006      	beq.n	8010dd2 <tcp_slowtmr+0x632>
 8010dc4:	4b10      	ldr	r3, [pc, #64]	@ (8010e08 <tcp_slowtmr+0x668>)
 8010dc6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8010dca:	4915      	ldr	r1, [pc, #84]	@ (8010e20 <tcp_slowtmr+0x680>)
 8010dcc:	4810      	ldr	r0, [pc, #64]	@ (8010e10 <tcp_slowtmr+0x670>)
 8010dce:	f007 fdf9 	bl	80189c4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dd4:	68db      	ldr	r3, [r3, #12]
 8010dd6:	4a10      	ldr	r2, [pc, #64]	@ (8010e18 <tcp_slowtmr+0x678>)
 8010dd8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ddc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010de0:	68db      	ldr	r3, [r3, #12]
 8010de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8010de4:	69f8      	ldr	r0, [r7, #28]
 8010de6:	f7ff f93b 	bl	8010060 <tcp_free>
 8010dea:	e004      	b.n	8010df6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8010dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8010df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8010df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1a9      	bne.n	8010d50 <tcp_slowtmr+0x5b0>
    }
  }
}
 8010dfc:	bf00      	nop
 8010dfe:	bf00      	nop
 8010e00:	3730      	adds	r7, #48	@ 0x30
 8010e02:	46bd      	mov	sp, r7
 8010e04:	bdb0      	pop	{r4, r5, r7, pc}
 8010e06:	bf00      	nop
 8010e08:	0801a508 	.word	0x0801a508
 8010e0c:	0801a998 	.word	0x0801a998
 8010e10:	0801a54c 	.word	0x0801a54c
 8010e14:	24010358 	.word	0x24010358
 8010e18:	24010368 	.word	0x24010368
 8010e1c:	0801a9c8 	.word	0x0801a9c8
 8010e20:	0801a9f0 	.word	0x0801a9f0

08010e24 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010e2a:	4b2d      	ldr	r3, [pc, #180]	@ (8010ee0 <tcp_fasttmr+0xbc>)
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	b2da      	uxtb	r2, r3
 8010e32:	4b2b      	ldr	r3, [pc, #172]	@ (8010ee0 <tcp_fasttmr+0xbc>)
 8010e34:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010e36:	4b2b      	ldr	r3, [pc, #172]	@ (8010ee4 <tcp_fasttmr+0xc0>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010e3c:	e048      	b.n	8010ed0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	7f9a      	ldrb	r2, [r3, #30]
 8010e42:	4b27      	ldr	r3, [pc, #156]	@ (8010ee0 <tcp_fasttmr+0xbc>)
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	429a      	cmp	r2, r3
 8010e48:	d03f      	beq.n	8010eca <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010e4a:	4b25      	ldr	r3, [pc, #148]	@ (8010ee0 <tcp_fasttmr+0xbc>)
 8010e4c:	781a      	ldrb	r2, [r3, #0]
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b5b      	ldrh	r3, [r3, #26]
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d010      	beq.n	8010e80 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	8b5b      	ldrh	r3, [r3, #26]
 8010e62:	f043 0302 	orr.w	r3, r3, #2
 8010e66:	b29a      	uxth	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f003 facd 	bl	801440c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	8b5b      	ldrh	r3, [r3, #26]
 8010e76:	f023 0303 	bic.w	r3, r3, #3
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	8b5b      	ldrh	r3, [r3, #26]
 8010e84:	f003 0308 	and.w	r3, r3, #8
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d009      	beq.n	8010ea0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	8b5b      	ldrh	r3, [r3, #26]
 8010e90:	f023 0308 	bic.w	r3, r3, #8
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f7ff fa74 	bl	8010388 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	68db      	ldr	r3, [r3, #12]
 8010ea4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00a      	beq.n	8010ec4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010eae:	4b0e      	ldr	r3, [pc, #56]	@ (8010ee8 <tcp_fasttmr+0xc4>)
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010eb4:	6878      	ldr	r0, [r7, #4]
 8010eb6:	f000 f819 	bl	8010eec <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8010eba:	4b0b      	ldr	r3, [pc, #44]	@ (8010ee8 <tcp_fasttmr+0xc4>)
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d000      	beq.n	8010ec4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010ec2:	e7b8      	b.n	8010e36 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010ec4:	683b      	ldr	r3, [r7, #0]
 8010ec6:	607b      	str	r3, [r7, #4]
 8010ec8:	e002      	b.n	8010ed0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d1b3      	bne.n	8010e3e <tcp_fasttmr+0x1a>
    }
  }
}
 8010ed6:	bf00      	nop
 8010ed8:	bf00      	nop
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	2401036e 	.word	0x2401036e
 8010ee4:	24010364 	.word	0x24010364
 8010ee8:	2401036c 	.word	0x2401036c

08010eec <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b085      	sub	sp, #20
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d109      	bne.n	8010f0e <tcp_process_refused_data+0x22>
 8010efa:	4b38      	ldr	r3, [pc, #224]	@ (8010fdc <tcp_process_refused_data+0xf0>)
 8010efc:	f240 6209 	movw	r2, #1545	@ 0x609
 8010f00:	4937      	ldr	r1, [pc, #220]	@ (8010fe0 <tcp_process_refused_data+0xf4>)
 8010f02:	4838      	ldr	r0, [pc, #224]	@ (8010fe4 <tcp_process_refused_data+0xf8>)
 8010f04:	f007 fd5e 	bl	80189c4 <iprintf>
 8010f08:	f06f 030f 	mvn.w	r3, #15
 8010f0c:	e061      	b.n	8010fd2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f12:	7b5b      	ldrb	r3, [r3, #13]
 8010f14:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010f1a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	2200      	movs	r2, #0
 8010f20:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d00b      	beq.n	8010f44 <tcp_process_refused_data+0x58>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	6918      	ldr	r0, [r3, #16]
 8010f36:	2300      	movs	r3, #0
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	6879      	ldr	r1, [r7, #4]
 8010f3c:	47a0      	blx	r4
 8010f3e:	4603      	mov	r3, r0
 8010f40:	73fb      	strb	r3, [r7, #15]
 8010f42:	e007      	b.n	8010f54 <tcp_process_refused_data+0x68>
 8010f44:	2300      	movs	r3, #0
 8010f46:	68ba      	ldr	r2, [r7, #8]
 8010f48:	6879      	ldr	r1, [r7, #4]
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	f000 f8a6 	bl	801109c <tcp_recv_null>
 8010f50:	4603      	mov	r3, r0
 8010f52:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d12b      	bne.n	8010fb4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010f5c:	7bbb      	ldrb	r3, [r7, #14]
 8010f5e:	f003 0320 	and.w	r3, r3, #32
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d034      	beq.n	8010fd0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f6a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8010f6e:	4293      	cmp	r3, r2
 8010f70:	d005      	beq.n	8010f7e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010f76:	3301      	adds	r3, #1
 8010f78:	b29a      	uxth	r2, r3
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d00b      	beq.n	8010fa0 <tcp_process_refused_data+0xb4>
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6918      	ldr	r0, [r3, #16]
 8010f92:	2300      	movs	r3, #0
 8010f94:	2200      	movs	r2, #0
 8010f96:	6879      	ldr	r1, [r7, #4]
 8010f98:	47a0      	blx	r4
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	73fb      	strb	r3, [r7, #15]
 8010f9e:	e001      	b.n	8010fa4 <tcp_process_refused_data+0xb8>
 8010fa0:	2300      	movs	r3, #0
 8010fa2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fa8:	f113 0f0d 	cmn.w	r3, #13
 8010fac:	d110      	bne.n	8010fd0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010fae:	f06f 030c 	mvn.w	r3, #12
 8010fb2:	e00e      	b.n	8010fd2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010fb8:	f113 0f0d 	cmn.w	r3, #13
 8010fbc:	d102      	bne.n	8010fc4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010fbe:	f06f 030c 	mvn.w	r3, #12
 8010fc2:	e006      	b.n	8010fd2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	68ba      	ldr	r2, [r7, #8]
 8010fc8:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8010fca:	f06f 0304 	mvn.w	r3, #4
 8010fce:	e000      	b.n	8010fd2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010fd0:	2300      	movs	r3, #0
}
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	3714      	adds	r7, #20
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd90      	pop	{r4, r7, pc}
 8010fda:	bf00      	nop
 8010fdc:	0801a508 	.word	0x0801a508
 8010fe0:	0801aa18 	.word	0x0801aa18
 8010fe4:	0801a54c 	.word	0x0801a54c

08010fe8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b084      	sub	sp, #16
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010ff0:	e007      	b.n	8011002 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f000 f80a 	bl	8011012 <tcp_seg_free>
    seg = next;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d1f4      	bne.n	8010ff2 <tcp_segs_free+0xa>
  }
}
 8011008:	bf00      	nop
 801100a:	bf00      	nop
 801100c:	3710      	adds	r7, #16
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}

08011012 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011012:	b580      	push	{r7, lr}
 8011014:	b082      	sub	sp, #8
 8011016:	af00      	add	r7, sp, #0
 8011018:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00c      	beq.n	801103a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	685b      	ldr	r3, [r3, #4]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d004      	beq.n	8011032 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	685b      	ldr	r3, [r3, #4]
 801102c:	4618      	mov	r0, r3
 801102e:	f7fe fd5b 	bl	800fae8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011032:	6879      	ldr	r1, [r7, #4]
 8011034:	2003      	movs	r0, #3
 8011036:	f7fd feaf 	bl	800ed98 <memp_free>
  }
}
 801103a:	bf00      	nop
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}
	...

08011044 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d106      	bne.n	8011060 <tcp_seg_copy+0x1c>
 8011052:	4b0f      	ldr	r3, [pc, #60]	@ (8011090 <tcp_seg_copy+0x4c>)
 8011054:	f240 6282 	movw	r2, #1666	@ 0x682
 8011058:	490e      	ldr	r1, [pc, #56]	@ (8011094 <tcp_seg_copy+0x50>)
 801105a:	480f      	ldr	r0, [pc, #60]	@ (8011098 <tcp_seg_copy+0x54>)
 801105c:	f007 fcb2 	bl	80189c4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011060:	2003      	movs	r0, #3
 8011062:	f7fd fe23 	bl	800ecac <memp_malloc>
 8011066:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d101      	bne.n	8011072 <tcp_seg_copy+0x2e>
    return NULL;
 801106e:	2300      	movs	r3, #0
 8011070:	e00a      	b.n	8011088 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011072:	2210      	movs	r2, #16
 8011074:	6879      	ldr	r1, [r7, #4]
 8011076:	68f8      	ldr	r0, [r7, #12]
 8011078:	f007 fd4b 	bl	8018b12 <memcpy>
  pbuf_ref(cseg->p);
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	4618      	mov	r0, r3
 8011082:	f7fe fdd7 	bl	800fc34 <pbuf_ref>
  return cseg;
 8011086:	68fb      	ldr	r3, [r7, #12]
}
 8011088:	4618      	mov	r0, r3
 801108a:	3710      	adds	r7, #16
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	0801a508 	.word	0x0801a508
 8011094:	0801aa5c 	.word	0x0801aa5c
 8011098:	0801a54c 	.word	0x0801a54c

0801109c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b084      	sub	sp, #16
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
 80110a8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80110aa:	68bb      	ldr	r3, [r7, #8]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d109      	bne.n	80110c4 <tcp_recv_null+0x28>
 80110b0:	4b12      	ldr	r3, [pc, #72]	@ (80110fc <tcp_recv_null+0x60>)
 80110b2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80110b6:	4912      	ldr	r1, [pc, #72]	@ (8011100 <tcp_recv_null+0x64>)
 80110b8:	4812      	ldr	r0, [pc, #72]	@ (8011104 <tcp_recv_null+0x68>)
 80110ba:	f007 fc83 	bl	80189c4 <iprintf>
 80110be:	f06f 030f 	mvn.w	r3, #15
 80110c2:	e016      	b.n	80110f2 <tcp_recv_null+0x56>

  if (p != NULL) {
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d009      	beq.n	80110de <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	891b      	ldrh	r3, [r3, #8]
 80110ce:	4619      	mov	r1, r3
 80110d0:	68b8      	ldr	r0, [r7, #8]
 80110d2:	f7ff fb13 	bl	80106fc <tcp_recved>
    pbuf_free(p);
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f7fe fd06 	bl	800fae8 <pbuf_free>
 80110dc:	e008      	b.n	80110f0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80110de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d104      	bne.n	80110f0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80110e6:	68b8      	ldr	r0, [r7, #8]
 80110e8:	f7ff f9b8 	bl	801045c <tcp_close>
 80110ec:	4603      	mov	r3, r0
 80110ee:	e000      	b.n	80110f2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80110f0:	2300      	movs	r3, #0
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3710      	adds	r7, #16
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}
 80110fa:	bf00      	nop
 80110fc:	0801a508 	.word	0x0801a508
 8011100:	0801aa78 	.word	0x0801aa78
 8011104:	0801a54c 	.word	0x0801a54c

08011108 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	4603      	mov	r3, r0
 8011110:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011116:	2b00      	cmp	r3, #0
 8011118:	db01      	blt.n	801111e <tcp_kill_prio+0x16>
 801111a:	79fb      	ldrb	r3, [r7, #7]
 801111c:	e000      	b.n	8011120 <tcp_kill_prio+0x18>
 801111e:	237f      	movs	r3, #127	@ 0x7f
 8011120:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011122:	7afb      	ldrb	r3, [r7, #11]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d034      	beq.n	8011192 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011128:	7afb      	ldrb	r3, [r7, #11]
 801112a:	3b01      	subs	r3, #1
 801112c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801112e:	2300      	movs	r3, #0
 8011130:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011132:	2300      	movs	r3, #0
 8011134:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011136:	4b19      	ldr	r3, [pc, #100]	@ (801119c <tcp_kill_prio+0x94>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	617b      	str	r3, [r7, #20]
 801113c:	e01f      	b.n	801117e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	7d5b      	ldrb	r3, [r3, #21]
 8011142:	7afa      	ldrb	r2, [r7, #11]
 8011144:	429a      	cmp	r2, r3
 8011146:	d80c      	bhi.n	8011162 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011148:	697b      	ldr	r3, [r7, #20]
 801114a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801114c:	7afa      	ldrb	r2, [r7, #11]
 801114e:	429a      	cmp	r2, r3
 8011150:	d112      	bne.n	8011178 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011152:	4b13      	ldr	r3, [pc, #76]	@ (80111a0 <tcp_kill_prio+0x98>)
 8011154:	681a      	ldr	r2, [r3, #0]
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	6a1b      	ldr	r3, [r3, #32]
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	68fa      	ldr	r2, [r7, #12]
 801115e:	429a      	cmp	r2, r3
 8011160:	d80a      	bhi.n	8011178 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011162:	4b0f      	ldr	r3, [pc, #60]	@ (80111a0 <tcp_kill_prio+0x98>)
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	6a1b      	ldr	r3, [r3, #32]
 801116a:	1ad3      	subs	r3, r2, r3
 801116c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011172:	697b      	ldr	r3, [r7, #20]
 8011174:	7d5b      	ldrb	r3, [r3, #21]
 8011176:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011178:	697b      	ldr	r3, [r7, #20]
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	617b      	str	r3, [r7, #20]
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d1dc      	bne.n	801113e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011184:	693b      	ldr	r3, [r7, #16]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d004      	beq.n	8011194 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801118a:	6938      	ldr	r0, [r7, #16]
 801118c:	f7ff fa50 	bl	8010630 <tcp_abort>
 8011190:	e000      	b.n	8011194 <tcp_kill_prio+0x8c>
    return;
 8011192:	bf00      	nop
  }
}
 8011194:	3718      	adds	r7, #24
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
 801119a:	bf00      	nop
 801119c:	24010364 	.word	0x24010364
 80111a0:	24010358 	.word	0x24010358

080111a4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b086      	sub	sp, #24
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	4603      	mov	r3, r0
 80111ac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80111ae:	79fb      	ldrb	r3, [r7, #7]
 80111b0:	2b08      	cmp	r3, #8
 80111b2:	d009      	beq.n	80111c8 <tcp_kill_state+0x24>
 80111b4:	79fb      	ldrb	r3, [r7, #7]
 80111b6:	2b09      	cmp	r3, #9
 80111b8:	d006      	beq.n	80111c8 <tcp_kill_state+0x24>
 80111ba:	4b1a      	ldr	r3, [pc, #104]	@ (8011224 <tcp_kill_state+0x80>)
 80111bc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80111c0:	4919      	ldr	r1, [pc, #100]	@ (8011228 <tcp_kill_state+0x84>)
 80111c2:	481a      	ldr	r0, [pc, #104]	@ (801122c <tcp_kill_state+0x88>)
 80111c4:	f007 fbfe 	bl	80189c4 <iprintf>

  inactivity = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80111cc:	2300      	movs	r3, #0
 80111ce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80111d0:	4b17      	ldr	r3, [pc, #92]	@ (8011230 <tcp_kill_state+0x8c>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	617b      	str	r3, [r7, #20]
 80111d6:	e017      	b.n	8011208 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	7d1b      	ldrb	r3, [r3, #20]
 80111dc:	79fa      	ldrb	r2, [r7, #7]
 80111de:	429a      	cmp	r2, r3
 80111e0:	d10f      	bne.n	8011202 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80111e2:	4b14      	ldr	r3, [pc, #80]	@ (8011234 <tcp_kill_state+0x90>)
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	6a1b      	ldr	r3, [r3, #32]
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	68fa      	ldr	r2, [r7, #12]
 80111ee:	429a      	cmp	r2, r3
 80111f0:	d807      	bhi.n	8011202 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80111f2:	4b10      	ldr	r3, [pc, #64]	@ (8011234 <tcp_kill_state+0x90>)
 80111f4:	681a      	ldr	r2, [r3, #0]
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	6a1b      	ldr	r3, [r3, #32]
 80111fa:	1ad3      	subs	r3, r2, r3
 80111fc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	68db      	ldr	r3, [r3, #12]
 8011206:	617b      	str	r3, [r7, #20]
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d1e4      	bne.n	80111d8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d003      	beq.n	801121c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011214:	2100      	movs	r1, #0
 8011216:	6938      	ldr	r0, [r7, #16]
 8011218:	f7ff f94c 	bl	80104b4 <tcp_abandon>
  }
}
 801121c:	bf00      	nop
 801121e:	3718      	adds	r7, #24
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	0801a508 	.word	0x0801a508
 8011228:	0801aa94 	.word	0x0801aa94
 801122c:	0801a54c 	.word	0x0801a54c
 8011230:	24010364 	.word	0x24010364
 8011234:	24010358 	.word	0x24010358

08011238 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801123e:	2300      	movs	r3, #0
 8011240:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011242:	2300      	movs	r3, #0
 8011244:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011246:	4b12      	ldr	r3, [pc, #72]	@ (8011290 <tcp_kill_timewait+0x58>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	60fb      	str	r3, [r7, #12]
 801124c:	e012      	b.n	8011274 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801124e:	4b11      	ldr	r3, [pc, #68]	@ (8011294 <tcp_kill_timewait+0x5c>)
 8011250:	681a      	ldr	r2, [r3, #0]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	1ad3      	subs	r3, r2, r3
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	429a      	cmp	r2, r3
 801125c:	d807      	bhi.n	801126e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801125e:	4b0d      	ldr	r3, [pc, #52]	@ (8011294 <tcp_kill_timewait+0x5c>)
 8011260:	681a      	ldr	r2, [r3, #0]
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6a1b      	ldr	r3, [r3, #32]
 8011266:	1ad3      	subs	r3, r2, r3
 8011268:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1e9      	bne.n	801124e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011280:	68b8      	ldr	r0, [r7, #8]
 8011282:	f7ff f9d5 	bl	8010630 <tcp_abort>
  }
}
 8011286:	bf00      	nop
 8011288:	3710      	adds	r7, #16
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	24010368 	.word	0x24010368
 8011294:	24010358 	.word	0x24010358

08011298 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801129e:	4b10      	ldr	r3, [pc, #64]	@ (80112e0 <tcp_handle_closepend+0x48>)
 80112a0:	681b      	ldr	r3, [r3, #0]
 80112a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80112a4:	e014      	b.n	80112d0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	68db      	ldr	r3, [r3, #12]
 80112aa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	8b5b      	ldrh	r3, [r3, #26]
 80112b0:	f003 0308 	and.w	r3, r3, #8
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d009      	beq.n	80112cc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	8b5b      	ldrh	r3, [r3, #26]
 80112bc:	f023 0308 	bic.w	r3, r3, #8
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f7ff f85e 	bl	8010388 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d1e7      	bne.n	80112a6 <tcp_handle_closepend+0xe>
  }
}
 80112d6:	bf00      	nop
 80112d8:	bf00      	nop
 80112da:	3708      	adds	r7, #8
 80112dc:	46bd      	mov	sp, r7
 80112de:	bd80      	pop	{r7, pc}
 80112e0:	24010364 	.word	0x24010364

080112e4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b084      	sub	sp, #16
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	4603      	mov	r3, r0
 80112ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80112ee:	2001      	movs	r0, #1
 80112f0:	f7fd fcdc 	bl	800ecac <memp_malloc>
 80112f4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d126      	bne.n	801134a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80112fc:	f7ff ffcc 	bl	8011298 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011300:	f7ff ff9a 	bl	8011238 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011304:	2001      	movs	r0, #1
 8011306:	f7fd fcd1 	bl	800ecac <memp_malloc>
 801130a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d11b      	bne.n	801134a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8011312:	2009      	movs	r0, #9
 8011314:	f7ff ff46 	bl	80111a4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011318:	2001      	movs	r0, #1
 801131a:	f7fd fcc7 	bl	800ecac <memp_malloc>
 801131e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d111      	bne.n	801134a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8011326:	2008      	movs	r0, #8
 8011328:	f7ff ff3c 	bl	80111a4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801132c:	2001      	movs	r0, #1
 801132e:	f7fd fcbd 	bl	800ecac <memp_malloc>
 8011332:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d107      	bne.n	801134a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801133a:	79fb      	ldrb	r3, [r7, #7]
 801133c:	4618      	mov	r0, r3
 801133e:	f7ff fee3 	bl	8011108 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011342:	2001      	movs	r0, #1
 8011344:	f7fd fcb2 	bl	800ecac <memp_malloc>
 8011348:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d03f      	beq.n	80113d0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8011350:	229c      	movs	r2, #156	@ 0x9c
 8011352:	2100      	movs	r1, #0
 8011354:	68f8      	ldr	r0, [r7, #12]
 8011356:	f007 fb57 	bl	8018a08 <memset>
    pcb->prio = prio;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	79fa      	ldrb	r2, [r7, #7]
 801135e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011366:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011370:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	22ff      	movs	r2, #255	@ 0xff
 801137e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8011386:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2206      	movs	r2, #6
 801138c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	2206      	movs	r2, #6
 8011394:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801139c:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2201      	movs	r2, #1
 80113a2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80113a6:	4b0d      	ldr	r3, [pc, #52]	@ (80113dc <tcp_alloc+0xf8>)
 80113a8:	681a      	ldr	r2, [r3, #0]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80113ae:	4b0c      	ldr	r3, [pc, #48]	@ (80113e0 <tcp_alloc+0xfc>)
 80113b0:	781a      	ldrb	r2, [r3, #0]
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 80113bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	4a08      	ldr	r2, [pc, #32]	@ (80113e4 <tcp_alloc+0x100>)
 80113c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	4a07      	ldr	r2, [pc, #28]	@ (80113e8 <tcp_alloc+0x104>)
 80113cc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80113d0:	68fb      	ldr	r3, [r7, #12]
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3710      	adds	r7, #16
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	24010358 	.word	0x24010358
 80113e0:	2401036e 	.word	0x2401036e
 80113e4:	0801109d 	.word	0x0801109d
 80113e8:	006ddd00 	.word	0x006ddd00

080113ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d107      	bne.n	801140a <tcp_pcb_purge+0x1e>
 80113fa:	4b21      	ldr	r3, [pc, #132]	@ (8011480 <tcp_pcb_purge+0x94>)
 80113fc:	f640 0251 	movw	r2, #2129	@ 0x851
 8011400:	4920      	ldr	r1, [pc, #128]	@ (8011484 <tcp_pcb_purge+0x98>)
 8011402:	4821      	ldr	r0, [pc, #132]	@ (8011488 <tcp_pcb_purge+0x9c>)
 8011404:	f007 fade 	bl	80189c4 <iprintf>
 8011408:	e037      	b.n	801147a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	7d1b      	ldrb	r3, [r3, #20]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d033      	beq.n	801147a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011416:	2b0a      	cmp	r3, #10
 8011418:	d02f      	beq.n	801147a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801141e:	2b01      	cmp	r3, #1
 8011420:	d02b      	beq.n	801147a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011426:	2b00      	cmp	r3, #0
 8011428:	d007      	beq.n	801143a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801142e:	4618      	mov	r0, r3
 8011430:	f7fe fb5a 	bl	800fae8 <pbuf_free>
      pcb->refused_data = NULL;
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	2200      	movs	r2, #0
 8011438:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801143e:	2b00      	cmp	r3, #0
 8011440:	d002      	beq.n	8011448 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f000 f986 	bl	8011754 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801144e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff fdc7 	bl	8010fe8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801145e:	4618      	mov	r0, r3
 8011460:	f7ff fdc2 	bl	8010fe8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	2200      	movs	r2, #0
 8011468:	66da      	str	r2, [r3, #108]	@ 0x6c
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2200      	movs	r2, #0
 8011476:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	0801a508 	.word	0x0801a508
 8011484:	0801ab54 	.word	0x0801ab54
 8011488:	0801a54c 	.word	0x0801a54c

0801148c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d106      	bne.n	80114aa <tcp_pcb_remove+0x1e>
 801149c:	4b3e      	ldr	r3, [pc, #248]	@ (8011598 <tcp_pcb_remove+0x10c>)
 801149e:	f640 0283 	movw	r2, #2179	@ 0x883
 80114a2:	493e      	ldr	r1, [pc, #248]	@ (801159c <tcp_pcb_remove+0x110>)
 80114a4:	483e      	ldr	r0, [pc, #248]	@ (80115a0 <tcp_pcb_remove+0x114>)
 80114a6:	f007 fa8d 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d106      	bne.n	80114be <tcp_pcb_remove+0x32>
 80114b0:	4b39      	ldr	r3, [pc, #228]	@ (8011598 <tcp_pcb_remove+0x10c>)
 80114b2:	f640 0284 	movw	r2, #2180	@ 0x884
 80114b6:	493b      	ldr	r1, [pc, #236]	@ (80115a4 <tcp_pcb_remove+0x118>)
 80114b8:	4839      	ldr	r0, [pc, #228]	@ (80115a0 <tcp_pcb_remove+0x114>)
 80114ba:	f007 fa83 	bl	80189c4 <iprintf>

  TCP_RMV(pcblist, pcb);
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	683a      	ldr	r2, [r7, #0]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d105      	bne.n	80114d4 <tcp_pcb_remove+0x48>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	68da      	ldr	r2, [r3, #12]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	601a      	str	r2, [r3, #0]
 80114d2:	e013      	b.n	80114fc <tcp_pcb_remove+0x70>
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	60fb      	str	r3, [r7, #12]
 80114da:	e00c      	b.n	80114f6 <tcp_pcb_remove+0x6a>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	68db      	ldr	r3, [r3, #12]
 80114e0:	683a      	ldr	r2, [r7, #0]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d104      	bne.n	80114f0 <tcp_pcb_remove+0x64>
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	68da      	ldr	r2, [r3, #12]
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	60da      	str	r2, [r3, #12]
 80114ee:	e005      	b.n	80114fc <tcp_pcb_remove+0x70>
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	68db      	ldr	r3, [r3, #12]
 80114f4:	60fb      	str	r3, [r7, #12]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d1ef      	bne.n	80114dc <tcp_pcb_remove+0x50>
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	2200      	movs	r2, #0
 8011500:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011502:	6838      	ldr	r0, [r7, #0]
 8011504:	f7ff ff72 	bl	80113ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	7d1b      	ldrb	r3, [r3, #20]
 801150c:	2b0a      	cmp	r3, #10
 801150e:	d013      	beq.n	8011538 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011514:	2b01      	cmp	r3, #1
 8011516:	d00f      	beq.n	8011538 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011518:	683b      	ldr	r3, [r7, #0]
 801151a:	8b5b      	ldrh	r3, [r3, #26]
 801151c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011520:	2b00      	cmp	r3, #0
 8011522:	d009      	beq.n	8011538 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011524:	683b      	ldr	r3, [r7, #0]
 8011526:	8b5b      	ldrh	r3, [r3, #26]
 8011528:	f043 0302 	orr.w	r3, r3, #2
 801152c:	b29a      	uxth	r2, r3
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011532:	6838      	ldr	r0, [r7, #0]
 8011534:	f002 ff6a 	bl	801440c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	7d1b      	ldrb	r3, [r3, #20]
 801153c:	2b01      	cmp	r3, #1
 801153e:	d020      	beq.n	8011582 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011544:	2b00      	cmp	r3, #0
 8011546:	d006      	beq.n	8011556 <tcp_pcb_remove+0xca>
 8011548:	4b13      	ldr	r3, [pc, #76]	@ (8011598 <tcp_pcb_remove+0x10c>)
 801154a:	f640 0293 	movw	r2, #2195	@ 0x893
 801154e:	4916      	ldr	r1, [pc, #88]	@ (80115a8 <tcp_pcb_remove+0x11c>)
 8011550:	4813      	ldr	r0, [pc, #76]	@ (80115a0 <tcp_pcb_remove+0x114>)
 8011552:	f007 fa37 	bl	80189c4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801155a:	2b00      	cmp	r3, #0
 801155c:	d006      	beq.n	801156c <tcp_pcb_remove+0xe0>
 801155e:	4b0e      	ldr	r3, [pc, #56]	@ (8011598 <tcp_pcb_remove+0x10c>)
 8011560:	f640 0294 	movw	r2, #2196	@ 0x894
 8011564:	4911      	ldr	r1, [pc, #68]	@ (80115ac <tcp_pcb_remove+0x120>)
 8011566:	480e      	ldr	r0, [pc, #56]	@ (80115a0 <tcp_pcb_remove+0x114>)
 8011568:	f007 fa2c 	bl	80189c4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011570:	2b00      	cmp	r3, #0
 8011572:	d006      	beq.n	8011582 <tcp_pcb_remove+0xf6>
 8011574:	4b08      	ldr	r3, [pc, #32]	@ (8011598 <tcp_pcb_remove+0x10c>)
 8011576:	f640 0296 	movw	r2, #2198	@ 0x896
 801157a:	490d      	ldr	r1, [pc, #52]	@ (80115b0 <tcp_pcb_remove+0x124>)
 801157c:	4808      	ldr	r0, [pc, #32]	@ (80115a0 <tcp_pcb_remove+0x114>)
 801157e:	f007 fa21 	bl	80189c4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	2200      	movs	r2, #0
 8011586:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011588:	683b      	ldr	r3, [r7, #0]
 801158a:	2200      	movs	r2, #0
 801158c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801158e:	bf00      	nop
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}
 8011596:	bf00      	nop
 8011598:	0801a508 	.word	0x0801a508
 801159c:	0801ab70 	.word	0x0801ab70
 80115a0:	0801a54c 	.word	0x0801a54c
 80115a4:	0801ab8c 	.word	0x0801ab8c
 80115a8:	0801abac 	.word	0x0801abac
 80115ac:	0801abc4 	.word	0x0801abc4
 80115b0:	0801abe0 	.word	0x0801abe0

080115b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b082      	sub	sp, #8
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d106      	bne.n	80115d0 <tcp_next_iss+0x1c>
 80115c2:	4b0a      	ldr	r3, [pc, #40]	@ (80115ec <tcp_next_iss+0x38>)
 80115c4:	f640 02af 	movw	r2, #2223	@ 0x8af
 80115c8:	4909      	ldr	r1, [pc, #36]	@ (80115f0 <tcp_next_iss+0x3c>)
 80115ca:	480a      	ldr	r0, [pc, #40]	@ (80115f4 <tcp_next_iss+0x40>)
 80115cc:	f007 f9fa 	bl	80189c4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80115d0:	4b09      	ldr	r3, [pc, #36]	@ (80115f8 <tcp_next_iss+0x44>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	4b09      	ldr	r3, [pc, #36]	@ (80115fc <tcp_next_iss+0x48>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	4413      	add	r3, r2
 80115da:	4a07      	ldr	r2, [pc, #28]	@ (80115f8 <tcp_next_iss+0x44>)
 80115dc:	6013      	str	r3, [r2, #0]
  return iss;
 80115de:	4b06      	ldr	r3, [pc, #24]	@ (80115f8 <tcp_next_iss+0x44>)
 80115e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	0801a508 	.word	0x0801a508
 80115f0:	0801abf8 	.word	0x0801abf8
 80115f4:	0801a54c 	.word	0x0801a54c
 80115f8:	240049b8 	.word	0x240049b8
 80115fc:	24010358 	.word	0x24010358

08011600 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011600:	b580      	push	{r7, lr}
 8011602:	b086      	sub	sp, #24
 8011604:	af00      	add	r7, sp, #0
 8011606:	4603      	mov	r3, r0
 8011608:	60b9      	str	r1, [r7, #8]
 801160a:	607a      	str	r2, [r7, #4]
 801160c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d106      	bne.n	8011622 <tcp_eff_send_mss_netif+0x22>
 8011614:	4b14      	ldr	r3, [pc, #80]	@ (8011668 <tcp_eff_send_mss_netif+0x68>)
 8011616:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 801161a:	4914      	ldr	r1, [pc, #80]	@ (801166c <tcp_eff_send_mss_netif+0x6c>)
 801161c:	4814      	ldr	r0, [pc, #80]	@ (8011670 <tcp_eff_send_mss_netif+0x70>)
 801161e:	f007 f9d1 	bl	80189c4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d101      	bne.n	801162c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011628:	89fb      	ldrh	r3, [r7, #14]
 801162a:	e019      	b.n	8011660 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801162c:	68bb      	ldr	r3, [r7, #8]
 801162e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8011630:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8011632:	8afb      	ldrh	r3, [r7, #22]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d012      	beq.n	801165e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011638:	2328      	movs	r3, #40	@ 0x28
 801163a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801163c:	8afa      	ldrh	r2, [r7, #22]
 801163e:	8abb      	ldrh	r3, [r7, #20]
 8011640:	429a      	cmp	r2, r3
 8011642:	d904      	bls.n	801164e <tcp_eff_send_mss_netif+0x4e>
 8011644:	8afa      	ldrh	r2, [r7, #22]
 8011646:	8abb      	ldrh	r3, [r7, #20]
 8011648:	1ad3      	subs	r3, r2, r3
 801164a:	b29b      	uxth	r3, r3
 801164c:	e000      	b.n	8011650 <tcp_eff_send_mss_netif+0x50>
 801164e:	2300      	movs	r3, #0
 8011650:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8011652:	8a7a      	ldrh	r2, [r7, #18]
 8011654:	89fb      	ldrh	r3, [r7, #14]
 8011656:	4293      	cmp	r3, r2
 8011658:	bf28      	it	cs
 801165a:	4613      	movcs	r3, r2
 801165c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801165e:	89fb      	ldrh	r3, [r7, #14]
}
 8011660:	4618      	mov	r0, r3
 8011662:	3718      	adds	r7, #24
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	0801a508 	.word	0x0801a508
 801166c:	0801ac14 	.word	0x0801ac14
 8011670:	0801a54c 	.word	0x0801a54c

08011674 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b084      	sub	sp, #16
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d119      	bne.n	80116bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011688:	4b10      	ldr	r3, [pc, #64]	@ (80116cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801168a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801168e:	4910      	ldr	r1, [pc, #64]	@ (80116d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011690:	4810      	ldr	r0, [pc, #64]	@ (80116d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8011692:	f007 f997 	bl	80189c4 <iprintf>

  while (pcb != NULL) {
 8011696:	e011      	b.n	80116bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d108      	bne.n	80116b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80116aa:	68f8      	ldr	r0, [r7, #12]
 80116ac:	f7fe ffc0 	bl	8010630 <tcp_abort>
      pcb = next;
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	60fb      	str	r3, [r7, #12]
 80116b4:	e002      	b.n	80116bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d1ea      	bne.n	8011698 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80116c2:	bf00      	nop
 80116c4:	bf00      	nop
 80116c6:	3710      	adds	r7, #16
 80116c8:	46bd      	mov	sp, r7
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	0801a508 	.word	0x0801a508
 80116d0:	0801ac3c 	.word	0x0801ac3c
 80116d4:	0801a54c 	.word	0x0801a54c

080116d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b084      	sub	sp, #16
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d02a      	beq.n	801173e <tcp_netif_ip_addr_changed+0x66>
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d026      	beq.n	801173e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80116f0:	4b15      	ldr	r3, [pc, #84]	@ (8011748 <tcp_netif_ip_addr_changed+0x70>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	4619      	mov	r1, r3
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7ff ffbc 	bl	8011674 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80116fc:	4b13      	ldr	r3, [pc, #76]	@ (801174c <tcp_netif_ip_addr_changed+0x74>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4619      	mov	r1, r3
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	f7ff ffb6 	bl	8011674 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d017      	beq.n	801173e <tcp_netif_ip_addr_changed+0x66>
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d013      	beq.n	801173e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011716:	4b0e      	ldr	r3, [pc, #56]	@ (8011750 <tcp_netif_ip_addr_changed+0x78>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	60fb      	str	r3, [r7, #12]
 801171c:	e00c      	b.n	8011738 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	681a      	ldr	r2, [r3, #0]
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	429a      	cmp	r2, r3
 8011728:	d103      	bne.n	8011732 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	681a      	ldr	r2, [r3, #0]
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	68db      	ldr	r3, [r3, #12]
 8011736:	60fb      	str	r3, [r7, #12]
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d1ef      	bne.n	801171e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801173e:	bf00      	nop
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	24010364 	.word	0x24010364
 801174c:	2401035c 	.word	0x2401035c
 8011750:	24010360 	.word	0x24010360

08011754 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b082      	sub	sp, #8
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011760:	2b00      	cmp	r3, #0
 8011762:	d007      	beq.n	8011774 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff fc3d 	bl	8010fe8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	2200      	movs	r2, #0
 8011772:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011774:	bf00      	nop
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801177c:	b590      	push	{r4, r7, lr}
 801177e:	b08d      	sub	sp, #52	@ 0x34
 8011780:	af04      	add	r7, sp, #16
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d105      	bne.n	8011798 <tcp_input+0x1c>
 801178c:	4b9b      	ldr	r3, [pc, #620]	@ (80119fc <tcp_input+0x280>)
 801178e:	2283      	movs	r2, #131	@ 0x83
 8011790:	499b      	ldr	r1, [pc, #620]	@ (8011a00 <tcp_input+0x284>)
 8011792:	489c      	ldr	r0, [pc, #624]	@ (8011a04 <tcp_input+0x288>)
 8011794:	f007 f916 	bl	80189c4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	685b      	ldr	r3, [r3, #4]
 801179c:	4a9a      	ldr	r2, [pc, #616]	@ (8011a08 <tcp_input+0x28c>)
 801179e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	895b      	ldrh	r3, [r3, #10]
 80117a4:	2b13      	cmp	r3, #19
 80117a6:	f240 83d1 	bls.w	8011f4c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80117aa:	4b98      	ldr	r3, [pc, #608]	@ (8011a0c <tcp_input+0x290>)
 80117ac:	695b      	ldr	r3, [r3, #20]
 80117ae:	4a97      	ldr	r2, [pc, #604]	@ (8011a0c <tcp_input+0x290>)
 80117b0:	6812      	ldr	r2, [r2, #0]
 80117b2:	4611      	mov	r1, r2
 80117b4:	4618      	mov	r0, r3
 80117b6:	f005 ff99 	bl	80176ec <ip4_addr_isbroadcast_u32>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	f040 83c7 	bne.w	8011f50 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80117c2:	4b92      	ldr	r3, [pc, #584]	@ (8011a0c <tcp_input+0x290>)
 80117c4:	695b      	ldr	r3, [r3, #20]
 80117c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80117ca:	2be0      	cmp	r3, #224	@ 0xe0
 80117cc:	f000 83c0 	beq.w	8011f50 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80117d0:	4b8d      	ldr	r3, [pc, #564]	@ (8011a08 <tcp_input+0x28c>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	899b      	ldrh	r3, [r3, #12]
 80117d6:	b29b      	uxth	r3, r3
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fc fcc7 	bl	800e16c <lwip_htons>
 80117de:	4603      	mov	r3, r0
 80117e0:	0b1b      	lsrs	r3, r3, #12
 80117e2:	b29b      	uxth	r3, r3
 80117e4:	b2db      	uxtb	r3, r3
 80117e6:	009b      	lsls	r3, r3, #2
 80117e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80117ea:	7cbb      	ldrb	r3, [r7, #18]
 80117ec:	2b13      	cmp	r3, #19
 80117ee:	f240 83b1 	bls.w	8011f54 <tcp_input+0x7d8>
 80117f2:	7cbb      	ldrb	r3, [r7, #18]
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	891b      	ldrh	r3, [r3, #8]
 80117fa:	429a      	cmp	r2, r3
 80117fc:	f200 83aa 	bhi.w	8011f54 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011800:	7cbb      	ldrb	r3, [r7, #18]
 8011802:	b29b      	uxth	r3, r3
 8011804:	3b14      	subs	r3, #20
 8011806:	b29a      	uxth	r2, r3
 8011808:	4b81      	ldr	r3, [pc, #516]	@ (8011a10 <tcp_input+0x294>)
 801180a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801180c:	4b81      	ldr	r3, [pc, #516]	@ (8011a14 <tcp_input+0x298>)
 801180e:	2200      	movs	r2, #0
 8011810:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	895a      	ldrh	r2, [r3, #10]
 8011816:	7cbb      	ldrb	r3, [r7, #18]
 8011818:	b29b      	uxth	r3, r3
 801181a:	429a      	cmp	r2, r3
 801181c:	d309      	bcc.n	8011832 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801181e:	4b7c      	ldr	r3, [pc, #496]	@ (8011a10 <tcp_input+0x294>)
 8011820:	881a      	ldrh	r2, [r3, #0]
 8011822:	4b7d      	ldr	r3, [pc, #500]	@ (8011a18 <tcp_input+0x29c>)
 8011824:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011826:	7cbb      	ldrb	r3, [r7, #18]
 8011828:	4619      	mov	r1, r3
 801182a:	6878      	ldr	r0, [r7, #4]
 801182c:	f7fe f8d6 	bl	800f9dc <pbuf_remove_header>
 8011830:	e04e      	b.n	80118d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d105      	bne.n	8011846 <tcp_input+0xca>
 801183a:	4b70      	ldr	r3, [pc, #448]	@ (80119fc <tcp_input+0x280>)
 801183c:	22c2      	movs	r2, #194	@ 0xc2
 801183e:	4977      	ldr	r1, [pc, #476]	@ (8011a1c <tcp_input+0x2a0>)
 8011840:	4870      	ldr	r0, [pc, #448]	@ (8011a04 <tcp_input+0x288>)
 8011842:	f007 f8bf 	bl	80189c4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011846:	2114      	movs	r1, #20
 8011848:	6878      	ldr	r0, [r7, #4]
 801184a:	f7fe f8c7 	bl	800f9dc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	895a      	ldrh	r2, [r3, #10]
 8011852:	4b71      	ldr	r3, [pc, #452]	@ (8011a18 <tcp_input+0x29c>)
 8011854:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011856:	4b6e      	ldr	r3, [pc, #440]	@ (8011a10 <tcp_input+0x294>)
 8011858:	881a      	ldrh	r2, [r3, #0]
 801185a:	4b6f      	ldr	r3, [pc, #444]	@ (8011a18 <tcp_input+0x29c>)
 801185c:	881b      	ldrh	r3, [r3, #0]
 801185e:	1ad3      	subs	r3, r2, r3
 8011860:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011862:	4b6d      	ldr	r3, [pc, #436]	@ (8011a18 <tcp_input+0x29c>)
 8011864:	881b      	ldrh	r3, [r3, #0]
 8011866:	4619      	mov	r1, r3
 8011868:	6878      	ldr	r0, [r7, #4]
 801186a:	f7fe f8b7 	bl	800f9dc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	895b      	ldrh	r3, [r3, #10]
 8011874:	8a3a      	ldrh	r2, [r7, #16]
 8011876:	429a      	cmp	r2, r3
 8011878:	f200 836e 	bhi.w	8011f58 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	4a64      	ldr	r2, [pc, #400]	@ (8011a14 <tcp_input+0x298>)
 8011884:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	8a3a      	ldrh	r2, [r7, #16]
 801188c:	4611      	mov	r1, r2
 801188e:	4618      	mov	r0, r3
 8011890:	f7fe f8a4 	bl	800f9dc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	891a      	ldrh	r2, [r3, #8]
 8011898:	8a3b      	ldrh	r3, [r7, #16]
 801189a:	1ad3      	subs	r3, r2, r3
 801189c:	b29a      	uxth	r2, r3
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	895b      	ldrh	r3, [r3, #10]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d005      	beq.n	80118b6 <tcp_input+0x13a>
 80118aa:	4b54      	ldr	r3, [pc, #336]	@ (80119fc <tcp_input+0x280>)
 80118ac:	22df      	movs	r2, #223	@ 0xdf
 80118ae:	495c      	ldr	r1, [pc, #368]	@ (8011a20 <tcp_input+0x2a4>)
 80118b0:	4854      	ldr	r0, [pc, #336]	@ (8011a04 <tcp_input+0x288>)
 80118b2:	f007 f887 	bl	80189c4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	891a      	ldrh	r2, [r3, #8]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	891b      	ldrh	r3, [r3, #8]
 80118c0:	429a      	cmp	r2, r3
 80118c2:	d005      	beq.n	80118d0 <tcp_input+0x154>
 80118c4:	4b4d      	ldr	r3, [pc, #308]	@ (80119fc <tcp_input+0x280>)
 80118c6:	22e0      	movs	r2, #224	@ 0xe0
 80118c8:	4956      	ldr	r1, [pc, #344]	@ (8011a24 <tcp_input+0x2a8>)
 80118ca:	484e      	ldr	r0, [pc, #312]	@ (8011a04 <tcp_input+0x288>)
 80118cc:	f007 f87a 	bl	80189c4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80118d0:	4b4d      	ldr	r3, [pc, #308]	@ (8011a08 <tcp_input+0x28c>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	881b      	ldrh	r3, [r3, #0]
 80118d6:	b29b      	uxth	r3, r3
 80118d8:	4a4b      	ldr	r2, [pc, #300]	@ (8011a08 <tcp_input+0x28c>)
 80118da:	6814      	ldr	r4, [r2, #0]
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fc fc45 	bl	800e16c <lwip_htons>
 80118e2:	4603      	mov	r3, r0
 80118e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80118e6:	4b48      	ldr	r3, [pc, #288]	@ (8011a08 <tcp_input+0x28c>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	885b      	ldrh	r3, [r3, #2]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	4a46      	ldr	r2, [pc, #280]	@ (8011a08 <tcp_input+0x28c>)
 80118f0:	6814      	ldr	r4, [r2, #0]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fc fc3a 	bl	800e16c <lwip_htons>
 80118f8:	4603      	mov	r3, r0
 80118fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80118fc:	4b42      	ldr	r3, [pc, #264]	@ (8011a08 <tcp_input+0x28c>)
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	4a41      	ldr	r2, [pc, #260]	@ (8011a08 <tcp_input+0x28c>)
 8011904:	6814      	ldr	r4, [r2, #0]
 8011906:	4618      	mov	r0, r3
 8011908:	f7fc fc45 	bl	800e196 <lwip_htonl>
 801190c:	4603      	mov	r3, r0
 801190e:	6063      	str	r3, [r4, #4]
 8011910:	6863      	ldr	r3, [r4, #4]
 8011912:	4a45      	ldr	r2, [pc, #276]	@ (8011a28 <tcp_input+0x2ac>)
 8011914:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011916:	4b3c      	ldr	r3, [pc, #240]	@ (8011a08 <tcp_input+0x28c>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	689b      	ldr	r3, [r3, #8]
 801191c:	4a3a      	ldr	r2, [pc, #232]	@ (8011a08 <tcp_input+0x28c>)
 801191e:	6814      	ldr	r4, [r2, #0]
 8011920:	4618      	mov	r0, r3
 8011922:	f7fc fc38 	bl	800e196 <lwip_htonl>
 8011926:	4603      	mov	r3, r0
 8011928:	60a3      	str	r3, [r4, #8]
 801192a:	68a3      	ldr	r3, [r4, #8]
 801192c:	4a3f      	ldr	r2, [pc, #252]	@ (8011a2c <tcp_input+0x2b0>)
 801192e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011930:	4b35      	ldr	r3, [pc, #212]	@ (8011a08 <tcp_input+0x28c>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	89db      	ldrh	r3, [r3, #14]
 8011936:	b29b      	uxth	r3, r3
 8011938:	4a33      	ldr	r2, [pc, #204]	@ (8011a08 <tcp_input+0x28c>)
 801193a:	6814      	ldr	r4, [r2, #0]
 801193c:	4618      	mov	r0, r3
 801193e:	f7fc fc15 	bl	800e16c <lwip_htons>
 8011942:	4603      	mov	r3, r0
 8011944:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011946:	4b30      	ldr	r3, [pc, #192]	@ (8011a08 <tcp_input+0x28c>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	899b      	ldrh	r3, [r3, #12]
 801194c:	b29b      	uxth	r3, r3
 801194e:	4618      	mov	r0, r3
 8011950:	f7fc fc0c 	bl	800e16c <lwip_htons>
 8011954:	4603      	mov	r3, r0
 8011956:	b2db      	uxtb	r3, r3
 8011958:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801195c:	b2da      	uxtb	r2, r3
 801195e:	4b34      	ldr	r3, [pc, #208]	@ (8011a30 <tcp_input+0x2b4>)
 8011960:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	891a      	ldrh	r2, [r3, #8]
 8011966:	4b33      	ldr	r3, [pc, #204]	@ (8011a34 <tcp_input+0x2b8>)
 8011968:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801196a:	4b31      	ldr	r3, [pc, #196]	@ (8011a30 <tcp_input+0x2b4>)
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	f003 0303 	and.w	r3, r3, #3
 8011972:	2b00      	cmp	r3, #0
 8011974:	d00c      	beq.n	8011990 <tcp_input+0x214>
    tcplen++;
 8011976:	4b2f      	ldr	r3, [pc, #188]	@ (8011a34 <tcp_input+0x2b8>)
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	3301      	adds	r3, #1
 801197c:	b29a      	uxth	r2, r3
 801197e:	4b2d      	ldr	r3, [pc, #180]	@ (8011a34 <tcp_input+0x2b8>)
 8011980:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	891a      	ldrh	r2, [r3, #8]
 8011986:	4b2b      	ldr	r3, [pc, #172]	@ (8011a34 <tcp_input+0x2b8>)
 8011988:	881b      	ldrh	r3, [r3, #0]
 801198a:	429a      	cmp	r2, r3
 801198c:	f200 82e6 	bhi.w	8011f5c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011990:	2300      	movs	r3, #0
 8011992:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011994:	4b28      	ldr	r3, [pc, #160]	@ (8011a38 <tcp_input+0x2bc>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	61fb      	str	r3, [r7, #28]
 801199a:	e09d      	b.n	8011ad8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	7d1b      	ldrb	r3, [r3, #20]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d105      	bne.n	80119b0 <tcp_input+0x234>
 80119a4:	4b15      	ldr	r3, [pc, #84]	@ (80119fc <tcp_input+0x280>)
 80119a6:	22fb      	movs	r2, #251	@ 0xfb
 80119a8:	4924      	ldr	r1, [pc, #144]	@ (8011a3c <tcp_input+0x2c0>)
 80119aa:	4816      	ldr	r0, [pc, #88]	@ (8011a04 <tcp_input+0x288>)
 80119ac:	f007 f80a 	bl	80189c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80119b0:	69fb      	ldr	r3, [r7, #28]
 80119b2:	7d1b      	ldrb	r3, [r3, #20]
 80119b4:	2b0a      	cmp	r3, #10
 80119b6:	d105      	bne.n	80119c4 <tcp_input+0x248>
 80119b8:	4b10      	ldr	r3, [pc, #64]	@ (80119fc <tcp_input+0x280>)
 80119ba:	22fc      	movs	r2, #252	@ 0xfc
 80119bc:	4920      	ldr	r1, [pc, #128]	@ (8011a40 <tcp_input+0x2c4>)
 80119be:	4811      	ldr	r0, [pc, #68]	@ (8011a04 <tcp_input+0x288>)
 80119c0:	f007 f800 	bl	80189c4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80119c4:	69fb      	ldr	r3, [r7, #28]
 80119c6:	7d1b      	ldrb	r3, [r3, #20]
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d105      	bne.n	80119d8 <tcp_input+0x25c>
 80119cc:	4b0b      	ldr	r3, [pc, #44]	@ (80119fc <tcp_input+0x280>)
 80119ce:	22fd      	movs	r2, #253	@ 0xfd
 80119d0:	491c      	ldr	r1, [pc, #112]	@ (8011a44 <tcp_input+0x2c8>)
 80119d2:	480c      	ldr	r0, [pc, #48]	@ (8011a04 <tcp_input+0x288>)
 80119d4:	f006 fff6 	bl	80189c4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	7a1b      	ldrb	r3, [r3, #8]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d033      	beq.n	8011a48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80119e0:	69fb      	ldr	r3, [r7, #28]
 80119e2:	7a1a      	ldrb	r2, [r3, #8]
 80119e4:	4b09      	ldr	r3, [pc, #36]	@ (8011a0c <tcp_input+0x290>)
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80119ec:	3301      	adds	r3, #1
 80119ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d029      	beq.n	8011a48 <tcp_input+0x2cc>
      prev = pcb;
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	61bb      	str	r3, [r7, #24]
      continue;
 80119f8:	e06b      	b.n	8011ad2 <tcp_input+0x356>
 80119fa:	bf00      	nop
 80119fc:	0801ac70 	.word	0x0801ac70
 8011a00:	0801aca4 	.word	0x0801aca4
 8011a04:	0801acbc 	.word	0x0801acbc
 8011a08:	24010380 	.word	0x24010380
 8011a0c:	24009898 	.word	0x24009898
 8011a10:	24010384 	.word	0x24010384
 8011a14:	24010388 	.word	0x24010388
 8011a18:	24010386 	.word	0x24010386
 8011a1c:	0801ace4 	.word	0x0801ace4
 8011a20:	0801acf4 	.word	0x0801acf4
 8011a24:	0801ad00 	.word	0x0801ad00
 8011a28:	24010390 	.word	0x24010390
 8011a2c:	24010394 	.word	0x24010394
 8011a30:	2401039c 	.word	0x2401039c
 8011a34:	2401039a 	.word	0x2401039a
 8011a38:	24010364 	.word	0x24010364
 8011a3c:	0801ad20 	.word	0x0801ad20
 8011a40:	0801ad48 	.word	0x0801ad48
 8011a44:	0801ad74 	.word	0x0801ad74
    }

    if (pcb->remote_port == tcphdr->src &&
 8011a48:	69fb      	ldr	r3, [r7, #28]
 8011a4a:	8b1a      	ldrh	r2, [r3, #24]
 8011a4c:	4b72      	ldr	r3, [pc, #456]	@ (8011c18 <tcp_input+0x49c>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	881b      	ldrh	r3, [r3, #0]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d13a      	bne.n	8011ace <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	8ada      	ldrh	r2, [r3, #22]
 8011a5c:	4b6e      	ldr	r3, [pc, #440]	@ (8011c18 <tcp_input+0x49c>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	885b      	ldrh	r3, [r3, #2]
 8011a62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d132      	bne.n	8011ace <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a68:	69fb      	ldr	r3, [r7, #28]
 8011a6a:	685a      	ldr	r2, [r3, #4]
 8011a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8011c1c <tcp_input+0x4a0>)
 8011a6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011a70:	429a      	cmp	r2, r3
 8011a72:	d12c      	bne.n	8011ace <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011a74:	69fb      	ldr	r3, [r7, #28]
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	4b68      	ldr	r3, [pc, #416]	@ (8011c1c <tcp_input+0x4a0>)
 8011a7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d126      	bne.n	8011ace <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011a80:	69fb      	ldr	r3, [r7, #28]
 8011a82:	68db      	ldr	r3, [r3, #12]
 8011a84:	69fa      	ldr	r2, [r7, #28]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d106      	bne.n	8011a98 <tcp_input+0x31c>
 8011a8a:	4b65      	ldr	r3, [pc, #404]	@ (8011c20 <tcp_input+0x4a4>)
 8011a8c:	f240 120d 	movw	r2, #269	@ 0x10d
 8011a90:	4964      	ldr	r1, [pc, #400]	@ (8011c24 <tcp_input+0x4a8>)
 8011a92:	4865      	ldr	r0, [pc, #404]	@ (8011c28 <tcp_input+0x4ac>)
 8011a94:	f006 ff96 	bl	80189c4 <iprintf>
      if (prev != NULL) {
 8011a98:	69bb      	ldr	r3, [r7, #24]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d00a      	beq.n	8011ab4 <tcp_input+0x338>
        prev->next = pcb->next;
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	68da      	ldr	r2, [r3, #12]
 8011aa2:	69bb      	ldr	r3, [r7, #24]
 8011aa4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011aa6:	4b61      	ldr	r3, [pc, #388]	@ (8011c2c <tcp_input+0x4b0>)
 8011aa8:	681a      	ldr	r2, [r3, #0]
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011aae:	4a5f      	ldr	r2, [pc, #380]	@ (8011c2c <tcp_input+0x4b0>)
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011ab4:	69fb      	ldr	r3, [r7, #28]
 8011ab6:	68db      	ldr	r3, [r3, #12]
 8011ab8:	69fa      	ldr	r2, [r7, #28]
 8011aba:	429a      	cmp	r2, r3
 8011abc:	d111      	bne.n	8011ae2 <tcp_input+0x366>
 8011abe:	4b58      	ldr	r3, [pc, #352]	@ (8011c20 <tcp_input+0x4a4>)
 8011ac0:	f240 1215 	movw	r2, #277	@ 0x115
 8011ac4:	495a      	ldr	r1, [pc, #360]	@ (8011c30 <tcp_input+0x4b4>)
 8011ac6:	4858      	ldr	r0, [pc, #352]	@ (8011c28 <tcp_input+0x4ac>)
 8011ac8:	f006 ff7c 	bl	80189c4 <iprintf>
      break;
 8011acc:	e009      	b.n	8011ae2 <tcp_input+0x366>
    }
    prev = pcb;
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ad2:	69fb      	ldr	r3, [r7, #28]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	61fb      	str	r3, [r7, #28]
 8011ad8:	69fb      	ldr	r3, [r7, #28]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	f47f af5e 	bne.w	801199c <tcp_input+0x220>
 8011ae0:	e000      	b.n	8011ae4 <tcp_input+0x368>
      break;
 8011ae2:	bf00      	nop
  }

  if (pcb == NULL) {
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f040 80aa 	bne.w	8011c40 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011aec:	4b51      	ldr	r3, [pc, #324]	@ (8011c34 <tcp_input+0x4b8>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	61fb      	str	r3, [r7, #28]
 8011af2:	e03f      	b.n	8011b74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	7d1b      	ldrb	r3, [r3, #20]
 8011af8:	2b0a      	cmp	r3, #10
 8011afa:	d006      	beq.n	8011b0a <tcp_input+0x38e>
 8011afc:	4b48      	ldr	r3, [pc, #288]	@ (8011c20 <tcp_input+0x4a4>)
 8011afe:	f240 121f 	movw	r2, #287	@ 0x11f
 8011b02:	494d      	ldr	r1, [pc, #308]	@ (8011c38 <tcp_input+0x4bc>)
 8011b04:	4848      	ldr	r0, [pc, #288]	@ (8011c28 <tcp_input+0x4ac>)
 8011b06:	f006 ff5d 	bl	80189c4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	7a1b      	ldrb	r3, [r3, #8]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d009      	beq.n	8011b26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	7a1a      	ldrb	r2, [r3, #8]
 8011b16:	4b41      	ldr	r3, [pc, #260]	@ (8011c1c <tcp_input+0x4a0>)
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011b1e:	3301      	adds	r3, #1
 8011b20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d122      	bne.n	8011b6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	8b1a      	ldrh	r2, [r3, #24]
 8011b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8011c18 <tcp_input+0x49c>)
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	b29b      	uxth	r3, r3
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d11b      	bne.n	8011b6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	8ada      	ldrh	r2, [r3, #22]
 8011b3a:	4b37      	ldr	r3, [pc, #220]	@ (8011c18 <tcp_input+0x49c>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	885b      	ldrh	r3, [r3, #2]
 8011b40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d113      	bne.n	8011b6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b46:	69fb      	ldr	r3, [r7, #28]
 8011b48:	685a      	ldr	r2, [r3, #4]
 8011b4a:	4b34      	ldr	r3, [pc, #208]	@ (8011c1c <tcp_input+0x4a0>)
 8011b4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011b4e:	429a      	cmp	r2, r3
 8011b50:	d10d      	bne.n	8011b6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011b52:	69fb      	ldr	r3, [r7, #28]
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	4b31      	ldr	r3, [pc, #196]	@ (8011c1c <tcp_input+0x4a0>)
 8011b58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011b5a:	429a      	cmp	r2, r3
 8011b5c:	d107      	bne.n	8011b6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011b5e:	69f8      	ldr	r0, [r7, #28]
 8011b60:	f000 fb56 	bl	8012210 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7fd ffbf 	bl	800fae8 <pbuf_free>
        return;
 8011b6a:	e1fd      	b.n	8011f68 <tcp_input+0x7ec>
        continue;
 8011b6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	68db      	ldr	r3, [r3, #12]
 8011b72:	61fb      	str	r3, [r7, #28]
 8011b74:	69fb      	ldr	r3, [r7, #28]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1bc      	bne.n	8011af4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8011c3c <tcp_input+0x4c0>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	617b      	str	r3, [r7, #20]
 8011b84:	e02a      	b.n	8011bdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	7a1b      	ldrb	r3, [r3, #8]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00c      	beq.n	8011ba8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	7a1a      	ldrb	r2, [r3, #8]
 8011b92:	4b22      	ldr	r3, [pc, #136]	@ (8011c1c <tcp_input+0x4a0>)
 8011b94:	685b      	ldr	r3, [r3, #4]
 8011b96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8011b9a:	3301      	adds	r3, #1
 8011b9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d002      	beq.n	8011ba8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	61bb      	str	r3, [r7, #24]
        continue;
 8011ba6:	e016      	b.n	8011bd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	8ada      	ldrh	r2, [r3, #22]
 8011bac:	4b1a      	ldr	r3, [pc, #104]	@ (8011c18 <tcp_input+0x49c>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	885b      	ldrh	r3, [r3, #2]
 8011bb2:	b29b      	uxth	r3, r3
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d10c      	bne.n	8011bd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011bb8:	697b      	ldr	r3, [r7, #20]
 8011bba:	681a      	ldr	r2, [r3, #0]
 8011bbc:	4b17      	ldr	r3, [pc, #92]	@ (8011c1c <tcp_input+0x4a0>)
 8011bbe:	695b      	ldr	r3, [r3, #20]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d00f      	beq.n	8011be4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d00d      	beq.n	8011be6 <tcp_input+0x46a>
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d009      	beq.n	8011be6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011bd6:	697b      	ldr	r3, [r7, #20]
 8011bd8:	68db      	ldr	r3, [r3, #12]
 8011bda:	617b      	str	r3, [r7, #20]
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d1d1      	bne.n	8011b86 <tcp_input+0x40a>
 8011be2:	e000      	b.n	8011be6 <tcp_input+0x46a>
            break;
 8011be4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011be6:	697b      	ldr	r3, [r7, #20]
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d029      	beq.n	8011c40 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011bec:	69bb      	ldr	r3, [r7, #24]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00a      	beq.n	8011c08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011bf2:	697b      	ldr	r3, [r7, #20]
 8011bf4:	68da      	ldr	r2, [r3, #12]
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011bfa:	4b10      	ldr	r3, [pc, #64]	@ (8011c3c <tcp_input+0x4c0>)
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011c02:	4a0e      	ldr	r2, [pc, #56]	@ (8011c3c <tcp_input+0x4c0>)
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011c08:	6978      	ldr	r0, [r7, #20]
 8011c0a:	f000 fa03 	bl	8012014 <tcp_listen_input>
      }
      pbuf_free(p);
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7fd ff6a 	bl	800fae8 <pbuf_free>
      return;
 8011c14:	e1a8      	b.n	8011f68 <tcp_input+0x7ec>
 8011c16:	bf00      	nop
 8011c18:	24010380 	.word	0x24010380
 8011c1c:	24009898 	.word	0x24009898
 8011c20:	0801ac70 	.word	0x0801ac70
 8011c24:	0801ad9c 	.word	0x0801ad9c
 8011c28:	0801acbc 	.word	0x0801acbc
 8011c2c:	24010364 	.word	0x24010364
 8011c30:	0801adc8 	.word	0x0801adc8
 8011c34:	24010368 	.word	0x24010368
 8011c38:	0801adf4 	.word	0x0801adf4
 8011c3c:	24010360 	.word	0x24010360
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011c40:	69fb      	ldr	r3, [r7, #28]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	f000 8158 	beq.w	8011ef8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011c48:	4b95      	ldr	r3, [pc, #596]	@ (8011ea0 <tcp_input+0x724>)
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	891a      	ldrh	r2, [r3, #8]
 8011c52:	4b93      	ldr	r3, [pc, #588]	@ (8011ea0 <tcp_input+0x724>)
 8011c54:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011c56:	4a92      	ldr	r2, [pc, #584]	@ (8011ea0 <tcp_input+0x724>)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011c5c:	4b91      	ldr	r3, [pc, #580]	@ (8011ea4 <tcp_input+0x728>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	4a8f      	ldr	r2, [pc, #572]	@ (8011ea0 <tcp_input+0x724>)
 8011c62:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011c64:	4b90      	ldr	r3, [pc, #576]	@ (8011ea8 <tcp_input+0x72c>)
 8011c66:	2200      	movs	r2, #0
 8011c68:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011c6a:	4b90      	ldr	r3, [pc, #576]	@ (8011eac <tcp_input+0x730>)
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011c70:	4b8f      	ldr	r3, [pc, #572]	@ (8011eb0 <tcp_input+0x734>)
 8011c72:	2200      	movs	r2, #0
 8011c74:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011c76:	4b8f      	ldr	r3, [pc, #572]	@ (8011eb4 <tcp_input+0x738>)
 8011c78:	781b      	ldrb	r3, [r3, #0]
 8011c7a:	f003 0308 	and.w	r3, r3, #8
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d006      	beq.n	8011c90 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	7b5b      	ldrb	r3, [r3, #13]
 8011c86:	f043 0301 	orr.w	r3, r3, #1
 8011c8a:	b2da      	uxtb	r2, r3
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011c90:	69fb      	ldr	r3, [r7, #28]
 8011c92:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d017      	beq.n	8011cc8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011c98:	69f8      	ldr	r0, [r7, #28]
 8011c9a:	f7ff f927 	bl	8010eec <tcp_process_refused_data>
 8011c9e:	4603      	mov	r3, r0
 8011ca0:	f113 0f0d 	cmn.w	r3, #13
 8011ca4:	d007      	beq.n	8011cb6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011ca6:	69fb      	ldr	r3, [r7, #28]
 8011ca8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00c      	beq.n	8011cc8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011cae:	4b82      	ldr	r3, [pc, #520]	@ (8011eb8 <tcp_input+0x73c>)
 8011cb0:	881b      	ldrh	r3, [r3, #0]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d008      	beq.n	8011cc8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	f040 80e4 	bne.w	8011e88 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011cc0:	69f8      	ldr	r0, [r7, #28]
 8011cc2:	f003 f9a9 	bl	8015018 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011cc6:	e0df      	b.n	8011e88 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8011cc8:	4a7c      	ldr	r2, [pc, #496]	@ (8011ebc <tcp_input+0x740>)
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011cce:	69f8      	ldr	r0, [r7, #28]
 8011cd0:	f000 fb18 	bl	8012304 <tcp_process>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011cd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011cdc:	f113 0f0d 	cmn.w	r3, #13
 8011ce0:	f000 80d4 	beq.w	8011e8c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8011ce4:	4b71      	ldr	r3, [pc, #452]	@ (8011eac <tcp_input+0x730>)
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	f003 0308 	and.w	r3, r3, #8
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d015      	beq.n	8011d1c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d008      	beq.n	8011d0c <tcp_input+0x590>
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d00:	69fa      	ldr	r2, [r7, #28]
 8011d02:	6912      	ldr	r2, [r2, #16]
 8011d04:	f06f 010d 	mvn.w	r1, #13
 8011d08:	4610      	mov	r0, r2
 8011d0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011d0c:	69f9      	ldr	r1, [r7, #28]
 8011d0e:	486c      	ldr	r0, [pc, #432]	@ (8011ec0 <tcp_input+0x744>)
 8011d10:	f7ff fbbc 	bl	801148c <tcp_pcb_remove>
        tcp_free(pcb);
 8011d14:	69f8      	ldr	r0, [r7, #28]
 8011d16:	f7fe f9a3 	bl	8010060 <tcp_free>
 8011d1a:	e0da      	b.n	8011ed2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011d20:	4b63      	ldr	r3, [pc, #396]	@ (8011eb0 <tcp_input+0x734>)
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d01d      	beq.n	8011d64 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011d28:	4b61      	ldr	r3, [pc, #388]	@ (8011eb0 <tcp_input+0x734>)
 8011d2a:	881b      	ldrh	r3, [r3, #0]
 8011d2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d00a      	beq.n	8011d4e <tcp_input+0x5d2>
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011d3e:	69fa      	ldr	r2, [r7, #28]
 8011d40:	6910      	ldr	r0, [r2, #16]
 8011d42:	89fa      	ldrh	r2, [r7, #14]
 8011d44:	69f9      	ldr	r1, [r7, #28]
 8011d46:	4798      	blx	r3
 8011d48:	4603      	mov	r3, r0
 8011d4a:	74fb      	strb	r3, [r7, #19]
 8011d4c:	e001      	b.n	8011d52 <tcp_input+0x5d6>
 8011d4e:	2300      	movs	r3, #0
 8011d50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011d52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011d56:	f113 0f0d 	cmn.w	r3, #13
 8011d5a:	f000 8099 	beq.w	8011e90 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011d5e:	4b54      	ldr	r3, [pc, #336]	@ (8011eb0 <tcp_input+0x734>)
 8011d60:	2200      	movs	r2, #0
 8011d62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011d64:	69f8      	ldr	r0, [r7, #28]
 8011d66:	f000 f915 	bl	8011f94 <tcp_input_delayed_close>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f040 8091 	bne.w	8011e94 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011d72:	4b4d      	ldr	r3, [pc, #308]	@ (8011ea8 <tcp_input+0x72c>)
 8011d74:	681b      	ldr	r3, [r3, #0]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d041      	beq.n	8011dfe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d006      	beq.n	8011d90 <tcp_input+0x614>
 8011d82:	4b50      	ldr	r3, [pc, #320]	@ (8011ec4 <tcp_input+0x748>)
 8011d84:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011d88:	494f      	ldr	r1, [pc, #316]	@ (8011ec8 <tcp_input+0x74c>)
 8011d8a:	4850      	ldr	r0, [pc, #320]	@ (8011ecc <tcp_input+0x750>)
 8011d8c:	f006 fe1a 	bl	80189c4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	8b5b      	ldrh	r3, [r3, #26]
 8011d94:	f003 0310 	and.w	r3, r3, #16
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d008      	beq.n	8011dae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011d9c:	4b42      	ldr	r3, [pc, #264]	@ (8011ea8 <tcp_input+0x72c>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	4618      	mov	r0, r3
 8011da2:	f7fd fea1 	bl	800fae8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011da6:	69f8      	ldr	r0, [r7, #28]
 8011da8:	f7fe fc42 	bl	8010630 <tcp_abort>
            goto aborted;
 8011dac:	e091      	b.n	8011ed2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d00c      	beq.n	8011dd2 <tcp_input+0x656>
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011dbe:	69fb      	ldr	r3, [r7, #28]
 8011dc0:	6918      	ldr	r0, [r3, #16]
 8011dc2:	4b39      	ldr	r3, [pc, #228]	@ (8011ea8 <tcp_input+0x72c>)
 8011dc4:	681a      	ldr	r2, [r3, #0]
 8011dc6:	2300      	movs	r3, #0
 8011dc8:	69f9      	ldr	r1, [r7, #28]
 8011dca:	47a0      	blx	r4
 8011dcc:	4603      	mov	r3, r0
 8011dce:	74fb      	strb	r3, [r7, #19]
 8011dd0:	e008      	b.n	8011de4 <tcp_input+0x668>
 8011dd2:	4b35      	ldr	r3, [pc, #212]	@ (8011ea8 <tcp_input+0x72c>)
 8011dd4:	681a      	ldr	r2, [r3, #0]
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	69f9      	ldr	r1, [r7, #28]
 8011dda:	2000      	movs	r0, #0
 8011ddc:	f7ff f95e 	bl	801109c <tcp_recv_null>
 8011de0:	4603      	mov	r3, r0
 8011de2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011de4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011de8:	f113 0f0d 	cmn.w	r3, #13
 8011dec:	d054      	beq.n	8011e98 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011dee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d003      	beq.n	8011dfe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011df6:	4b2c      	ldr	r3, [pc, #176]	@ (8011ea8 <tcp_input+0x72c>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	69fb      	ldr	r3, [r7, #28]
 8011dfc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8011eac <tcp_input+0x730>)
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	f003 0320 	and.w	r3, r3, #32
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d031      	beq.n	8011e6e <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d009      	beq.n	8011e26 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011e12:	69fb      	ldr	r3, [r7, #28]
 8011e14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e16:	7b5a      	ldrb	r2, [r3, #13]
 8011e18:	69fb      	ldr	r3, [r7, #28]
 8011e1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011e1c:	f042 0220 	orr.w	r2, r2, #32
 8011e20:	b2d2      	uxtb	r2, r2
 8011e22:	735a      	strb	r2, [r3, #13]
 8011e24:	e023      	b.n	8011e6e <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011e26:	69fb      	ldr	r3, [r7, #28]
 8011e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e2a:	f241 62d0 	movw	r2, #5840	@ 0x16d0
 8011e2e:	4293      	cmp	r3, r2
 8011e30:	d005      	beq.n	8011e3e <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e36:	3301      	adds	r3, #1
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011e3e:	69fb      	ldr	r3, [r7, #28]
 8011e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d00b      	beq.n	8011e60 <tcp_input+0x6e4>
 8011e48:	69fb      	ldr	r3, [r7, #28]
 8011e4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	6918      	ldr	r0, [r3, #16]
 8011e52:	2300      	movs	r3, #0
 8011e54:	2200      	movs	r2, #0
 8011e56:	69f9      	ldr	r1, [r7, #28]
 8011e58:	47a0      	blx	r4
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	74fb      	strb	r3, [r7, #19]
 8011e5e:	e001      	b.n	8011e64 <tcp_input+0x6e8>
 8011e60:	2300      	movs	r3, #0
 8011e62:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011e64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e68:	f113 0f0d 	cmn.w	r3, #13
 8011e6c:	d016      	beq.n	8011e9c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011e6e:	4b13      	ldr	r3, [pc, #76]	@ (8011ebc <tcp_input+0x740>)
 8011e70:	2200      	movs	r2, #0
 8011e72:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011e74:	69f8      	ldr	r0, [r7, #28]
 8011e76:	f000 f88d 	bl	8011f94 <tcp_input_delayed_close>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d127      	bne.n	8011ed0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011e80:	69f8      	ldr	r0, [r7, #28]
 8011e82:	f002 fac3 	bl	801440c <tcp_output>
 8011e86:	e024      	b.n	8011ed2 <tcp_input+0x756>
        goto aborted;
 8011e88:	bf00      	nop
 8011e8a:	e022      	b.n	8011ed2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011e8c:	bf00      	nop
 8011e8e:	e020      	b.n	8011ed2 <tcp_input+0x756>
              goto aborted;
 8011e90:	bf00      	nop
 8011e92:	e01e      	b.n	8011ed2 <tcp_input+0x756>
          goto aborted;
 8011e94:	bf00      	nop
 8011e96:	e01c      	b.n	8011ed2 <tcp_input+0x756>
            goto aborted;
 8011e98:	bf00      	nop
 8011e9a:	e01a      	b.n	8011ed2 <tcp_input+0x756>
              goto aborted;
 8011e9c:	bf00      	nop
 8011e9e:	e018      	b.n	8011ed2 <tcp_input+0x756>
 8011ea0:	24010370 	.word	0x24010370
 8011ea4:	24010380 	.word	0x24010380
 8011ea8:	240103a0 	.word	0x240103a0
 8011eac:	2401039d 	.word	0x2401039d
 8011eb0:	24010398 	.word	0x24010398
 8011eb4:	2401039c 	.word	0x2401039c
 8011eb8:	2401039a 	.word	0x2401039a
 8011ebc:	240103a4 	.word	0x240103a4
 8011ec0:	24010364 	.word	0x24010364
 8011ec4:	0801ac70 	.word	0x0801ac70
 8011ec8:	0801ae24 	.word	0x0801ae24
 8011ecc:	0801acbc 	.word	0x0801acbc
          goto aborted;
 8011ed0:	bf00      	nop
    tcp_input_pcb = NULL;
 8011ed2:	4b27      	ldr	r3, [pc, #156]	@ (8011f70 <tcp_input+0x7f4>)
 8011ed4:	2200      	movs	r2, #0
 8011ed6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011ed8:	4b26      	ldr	r3, [pc, #152]	@ (8011f74 <tcp_input+0x7f8>)
 8011eda:	2200      	movs	r2, #0
 8011edc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011ede:	4b26      	ldr	r3, [pc, #152]	@ (8011f78 <tcp_input+0x7fc>)
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d03f      	beq.n	8011f66 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8011ee6:	4b24      	ldr	r3, [pc, #144]	@ (8011f78 <tcp_input+0x7fc>)
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	4618      	mov	r0, r3
 8011eec:	f7fd fdfc 	bl	800fae8 <pbuf_free>
      inseg.p = NULL;
 8011ef0:	4b21      	ldr	r3, [pc, #132]	@ (8011f78 <tcp_input+0x7fc>)
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011ef6:	e036      	b.n	8011f66 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011ef8:	4b20      	ldr	r3, [pc, #128]	@ (8011f7c <tcp_input+0x800>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	899b      	ldrh	r3, [r3, #12]
 8011efe:	b29b      	uxth	r3, r3
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7fc f933 	bl	800e16c <lwip_htons>
 8011f06:	4603      	mov	r3, r0
 8011f08:	b2db      	uxtb	r3, r3
 8011f0a:	f003 0304 	and.w	r3, r3, #4
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d118      	bne.n	8011f44 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f12:	4b1b      	ldr	r3, [pc, #108]	@ (8011f80 <tcp_input+0x804>)
 8011f14:	6819      	ldr	r1, [r3, #0]
 8011f16:	4b1b      	ldr	r3, [pc, #108]	@ (8011f84 <tcp_input+0x808>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8011f88 <tcp_input+0x80c>)
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f22:	4b16      	ldr	r3, [pc, #88]	@ (8011f7c <tcp_input+0x800>)
 8011f24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f26:	885b      	ldrh	r3, [r3, #2]
 8011f28:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011f2a:	4a14      	ldr	r2, [pc, #80]	@ (8011f7c <tcp_input+0x800>)
 8011f2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f2e:	8812      	ldrh	r2, [r2, #0]
 8011f30:	b292      	uxth	r2, r2
 8011f32:	9202      	str	r2, [sp, #8]
 8011f34:	9301      	str	r3, [sp, #4]
 8011f36:	4b15      	ldr	r3, [pc, #84]	@ (8011f8c <tcp_input+0x810>)
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	4b15      	ldr	r3, [pc, #84]	@ (8011f90 <tcp_input+0x814>)
 8011f3c:	4602      	mov	r2, r0
 8011f3e:	2000      	movs	r0, #0
 8011f40:	f003 f818 	bl	8014f74 <tcp_rst>
    pbuf_free(p);
 8011f44:	6878      	ldr	r0, [r7, #4]
 8011f46:	f7fd fdcf 	bl	800fae8 <pbuf_free>
  return;
 8011f4a:	e00c      	b.n	8011f66 <tcp_input+0x7ea>
    goto dropped;
 8011f4c:	bf00      	nop
 8011f4e:	e006      	b.n	8011f5e <tcp_input+0x7e2>
    goto dropped;
 8011f50:	bf00      	nop
 8011f52:	e004      	b.n	8011f5e <tcp_input+0x7e2>
    goto dropped;
 8011f54:	bf00      	nop
 8011f56:	e002      	b.n	8011f5e <tcp_input+0x7e2>
      goto dropped;
 8011f58:	bf00      	nop
 8011f5a:	e000      	b.n	8011f5e <tcp_input+0x7e2>
      goto dropped;
 8011f5c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011f5e:	6878      	ldr	r0, [r7, #4]
 8011f60:	f7fd fdc2 	bl	800fae8 <pbuf_free>
 8011f64:	e000      	b.n	8011f68 <tcp_input+0x7ec>
  return;
 8011f66:	bf00      	nop
}
 8011f68:	3724      	adds	r7, #36	@ 0x24
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd90      	pop	{r4, r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	240103a4 	.word	0x240103a4
 8011f74:	240103a0 	.word	0x240103a0
 8011f78:	24010370 	.word	0x24010370
 8011f7c:	24010380 	.word	0x24010380
 8011f80:	24010394 	.word	0x24010394
 8011f84:	2401039a 	.word	0x2401039a
 8011f88:	24010390 	.word	0x24010390
 8011f8c:	240098a8 	.word	0x240098a8
 8011f90:	240098ac 	.word	0x240098ac

08011f94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d106      	bne.n	8011fb0 <tcp_input_delayed_close+0x1c>
 8011fa2:	4b17      	ldr	r3, [pc, #92]	@ (8012000 <tcp_input_delayed_close+0x6c>)
 8011fa4:	f240 225a 	movw	r2, #602	@ 0x25a
 8011fa8:	4916      	ldr	r1, [pc, #88]	@ (8012004 <tcp_input_delayed_close+0x70>)
 8011faa:	4817      	ldr	r0, [pc, #92]	@ (8012008 <tcp_input_delayed_close+0x74>)
 8011fac:	f006 fd0a 	bl	80189c4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011fb0:	4b16      	ldr	r3, [pc, #88]	@ (801200c <tcp_input_delayed_close+0x78>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	f003 0310 	and.w	r3, r3, #16
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d01c      	beq.n	8011ff6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	8b5b      	ldrh	r3, [r3, #26]
 8011fc0:	f003 0310 	and.w	r3, r3, #16
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10d      	bne.n	8011fe4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d008      	beq.n	8011fe4 <tcp_input_delayed_close+0x50>
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011fd8:	687a      	ldr	r2, [r7, #4]
 8011fda:	6912      	ldr	r2, [r2, #16]
 8011fdc:	f06f 010e 	mvn.w	r1, #14
 8011fe0:	4610      	mov	r0, r2
 8011fe2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011fe4:	6879      	ldr	r1, [r7, #4]
 8011fe6:	480a      	ldr	r0, [pc, #40]	@ (8012010 <tcp_input_delayed_close+0x7c>)
 8011fe8:	f7ff fa50 	bl	801148c <tcp_pcb_remove>
    tcp_free(pcb);
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7fe f837 	bl	8010060 <tcp_free>
    return 1;
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e000      	b.n	8011ff8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011ff6:	2300      	movs	r3, #0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	0801ac70 	.word	0x0801ac70
 8012004:	0801ae40 	.word	0x0801ae40
 8012008:	0801acbc 	.word	0x0801acbc
 801200c:	2401039d 	.word	0x2401039d
 8012010:	24010364 	.word	0x24010364

08012014 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012014:	b590      	push	{r4, r7, lr}
 8012016:	b08b      	sub	sp, #44	@ 0x2c
 8012018:	af04      	add	r7, sp, #16
 801201a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801201c:	4b6f      	ldr	r3, [pc, #444]	@ (80121dc <tcp_listen_input+0x1c8>)
 801201e:	781b      	ldrb	r3, [r3, #0]
 8012020:	f003 0304 	and.w	r3, r3, #4
 8012024:	2b00      	cmp	r3, #0
 8012026:	f040 80d2 	bne.w	80121ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d106      	bne.n	801203e <tcp_listen_input+0x2a>
 8012030:	4b6b      	ldr	r3, [pc, #428]	@ (80121e0 <tcp_listen_input+0x1cc>)
 8012032:	f240 2281 	movw	r2, #641	@ 0x281
 8012036:	496b      	ldr	r1, [pc, #428]	@ (80121e4 <tcp_listen_input+0x1d0>)
 8012038:	486b      	ldr	r0, [pc, #428]	@ (80121e8 <tcp_listen_input+0x1d4>)
 801203a:	f006 fcc3 	bl	80189c4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801203e:	4b67      	ldr	r3, [pc, #412]	@ (80121dc <tcp_listen_input+0x1c8>)
 8012040:	781b      	ldrb	r3, [r3, #0]
 8012042:	f003 0310 	and.w	r3, r3, #16
 8012046:	2b00      	cmp	r3, #0
 8012048:	d019      	beq.n	801207e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801204a:	4b68      	ldr	r3, [pc, #416]	@ (80121ec <tcp_listen_input+0x1d8>)
 801204c:	6819      	ldr	r1, [r3, #0]
 801204e:	4b68      	ldr	r3, [pc, #416]	@ (80121f0 <tcp_listen_input+0x1dc>)
 8012050:	881b      	ldrh	r3, [r3, #0]
 8012052:	461a      	mov	r2, r3
 8012054:	4b67      	ldr	r3, [pc, #412]	@ (80121f4 <tcp_listen_input+0x1e0>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801205a:	4b67      	ldr	r3, [pc, #412]	@ (80121f8 <tcp_listen_input+0x1e4>)
 801205c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801205e:	885b      	ldrh	r3, [r3, #2]
 8012060:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012062:	4a65      	ldr	r2, [pc, #404]	@ (80121f8 <tcp_listen_input+0x1e4>)
 8012064:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012066:	8812      	ldrh	r2, [r2, #0]
 8012068:	b292      	uxth	r2, r2
 801206a:	9202      	str	r2, [sp, #8]
 801206c:	9301      	str	r3, [sp, #4]
 801206e:	4b63      	ldr	r3, [pc, #396]	@ (80121fc <tcp_listen_input+0x1e8>)
 8012070:	9300      	str	r3, [sp, #0]
 8012072:	4b63      	ldr	r3, [pc, #396]	@ (8012200 <tcp_listen_input+0x1ec>)
 8012074:	4602      	mov	r2, r0
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f002 ff7c 	bl	8014f74 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801207c:	e0a9      	b.n	80121d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801207e:	4b57      	ldr	r3, [pc, #348]	@ (80121dc <tcp_listen_input+0x1c8>)
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	f003 0302 	and.w	r3, r3, #2
 8012086:	2b00      	cmp	r3, #0
 8012088:	f000 80a3 	beq.w	80121d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	7d5b      	ldrb	r3, [r3, #21]
 8012090:	4618      	mov	r0, r3
 8012092:	f7ff f927 	bl	80112e4 <tcp_alloc>
 8012096:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012098:	697b      	ldr	r3, [r7, #20]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d111      	bne.n	80120c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	699b      	ldr	r3, [r3, #24]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00a      	beq.n	80120bc <tcp_listen_input+0xa8>
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	699b      	ldr	r3, [r3, #24]
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	6910      	ldr	r0, [r2, #16]
 80120ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80120b2:	2100      	movs	r1, #0
 80120b4:	4798      	blx	r3
 80120b6:	4603      	mov	r3, r0
 80120b8:	73bb      	strb	r3, [r7, #14]
      return;
 80120ba:	e08b      	b.n	80121d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80120bc:	23f0      	movs	r3, #240	@ 0xf0
 80120be:	73bb      	strb	r3, [r7, #14]
      return;
 80120c0:	e088      	b.n	80121d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80120c2:	4b50      	ldr	r3, [pc, #320]	@ (8012204 <tcp_listen_input+0x1f0>)
 80120c4:	695a      	ldr	r2, [r3, #20]
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80120ca:	4b4e      	ldr	r3, [pc, #312]	@ (8012204 <tcp_listen_input+0x1f0>)
 80120cc:	691a      	ldr	r2, [r3, #16]
 80120ce:	697b      	ldr	r3, [r7, #20]
 80120d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	8ada      	ldrh	r2, [r3, #22]
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80120da:	4b47      	ldr	r3, [pc, #284]	@ (80121f8 <tcp_listen_input+0x1e4>)
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	881b      	ldrh	r3, [r3, #0]
 80120e0:	b29a      	uxth	r2, r3
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2203      	movs	r2, #3
 80120ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80120ec:	4b41      	ldr	r3, [pc, #260]	@ (80121f4 <tcp_listen_input+0x1e0>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	1c5a      	adds	r2, r3, #1
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80120f6:	697b      	ldr	r3, [r7, #20]
 80120f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80120fa:	697b      	ldr	r3, [r7, #20]
 80120fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80120fe:	6978      	ldr	r0, [r7, #20]
 8012100:	f7ff fa58 	bl	80115b4 <tcp_next_iss>
 8012104:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8012106:	697b      	ldr	r3, [r7, #20]
 8012108:	693a      	ldr	r2, [r7, #16]
 801210a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	693a      	ldr	r2, [r7, #16]
 8012110:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	693a      	ldr	r2, [r7, #16]
 8012116:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	693a      	ldr	r2, [r7, #16]
 801211c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801211e:	4b35      	ldr	r3, [pc, #212]	@ (80121f4 <tcp_listen_input+0x1e0>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	1e5a      	subs	r2, r3, #1
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	691a      	ldr	r2, [r3, #16]
 801212c:	697b      	ldr	r3, [r7, #20]
 801212e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	687a      	ldr	r2, [r7, #4]
 8012134:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	7a5b      	ldrb	r3, [r3, #9]
 801213a:	f003 030c 	and.w	r3, r3, #12
 801213e:	b2da      	uxtb	r2, r3
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	7a1a      	ldrb	r2, [r3, #8]
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801214c:	4b2e      	ldr	r3, [pc, #184]	@ (8012208 <tcp_listen_input+0x1f4>)
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	60da      	str	r2, [r3, #12]
 8012154:	4a2c      	ldr	r2, [pc, #176]	@ (8012208 <tcp_listen_input+0x1f4>)
 8012156:	697b      	ldr	r3, [r7, #20]
 8012158:	6013      	str	r3, [r2, #0]
 801215a:	f003 f8cd 	bl	80152f8 <tcp_timer_needed>
 801215e:	4b2b      	ldr	r3, [pc, #172]	@ (801220c <tcp_listen_input+0x1f8>)
 8012160:	2201      	movs	r2, #1
 8012162:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8012164:	6978      	ldr	r0, [r7, #20]
 8012166:	f001 fd8b 	bl	8013c80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801216a:	4b23      	ldr	r3, [pc, #140]	@ (80121f8 <tcp_listen_input+0x1e4>)
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	89db      	ldrh	r3, [r3, #14]
 8012170:	b29a      	uxth	r2, r3
 8012172:	697b      	ldr	r3, [r7, #20]
 8012174:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	3304      	adds	r3, #4
 801218c:	4618      	mov	r0, r3
 801218e:	f005 f817 	bl	80171c0 <ip4_route>
 8012192:	4601      	mov	r1, r0
 8012194:	697b      	ldr	r3, [r7, #20]
 8012196:	3304      	adds	r3, #4
 8012198:	461a      	mov	r2, r3
 801219a:	4620      	mov	r0, r4
 801219c:	f7ff fa30 	bl	8011600 <tcp_eff_send_mss_netif>
 80121a0:	4603      	mov	r3, r0
 80121a2:	461a      	mov	r2, r3
 80121a4:	697b      	ldr	r3, [r7, #20]
 80121a6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80121a8:	2112      	movs	r1, #18
 80121aa:	6978      	ldr	r0, [r7, #20]
 80121ac:	f002 f840 	bl	8014230 <tcp_enqueue_flags>
 80121b0:	4603      	mov	r3, r0
 80121b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80121b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d004      	beq.n	80121c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80121bc:	2100      	movs	r1, #0
 80121be:	6978      	ldr	r0, [r7, #20]
 80121c0:	f7fe f978 	bl	80104b4 <tcp_abandon>
      return;
 80121c4:	e006      	b.n	80121d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80121c6:	6978      	ldr	r0, [r7, #20]
 80121c8:	f002 f920 	bl	801440c <tcp_output>
  return;
 80121cc:	e001      	b.n	80121d2 <tcp_listen_input+0x1be>
    return;
 80121ce:	bf00      	nop
 80121d0:	e000      	b.n	80121d4 <tcp_listen_input+0x1c0>
  return;
 80121d2:	bf00      	nop
}
 80121d4:	371c      	adds	r7, #28
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd90      	pop	{r4, r7, pc}
 80121da:	bf00      	nop
 80121dc:	2401039c 	.word	0x2401039c
 80121e0:	0801ac70 	.word	0x0801ac70
 80121e4:	0801ae68 	.word	0x0801ae68
 80121e8:	0801acbc 	.word	0x0801acbc
 80121ec:	24010394 	.word	0x24010394
 80121f0:	2401039a 	.word	0x2401039a
 80121f4:	24010390 	.word	0x24010390
 80121f8:	24010380 	.word	0x24010380
 80121fc:	240098a8 	.word	0x240098a8
 8012200:	240098ac 	.word	0x240098ac
 8012204:	24009898 	.word	0x24009898
 8012208:	24010364 	.word	0x24010364
 801220c:	2401036c 	.word	0x2401036c

08012210 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b086      	sub	sp, #24
 8012214:	af04      	add	r7, sp, #16
 8012216:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012218:	4b2f      	ldr	r3, [pc, #188]	@ (80122d8 <tcp_timewait_input+0xc8>)
 801221a:	781b      	ldrb	r3, [r3, #0]
 801221c:	f003 0304 	and.w	r3, r3, #4
 8012220:	2b00      	cmp	r3, #0
 8012222:	d153      	bne.n	80122cc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d106      	bne.n	8012238 <tcp_timewait_input+0x28>
 801222a:	4b2c      	ldr	r3, [pc, #176]	@ (80122dc <tcp_timewait_input+0xcc>)
 801222c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8012230:	492b      	ldr	r1, [pc, #172]	@ (80122e0 <tcp_timewait_input+0xd0>)
 8012232:	482c      	ldr	r0, [pc, #176]	@ (80122e4 <tcp_timewait_input+0xd4>)
 8012234:	f006 fbc6 	bl	80189c4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8012238:	4b27      	ldr	r3, [pc, #156]	@ (80122d8 <tcp_timewait_input+0xc8>)
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	f003 0302 	and.w	r3, r3, #2
 8012240:	2b00      	cmp	r3, #0
 8012242:	d02a      	beq.n	801229a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8012244:	4b28      	ldr	r3, [pc, #160]	@ (80122e8 <tcp_timewait_input+0xd8>)
 8012246:	681a      	ldr	r2, [r3, #0]
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801224c:	1ad3      	subs	r3, r2, r3
 801224e:	2b00      	cmp	r3, #0
 8012250:	db2d      	blt.n	80122ae <tcp_timewait_input+0x9e>
 8012252:	4b25      	ldr	r3, [pc, #148]	@ (80122e8 <tcp_timewait_input+0xd8>)
 8012254:	681a      	ldr	r2, [r3, #0]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801225a:	6879      	ldr	r1, [r7, #4]
 801225c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801225e:	440b      	add	r3, r1
 8012260:	1ad3      	subs	r3, r2, r3
 8012262:	2b00      	cmp	r3, #0
 8012264:	dc23      	bgt.n	80122ae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012266:	4b21      	ldr	r3, [pc, #132]	@ (80122ec <tcp_timewait_input+0xdc>)
 8012268:	6819      	ldr	r1, [r3, #0]
 801226a:	4b21      	ldr	r3, [pc, #132]	@ (80122f0 <tcp_timewait_input+0xe0>)
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	461a      	mov	r2, r3
 8012270:	4b1d      	ldr	r3, [pc, #116]	@ (80122e8 <tcp_timewait_input+0xd8>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012276:	4b1f      	ldr	r3, [pc, #124]	@ (80122f4 <tcp_timewait_input+0xe4>)
 8012278:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801227a:	885b      	ldrh	r3, [r3, #2]
 801227c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801227e:	4a1d      	ldr	r2, [pc, #116]	@ (80122f4 <tcp_timewait_input+0xe4>)
 8012280:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012282:	8812      	ldrh	r2, [r2, #0]
 8012284:	b292      	uxth	r2, r2
 8012286:	9202      	str	r2, [sp, #8]
 8012288:	9301      	str	r3, [sp, #4]
 801228a:	4b1b      	ldr	r3, [pc, #108]	@ (80122f8 <tcp_timewait_input+0xe8>)
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	4b1b      	ldr	r3, [pc, #108]	@ (80122fc <tcp_timewait_input+0xec>)
 8012290:	4602      	mov	r2, r0
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	f002 fe6e 	bl	8014f74 <tcp_rst>
      return;
 8012298:	e01b      	b.n	80122d2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801229a:	4b0f      	ldr	r3, [pc, #60]	@ (80122d8 <tcp_timewait_input+0xc8>)
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	f003 0301 	and.w	r3, r3, #1
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d003      	beq.n	80122ae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80122a6:	4b16      	ldr	r3, [pc, #88]	@ (8012300 <tcp_timewait_input+0xf0>)
 80122a8:	681a      	ldr	r2, [r3, #0]
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80122ae:	4b10      	ldr	r3, [pc, #64]	@ (80122f0 <tcp_timewait_input+0xe0>)
 80122b0:	881b      	ldrh	r3, [r3, #0]
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d00c      	beq.n	80122d0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	8b5b      	ldrh	r3, [r3, #26]
 80122ba:	f043 0302 	orr.w	r3, r3, #2
 80122be:	b29a      	uxth	r2, r3
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f002 f8a1 	bl	801440c <tcp_output>
  }
  return;
 80122ca:	e001      	b.n	80122d0 <tcp_timewait_input+0xc0>
    return;
 80122cc:	bf00      	nop
 80122ce:	e000      	b.n	80122d2 <tcp_timewait_input+0xc2>
  return;
 80122d0:	bf00      	nop
}
 80122d2:	3708      	adds	r7, #8
 80122d4:	46bd      	mov	sp, r7
 80122d6:	bd80      	pop	{r7, pc}
 80122d8:	2401039c 	.word	0x2401039c
 80122dc:	0801ac70 	.word	0x0801ac70
 80122e0:	0801ae88 	.word	0x0801ae88
 80122e4:	0801acbc 	.word	0x0801acbc
 80122e8:	24010390 	.word	0x24010390
 80122ec:	24010394 	.word	0x24010394
 80122f0:	2401039a 	.word	0x2401039a
 80122f4:	24010380 	.word	0x24010380
 80122f8:	240098a8 	.word	0x240098a8
 80122fc:	240098ac 	.word	0x240098ac
 8012300:	24010358 	.word	0x24010358

08012304 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8012304:	b590      	push	{r4, r7, lr}
 8012306:	b08d      	sub	sp, #52	@ 0x34
 8012308:	af04      	add	r7, sp, #16
 801230a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801230c:	2300      	movs	r3, #0
 801230e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012310:	2300      	movs	r3, #0
 8012312:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d106      	bne.n	8012328 <tcp_process+0x24>
 801231a:	4b9d      	ldr	r3, [pc, #628]	@ (8012590 <tcp_process+0x28c>)
 801231c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8012320:	499c      	ldr	r1, [pc, #624]	@ (8012594 <tcp_process+0x290>)
 8012322:	489d      	ldr	r0, [pc, #628]	@ (8012598 <tcp_process+0x294>)
 8012324:	f006 fb4e 	bl	80189c4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8012328:	4b9c      	ldr	r3, [pc, #624]	@ (801259c <tcp_process+0x298>)
 801232a:	781b      	ldrb	r3, [r3, #0]
 801232c:	f003 0304 	and.w	r3, r3, #4
 8012330:	2b00      	cmp	r3, #0
 8012332:	d04e      	beq.n	80123d2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	7d1b      	ldrb	r3, [r3, #20]
 8012338:	2b02      	cmp	r3, #2
 801233a:	d108      	bne.n	801234e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012340:	4b97      	ldr	r3, [pc, #604]	@ (80125a0 <tcp_process+0x29c>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	429a      	cmp	r2, r3
 8012346:	d123      	bne.n	8012390 <tcp_process+0x8c>
        acceptable = 1;
 8012348:	2301      	movs	r3, #1
 801234a:	76fb      	strb	r3, [r7, #27]
 801234c:	e020      	b.n	8012390 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012352:	4b94      	ldr	r3, [pc, #592]	@ (80125a4 <tcp_process+0x2a0>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	429a      	cmp	r2, r3
 8012358:	d102      	bne.n	8012360 <tcp_process+0x5c>
        acceptable = 1;
 801235a:	2301      	movs	r3, #1
 801235c:	76fb      	strb	r3, [r7, #27]
 801235e:	e017      	b.n	8012390 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012360:	4b90      	ldr	r3, [pc, #576]	@ (80125a4 <tcp_process+0x2a0>)
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012368:	1ad3      	subs	r3, r2, r3
 801236a:	2b00      	cmp	r3, #0
 801236c:	db10      	blt.n	8012390 <tcp_process+0x8c>
 801236e:	4b8d      	ldr	r3, [pc, #564]	@ (80125a4 <tcp_process+0x2a0>)
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012376:	6879      	ldr	r1, [r7, #4]
 8012378:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801237a:	440b      	add	r3, r1
 801237c:	1ad3      	subs	r3, r2, r3
 801237e:	2b00      	cmp	r3, #0
 8012380:	dc06      	bgt.n	8012390 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	8b5b      	ldrh	r3, [r3, #26]
 8012386:	f043 0302 	orr.w	r3, r3, #2
 801238a:	b29a      	uxth	r2, r3
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012390:	7efb      	ldrb	r3, [r7, #27]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d01b      	beq.n	80123ce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	7d1b      	ldrb	r3, [r3, #20]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d106      	bne.n	80123ac <tcp_process+0xa8>
 801239e:	4b7c      	ldr	r3, [pc, #496]	@ (8012590 <tcp_process+0x28c>)
 80123a0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80123a4:	4980      	ldr	r1, [pc, #512]	@ (80125a8 <tcp_process+0x2a4>)
 80123a6:	487c      	ldr	r0, [pc, #496]	@ (8012598 <tcp_process+0x294>)
 80123a8:	f006 fb0c 	bl	80189c4 <iprintf>
      recv_flags |= TF_RESET;
 80123ac:	4b7f      	ldr	r3, [pc, #508]	@ (80125ac <tcp_process+0x2a8>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	f043 0308 	orr.w	r3, r3, #8
 80123b4:	b2da      	uxtb	r2, r3
 80123b6:	4b7d      	ldr	r3, [pc, #500]	@ (80125ac <tcp_process+0x2a8>)
 80123b8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	8b5b      	ldrh	r3, [r3, #26]
 80123be:	f023 0301 	bic.w	r3, r3, #1
 80123c2:	b29a      	uxth	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80123c8:	f06f 030d 	mvn.w	r3, #13
 80123cc:	e37a      	b.n	8012ac4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80123ce:	2300      	movs	r3, #0
 80123d0:	e378      	b.n	8012ac4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80123d2:	4b72      	ldr	r3, [pc, #456]	@ (801259c <tcp_process+0x298>)
 80123d4:	781b      	ldrb	r3, [r3, #0]
 80123d6:	f003 0302 	and.w	r3, r3, #2
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d010      	beq.n	8012400 <tcp_process+0xfc>
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	7d1b      	ldrb	r3, [r3, #20]
 80123e2:	2b02      	cmp	r3, #2
 80123e4:	d00c      	beq.n	8012400 <tcp_process+0xfc>
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	7d1b      	ldrb	r3, [r3, #20]
 80123ea:	2b03      	cmp	r3, #3
 80123ec:	d008      	beq.n	8012400 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	8b5b      	ldrh	r3, [r3, #26]
 80123f2:	f043 0302 	orr.w	r3, r3, #2
 80123f6:	b29a      	uxth	r2, r3
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80123fc:	2300      	movs	r3, #0
 80123fe:	e361      	b.n	8012ac4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	8b5b      	ldrh	r3, [r3, #26]
 8012404:	f003 0310 	and.w	r3, r3, #16
 8012408:	2b00      	cmp	r3, #0
 801240a:	d103      	bne.n	8012414 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801240c:	4b68      	ldr	r3, [pc, #416]	@ (80125b0 <tcp_process+0x2ac>)
 801240e:	681a      	ldr	r2, [r3, #0]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2200      	movs	r2, #0
 8012418:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2200      	movs	r2, #0
 8012420:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f001 fc2b 	bl	8013c80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	7d1b      	ldrb	r3, [r3, #20]
 801242e:	3b02      	subs	r3, #2
 8012430:	2b07      	cmp	r3, #7
 8012432:	f200 8337 	bhi.w	8012aa4 <tcp_process+0x7a0>
 8012436:	a201      	add	r2, pc, #4	@ (adr r2, 801243c <tcp_process+0x138>)
 8012438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801243c:	0801245d 	.word	0x0801245d
 8012440:	0801268d 	.word	0x0801268d
 8012444:	08012805 	.word	0x08012805
 8012448:	0801282f 	.word	0x0801282f
 801244c:	08012953 	.word	0x08012953
 8012450:	08012805 	.word	0x08012805
 8012454:	080129df 	.word	0x080129df
 8012458:	08012a6f 	.word	0x08012a6f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801245c:	4b4f      	ldr	r3, [pc, #316]	@ (801259c <tcp_process+0x298>)
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f003 0310 	and.w	r3, r3, #16
 8012464:	2b00      	cmp	r3, #0
 8012466:	f000 80e4 	beq.w	8012632 <tcp_process+0x32e>
 801246a:	4b4c      	ldr	r3, [pc, #304]	@ (801259c <tcp_process+0x298>)
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	f003 0302 	and.w	r3, r3, #2
 8012472:	2b00      	cmp	r3, #0
 8012474:	f000 80dd 	beq.w	8012632 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801247c:	1c5a      	adds	r2, r3, #1
 801247e:	4b48      	ldr	r3, [pc, #288]	@ (80125a0 <tcp_process+0x29c>)
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	429a      	cmp	r2, r3
 8012484:	f040 80d5 	bne.w	8012632 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012488:	4b46      	ldr	r3, [pc, #280]	@ (80125a4 <tcp_process+0x2a0>)
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	1c5a      	adds	r2, r3, #1
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 801249a:	4b41      	ldr	r3, [pc, #260]	@ (80125a0 <tcp_process+0x29c>)
 801249c:	681a      	ldr	r2, [r3, #0]
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80124a2:	4b44      	ldr	r3, [pc, #272]	@ (80125b4 <tcp_process+0x2b0>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	89db      	ldrh	r3, [r3, #14]
 80124a8:	b29a      	uxth	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80124bc:	4b39      	ldr	r3, [pc, #228]	@ (80125a4 <tcp_process+0x2a0>)
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	1e5a      	subs	r2, r3, #1
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2204      	movs	r2, #4
 80124ca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	3304      	adds	r3, #4
 80124d4:	4618      	mov	r0, r3
 80124d6:	f004 fe73 	bl	80171c0 <ip4_route>
 80124da:	4601      	mov	r1, r0
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	3304      	adds	r3, #4
 80124e0:	461a      	mov	r2, r3
 80124e2:	4620      	mov	r0, r4
 80124e4:	f7ff f88c 	bl	8011600 <tcp_eff_send_mss_netif>
 80124e8:	4603      	mov	r3, r0
 80124ea:	461a      	mov	r2, r3
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124f4:	009a      	lsls	r2, r3, #2
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80124fa:	005b      	lsls	r3, r3, #1
 80124fc:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012500:	428b      	cmp	r3, r1
 8012502:	bf38      	it	cc
 8012504:	460b      	movcc	r3, r1
 8012506:	429a      	cmp	r2, r3
 8012508:	d204      	bcs.n	8012514 <tcp_process+0x210>
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801250e:	009b      	lsls	r3, r3, #2
 8012510:	b29b      	uxth	r3, r3
 8012512:	e00d      	b.n	8012530 <tcp_process+0x22c>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012518:	005b      	lsls	r3, r3, #1
 801251a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801251e:	4293      	cmp	r3, r2
 8012520:	d904      	bls.n	801252c <tcp_process+0x228>
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012526:	005b      	lsls	r3, r3, #1
 8012528:	b29b      	uxth	r3, r3
 801252a:	e001      	b.n	8012530 <tcp_process+0x22c>
 801252c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012530:	687a      	ldr	r2, [r7, #4]
 8012532:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801253c:	2b00      	cmp	r3, #0
 801253e:	d106      	bne.n	801254e <tcp_process+0x24a>
 8012540:	4b13      	ldr	r3, [pc, #76]	@ (8012590 <tcp_process+0x28c>)
 8012542:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8012546:	491c      	ldr	r1, [pc, #112]	@ (80125b8 <tcp_process+0x2b4>)
 8012548:	4813      	ldr	r0, [pc, #76]	@ (8012598 <tcp_process+0x294>)
 801254a:	f006 fa3b 	bl	80189c4 <iprintf>
        --pcb->snd_queuelen;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012554:	3b01      	subs	r3, #1
 8012556:	b29a      	uxth	r2, r3
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012562:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d12a      	bne.n	80125c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801256e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012570:	69fb      	ldr	r3, [r7, #28]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d106      	bne.n	8012584 <tcp_process+0x280>
 8012576:	4b06      	ldr	r3, [pc, #24]	@ (8012590 <tcp_process+0x28c>)
 8012578:	f44f 725d 	mov.w	r2, #884	@ 0x374
 801257c:	490f      	ldr	r1, [pc, #60]	@ (80125bc <tcp_process+0x2b8>)
 801257e:	4806      	ldr	r0, [pc, #24]	@ (8012598 <tcp_process+0x294>)
 8012580:	f006 fa20 	bl	80189c4 <iprintf>
          pcb->unsent = rseg->next;
 8012584:	69fb      	ldr	r3, [r7, #28]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	66da      	str	r2, [r3, #108]	@ 0x6c
 801258c:	e01c      	b.n	80125c8 <tcp_process+0x2c4>
 801258e:	bf00      	nop
 8012590:	0801ac70 	.word	0x0801ac70
 8012594:	0801aea8 	.word	0x0801aea8
 8012598:	0801acbc 	.word	0x0801acbc
 801259c:	2401039c 	.word	0x2401039c
 80125a0:	24010394 	.word	0x24010394
 80125a4:	24010390 	.word	0x24010390
 80125a8:	0801aec4 	.word	0x0801aec4
 80125ac:	2401039d 	.word	0x2401039d
 80125b0:	24010358 	.word	0x24010358
 80125b4:	24010380 	.word	0x24010380
 80125b8:	0801aee4 	.word	0x0801aee4
 80125bc:	0801aefc 	.word	0x0801aefc
        } else {
          pcb->unacked = rseg->next;
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	681a      	ldr	r2, [r3, #0]
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80125c8:	69f8      	ldr	r0, [r7, #28]
 80125ca:	f7fe fd22 	bl	8011012 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d104      	bne.n	80125e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80125dc:	861a      	strh	r2, [r3, #48]	@ 0x30
 80125de:	e006      	b.n	80125ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2200      	movs	r2, #0
 80125ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d00a      	beq.n	801260e <tcp_process+0x30a>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	6910      	ldr	r0, [r2, #16]
 8012602:	2200      	movs	r2, #0
 8012604:	6879      	ldr	r1, [r7, #4]
 8012606:	4798      	blx	r3
 8012608:	4603      	mov	r3, r0
 801260a:	76bb      	strb	r3, [r7, #26]
 801260c:	e001      	b.n	8012612 <tcp_process+0x30e>
 801260e:	2300      	movs	r3, #0
 8012610:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8012612:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012616:	f113 0f0d 	cmn.w	r3, #13
 801261a:	d102      	bne.n	8012622 <tcp_process+0x31e>
          return ERR_ABRT;
 801261c:	f06f 030c 	mvn.w	r3, #12
 8012620:	e250      	b.n	8012ac4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	8b5b      	ldrh	r3, [r3, #26]
 8012626:	f043 0302 	orr.w	r3, r3, #2
 801262a:	b29a      	uxth	r2, r3
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8012630:	e23a      	b.n	8012aa8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8012632:	4b98      	ldr	r3, [pc, #608]	@ (8012894 <tcp_process+0x590>)
 8012634:	781b      	ldrb	r3, [r3, #0]
 8012636:	f003 0310 	and.w	r3, r3, #16
 801263a:	2b00      	cmp	r3, #0
 801263c:	f000 8234 	beq.w	8012aa8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012640:	4b95      	ldr	r3, [pc, #596]	@ (8012898 <tcp_process+0x594>)
 8012642:	6819      	ldr	r1, [r3, #0]
 8012644:	4b95      	ldr	r3, [pc, #596]	@ (801289c <tcp_process+0x598>)
 8012646:	881b      	ldrh	r3, [r3, #0]
 8012648:	461a      	mov	r2, r3
 801264a:	4b95      	ldr	r3, [pc, #596]	@ (80128a0 <tcp_process+0x59c>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012650:	4b94      	ldr	r3, [pc, #592]	@ (80128a4 <tcp_process+0x5a0>)
 8012652:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012654:	885b      	ldrh	r3, [r3, #2]
 8012656:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012658:	4a92      	ldr	r2, [pc, #584]	@ (80128a4 <tcp_process+0x5a0>)
 801265a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801265c:	8812      	ldrh	r2, [r2, #0]
 801265e:	b292      	uxth	r2, r2
 8012660:	9202      	str	r2, [sp, #8]
 8012662:	9301      	str	r3, [sp, #4]
 8012664:	4b90      	ldr	r3, [pc, #576]	@ (80128a8 <tcp_process+0x5a4>)
 8012666:	9300      	str	r3, [sp, #0]
 8012668:	4b90      	ldr	r3, [pc, #576]	@ (80128ac <tcp_process+0x5a8>)
 801266a:	4602      	mov	r2, r0
 801266c:	6878      	ldr	r0, [r7, #4]
 801266e:	f002 fc81 	bl	8014f74 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012678:	2b05      	cmp	r3, #5
 801267a:	f200 8215 	bhi.w	8012aa8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2200      	movs	r2, #0
 8012682:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f002 fa4d 	bl	8014b24 <tcp_rexmit_rto>
      break;
 801268a:	e20d      	b.n	8012aa8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801268c:	4b81      	ldr	r3, [pc, #516]	@ (8012894 <tcp_process+0x590>)
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	f003 0310 	and.w	r3, r3, #16
 8012694:	2b00      	cmp	r3, #0
 8012696:	f000 80a1 	beq.w	80127dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801269a:	4b7f      	ldr	r3, [pc, #508]	@ (8012898 <tcp_process+0x594>)
 801269c:	681a      	ldr	r2, [r3, #0]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	3b01      	subs	r3, #1
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	db7e      	blt.n	80127a8 <tcp_process+0x4a4>
 80126aa:	4b7b      	ldr	r3, [pc, #492]	@ (8012898 <tcp_process+0x594>)
 80126ac:	681a      	ldr	r2, [r3, #0]
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80126b2:	1ad3      	subs	r3, r2, r3
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	dc77      	bgt.n	80127a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2204      	movs	r2, #4
 80126bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d102      	bne.n	80126cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80126c6:	23fa      	movs	r3, #250	@ 0xfa
 80126c8:	76bb      	strb	r3, [r7, #26]
 80126ca:	e01d      	b.n	8012708 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80126d0:	699b      	ldr	r3, [r3, #24]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d106      	bne.n	80126e4 <tcp_process+0x3e0>
 80126d6:	4b76      	ldr	r3, [pc, #472]	@ (80128b0 <tcp_process+0x5ac>)
 80126d8:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80126dc:	4975      	ldr	r1, [pc, #468]	@ (80128b4 <tcp_process+0x5b0>)
 80126de:	4876      	ldr	r0, [pc, #472]	@ (80128b8 <tcp_process+0x5b4>)
 80126e0:	f006 f970 	bl	80189c4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80126e8:	699b      	ldr	r3, [r3, #24]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00a      	beq.n	8012704 <tcp_process+0x400>
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80126f2:	699b      	ldr	r3, [r3, #24]
 80126f4:	687a      	ldr	r2, [r7, #4]
 80126f6:	6910      	ldr	r0, [r2, #16]
 80126f8:	2200      	movs	r2, #0
 80126fa:	6879      	ldr	r1, [r7, #4]
 80126fc:	4798      	blx	r3
 80126fe:	4603      	mov	r3, r0
 8012700:	76bb      	strb	r3, [r7, #26]
 8012702:	e001      	b.n	8012708 <tcp_process+0x404>
 8012704:	23f0      	movs	r3, #240	@ 0xf0
 8012706:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012708:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00a      	beq.n	8012726 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012710:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012714:	f113 0f0d 	cmn.w	r3, #13
 8012718:	d002      	beq.n	8012720 <tcp_process+0x41c>
              tcp_abort(pcb);
 801271a:	6878      	ldr	r0, [r7, #4]
 801271c:	f7fd ff88 	bl	8010630 <tcp_abort>
            }
            return ERR_ABRT;
 8012720:	f06f 030c 	mvn.w	r3, #12
 8012724:	e1ce      	b.n	8012ac4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012726:	6878      	ldr	r0, [r7, #4]
 8012728:	f000 fae0 	bl	8012cec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801272c:	4b63      	ldr	r3, [pc, #396]	@ (80128bc <tcp_process+0x5b8>)
 801272e:	881b      	ldrh	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d005      	beq.n	8012740 <tcp_process+0x43c>
            recv_acked--;
 8012734:	4b61      	ldr	r3, [pc, #388]	@ (80128bc <tcp_process+0x5b8>)
 8012736:	881b      	ldrh	r3, [r3, #0]
 8012738:	3b01      	subs	r3, #1
 801273a:	b29a      	uxth	r2, r3
 801273c:	4b5f      	ldr	r3, [pc, #380]	@ (80128bc <tcp_process+0x5b8>)
 801273e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012744:	009a      	lsls	r2, r3, #2
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801274a:	005b      	lsls	r3, r3, #1
 801274c:	f241 111c 	movw	r1, #4380	@ 0x111c
 8012750:	428b      	cmp	r3, r1
 8012752:	bf38      	it	cc
 8012754:	460b      	movcc	r3, r1
 8012756:	429a      	cmp	r2, r3
 8012758:	d204      	bcs.n	8012764 <tcp_process+0x460>
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801275e:	009b      	lsls	r3, r3, #2
 8012760:	b29b      	uxth	r3, r3
 8012762:	e00d      	b.n	8012780 <tcp_process+0x47c>
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	f241 121c 	movw	r2, #4380	@ 0x111c
 801276e:	4293      	cmp	r3, r2
 8012770:	d904      	bls.n	801277c <tcp_process+0x478>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	b29b      	uxth	r3, r3
 801277a:	e001      	b.n	8012780 <tcp_process+0x47c>
 801277c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8012780:	687a      	ldr	r2, [r7, #4]
 8012782:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012786:	4b4e      	ldr	r3, [pc, #312]	@ (80128c0 <tcp_process+0x5bc>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	f003 0320 	and.w	r3, r3, #32
 801278e:	2b00      	cmp	r3, #0
 8012790:	d037      	beq.n	8012802 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	8b5b      	ldrh	r3, [r3, #26]
 8012796:	f043 0302 	orr.w	r3, r3, #2
 801279a:	b29a      	uxth	r2, r3
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	2207      	movs	r2, #7
 80127a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80127a6:	e02c      	b.n	8012802 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127a8:	4b3b      	ldr	r3, [pc, #236]	@ (8012898 <tcp_process+0x594>)
 80127aa:	6819      	ldr	r1, [r3, #0]
 80127ac:	4b3b      	ldr	r3, [pc, #236]	@ (801289c <tcp_process+0x598>)
 80127ae:	881b      	ldrh	r3, [r3, #0]
 80127b0:	461a      	mov	r2, r3
 80127b2:	4b3b      	ldr	r3, [pc, #236]	@ (80128a0 <tcp_process+0x59c>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127b8:	4b3a      	ldr	r3, [pc, #232]	@ (80128a4 <tcp_process+0x5a0>)
 80127ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127bc:	885b      	ldrh	r3, [r3, #2]
 80127be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127c0:	4a38      	ldr	r2, [pc, #224]	@ (80128a4 <tcp_process+0x5a0>)
 80127c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127c4:	8812      	ldrh	r2, [r2, #0]
 80127c6:	b292      	uxth	r2, r2
 80127c8:	9202      	str	r2, [sp, #8]
 80127ca:	9301      	str	r3, [sp, #4]
 80127cc:	4b36      	ldr	r3, [pc, #216]	@ (80128a8 <tcp_process+0x5a4>)
 80127ce:	9300      	str	r3, [sp, #0]
 80127d0:	4b36      	ldr	r3, [pc, #216]	@ (80128ac <tcp_process+0x5a8>)
 80127d2:	4602      	mov	r2, r0
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	f002 fbcd 	bl	8014f74 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80127da:	e167      	b.n	8012aac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80127dc:	4b2d      	ldr	r3, [pc, #180]	@ (8012894 <tcp_process+0x590>)
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	f003 0302 	and.w	r3, r3, #2
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	f000 8161 	beq.w	8012aac <tcp_process+0x7a8>
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127ee:	1e5a      	subs	r2, r3, #1
 80127f0:	4b2b      	ldr	r3, [pc, #172]	@ (80128a0 <tcp_process+0x59c>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	f040 8159 	bne.w	8012aac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80127fa:	6878      	ldr	r0, [r7, #4]
 80127fc:	f002 f9b4 	bl	8014b68 <tcp_rexmit>
      break;
 8012800:	e154      	b.n	8012aac <tcp_process+0x7a8>
 8012802:	e153      	b.n	8012aac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f000 fa71 	bl	8012cec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801280a:	4b2d      	ldr	r3, [pc, #180]	@ (80128c0 <tcp_process+0x5bc>)
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	f003 0320 	and.w	r3, r3, #32
 8012812:	2b00      	cmp	r3, #0
 8012814:	f000 814c 	beq.w	8012ab0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	8b5b      	ldrh	r3, [r3, #26]
 801281c:	f043 0302 	orr.w	r3, r3, #2
 8012820:	b29a      	uxth	r2, r3
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	2207      	movs	r2, #7
 801282a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801282c:	e140      	b.n	8012ab0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 fa5c 	bl	8012cec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012834:	4b22      	ldr	r3, [pc, #136]	@ (80128c0 <tcp_process+0x5bc>)
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	f003 0320 	and.w	r3, r3, #32
 801283c:	2b00      	cmp	r3, #0
 801283e:	d071      	beq.n	8012924 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012840:	4b14      	ldr	r3, [pc, #80]	@ (8012894 <tcp_process+0x590>)
 8012842:	781b      	ldrb	r3, [r3, #0]
 8012844:	f003 0310 	and.w	r3, r3, #16
 8012848:	2b00      	cmp	r3, #0
 801284a:	d060      	beq.n	801290e <tcp_process+0x60a>
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012850:	4b11      	ldr	r3, [pc, #68]	@ (8012898 <tcp_process+0x594>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	429a      	cmp	r2, r3
 8012856:	d15a      	bne.n	801290e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801285c:	2b00      	cmp	r3, #0
 801285e:	d156      	bne.n	801290e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	8b5b      	ldrh	r3, [r3, #26]
 8012864:	f043 0302 	orr.w	r3, r3, #2
 8012868:	b29a      	uxth	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7fe fdbc 	bl	80113ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012874:	4b13      	ldr	r3, [pc, #76]	@ (80128c4 <tcp_process+0x5c0>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	429a      	cmp	r2, r3
 801287c:	d105      	bne.n	801288a <tcp_process+0x586>
 801287e:	4b11      	ldr	r3, [pc, #68]	@ (80128c4 <tcp_process+0x5c0>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	68db      	ldr	r3, [r3, #12]
 8012884:	4a0f      	ldr	r2, [pc, #60]	@ (80128c4 <tcp_process+0x5c0>)
 8012886:	6013      	str	r3, [r2, #0]
 8012888:	e02e      	b.n	80128e8 <tcp_process+0x5e4>
 801288a:	4b0e      	ldr	r3, [pc, #56]	@ (80128c4 <tcp_process+0x5c0>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	617b      	str	r3, [r7, #20]
 8012890:	e027      	b.n	80128e2 <tcp_process+0x5de>
 8012892:	bf00      	nop
 8012894:	2401039c 	.word	0x2401039c
 8012898:	24010394 	.word	0x24010394
 801289c:	2401039a 	.word	0x2401039a
 80128a0:	24010390 	.word	0x24010390
 80128a4:	24010380 	.word	0x24010380
 80128a8:	240098a8 	.word	0x240098a8
 80128ac:	240098ac 	.word	0x240098ac
 80128b0:	0801ac70 	.word	0x0801ac70
 80128b4:	0801af10 	.word	0x0801af10
 80128b8:	0801acbc 	.word	0x0801acbc
 80128bc:	24010398 	.word	0x24010398
 80128c0:	2401039d 	.word	0x2401039d
 80128c4:	24010364 	.word	0x24010364
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	68db      	ldr	r3, [r3, #12]
 80128cc:	687a      	ldr	r2, [r7, #4]
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d104      	bne.n	80128dc <tcp_process+0x5d8>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	68da      	ldr	r2, [r3, #12]
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	60da      	str	r2, [r3, #12]
 80128da:	e005      	b.n	80128e8 <tcp_process+0x5e4>
 80128dc:	697b      	ldr	r3, [r7, #20]
 80128de:	68db      	ldr	r3, [r3, #12]
 80128e0:	617b      	str	r3, [r7, #20]
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d1ef      	bne.n	80128c8 <tcp_process+0x5c4>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	60da      	str	r2, [r3, #12]
 80128ee:	4b77      	ldr	r3, [pc, #476]	@ (8012acc <tcp_process+0x7c8>)
 80128f0:	2201      	movs	r2, #1
 80128f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	220a      	movs	r2, #10
 80128f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80128fa:	4b75      	ldr	r3, [pc, #468]	@ (8012ad0 <tcp_process+0x7cc>)
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	60da      	str	r2, [r3, #12]
 8012902:	4a73      	ldr	r2, [pc, #460]	@ (8012ad0 <tcp_process+0x7cc>)
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	6013      	str	r3, [r2, #0]
 8012908:	f002 fcf6 	bl	80152f8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801290c:	e0d2      	b.n	8012ab4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	8b5b      	ldrh	r3, [r3, #26]
 8012912:	f043 0302 	orr.w	r3, r3, #2
 8012916:	b29a      	uxth	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2208      	movs	r2, #8
 8012920:	751a      	strb	r2, [r3, #20]
      break;
 8012922:	e0c7      	b.n	8012ab4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012924:	4b6b      	ldr	r3, [pc, #428]	@ (8012ad4 <tcp_process+0x7d0>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	f003 0310 	and.w	r3, r3, #16
 801292c:	2b00      	cmp	r3, #0
 801292e:	f000 80c1 	beq.w	8012ab4 <tcp_process+0x7b0>
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012936:	4b68      	ldr	r3, [pc, #416]	@ (8012ad8 <tcp_process+0x7d4>)
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	429a      	cmp	r2, r3
 801293c:	f040 80ba 	bne.w	8012ab4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012944:	2b00      	cmp	r3, #0
 8012946:	f040 80b5 	bne.w	8012ab4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	2206      	movs	r2, #6
 801294e:	751a      	strb	r2, [r3, #20]
      break;
 8012950:	e0b0      	b.n	8012ab4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 f9ca 	bl	8012cec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012958:	4b60      	ldr	r3, [pc, #384]	@ (8012adc <tcp_process+0x7d8>)
 801295a:	781b      	ldrb	r3, [r3, #0]
 801295c:	f003 0320 	and.w	r3, r3, #32
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 80a9 	beq.w	8012ab8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	8b5b      	ldrh	r3, [r3, #26]
 801296a:	f043 0302 	orr.w	r3, r3, #2
 801296e:	b29a      	uxth	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7fe fd39 	bl	80113ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801297a:	4b59      	ldr	r3, [pc, #356]	@ (8012ae0 <tcp_process+0x7dc>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	687a      	ldr	r2, [r7, #4]
 8012980:	429a      	cmp	r2, r3
 8012982:	d105      	bne.n	8012990 <tcp_process+0x68c>
 8012984:	4b56      	ldr	r3, [pc, #344]	@ (8012ae0 <tcp_process+0x7dc>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	68db      	ldr	r3, [r3, #12]
 801298a:	4a55      	ldr	r2, [pc, #340]	@ (8012ae0 <tcp_process+0x7dc>)
 801298c:	6013      	str	r3, [r2, #0]
 801298e:	e013      	b.n	80129b8 <tcp_process+0x6b4>
 8012990:	4b53      	ldr	r3, [pc, #332]	@ (8012ae0 <tcp_process+0x7dc>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	613b      	str	r3, [r7, #16]
 8012996:	e00c      	b.n	80129b2 <tcp_process+0x6ae>
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	68db      	ldr	r3, [r3, #12]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d104      	bne.n	80129ac <tcp_process+0x6a8>
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	68da      	ldr	r2, [r3, #12]
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	60da      	str	r2, [r3, #12]
 80129aa:	e005      	b.n	80129b8 <tcp_process+0x6b4>
 80129ac:	693b      	ldr	r3, [r7, #16]
 80129ae:	68db      	ldr	r3, [r3, #12]
 80129b0:	613b      	str	r3, [r7, #16]
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d1ef      	bne.n	8012998 <tcp_process+0x694>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	2200      	movs	r2, #0
 80129bc:	60da      	str	r2, [r3, #12]
 80129be:	4b43      	ldr	r3, [pc, #268]	@ (8012acc <tcp_process+0x7c8>)
 80129c0:	2201      	movs	r2, #1
 80129c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	220a      	movs	r2, #10
 80129c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80129ca:	4b41      	ldr	r3, [pc, #260]	@ (8012ad0 <tcp_process+0x7cc>)
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	60da      	str	r2, [r3, #12]
 80129d2:	4a3f      	ldr	r2, [pc, #252]	@ (8012ad0 <tcp_process+0x7cc>)
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6013      	str	r3, [r2, #0]
 80129d8:	f002 fc8e 	bl	80152f8 <tcp_timer_needed>
      }
      break;
 80129dc:	e06c      	b.n	8012ab8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f000 f984 	bl	8012cec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80129e4:	4b3b      	ldr	r3, [pc, #236]	@ (8012ad4 <tcp_process+0x7d0>)
 80129e6:	781b      	ldrb	r3, [r3, #0]
 80129e8:	f003 0310 	and.w	r3, r3, #16
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d065      	beq.n	8012abc <tcp_process+0x7b8>
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80129f4:	4b38      	ldr	r3, [pc, #224]	@ (8012ad8 <tcp_process+0x7d4>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	429a      	cmp	r2, r3
 80129fa:	d15f      	bne.n	8012abc <tcp_process+0x7b8>
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d15b      	bne.n	8012abc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012a04:	6878      	ldr	r0, [r7, #4]
 8012a06:	f7fe fcf1 	bl	80113ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012a0a:	4b35      	ldr	r3, [pc, #212]	@ (8012ae0 <tcp_process+0x7dc>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	687a      	ldr	r2, [r7, #4]
 8012a10:	429a      	cmp	r2, r3
 8012a12:	d105      	bne.n	8012a20 <tcp_process+0x71c>
 8012a14:	4b32      	ldr	r3, [pc, #200]	@ (8012ae0 <tcp_process+0x7dc>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	4a31      	ldr	r2, [pc, #196]	@ (8012ae0 <tcp_process+0x7dc>)
 8012a1c:	6013      	str	r3, [r2, #0]
 8012a1e:	e013      	b.n	8012a48 <tcp_process+0x744>
 8012a20:	4b2f      	ldr	r3, [pc, #188]	@ (8012ae0 <tcp_process+0x7dc>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	60fb      	str	r3, [r7, #12]
 8012a26:	e00c      	b.n	8012a42 <tcp_process+0x73e>
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	68db      	ldr	r3, [r3, #12]
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d104      	bne.n	8012a3c <tcp_process+0x738>
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	68da      	ldr	r2, [r3, #12]
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	60da      	str	r2, [r3, #12]
 8012a3a:	e005      	b.n	8012a48 <tcp_process+0x744>
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	60fb      	str	r3, [r7, #12]
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d1ef      	bne.n	8012a28 <tcp_process+0x724>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	60da      	str	r2, [r3, #12]
 8012a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8012acc <tcp_process+0x7c8>)
 8012a50:	2201      	movs	r2, #1
 8012a52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	220a      	movs	r2, #10
 8012a58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8012ad0 <tcp_process+0x7cc>)
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	60da      	str	r2, [r3, #12]
 8012a62:	4a1b      	ldr	r2, [pc, #108]	@ (8012ad0 <tcp_process+0x7cc>)
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	f002 fc46 	bl	80152f8 <tcp_timer_needed>
      }
      break;
 8012a6c:	e026      	b.n	8012abc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 f93c 	bl	8012cec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012a74:	4b17      	ldr	r3, [pc, #92]	@ (8012ad4 <tcp_process+0x7d0>)
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	f003 0310 	and.w	r3, r3, #16
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d01f      	beq.n	8012ac0 <tcp_process+0x7bc>
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012a84:	4b14      	ldr	r3, [pc, #80]	@ (8012ad8 <tcp_process+0x7d4>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d119      	bne.n	8012ac0 <tcp_process+0x7bc>
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d115      	bne.n	8012ac0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012a94:	4b11      	ldr	r3, [pc, #68]	@ (8012adc <tcp_process+0x7d8>)
 8012a96:	781b      	ldrb	r3, [r3, #0]
 8012a98:	f043 0310 	orr.w	r3, r3, #16
 8012a9c:	b2da      	uxtb	r2, r3
 8012a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8012adc <tcp_process+0x7d8>)
 8012aa0:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012aa2:	e00d      	b.n	8012ac0 <tcp_process+0x7bc>
    default:
      break;
 8012aa4:	bf00      	nop
 8012aa6:	e00c      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012aa8:	bf00      	nop
 8012aaa:	e00a      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012aac:	bf00      	nop
 8012aae:	e008      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012ab0:	bf00      	nop
 8012ab2:	e006      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012ab4:	bf00      	nop
 8012ab6:	e004      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012ab8:	bf00      	nop
 8012aba:	e002      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012abc:	bf00      	nop
 8012abe:	e000      	b.n	8012ac2 <tcp_process+0x7be>
      break;
 8012ac0:	bf00      	nop
  }
  return ERR_OK;
 8012ac2:	2300      	movs	r3, #0
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3724      	adds	r7, #36	@ 0x24
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd90      	pop	{r4, r7, pc}
 8012acc:	2401036c 	.word	0x2401036c
 8012ad0:	24010368 	.word	0x24010368
 8012ad4:	2401039c 	.word	0x2401039c
 8012ad8:	24010394 	.word	0x24010394
 8012adc:	2401039d 	.word	0x2401039d
 8012ae0:	24010364 	.word	0x24010364

08012ae4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012ae4:	b590      	push	{r4, r7, lr}
 8012ae6:	b085      	sub	sp, #20
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d106      	bne.n	8012b02 <tcp_oos_insert_segment+0x1e>
 8012af4:	4b3b      	ldr	r3, [pc, #236]	@ (8012be4 <tcp_oos_insert_segment+0x100>)
 8012af6:	f240 421f 	movw	r2, #1055	@ 0x41f
 8012afa:	493b      	ldr	r1, [pc, #236]	@ (8012be8 <tcp_oos_insert_segment+0x104>)
 8012afc:	483b      	ldr	r0, [pc, #236]	@ (8012bec <tcp_oos_insert_segment+0x108>)
 8012afe:	f005 ff61 	bl	80189c4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	899b      	ldrh	r3, [r3, #12]
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	4618      	mov	r0, r3
 8012b0c:	f7fb fb2e 	bl	800e16c <lwip_htons>
 8012b10:	4603      	mov	r3, r0
 8012b12:	b2db      	uxtb	r3, r3
 8012b14:	f003 0301 	and.w	r3, r3, #1
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d028      	beq.n	8012b6e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012b1c:	6838      	ldr	r0, [r7, #0]
 8012b1e:	f7fe fa63 	bl	8010fe8 <tcp_segs_free>
    next = NULL;
 8012b22:	2300      	movs	r3, #0
 8012b24:	603b      	str	r3, [r7, #0]
 8012b26:	e056      	b.n	8012bd6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	899b      	ldrh	r3, [r3, #12]
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	4618      	mov	r0, r3
 8012b32:	f7fb fb1b 	bl	800e16c <lwip_htons>
 8012b36:	4603      	mov	r3, r0
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	f003 0301 	and.w	r3, r3, #1
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d00d      	beq.n	8012b5e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	899b      	ldrh	r3, [r3, #12]
 8012b48:	b29c      	uxth	r4, r3
 8012b4a:	2001      	movs	r0, #1
 8012b4c:	f7fb fb0e 	bl	800e16c <lwip_htons>
 8012b50:	4603      	mov	r3, r0
 8012b52:	461a      	mov	r2, r3
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	4322      	orrs	r2, r4
 8012b5a:	b292      	uxth	r2, r2
 8012b5c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012b5e:	683b      	ldr	r3, [r7, #0]
 8012b60:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012b62:	683b      	ldr	r3, [r7, #0]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012b68:	68f8      	ldr	r0, [r7, #12]
 8012b6a:	f7fe fa52 	bl	8011012 <tcp_seg_free>
    while (next &&
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00e      	beq.n	8012b92 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	891b      	ldrh	r3, [r3, #8]
 8012b78:	461a      	mov	r2, r3
 8012b7a:	4b1d      	ldr	r3, [pc, #116]	@ (8012bf0 <tcp_oos_insert_segment+0x10c>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	441a      	add	r2, r3
 8012b80:	683b      	ldr	r3, [r7, #0]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	6839      	ldr	r1, [r7, #0]
 8012b88:	8909      	ldrh	r1, [r1, #8]
 8012b8a:	440b      	add	r3, r1
 8012b8c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	daca      	bge.n	8012b28 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d01e      	beq.n	8012bd6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	891b      	ldrh	r3, [r3, #8]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	4b14      	ldr	r3, [pc, #80]	@ (8012bf0 <tcp_oos_insert_segment+0x10c>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	441a      	add	r2, r3
 8012ba4:	683b      	ldr	r3, [r7, #0]
 8012ba6:	68db      	ldr	r3, [r3, #12]
 8012ba8:	685b      	ldr	r3, [r3, #4]
 8012baa:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	dd12      	ble.n	8012bd6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	68db      	ldr	r3, [r3, #12]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	b29a      	uxth	r2, r3
 8012bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8012bf0 <tcp_oos_insert_segment+0x10c>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	1ad3      	subs	r3, r2, r3
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	685a      	ldr	r2, [r3, #4]
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	891b      	ldrh	r3, [r3, #8]
 8012bce:	4619      	mov	r1, r3
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	f7fc fe03 	bl	800f7dc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	683a      	ldr	r2, [r7, #0]
 8012bda:	601a      	str	r2, [r3, #0]
}
 8012bdc:	bf00      	nop
 8012bde:	3714      	adds	r7, #20
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd90      	pop	{r4, r7, pc}
 8012be4:	0801ac70 	.word	0x0801ac70
 8012be8:	0801af30 	.word	0x0801af30
 8012bec:	0801acbc 	.word	0x0801acbc
 8012bf0:	24010390 	.word	0x24010390

08012bf4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012bf4:	b5b0      	push	{r4, r5, r7, lr}
 8012bf6:	b086      	sub	sp, #24
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
 8012c00:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012c02:	e03e      	b.n	8012c82 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012c04:	68bb      	ldr	r3, [r7, #8]
 8012c06:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012c08:	68bb      	ldr	r3, [r7, #8]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7fc fff6 	bl	800fc04 <pbuf_clen>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012c22:	8a7a      	ldrh	r2, [r7, #18]
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d906      	bls.n	8012c36 <tcp_free_acked_segments+0x42>
 8012c28:	4b2a      	ldr	r3, [pc, #168]	@ (8012cd4 <tcp_free_acked_segments+0xe0>)
 8012c2a:	f240 4257 	movw	r2, #1111	@ 0x457
 8012c2e:	492a      	ldr	r1, [pc, #168]	@ (8012cd8 <tcp_free_acked_segments+0xe4>)
 8012c30:	482a      	ldr	r0, [pc, #168]	@ (8012cdc <tcp_free_acked_segments+0xe8>)
 8012c32:	f005 fec7 	bl	80189c4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8012c3c:	8a7b      	ldrh	r3, [r7, #18]
 8012c3e:	1ad3      	subs	r3, r2, r3
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	891a      	ldrh	r2, [r3, #8]
 8012c4c:	4b24      	ldr	r3, [pc, #144]	@ (8012ce0 <tcp_free_acked_segments+0xec>)
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	4413      	add	r3, r2
 8012c52:	b29a      	uxth	r2, r3
 8012c54:	4b22      	ldr	r3, [pc, #136]	@ (8012ce0 <tcp_free_acked_segments+0xec>)
 8012c56:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012c58:	6978      	ldr	r0, [r7, #20]
 8012c5a:	f7fe f9da 	bl	8011012 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00c      	beq.n	8012c82 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012c68:	68bb      	ldr	r3, [r7, #8]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d109      	bne.n	8012c82 <tcp_free_acked_segments+0x8e>
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d106      	bne.n	8012c82 <tcp_free_acked_segments+0x8e>
 8012c74:	4b17      	ldr	r3, [pc, #92]	@ (8012cd4 <tcp_free_acked_segments+0xe0>)
 8012c76:	f240 4261 	movw	r2, #1121	@ 0x461
 8012c7a:	491a      	ldr	r1, [pc, #104]	@ (8012ce4 <tcp_free_acked_segments+0xf0>)
 8012c7c:	4817      	ldr	r0, [pc, #92]	@ (8012cdc <tcp_free_acked_segments+0xe8>)
 8012c7e:	f005 fea1 	bl	80189c4 <iprintf>
  while (seg_list != NULL &&
 8012c82:	68bb      	ldr	r3, [r7, #8]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d020      	beq.n	8012cca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012c88:	68bb      	ldr	r3, [r7, #8]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	685b      	ldr	r3, [r3, #4]
 8012c8e:	4618      	mov	r0, r3
 8012c90:	f7fb fa81 	bl	800e196 <lwip_htonl>
 8012c94:	4604      	mov	r4, r0
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	891b      	ldrh	r3, [r3, #8]
 8012c9a:	461d      	mov	r5, r3
 8012c9c:	68bb      	ldr	r3, [r7, #8]
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	899b      	ldrh	r3, [r3, #12]
 8012ca2:	b29b      	uxth	r3, r3
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7fb fa61 	bl	800e16c <lwip_htons>
 8012caa:	4603      	mov	r3, r0
 8012cac:	b2db      	uxtb	r3, r3
 8012cae:	f003 0303 	and.w	r3, r3, #3
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d001      	beq.n	8012cba <tcp_free_acked_segments+0xc6>
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	e000      	b.n	8012cbc <tcp_free_acked_segments+0xc8>
 8012cba:	2300      	movs	r3, #0
 8012cbc:	442b      	add	r3, r5
 8012cbe:	18e2      	adds	r2, r4, r3
 8012cc0:	4b09      	ldr	r3, [pc, #36]	@ (8012ce8 <tcp_free_acked_segments+0xf4>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	dd9c      	ble.n	8012c04 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012cca:	68bb      	ldr	r3, [r7, #8]
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3718      	adds	r7, #24
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8012cd4:	0801ac70 	.word	0x0801ac70
 8012cd8:	0801af58 	.word	0x0801af58
 8012cdc:	0801acbc 	.word	0x0801acbc
 8012ce0:	24010398 	.word	0x24010398
 8012ce4:	0801af80 	.word	0x0801af80
 8012ce8:	24010394 	.word	0x24010394

08012cec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012cec:	b5b0      	push	{r4, r5, r7, lr}
 8012cee:	b094      	sub	sp, #80	@ 0x50
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d106      	bne.n	8012d0c <tcp_receive+0x20>
 8012cfe:	4b91      	ldr	r3, [pc, #580]	@ (8012f44 <tcp_receive+0x258>)
 8012d00:	f240 427b 	movw	r2, #1147	@ 0x47b
 8012d04:	4990      	ldr	r1, [pc, #576]	@ (8012f48 <tcp_receive+0x25c>)
 8012d06:	4891      	ldr	r0, [pc, #580]	@ (8012f4c <tcp_receive+0x260>)
 8012d08:	f005 fe5c 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	7d1b      	ldrb	r3, [r3, #20]
 8012d10:	2b03      	cmp	r3, #3
 8012d12:	d806      	bhi.n	8012d22 <tcp_receive+0x36>
 8012d14:	4b8b      	ldr	r3, [pc, #556]	@ (8012f44 <tcp_receive+0x258>)
 8012d16:	f240 427c 	movw	r2, #1148	@ 0x47c
 8012d1a:	498d      	ldr	r1, [pc, #564]	@ (8012f50 <tcp_receive+0x264>)
 8012d1c:	488b      	ldr	r0, [pc, #556]	@ (8012f4c <tcp_receive+0x260>)
 8012d1e:	f005 fe51 	bl	80189c4 <iprintf>

  if (flags & TCP_ACK) {
 8012d22:	4b8c      	ldr	r3, [pc, #560]	@ (8012f54 <tcp_receive+0x268>)
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	f003 0310 	and.w	r3, r3, #16
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	f000 8264 	beq.w	80131f8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012d36:	461a      	mov	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012d3c:	4413      	add	r3, r2
 8012d3e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012d44:	4b84      	ldr	r3, [pc, #528]	@ (8012f58 <tcp_receive+0x26c>)
 8012d46:	681b      	ldr	r3, [r3, #0]
 8012d48:	1ad3      	subs	r3, r2, r3
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	db1b      	blt.n	8012d86 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8012d52:	4b81      	ldr	r3, [pc, #516]	@ (8012f58 <tcp_receive+0x26c>)
 8012d54:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d106      	bne.n	8012d68 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012d5e:	4b7f      	ldr	r3, [pc, #508]	@ (8012f5c <tcp_receive+0x270>)
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	1ad3      	subs	r3, r2, r3
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	db0e      	blt.n	8012d86 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8012d6c:	4b7b      	ldr	r3, [pc, #492]	@ (8012f5c <tcp_receive+0x270>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d125      	bne.n	8012dc0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012d74:	4b7a      	ldr	r3, [pc, #488]	@ (8012f60 <tcp_receive+0x274>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	89db      	ldrh	r3, [r3, #14]
 8012d7a:	b29a      	uxth	r2, r3
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d91c      	bls.n	8012dc0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012d86:	4b76      	ldr	r3, [pc, #472]	@ (8012f60 <tcp_receive+0x274>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	89db      	ldrh	r3, [r3, #14]
 8012d8c:	b29a      	uxth	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d205      	bcs.n	8012db0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8012db0:	4b69      	ldr	r3, [pc, #420]	@ (8012f58 <tcp_receive+0x26c>)
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8012db8:	4b68      	ldr	r3, [pc, #416]	@ (8012f5c <tcp_receive+0x270>)
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012dc0:	4b66      	ldr	r3, [pc, #408]	@ (8012f5c <tcp_receive+0x270>)
 8012dc2:	681a      	ldr	r2, [r3, #0]
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012dc8:	1ad3      	subs	r3, r2, r3
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	dc58      	bgt.n	8012e80 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012dce:	4b65      	ldr	r3, [pc, #404]	@ (8012f64 <tcp_receive+0x278>)
 8012dd0:	881b      	ldrh	r3, [r3, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d14b      	bne.n	8012e6e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012dda:	687a      	ldr	r2, [r7, #4]
 8012ddc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8012de0:	4413      	add	r3, r2
 8012de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d142      	bne.n	8012e6e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	db3d      	blt.n	8012e6e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012df6:	4b59      	ldr	r3, [pc, #356]	@ (8012f5c <tcp_receive+0x270>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d137      	bne.n	8012e6e <tcp_receive+0x182>
              found_dupack = 1;
 8012dfe:	2301      	movs	r3, #1
 8012e00:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012e08:	2bff      	cmp	r3, #255	@ 0xff
 8012e0a:	d007      	beq.n	8012e1c <tcp_receive+0x130>
                ++pcb->dupacks;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012e12:	3301      	adds	r3, #1
 8012e14:	b2da      	uxtb	r2, r3
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012e22:	2b03      	cmp	r3, #3
 8012e24:	d91b      	bls.n	8012e5e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e30:	4413      	add	r3, r2
 8012e32:	b29a      	uxth	r2, r3
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012e3a:	429a      	cmp	r2, r3
 8012e3c:	d30a      	bcc.n	8012e54 <tcp_receive+0x168>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012e48:	4413      	add	r3, r2
 8012e4a:	b29a      	uxth	r2, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012e52:	e004      	b.n	8012e5e <tcp_receive+0x172>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e5a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8012e64:	2b02      	cmp	r3, #2
 8012e66:	d902      	bls.n	8012e6e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012e68:	6878      	ldr	r0, [r7, #4]
 8012e6a:	f001 fee9 	bl	8014c40 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012e6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	f040 8161 	bne.w	8013138 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2200      	movs	r2, #0
 8012e7a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012e7e:	e15b      	b.n	8013138 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012e80:	4b36      	ldr	r3, [pc, #216]	@ (8012f5c <tcp_receive+0x270>)
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012e88:	1ad3      	subs	r3, r2, r3
 8012e8a:	3b01      	subs	r3, #1
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	f2c0 814e 	blt.w	801312e <tcp_receive+0x442>
 8012e92:	4b32      	ldr	r3, [pc, #200]	@ (8012f5c <tcp_receive+0x270>)
 8012e94:	681a      	ldr	r2, [r3, #0]
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e9a:	1ad3      	subs	r3, r2, r3
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	f300 8146 	bgt.w	801312e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	8b5b      	ldrh	r3, [r3, #26]
 8012ea6:	f003 0304 	and.w	r3, r3, #4
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d010      	beq.n	8012ed0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	8b5b      	ldrh	r3, [r3, #26]
 8012eb2:	f023 0304 	bic.w	r3, r3, #4
 8012eb6:	b29a      	uxth	r2, r3
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012ede:	10db      	asrs	r3, r3, #3
 8012ee0:	b21b      	sxth	r3, r3
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	4413      	add	r3, r2
 8012eee:	b29b      	uxth	r3, r3
 8012ef0:	b21a      	sxth	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012ef8:	4b18      	ldr	r3, [pc, #96]	@ (8012f5c <tcp_receive+0x270>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f02:	b29b      	uxth	r3, r3
 8012f04:	1ad3      	subs	r3, r2, r3
 8012f06:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8012f10:	4b12      	ldr	r3, [pc, #72]	@ (8012f5c <tcp_receive+0x270>)
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	7d1b      	ldrb	r3, [r3, #20]
 8012f1c:	2b03      	cmp	r3, #3
 8012f1e:	f240 8097 	bls.w	8013050 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d245      	bcs.n	8012fbe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	8b5b      	ldrh	r3, [r3, #26]
 8012f36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	d014      	beq.n	8012f68 <tcp_receive+0x27c>
 8012f3e:	2301      	movs	r3, #1
 8012f40:	e013      	b.n	8012f6a <tcp_receive+0x27e>
 8012f42:	bf00      	nop
 8012f44:	0801ac70 	.word	0x0801ac70
 8012f48:	0801afa0 	.word	0x0801afa0
 8012f4c:	0801acbc 	.word	0x0801acbc
 8012f50:	0801afbc 	.word	0x0801afbc
 8012f54:	2401039c 	.word	0x2401039c
 8012f58:	24010390 	.word	0x24010390
 8012f5c:	24010394 	.word	0x24010394
 8012f60:	24010380 	.word	0x24010380
 8012f64:	2401039a 	.word	0x2401039a
 8012f68:	2302      	movs	r3, #2
 8012f6a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012f6e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012f78:	fb12 f303 	smulbb	r3, r2, r3
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8012f80:	4293      	cmp	r3, r2
 8012f82:	bf28      	it	cs
 8012f84:	4613      	movcs	r3, r2
 8012f86:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012f8e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012f90:	4413      	add	r3, r2
 8012f92:	b29a      	uxth	r2, r3
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d309      	bcc.n	8012fb2 <tcp_receive+0x2c6>
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8012fa4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8012fa6:	4413      	add	r3, r2
 8012fa8:	b29a      	uxth	r2, r3
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012fb0:	e04e      	b.n	8013050 <tcp_receive+0x364>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012fb8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8012fbc:	e048      	b.n	8013050 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012fc4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012fc6:	4413      	add	r3, r2
 8012fc8:	b29a      	uxth	r2, r3
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d309      	bcc.n	8012fe8 <tcp_receive+0x2fc>
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012fda:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8012fdc:	4413      	add	r3, r2
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8012fe6:	e004      	b.n	8012ff2 <tcp_receive+0x306>
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012fee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d326      	bcc.n	8013050 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	b29a      	uxth	r2, r3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013022:	4413      	add	r3, r2
 8013024:	b29a      	uxth	r2, r3
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801302c:	429a      	cmp	r2, r3
 801302e:	d30a      	bcc.n	8013046 <tcp_receive+0x35a>
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801303a:	4413      	add	r3, r2
 801303c:	b29a      	uxth	r2, r3
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8013044:	e004      	b.n	8013050 <tcp_receive+0x364>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801304c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013058:	4a98      	ldr	r2, [pc, #608]	@ (80132bc <tcp_receive+0x5d0>)
 801305a:	6878      	ldr	r0, [r7, #4]
 801305c:	f7ff fdca 	bl	8012bf4 <tcp_free_acked_segments>
 8013060:	4602      	mov	r2, r0
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801306e:	4a94      	ldr	r2, [pc, #592]	@ (80132c0 <tcp_receive+0x5d4>)
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff fdbf 	bl	8012bf4 <tcp_free_acked_segments>
 8013076:	4602      	mov	r2, r0
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013080:	2b00      	cmp	r3, #0
 8013082:	d104      	bne.n	801308e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801308a:	861a      	strh	r2, [r3, #48]	@ 0x30
 801308c:	e002      	b.n	8013094 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2200      	movs	r2, #0
 8013092:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	2200      	movs	r2, #0
 8013098:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d103      	bne.n	80130aa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80130b0:	4b84      	ldr	r3, [pc, #528]	@ (80132c4 <tcp_receive+0x5d8>)
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	4413      	add	r3, r2
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	8b5b      	ldrh	r3, [r3, #26]
 80130c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d035      	beq.n	8013136 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d118      	bne.n	8013104 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d00c      	beq.n	80130f4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80130e2:	68db      	ldr	r3, [r3, #12]
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fb f855 	bl	800e196 <lwip_htonl>
 80130ec:	4603      	mov	r3, r0
 80130ee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	dc20      	bgt.n	8013136 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	8b5b      	ldrh	r3, [r3, #26]
 80130f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80130fc:	b29a      	uxth	r2, r3
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013102:	e018      	b.n	8013136 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801310c:	68db      	ldr	r3, [r3, #12]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	4618      	mov	r0, r3
 8013112:	f7fb f840 	bl	800e196 <lwip_htonl>
 8013116:	4603      	mov	r3, r0
 8013118:	1ae3      	subs	r3, r4, r3
 801311a:	2b00      	cmp	r3, #0
 801311c:	dc0b      	bgt.n	8013136 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	8b5b      	ldrh	r3, [r3, #26]
 8013122:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8013126:	b29a      	uxth	r2, r3
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801312c:	e003      	b.n	8013136 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f001 ff72 	bl	8015018 <tcp_send_empty_ack>
 8013134:	e000      	b.n	8013138 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013136:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801313c:	2b00      	cmp	r3, #0
 801313e:	d05b      	beq.n	80131f8 <tcp_receive+0x50c>
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013144:	4b60      	ldr	r3, [pc, #384]	@ (80132c8 <tcp_receive+0x5dc>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	da54      	bge.n	80131f8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801314e:	4b5f      	ldr	r3, [pc, #380]	@ (80132cc <tcp_receive+0x5e0>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	b29a      	uxth	r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013158:	b29b      	uxth	r3, r3
 801315a:	1ad3      	subs	r3, r2, r3
 801315c:	b29b      	uxth	r3, r3
 801315e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8013162:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801316c:	10db      	asrs	r3, r3, #3
 801316e:	b21b      	sxth	r3, r3
 8013170:	b29b      	uxth	r3, r3
 8013172:	1ad3      	subs	r3, r2, r3
 8013174:	b29b      	uxth	r3, r3
 8013176:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013180:	b29a      	uxth	r2, r3
 8013182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8013186:	4413      	add	r3, r2
 8013188:	b29b      	uxth	r3, r3
 801318a:	b21a      	sxth	r2, r3
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8013190:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8013194:	2b00      	cmp	r3, #0
 8013196:	da05      	bge.n	80131a4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801319c:	425b      	negs	r3, r3
 801319e:	b29b      	uxth	r3, r3
 80131a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80131a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80131ae:	109b      	asrs	r3, r3, #2
 80131b0:	b21b      	sxth	r3, r3
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80131c8:	4413      	add	r3, r2
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	b21a      	sxth	r2, r3
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80131d8:	10db      	asrs	r3, r3, #3
 80131da:	b21b      	sxth	r3, r3
 80131dc:	b29a      	uxth	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80131e4:	b29b      	uxth	r3, r3
 80131e6:	4413      	add	r3, r2
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	b21a      	sxth	r2, r3
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	2200      	movs	r2, #0
 80131f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80131f8:	4b35      	ldr	r3, [pc, #212]	@ (80132d0 <tcp_receive+0x5e4>)
 80131fa:	881b      	ldrh	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f000 84df 	beq.w	8013bc0 <tcp_receive+0xed4>
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	7d1b      	ldrb	r3, [r3, #20]
 8013206:	2b06      	cmp	r3, #6
 8013208:	f200 84da 	bhi.w	8013bc0 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013210:	4b30      	ldr	r3, [pc, #192]	@ (80132d4 <tcp_receive+0x5e8>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	1ad3      	subs	r3, r2, r3
 8013216:	3b01      	subs	r3, #1
 8013218:	2b00      	cmp	r3, #0
 801321a:	f2c0 808f 	blt.w	801333c <tcp_receive+0x650>
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013222:	4b2b      	ldr	r3, [pc, #172]	@ (80132d0 <tcp_receive+0x5e4>)
 8013224:	881b      	ldrh	r3, [r3, #0]
 8013226:	4619      	mov	r1, r3
 8013228:	4b2a      	ldr	r3, [pc, #168]	@ (80132d4 <tcp_receive+0x5e8>)
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	440b      	add	r3, r1
 801322e:	1ad3      	subs	r3, r2, r3
 8013230:	3301      	adds	r3, #1
 8013232:	2b00      	cmp	r3, #0
 8013234:	f300 8082 	bgt.w	801333c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8013238:	4b27      	ldr	r3, [pc, #156]	@ (80132d8 <tcp_receive+0x5ec>)
 801323a:	685b      	ldr	r3, [r3, #4]
 801323c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013242:	4b24      	ldr	r3, [pc, #144]	@ (80132d4 <tcp_receive+0x5e8>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801324a:	4b23      	ldr	r3, [pc, #140]	@ (80132d8 <tcp_receive+0x5ec>)
 801324c:	685b      	ldr	r3, [r3, #4]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d106      	bne.n	8013260 <tcp_receive+0x574>
 8013252:	4b22      	ldr	r3, [pc, #136]	@ (80132dc <tcp_receive+0x5f0>)
 8013254:	f240 5294 	movw	r2, #1428	@ 0x594
 8013258:	4921      	ldr	r1, [pc, #132]	@ (80132e0 <tcp_receive+0x5f4>)
 801325a:	4822      	ldr	r0, [pc, #136]	@ (80132e4 <tcp_receive+0x5f8>)
 801325c:	f005 fbb2 	bl	80189c4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8013260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013262:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013266:	4293      	cmp	r3, r2
 8013268:	d906      	bls.n	8013278 <tcp_receive+0x58c>
 801326a:	4b1c      	ldr	r3, [pc, #112]	@ (80132dc <tcp_receive+0x5f0>)
 801326c:	f240 5295 	movw	r2, #1429	@ 0x595
 8013270:	491d      	ldr	r1, [pc, #116]	@ (80132e8 <tcp_receive+0x5fc>)
 8013272:	481c      	ldr	r0, [pc, #112]	@ (80132e4 <tcp_receive+0x5f8>)
 8013274:	f005 fba6 	bl	80189c4 <iprintf>
      off = (u16_t)off32;
 8013278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801327e:	4b16      	ldr	r3, [pc, #88]	@ (80132d8 <tcp_receive+0x5ec>)
 8013280:	685b      	ldr	r3, [r3, #4]
 8013282:	891b      	ldrh	r3, [r3, #8]
 8013284:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013288:	429a      	cmp	r2, r3
 801328a:	d906      	bls.n	801329a <tcp_receive+0x5ae>
 801328c:	4b13      	ldr	r3, [pc, #76]	@ (80132dc <tcp_receive+0x5f0>)
 801328e:	f240 5297 	movw	r2, #1431	@ 0x597
 8013292:	4916      	ldr	r1, [pc, #88]	@ (80132ec <tcp_receive+0x600>)
 8013294:	4813      	ldr	r0, [pc, #76]	@ (80132e4 <tcp_receive+0x5f8>)
 8013296:	f005 fb95 	bl	80189c4 <iprintf>
      inseg.len -= off;
 801329a:	4b0f      	ldr	r3, [pc, #60]	@ (80132d8 <tcp_receive+0x5ec>)
 801329c:	891a      	ldrh	r2, [r3, #8]
 801329e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80132a2:	1ad3      	subs	r3, r2, r3
 80132a4:	b29a      	uxth	r2, r3
 80132a6:	4b0c      	ldr	r3, [pc, #48]	@ (80132d8 <tcp_receive+0x5ec>)
 80132a8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80132aa:	4b0b      	ldr	r3, [pc, #44]	@ (80132d8 <tcp_receive+0x5ec>)
 80132ac:	685b      	ldr	r3, [r3, #4]
 80132ae:	891a      	ldrh	r2, [r3, #8]
 80132b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80132b4:	1ad3      	subs	r3, r2, r3
 80132b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80132b8:	e02a      	b.n	8013310 <tcp_receive+0x624>
 80132ba:	bf00      	nop
 80132bc:	0801afd8 	.word	0x0801afd8
 80132c0:	0801afe0 	.word	0x0801afe0
 80132c4:	24010398 	.word	0x24010398
 80132c8:	24010394 	.word	0x24010394
 80132cc:	24010358 	.word	0x24010358
 80132d0:	2401039a 	.word	0x2401039a
 80132d4:	24010390 	.word	0x24010390
 80132d8:	24010370 	.word	0x24010370
 80132dc:	0801ac70 	.word	0x0801ac70
 80132e0:	0801afe8 	.word	0x0801afe8
 80132e4:	0801acbc 	.word	0x0801acbc
 80132e8:	0801aff8 	.word	0x0801aff8
 80132ec:	0801b008 	.word	0x0801b008
        off -= p->len;
 80132f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80132f2:	895b      	ldrh	r3, [r3, #10]
 80132f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80132f8:	1ad3      	subs	r3, r2, r3
 80132fa:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80132fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013300:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8013302:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8013304:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013306:	2200      	movs	r2, #0
 8013308:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801330a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8013310:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013312:	895b      	ldrh	r3, [r3, #10]
 8013314:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013318:	429a      	cmp	r2, r3
 801331a:	d8e9      	bhi.n	80132f0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801331c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8013320:	4619      	mov	r1, r3
 8013322:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8013324:	f7fc fb5a 	bl	800f9dc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801332c:	4a90      	ldr	r2, [pc, #576]	@ (8013570 <tcp_receive+0x884>)
 801332e:	6013      	str	r3, [r2, #0]
 8013330:	4b90      	ldr	r3, [pc, #576]	@ (8013574 <tcp_receive+0x888>)
 8013332:	68db      	ldr	r3, [r3, #12]
 8013334:	4a8e      	ldr	r2, [pc, #568]	@ (8013570 <tcp_receive+0x884>)
 8013336:	6812      	ldr	r2, [r2, #0]
 8013338:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801333a:	e00d      	b.n	8013358 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801333c:	4b8c      	ldr	r3, [pc, #560]	@ (8013570 <tcp_receive+0x884>)
 801333e:	681a      	ldr	r2, [r3, #0]
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013344:	1ad3      	subs	r3, r2, r3
 8013346:	2b00      	cmp	r3, #0
 8013348:	da06      	bge.n	8013358 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	8b5b      	ldrh	r3, [r3, #26]
 801334e:	f043 0302 	orr.w	r3, r3, #2
 8013352:	b29a      	uxth	r2, r3
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013358:	4b85      	ldr	r3, [pc, #532]	@ (8013570 <tcp_receive+0x884>)
 801335a:	681a      	ldr	r2, [r3, #0]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013360:	1ad3      	subs	r3, r2, r3
 8013362:	2b00      	cmp	r3, #0
 8013364:	f2c0 8427 	blt.w	8013bb6 <tcp_receive+0xeca>
 8013368:	4b81      	ldr	r3, [pc, #516]	@ (8013570 <tcp_receive+0x884>)
 801336a:	681a      	ldr	r2, [r3, #0]
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013370:	6879      	ldr	r1, [r7, #4]
 8013372:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013374:	440b      	add	r3, r1
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	3301      	adds	r3, #1
 801337a:	2b00      	cmp	r3, #0
 801337c:	f300 841b 	bgt.w	8013bb6 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013384:	4b7a      	ldr	r3, [pc, #488]	@ (8013570 <tcp_receive+0x884>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	429a      	cmp	r2, r3
 801338a:	f040 8298 	bne.w	80138be <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801338e:	4b79      	ldr	r3, [pc, #484]	@ (8013574 <tcp_receive+0x888>)
 8013390:	891c      	ldrh	r4, [r3, #8]
 8013392:	4b78      	ldr	r3, [pc, #480]	@ (8013574 <tcp_receive+0x888>)
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	899b      	ldrh	r3, [r3, #12]
 8013398:	b29b      	uxth	r3, r3
 801339a:	4618      	mov	r0, r3
 801339c:	f7fa fee6 	bl	800e16c <lwip_htons>
 80133a0:	4603      	mov	r3, r0
 80133a2:	b2db      	uxtb	r3, r3
 80133a4:	f003 0303 	and.w	r3, r3, #3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d001      	beq.n	80133b0 <tcp_receive+0x6c4>
 80133ac:	2301      	movs	r3, #1
 80133ae:	e000      	b.n	80133b2 <tcp_receive+0x6c6>
 80133b0:	2300      	movs	r3, #0
 80133b2:	4423      	add	r3, r4
 80133b4:	b29a      	uxth	r2, r3
 80133b6:	4b70      	ldr	r3, [pc, #448]	@ (8013578 <tcp_receive+0x88c>)
 80133b8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80133be:	4b6e      	ldr	r3, [pc, #440]	@ (8013578 <tcp_receive+0x88c>)
 80133c0:	881b      	ldrh	r3, [r3, #0]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d274      	bcs.n	80134b0 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80133c6:	4b6b      	ldr	r3, [pc, #428]	@ (8013574 <tcp_receive+0x888>)
 80133c8:	68db      	ldr	r3, [r3, #12]
 80133ca:	899b      	ldrh	r3, [r3, #12]
 80133cc:	b29b      	uxth	r3, r3
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fa fecc 	bl	800e16c <lwip_htons>
 80133d4:	4603      	mov	r3, r0
 80133d6:	b2db      	uxtb	r3, r3
 80133d8:	f003 0301 	and.w	r3, r3, #1
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d01e      	beq.n	801341e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80133e0:	4b64      	ldr	r3, [pc, #400]	@ (8013574 <tcp_receive+0x888>)
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	899b      	ldrh	r3, [r3, #12]
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	b21b      	sxth	r3, r3
 80133ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80133ee:	b21c      	sxth	r4, r3
 80133f0:	4b60      	ldr	r3, [pc, #384]	@ (8013574 <tcp_receive+0x888>)
 80133f2:	68db      	ldr	r3, [r3, #12]
 80133f4:	899b      	ldrh	r3, [r3, #12]
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	4618      	mov	r0, r3
 80133fa:	f7fa feb7 	bl	800e16c <lwip_htons>
 80133fe:	4603      	mov	r3, r0
 8013400:	b2db      	uxtb	r3, r3
 8013402:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013406:	b29b      	uxth	r3, r3
 8013408:	4618      	mov	r0, r3
 801340a:	f7fa feaf 	bl	800e16c <lwip_htons>
 801340e:	4603      	mov	r3, r0
 8013410:	b21b      	sxth	r3, r3
 8013412:	4323      	orrs	r3, r4
 8013414:	b21a      	sxth	r2, r3
 8013416:	4b57      	ldr	r3, [pc, #348]	@ (8013574 <tcp_receive+0x888>)
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	b292      	uxth	r2, r2
 801341c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013422:	4b54      	ldr	r3, [pc, #336]	@ (8013574 <tcp_receive+0x888>)
 8013424:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013426:	4b53      	ldr	r3, [pc, #332]	@ (8013574 <tcp_receive+0x888>)
 8013428:	68db      	ldr	r3, [r3, #12]
 801342a:	899b      	ldrh	r3, [r3, #12]
 801342c:	b29b      	uxth	r3, r3
 801342e:	4618      	mov	r0, r3
 8013430:	f7fa fe9c 	bl	800e16c <lwip_htons>
 8013434:	4603      	mov	r3, r0
 8013436:	b2db      	uxtb	r3, r3
 8013438:	f003 0302 	and.w	r3, r3, #2
 801343c:	2b00      	cmp	r3, #0
 801343e:	d005      	beq.n	801344c <tcp_receive+0x760>
            inseg.len -= 1;
 8013440:	4b4c      	ldr	r3, [pc, #304]	@ (8013574 <tcp_receive+0x888>)
 8013442:	891b      	ldrh	r3, [r3, #8]
 8013444:	3b01      	subs	r3, #1
 8013446:	b29a      	uxth	r2, r3
 8013448:	4b4a      	ldr	r3, [pc, #296]	@ (8013574 <tcp_receive+0x888>)
 801344a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801344c:	4b49      	ldr	r3, [pc, #292]	@ (8013574 <tcp_receive+0x888>)
 801344e:	685b      	ldr	r3, [r3, #4]
 8013450:	4a48      	ldr	r2, [pc, #288]	@ (8013574 <tcp_receive+0x888>)
 8013452:	8912      	ldrh	r2, [r2, #8]
 8013454:	4611      	mov	r1, r2
 8013456:	4618      	mov	r0, r3
 8013458:	f7fc f9c0 	bl	800f7dc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801345c:	4b45      	ldr	r3, [pc, #276]	@ (8013574 <tcp_receive+0x888>)
 801345e:	891c      	ldrh	r4, [r3, #8]
 8013460:	4b44      	ldr	r3, [pc, #272]	@ (8013574 <tcp_receive+0x888>)
 8013462:	68db      	ldr	r3, [r3, #12]
 8013464:	899b      	ldrh	r3, [r3, #12]
 8013466:	b29b      	uxth	r3, r3
 8013468:	4618      	mov	r0, r3
 801346a:	f7fa fe7f 	bl	800e16c <lwip_htons>
 801346e:	4603      	mov	r3, r0
 8013470:	b2db      	uxtb	r3, r3
 8013472:	f003 0303 	and.w	r3, r3, #3
 8013476:	2b00      	cmp	r3, #0
 8013478:	d001      	beq.n	801347e <tcp_receive+0x792>
 801347a:	2301      	movs	r3, #1
 801347c:	e000      	b.n	8013480 <tcp_receive+0x794>
 801347e:	2300      	movs	r3, #0
 8013480:	4423      	add	r3, r4
 8013482:	b29a      	uxth	r2, r3
 8013484:	4b3c      	ldr	r3, [pc, #240]	@ (8013578 <tcp_receive+0x88c>)
 8013486:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013488:	4b3b      	ldr	r3, [pc, #236]	@ (8013578 <tcp_receive+0x88c>)
 801348a:	881b      	ldrh	r3, [r3, #0]
 801348c:	461a      	mov	r2, r3
 801348e:	4b38      	ldr	r3, [pc, #224]	@ (8013570 <tcp_receive+0x884>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	441a      	add	r2, r3
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013498:	6879      	ldr	r1, [r7, #4]
 801349a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801349c:	440b      	add	r3, r1
 801349e:	429a      	cmp	r2, r3
 80134a0:	d006      	beq.n	80134b0 <tcp_receive+0x7c4>
 80134a2:	4b36      	ldr	r3, [pc, #216]	@ (801357c <tcp_receive+0x890>)
 80134a4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80134a8:	4935      	ldr	r1, [pc, #212]	@ (8013580 <tcp_receive+0x894>)
 80134aa:	4836      	ldr	r0, [pc, #216]	@ (8013584 <tcp_receive+0x898>)
 80134ac:	f005 fa8a 	bl	80189c4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	f000 80e6 	beq.w	8013686 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80134ba:	4b2e      	ldr	r3, [pc, #184]	@ (8013574 <tcp_receive+0x888>)
 80134bc:	68db      	ldr	r3, [r3, #12]
 80134be:	899b      	ldrh	r3, [r3, #12]
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7fa fe52 	bl	800e16c <lwip_htons>
 80134c8:	4603      	mov	r3, r0
 80134ca:	b2db      	uxtb	r3, r3
 80134cc:	f003 0301 	and.w	r3, r3, #1
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d010      	beq.n	80134f6 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80134d4:	e00a      	b.n	80134ec <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134da:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134e0:	681a      	ldr	r2, [r3, #0]
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f7fd fd93 	bl	8011012 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d1f0      	bne.n	80134d6 <tcp_receive+0x7ea>
 80134f4:	e0c7      	b.n	8013686 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80134fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80134fc:	e051      	b.n	80135a2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80134fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013500:	68db      	ldr	r3, [r3, #12]
 8013502:	899b      	ldrh	r3, [r3, #12]
 8013504:	b29b      	uxth	r3, r3
 8013506:	4618      	mov	r0, r3
 8013508:	f7fa fe30 	bl	800e16c <lwip_htons>
 801350c:	4603      	mov	r3, r0
 801350e:	b2db      	uxtb	r3, r3
 8013510:	f003 0301 	and.w	r3, r3, #1
 8013514:	2b00      	cmp	r3, #0
 8013516:	d03c      	beq.n	8013592 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013518:	4b16      	ldr	r3, [pc, #88]	@ (8013574 <tcp_receive+0x888>)
 801351a:	68db      	ldr	r3, [r3, #12]
 801351c:	899b      	ldrh	r3, [r3, #12]
 801351e:	b29b      	uxth	r3, r3
 8013520:	4618      	mov	r0, r3
 8013522:	f7fa fe23 	bl	800e16c <lwip_htons>
 8013526:	4603      	mov	r3, r0
 8013528:	b2db      	uxtb	r3, r3
 801352a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801352e:	2b00      	cmp	r3, #0
 8013530:	d12f      	bne.n	8013592 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8013532:	4b10      	ldr	r3, [pc, #64]	@ (8013574 <tcp_receive+0x888>)
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	899b      	ldrh	r3, [r3, #12]
 8013538:	b29c      	uxth	r4, r3
 801353a:	2001      	movs	r0, #1
 801353c:	f7fa fe16 	bl	800e16c <lwip_htons>
 8013540:	4603      	mov	r3, r0
 8013542:	461a      	mov	r2, r3
 8013544:	4b0b      	ldr	r3, [pc, #44]	@ (8013574 <tcp_receive+0x888>)
 8013546:	68db      	ldr	r3, [r3, #12]
 8013548:	4322      	orrs	r2, r4
 801354a:	b292      	uxth	r2, r2
 801354c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801354e:	4b09      	ldr	r3, [pc, #36]	@ (8013574 <tcp_receive+0x888>)
 8013550:	891c      	ldrh	r4, [r3, #8]
 8013552:	4b08      	ldr	r3, [pc, #32]	@ (8013574 <tcp_receive+0x888>)
 8013554:	68db      	ldr	r3, [r3, #12]
 8013556:	899b      	ldrh	r3, [r3, #12]
 8013558:	b29b      	uxth	r3, r3
 801355a:	4618      	mov	r0, r3
 801355c:	f7fa fe06 	bl	800e16c <lwip_htons>
 8013560:	4603      	mov	r3, r0
 8013562:	b2db      	uxtb	r3, r3
 8013564:	f003 0303 	and.w	r3, r3, #3
 8013568:	2b00      	cmp	r3, #0
 801356a:	d00d      	beq.n	8013588 <tcp_receive+0x89c>
 801356c:	2301      	movs	r3, #1
 801356e:	e00c      	b.n	801358a <tcp_receive+0x89e>
 8013570:	24010390 	.word	0x24010390
 8013574:	24010370 	.word	0x24010370
 8013578:	2401039a 	.word	0x2401039a
 801357c:	0801ac70 	.word	0x0801ac70
 8013580:	0801b018 	.word	0x0801b018
 8013584:	0801acbc 	.word	0x0801acbc
 8013588:	2300      	movs	r3, #0
 801358a:	4423      	add	r3, r4
 801358c:	b29a      	uxth	r2, r3
 801358e:	4b98      	ldr	r3, [pc, #608]	@ (80137f0 <tcp_receive+0xb04>)
 8013590:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8013592:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013594:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 801359c:	6938      	ldr	r0, [r7, #16]
 801359e:	f7fd fd38 	bl	8011012 <tcp_seg_free>
            while (next &&
 80135a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d00e      	beq.n	80135c6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80135a8:	4b91      	ldr	r3, [pc, #580]	@ (80137f0 <tcp_receive+0xb04>)
 80135aa:	881b      	ldrh	r3, [r3, #0]
 80135ac:	461a      	mov	r2, r3
 80135ae:	4b91      	ldr	r3, [pc, #580]	@ (80137f4 <tcp_receive+0xb08>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	441a      	add	r2, r3
 80135b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135b6:	68db      	ldr	r3, [r3, #12]
 80135b8:	685b      	ldr	r3, [r3, #4]
 80135ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80135bc:	8909      	ldrh	r1, [r1, #8]
 80135be:	440b      	add	r3, r1
 80135c0:	1ad3      	subs	r3, r2, r3
            while (next &&
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	da9b      	bge.n	80134fe <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80135c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d059      	beq.n	8013680 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80135cc:	4b88      	ldr	r3, [pc, #544]	@ (80137f0 <tcp_receive+0xb04>)
 80135ce:	881b      	ldrh	r3, [r3, #0]
 80135d0:	461a      	mov	r2, r3
 80135d2:	4b88      	ldr	r3, [pc, #544]	@ (80137f4 <tcp_receive+0xb08>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	441a      	add	r2, r3
 80135d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135da:	68db      	ldr	r3, [r3, #12]
 80135dc:	685b      	ldr	r3, [r3, #4]
 80135de:	1ad3      	subs	r3, r2, r3
            if (next &&
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	dd4d      	ble.n	8013680 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80135e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135e6:	68db      	ldr	r3, [r3, #12]
 80135e8:	685b      	ldr	r3, [r3, #4]
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	4b81      	ldr	r3, [pc, #516]	@ (80137f4 <tcp_receive+0xb08>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	4b80      	ldr	r3, [pc, #512]	@ (80137f8 <tcp_receive+0xb0c>)
 80135f8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80135fa:	4b7f      	ldr	r3, [pc, #508]	@ (80137f8 <tcp_receive+0xb0c>)
 80135fc:	68db      	ldr	r3, [r3, #12]
 80135fe:	899b      	ldrh	r3, [r3, #12]
 8013600:	b29b      	uxth	r3, r3
 8013602:	4618      	mov	r0, r3
 8013604:	f7fa fdb2 	bl	800e16c <lwip_htons>
 8013608:	4603      	mov	r3, r0
 801360a:	b2db      	uxtb	r3, r3
 801360c:	f003 0302 	and.w	r3, r3, #2
 8013610:	2b00      	cmp	r3, #0
 8013612:	d005      	beq.n	8013620 <tcp_receive+0x934>
                inseg.len -= 1;
 8013614:	4b78      	ldr	r3, [pc, #480]	@ (80137f8 <tcp_receive+0xb0c>)
 8013616:	891b      	ldrh	r3, [r3, #8]
 8013618:	3b01      	subs	r3, #1
 801361a:	b29a      	uxth	r2, r3
 801361c:	4b76      	ldr	r3, [pc, #472]	@ (80137f8 <tcp_receive+0xb0c>)
 801361e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8013620:	4b75      	ldr	r3, [pc, #468]	@ (80137f8 <tcp_receive+0xb0c>)
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	4a74      	ldr	r2, [pc, #464]	@ (80137f8 <tcp_receive+0xb0c>)
 8013626:	8912      	ldrh	r2, [r2, #8]
 8013628:	4611      	mov	r1, r2
 801362a:	4618      	mov	r0, r3
 801362c:	f7fc f8d6 	bl	800f7dc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8013630:	4b71      	ldr	r3, [pc, #452]	@ (80137f8 <tcp_receive+0xb0c>)
 8013632:	891c      	ldrh	r4, [r3, #8]
 8013634:	4b70      	ldr	r3, [pc, #448]	@ (80137f8 <tcp_receive+0xb0c>)
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	899b      	ldrh	r3, [r3, #12]
 801363a:	b29b      	uxth	r3, r3
 801363c:	4618      	mov	r0, r3
 801363e:	f7fa fd95 	bl	800e16c <lwip_htons>
 8013642:	4603      	mov	r3, r0
 8013644:	b2db      	uxtb	r3, r3
 8013646:	f003 0303 	and.w	r3, r3, #3
 801364a:	2b00      	cmp	r3, #0
 801364c:	d001      	beq.n	8013652 <tcp_receive+0x966>
 801364e:	2301      	movs	r3, #1
 8013650:	e000      	b.n	8013654 <tcp_receive+0x968>
 8013652:	2300      	movs	r3, #0
 8013654:	4423      	add	r3, r4
 8013656:	b29a      	uxth	r2, r3
 8013658:	4b65      	ldr	r3, [pc, #404]	@ (80137f0 <tcp_receive+0xb04>)
 801365a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801365c:	4b64      	ldr	r3, [pc, #400]	@ (80137f0 <tcp_receive+0xb04>)
 801365e:	881b      	ldrh	r3, [r3, #0]
 8013660:	461a      	mov	r2, r3
 8013662:	4b64      	ldr	r3, [pc, #400]	@ (80137f4 <tcp_receive+0xb08>)
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	441a      	add	r2, r3
 8013668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801366a:	68db      	ldr	r3, [r3, #12]
 801366c:	685b      	ldr	r3, [r3, #4]
 801366e:	429a      	cmp	r2, r3
 8013670:	d006      	beq.n	8013680 <tcp_receive+0x994>
 8013672:	4b62      	ldr	r3, [pc, #392]	@ (80137fc <tcp_receive+0xb10>)
 8013674:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8013678:	4961      	ldr	r1, [pc, #388]	@ (8013800 <tcp_receive+0xb14>)
 801367a:	4862      	ldr	r0, [pc, #392]	@ (8013804 <tcp_receive+0xb18>)
 801367c:	f005 f9a2 	bl	80189c4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013684:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013686:	4b5a      	ldr	r3, [pc, #360]	@ (80137f0 <tcp_receive+0xb04>)
 8013688:	881b      	ldrh	r3, [r3, #0]
 801368a:	461a      	mov	r2, r3
 801368c:	4b59      	ldr	r3, [pc, #356]	@ (80137f4 <tcp_receive+0xb08>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	441a      	add	r2, r3
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801369a:	4b55      	ldr	r3, [pc, #340]	@ (80137f0 <tcp_receive+0xb04>)
 801369c:	881b      	ldrh	r3, [r3, #0]
 801369e:	429a      	cmp	r2, r3
 80136a0:	d206      	bcs.n	80136b0 <tcp_receive+0x9c4>
 80136a2:	4b56      	ldr	r3, [pc, #344]	@ (80137fc <tcp_receive+0xb10>)
 80136a4:	f240 6207 	movw	r2, #1543	@ 0x607
 80136a8:	4957      	ldr	r1, [pc, #348]	@ (8013808 <tcp_receive+0xb1c>)
 80136aa:	4856      	ldr	r0, [pc, #344]	@ (8013804 <tcp_receive+0xb18>)
 80136ac:	f005 f98a 	bl	80189c4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80136b4:	4b4e      	ldr	r3, [pc, #312]	@ (80137f0 <tcp_receive+0xb04>)
 80136b6:	881b      	ldrh	r3, [r3, #0]
 80136b8:	1ad3      	subs	r3, r2, r3
 80136ba:	b29a      	uxth	r2, r3
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f7fc ffc1 	bl	8010648 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80136c6:	4b4c      	ldr	r3, [pc, #304]	@ (80137f8 <tcp_receive+0xb0c>)
 80136c8:	685b      	ldr	r3, [r3, #4]
 80136ca:	891b      	ldrh	r3, [r3, #8]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d006      	beq.n	80136de <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80136d0:	4b49      	ldr	r3, [pc, #292]	@ (80137f8 <tcp_receive+0xb0c>)
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	4a4d      	ldr	r2, [pc, #308]	@ (801380c <tcp_receive+0xb20>)
 80136d6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80136d8:	4b47      	ldr	r3, [pc, #284]	@ (80137f8 <tcp_receive+0xb0c>)
 80136da:	2200      	movs	r2, #0
 80136dc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80136de:	4b46      	ldr	r3, [pc, #280]	@ (80137f8 <tcp_receive+0xb0c>)
 80136e0:	68db      	ldr	r3, [r3, #12]
 80136e2:	899b      	ldrh	r3, [r3, #12]
 80136e4:	b29b      	uxth	r3, r3
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7fa fd40 	bl	800e16c <lwip_htons>
 80136ec:	4603      	mov	r3, r0
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	f003 0301 	and.w	r3, r3, #1
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	f000 80b8 	beq.w	801386a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80136fa:	4b45      	ldr	r3, [pc, #276]	@ (8013810 <tcp_receive+0xb24>)
 80136fc:	781b      	ldrb	r3, [r3, #0]
 80136fe:	f043 0320 	orr.w	r3, r3, #32
 8013702:	b2da      	uxtb	r2, r3
 8013704:	4b42      	ldr	r3, [pc, #264]	@ (8013810 <tcp_receive+0xb24>)
 8013706:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013708:	e0af      	b.n	801386a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801370e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013714:	68db      	ldr	r3, [r3, #12]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	4a36      	ldr	r2, [pc, #216]	@ (80137f4 <tcp_receive+0xb08>)
 801371a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801371c:	68bb      	ldr	r3, [r7, #8]
 801371e:	891b      	ldrh	r3, [r3, #8]
 8013720:	461c      	mov	r4, r3
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	68db      	ldr	r3, [r3, #12]
 8013726:	899b      	ldrh	r3, [r3, #12]
 8013728:	b29b      	uxth	r3, r3
 801372a:	4618      	mov	r0, r3
 801372c:	f7fa fd1e 	bl	800e16c <lwip_htons>
 8013730:	4603      	mov	r3, r0
 8013732:	b2db      	uxtb	r3, r3
 8013734:	f003 0303 	and.w	r3, r3, #3
 8013738:	2b00      	cmp	r3, #0
 801373a:	d001      	beq.n	8013740 <tcp_receive+0xa54>
 801373c:	2301      	movs	r3, #1
 801373e:	e000      	b.n	8013742 <tcp_receive+0xa56>
 8013740:	2300      	movs	r3, #0
 8013742:	191a      	adds	r2, r3, r4
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013748:	441a      	add	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013752:	461c      	mov	r4, r3
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	891b      	ldrh	r3, [r3, #8]
 8013758:	461d      	mov	r5, r3
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	899b      	ldrh	r3, [r3, #12]
 8013760:	b29b      	uxth	r3, r3
 8013762:	4618      	mov	r0, r3
 8013764:	f7fa fd02 	bl	800e16c <lwip_htons>
 8013768:	4603      	mov	r3, r0
 801376a:	b2db      	uxtb	r3, r3
 801376c:	f003 0303 	and.w	r3, r3, #3
 8013770:	2b00      	cmp	r3, #0
 8013772:	d001      	beq.n	8013778 <tcp_receive+0xa8c>
 8013774:	2301      	movs	r3, #1
 8013776:	e000      	b.n	801377a <tcp_receive+0xa8e>
 8013778:	2300      	movs	r3, #0
 801377a:	442b      	add	r3, r5
 801377c:	429c      	cmp	r4, r3
 801377e:	d206      	bcs.n	801378e <tcp_receive+0xaa2>
 8013780:	4b1e      	ldr	r3, [pc, #120]	@ (80137fc <tcp_receive+0xb10>)
 8013782:	f240 622b 	movw	r2, #1579	@ 0x62b
 8013786:	4923      	ldr	r1, [pc, #140]	@ (8013814 <tcp_receive+0xb28>)
 8013788:	481e      	ldr	r0, [pc, #120]	@ (8013804 <tcp_receive+0xb18>)
 801378a:	f005 f91b 	bl	80189c4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801378e:	68bb      	ldr	r3, [r7, #8]
 8013790:	891b      	ldrh	r3, [r3, #8]
 8013792:	461c      	mov	r4, r3
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	68db      	ldr	r3, [r3, #12]
 8013798:	899b      	ldrh	r3, [r3, #12]
 801379a:	b29b      	uxth	r3, r3
 801379c:	4618      	mov	r0, r3
 801379e:	f7fa fce5 	bl	800e16c <lwip_htons>
 80137a2:	4603      	mov	r3, r0
 80137a4:	b2db      	uxtb	r3, r3
 80137a6:	f003 0303 	and.w	r3, r3, #3
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d001      	beq.n	80137b2 <tcp_receive+0xac6>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <tcp_receive+0xac8>
 80137b2:	2300      	movs	r3, #0
 80137b4:	1919      	adds	r1, r3, r4
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80137ba:	b28b      	uxth	r3, r1
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	b29a      	uxth	r2, r3
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80137c4:	6878      	ldr	r0, [r7, #4]
 80137c6:	f7fc ff3f 	bl	8010648 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	685b      	ldr	r3, [r3, #4]
 80137ce:	891b      	ldrh	r3, [r3, #8]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d028      	beq.n	8013826 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80137d4:	4b0d      	ldr	r3, [pc, #52]	@ (801380c <tcp_receive+0xb20>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d01d      	beq.n	8013818 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80137dc:	4b0b      	ldr	r3, [pc, #44]	@ (801380c <tcp_receive+0xb20>)
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	4619      	mov	r1, r3
 80137e6:	4610      	mov	r0, r2
 80137e8:	f7fc fa4c 	bl	800fc84 <pbuf_cat>
 80137ec:	e018      	b.n	8013820 <tcp_receive+0xb34>
 80137ee:	bf00      	nop
 80137f0:	2401039a 	.word	0x2401039a
 80137f4:	24010390 	.word	0x24010390
 80137f8:	24010370 	.word	0x24010370
 80137fc:	0801ac70 	.word	0x0801ac70
 8013800:	0801b050 	.word	0x0801b050
 8013804:	0801acbc 	.word	0x0801acbc
 8013808:	0801b08c 	.word	0x0801b08c
 801380c:	240103a0 	.word	0x240103a0
 8013810:	2401039d 	.word	0x2401039d
 8013814:	0801b0ac 	.word	0x0801b0ac
            } else {
              recv_data = cseg->p;
 8013818:	68bb      	ldr	r3, [r7, #8]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	4a70      	ldr	r2, [pc, #448]	@ (80139e0 <tcp_receive+0xcf4>)
 801381e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	2200      	movs	r2, #0
 8013824:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013826:	68bb      	ldr	r3, [r7, #8]
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	899b      	ldrh	r3, [r3, #12]
 801382c:	b29b      	uxth	r3, r3
 801382e:	4618      	mov	r0, r3
 8013830:	f7fa fc9c 	bl	800e16c <lwip_htons>
 8013834:	4603      	mov	r3, r0
 8013836:	b2db      	uxtb	r3, r3
 8013838:	f003 0301 	and.w	r3, r3, #1
 801383c:	2b00      	cmp	r3, #0
 801383e:	d00d      	beq.n	801385c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8013840:	4b68      	ldr	r3, [pc, #416]	@ (80139e4 <tcp_receive+0xcf8>)
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	f043 0320 	orr.w	r3, r3, #32
 8013848:	b2da      	uxtb	r2, r3
 801384a:	4b66      	ldr	r3, [pc, #408]	@ (80139e4 <tcp_receive+0xcf8>)
 801384c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	7d1b      	ldrb	r3, [r3, #20]
 8013852:	2b04      	cmp	r3, #4
 8013854:	d102      	bne.n	801385c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2207      	movs	r2, #7
 801385a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8013864:	68b8      	ldr	r0, [r7, #8]
 8013866:	f7fd fbd4 	bl	8011012 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801386e:	2b00      	cmp	r3, #0
 8013870:	d008      	beq.n	8013884 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013876:	68db      	ldr	r3, [r3, #12]
 8013878:	685a      	ldr	r2, [r3, #4]
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801387e:	429a      	cmp	r2, r3
 8013880:	f43f af43 	beq.w	801370a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	8b5b      	ldrh	r3, [r3, #26]
 8013888:	f003 0301 	and.w	r3, r3, #1
 801388c:	2b00      	cmp	r3, #0
 801388e:	d00e      	beq.n	80138ae <tcp_receive+0xbc2>
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	8b5b      	ldrh	r3, [r3, #26]
 8013894:	f023 0301 	bic.w	r3, r3, #1
 8013898:	b29a      	uxth	r2, r3
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	835a      	strh	r2, [r3, #26]
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	8b5b      	ldrh	r3, [r3, #26]
 80138a2:	f043 0302 	orr.w	r3, r3, #2
 80138a6:	b29a      	uxth	r2, r3
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80138ac:	e187      	b.n	8013bbe <tcp_receive+0xed2>
        tcp_ack(pcb);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	8b5b      	ldrh	r3, [r3, #26]
 80138b2:	f043 0301 	orr.w	r3, r3, #1
 80138b6:	b29a      	uxth	r2, r3
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80138bc:	e17f      	b.n	8013bbe <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d106      	bne.n	80138d4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80138c6:	4848      	ldr	r0, [pc, #288]	@ (80139e8 <tcp_receive+0xcfc>)
 80138c8:	f7fd fbbc 	bl	8011044 <tcp_seg_copy>
 80138cc:	4602      	mov	r2, r0
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	675a      	str	r2, [r3, #116]	@ 0x74
 80138d2:	e16c      	b.n	8013bae <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80138d4:	2300      	movs	r3, #0
 80138d6:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80138dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80138de:	e156      	b.n	8013b8e <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80138e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138e2:	68db      	ldr	r3, [r3, #12]
 80138e4:	685a      	ldr	r2, [r3, #4]
 80138e6:	4b41      	ldr	r3, [pc, #260]	@ (80139ec <tcp_receive+0xd00>)
 80138e8:	681b      	ldr	r3, [r3, #0]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	d11d      	bne.n	801392a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80138ee:	4b3e      	ldr	r3, [pc, #248]	@ (80139e8 <tcp_receive+0xcfc>)
 80138f0:	891a      	ldrh	r2, [r3, #8]
 80138f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138f4:	891b      	ldrh	r3, [r3, #8]
 80138f6:	429a      	cmp	r2, r3
 80138f8:	f240 814e 	bls.w	8013b98 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80138fc:	483a      	ldr	r0, [pc, #232]	@ (80139e8 <tcp_receive+0xcfc>)
 80138fe:	f7fd fba1 	bl	8011044 <tcp_seg_copy>
 8013902:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2b00      	cmp	r3, #0
 8013908:	f000 8148 	beq.w	8013b9c <tcp_receive+0xeb0>
                  if (prev != NULL) {
 801390c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801390e:	2b00      	cmp	r3, #0
 8013910:	d003      	beq.n	801391a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8013912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013914:	697a      	ldr	r2, [r7, #20]
 8013916:	601a      	str	r2, [r3, #0]
 8013918:	e002      	b.n	8013920 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	697a      	ldr	r2, [r7, #20]
 801391e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013920:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013922:	6978      	ldr	r0, [r7, #20]
 8013924:	f7ff f8de 	bl	8012ae4 <tcp_oos_insert_segment>
                }
                break;
 8013928:	e138      	b.n	8013b9c <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801392a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801392c:	2b00      	cmp	r3, #0
 801392e:	d117      	bne.n	8013960 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013930:	4b2e      	ldr	r3, [pc, #184]	@ (80139ec <tcp_receive+0xd00>)
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	1ad3      	subs	r3, r2, r3
 801393c:	2b00      	cmp	r3, #0
 801393e:	da57      	bge.n	80139f0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013940:	4829      	ldr	r0, [pc, #164]	@ (80139e8 <tcp_receive+0xcfc>)
 8013942:	f7fd fb7f 	bl	8011044 <tcp_seg_copy>
 8013946:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013948:	69bb      	ldr	r3, [r7, #24]
 801394a:	2b00      	cmp	r3, #0
 801394c:	f000 8128 	beq.w	8013ba0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	69ba      	ldr	r2, [r7, #24]
 8013954:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013956:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8013958:	69b8      	ldr	r0, [r7, #24]
 801395a:	f7ff f8c3 	bl	8012ae4 <tcp_oos_insert_segment>
                  }
                  break;
 801395e:	e11f      	b.n	8013ba0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013960:	4b22      	ldr	r3, [pc, #136]	@ (80139ec <tcp_receive+0xd00>)
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013966:	68db      	ldr	r3, [r3, #12]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	1ad3      	subs	r3, r2, r3
 801396c:	3b01      	subs	r3, #1
 801396e:	2b00      	cmp	r3, #0
 8013970:	db3e      	blt.n	80139f0 <tcp_receive+0xd04>
 8013972:	4b1e      	ldr	r3, [pc, #120]	@ (80139ec <tcp_receive+0xd00>)
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013978:	68db      	ldr	r3, [r3, #12]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	1ad3      	subs	r3, r2, r3
 801397e:	3301      	adds	r3, #1
 8013980:	2b00      	cmp	r3, #0
 8013982:	dc35      	bgt.n	80139f0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013984:	4818      	ldr	r0, [pc, #96]	@ (80139e8 <tcp_receive+0xcfc>)
 8013986:	f7fd fb5d 	bl	8011044 <tcp_seg_copy>
 801398a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	2b00      	cmp	r3, #0
 8013990:	f000 8108 	beq.w	8013ba4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013996:	68db      	ldr	r3, [r3, #12]
 8013998:	685b      	ldr	r3, [r3, #4]
 801399a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801399c:	8912      	ldrh	r2, [r2, #8]
 801399e:	441a      	add	r2, r3
 80139a0:	4b12      	ldr	r3, [pc, #72]	@ (80139ec <tcp_receive+0xd00>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	1ad3      	subs	r3, r2, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	dd12      	ble.n	80139d0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80139aa:	4b10      	ldr	r3, [pc, #64]	@ (80139ec <tcp_receive+0xd00>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139b2:	68db      	ldr	r3, [r3, #12]
 80139b4:	685b      	ldr	r3, [r3, #4]
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	1ad3      	subs	r3, r2, r3
 80139ba:	b29a      	uxth	r2, r3
 80139bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139be:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80139c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139c2:	685a      	ldr	r2, [r3, #4]
 80139c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139c6:	891b      	ldrh	r3, [r3, #8]
 80139c8:	4619      	mov	r1, r3
 80139ca:	4610      	mov	r0, r2
 80139cc:	f7fb ff06 	bl	800f7dc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80139d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80139d2:	69fa      	ldr	r2, [r7, #28]
 80139d4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80139d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80139d8:	69f8      	ldr	r0, [r7, #28]
 80139da:	f7ff f883 	bl	8012ae4 <tcp_oos_insert_segment>
                  }
                  break;
 80139de:	e0e1      	b.n	8013ba4 <tcp_receive+0xeb8>
 80139e0:	240103a0 	.word	0x240103a0
 80139e4:	2401039d 	.word	0x2401039d
 80139e8:	24010370 	.word	0x24010370
 80139ec:	24010390 	.word	0x24010390
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80139f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f2:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80139f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80139f6:	681b      	ldr	r3, [r3, #0]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	f040 80c5 	bne.w	8013b88 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80139fe:	4b7f      	ldr	r3, [pc, #508]	@ (8013bfc <tcp_receive+0xf10>)
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a04:	68db      	ldr	r3, [r3, #12]
 8013a06:	685b      	ldr	r3, [r3, #4]
 8013a08:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	f340 80bc 	ble.w	8013b88 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	899b      	ldrh	r3, [r3, #12]
 8013a16:	b29b      	uxth	r3, r3
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7fa fba7 	bl	800e16c <lwip_htons>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	b2db      	uxtb	r3, r3
 8013a22:	f003 0301 	and.w	r3, r3, #1
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	f040 80be 	bne.w	8013ba8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013a2c:	4874      	ldr	r0, [pc, #464]	@ (8013c00 <tcp_receive+0xf14>)
 8013a2e:	f7fd fb09 	bl	8011044 <tcp_seg_copy>
 8013a32:	4602      	mov	r2, r0
 8013a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a36:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	f000 80b5 	beq.w	8013bac <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a44:	68db      	ldr	r3, [r3, #12]
 8013a46:	685b      	ldr	r3, [r3, #4]
 8013a48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013a4a:	8912      	ldrh	r2, [r2, #8]
 8013a4c:	441a      	add	r2, r3
 8013a4e:	4b6b      	ldr	r3, [pc, #428]	@ (8013bfc <tcp_receive+0xf10>)
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	1ad3      	subs	r3, r2, r3
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	dd12      	ble.n	8013a7e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013a58:	4b68      	ldr	r3, [pc, #416]	@ (8013bfc <tcp_receive+0xf10>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	b29a      	uxth	r2, r3
 8013a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a60:	68db      	ldr	r3, [r3, #12]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	1ad3      	subs	r3, r2, r3
 8013a68:	b29a      	uxth	r2, r3
 8013a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a6c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a70:	685a      	ldr	r2, [r3, #4]
 8013a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a74:	891b      	ldrh	r3, [r3, #8]
 8013a76:	4619      	mov	r1, r3
 8013a78:	4610      	mov	r0, r2
 8013a7a:	f7fb feaf 	bl	800f7dc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013a7e:	4b61      	ldr	r3, [pc, #388]	@ (8013c04 <tcp_receive+0xf18>)
 8013a80:	881b      	ldrh	r3, [r3, #0]
 8013a82:	461a      	mov	r2, r3
 8013a84:	4b5d      	ldr	r3, [pc, #372]	@ (8013bfc <tcp_receive+0xf10>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	441a      	add	r2, r3
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a8e:	6879      	ldr	r1, [r7, #4]
 8013a90:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013a92:	440b      	add	r3, r1
 8013a94:	1ad3      	subs	r3, r2, r3
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	f340 8088 	ble.w	8013bac <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013a9e:	681b      	ldr	r3, [r3, #0]
 8013aa0:	68db      	ldr	r3, [r3, #12]
 8013aa2:	899b      	ldrh	r3, [r3, #12]
 8013aa4:	b29b      	uxth	r3, r3
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7fa fb60 	bl	800e16c <lwip_htons>
 8013aac:	4603      	mov	r3, r0
 8013aae:	b2db      	uxtb	r3, r3
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d021      	beq.n	8013afc <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013aba:	681b      	ldr	r3, [r3, #0]
 8013abc:	68db      	ldr	r3, [r3, #12]
 8013abe:	899b      	ldrh	r3, [r3, #12]
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	b21b      	sxth	r3, r3
 8013ac4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8013ac8:	b21c      	sxth	r4, r3
 8013aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	68db      	ldr	r3, [r3, #12]
 8013ad0:	899b      	ldrh	r3, [r3, #12]
 8013ad2:	b29b      	uxth	r3, r3
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f7fa fb49 	bl	800e16c <lwip_htons>
 8013ada:	4603      	mov	r3, r0
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7fa fb41 	bl	800e16c <lwip_htons>
 8013aea:	4603      	mov	r3, r0
 8013aec:	b21b      	sxth	r3, r3
 8013aee:	4323      	orrs	r3, r4
 8013af0:	b21a      	sxth	r2, r3
 8013af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	b292      	uxth	r2, r2
 8013afa:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013b06:	4413      	add	r3, r2
 8013b08:	b299      	uxth	r1, r3
 8013b0a:	4b3c      	ldr	r3, [pc, #240]	@ (8013bfc <tcp_receive+0xf10>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	b29a      	uxth	r2, r3
 8013b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	1a8a      	subs	r2, r1, r2
 8013b16:	b292      	uxth	r2, r2
 8013b18:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	685a      	ldr	r2, [r3, #4]
 8013b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	891b      	ldrh	r3, [r3, #8]
 8013b26:	4619      	mov	r1, r3
 8013b28:	4610      	mov	r0, r2
 8013b2a:	f7fb fe57 	bl	800f7dc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	891c      	ldrh	r4, [r3, #8]
 8013b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	899b      	ldrh	r3, [r3, #12]
 8013b3c:	b29b      	uxth	r3, r3
 8013b3e:	4618      	mov	r0, r3
 8013b40:	f7fa fb14 	bl	800e16c <lwip_htons>
 8013b44:	4603      	mov	r3, r0
 8013b46:	b2db      	uxtb	r3, r3
 8013b48:	f003 0303 	and.w	r3, r3, #3
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d001      	beq.n	8013b54 <tcp_receive+0xe68>
 8013b50:	2301      	movs	r3, #1
 8013b52:	e000      	b.n	8013b56 <tcp_receive+0xe6a>
 8013b54:	2300      	movs	r3, #0
 8013b56:	4423      	add	r3, r4
 8013b58:	b29a      	uxth	r2, r3
 8013b5a:	4b2a      	ldr	r3, [pc, #168]	@ (8013c04 <tcp_receive+0xf18>)
 8013b5c:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013b5e:	4b29      	ldr	r3, [pc, #164]	@ (8013c04 <tcp_receive+0xf18>)
 8013b60:	881b      	ldrh	r3, [r3, #0]
 8013b62:	461a      	mov	r2, r3
 8013b64:	4b25      	ldr	r3, [pc, #148]	@ (8013bfc <tcp_receive+0xf10>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	441a      	add	r2, r3
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b6e:	6879      	ldr	r1, [r7, #4]
 8013b70:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013b72:	440b      	add	r3, r1
 8013b74:	429a      	cmp	r2, r3
 8013b76:	d019      	beq.n	8013bac <tcp_receive+0xec0>
 8013b78:	4b23      	ldr	r3, [pc, #140]	@ (8013c08 <tcp_receive+0xf1c>)
 8013b7a:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8013b7e:	4923      	ldr	r1, [pc, #140]	@ (8013c0c <tcp_receive+0xf20>)
 8013b80:	4823      	ldr	r0, [pc, #140]	@ (8013c10 <tcp_receive+0xf24>)
 8013b82:	f004 ff1f 	bl	80189c4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013b86:	e011      	b.n	8013bac <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	f47f aea5 	bne.w	80138e0 <tcp_receive+0xbf4>
 8013b96:	e00a      	b.n	8013bae <tcp_receive+0xec2>
                break;
 8013b98:	bf00      	nop
 8013b9a:	e008      	b.n	8013bae <tcp_receive+0xec2>
                break;
 8013b9c:	bf00      	nop
 8013b9e:	e006      	b.n	8013bae <tcp_receive+0xec2>
                  break;
 8013ba0:	bf00      	nop
 8013ba2:	e004      	b.n	8013bae <tcp_receive+0xec2>
                  break;
 8013ba4:	bf00      	nop
 8013ba6:	e002      	b.n	8013bae <tcp_receive+0xec2>
                  break;
 8013ba8:	bf00      	nop
 8013baa:	e000      	b.n	8013bae <tcp_receive+0xec2>
                break;
 8013bac:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013bae:	6878      	ldr	r0, [r7, #4]
 8013bb0:	f001 fa32 	bl	8015018 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013bb4:	e003      	b.n	8013bbe <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f001 fa2e 	bl	8015018 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013bbc:	e01a      	b.n	8013bf4 <tcp_receive+0xf08>
 8013bbe:	e019      	b.n	8013bf4 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013bc0:	4b0e      	ldr	r3, [pc, #56]	@ (8013bfc <tcp_receive+0xf10>)
 8013bc2:	681a      	ldr	r2, [r3, #0]
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	db0a      	blt.n	8013be4 <tcp_receive+0xef8>
 8013bce:	4b0b      	ldr	r3, [pc, #44]	@ (8013bfc <tcp_receive+0xf10>)
 8013bd0:	681a      	ldr	r2, [r3, #0]
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013bd6:	6879      	ldr	r1, [r7, #4]
 8013bd8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013bda:	440b      	add	r3, r1
 8013bdc:	1ad3      	subs	r3, r2, r3
 8013bde:	3301      	adds	r3, #1
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	dd07      	ble.n	8013bf4 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f043 0302 	orr.w	r3, r3, #2
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013bf2:	e7ff      	b.n	8013bf4 <tcp_receive+0xf08>
 8013bf4:	bf00      	nop
 8013bf6:	3750      	adds	r7, #80	@ 0x50
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bdb0      	pop	{r4, r5, r7, pc}
 8013bfc:	24010390 	.word	0x24010390
 8013c00:	24010370 	.word	0x24010370
 8013c04:	2401039a 	.word	0x2401039a
 8013c08:	0801ac70 	.word	0x0801ac70
 8013c0c:	0801b018 	.word	0x0801b018
 8013c10:	0801acbc 	.word	0x0801acbc

08013c14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013c14:	b480      	push	{r7}
 8013c16:	b083      	sub	sp, #12
 8013c18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013c1a:	4b15      	ldr	r3, [pc, #84]	@ (8013c70 <tcp_get_next_optbyte+0x5c>)
 8013c1c:	881b      	ldrh	r3, [r3, #0]
 8013c1e:	1c5a      	adds	r2, r3, #1
 8013c20:	b291      	uxth	r1, r2
 8013c22:	4a13      	ldr	r2, [pc, #76]	@ (8013c70 <tcp_get_next_optbyte+0x5c>)
 8013c24:	8011      	strh	r1, [r2, #0]
 8013c26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013c28:	4b12      	ldr	r3, [pc, #72]	@ (8013c74 <tcp_get_next_optbyte+0x60>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d004      	beq.n	8013c3a <tcp_get_next_optbyte+0x26>
 8013c30:	4b11      	ldr	r3, [pc, #68]	@ (8013c78 <tcp_get_next_optbyte+0x64>)
 8013c32:	881b      	ldrh	r3, [r3, #0]
 8013c34:	88fa      	ldrh	r2, [r7, #6]
 8013c36:	429a      	cmp	r2, r3
 8013c38:	d208      	bcs.n	8013c4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013c3a:	4b10      	ldr	r3, [pc, #64]	@ (8013c7c <tcp_get_next_optbyte+0x68>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	3314      	adds	r3, #20
 8013c40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013c42:	88fb      	ldrh	r3, [r7, #6]
 8013c44:	683a      	ldr	r2, [r7, #0]
 8013c46:	4413      	add	r3, r2
 8013c48:	781b      	ldrb	r3, [r3, #0]
 8013c4a:	e00b      	b.n	8013c64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013c4c:	88fb      	ldrh	r3, [r7, #6]
 8013c4e:	b2da      	uxtb	r2, r3
 8013c50:	4b09      	ldr	r3, [pc, #36]	@ (8013c78 <tcp_get_next_optbyte+0x64>)
 8013c52:	881b      	ldrh	r3, [r3, #0]
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	1ad3      	subs	r3, r2, r3
 8013c58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013c5a:	4b06      	ldr	r3, [pc, #24]	@ (8013c74 <tcp_get_next_optbyte+0x60>)
 8013c5c:	681a      	ldr	r2, [r3, #0]
 8013c5e:	797b      	ldrb	r3, [r7, #5]
 8013c60:	4413      	add	r3, r2
 8013c62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	370c      	adds	r7, #12
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr
 8013c70:	2401038c 	.word	0x2401038c
 8013c74:	24010388 	.word	0x24010388
 8013c78:	24010386 	.word	0x24010386
 8013c7c:	24010380 	.word	0x24010380

08013c80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013c80:	b580      	push	{r7, lr}
 8013c82:	b084      	sub	sp, #16
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d106      	bne.n	8013c9c <tcp_parseopt+0x1c>
 8013c8e:	4b33      	ldr	r3, [pc, #204]	@ (8013d5c <tcp_parseopt+0xdc>)
 8013c90:	f240 727d 	movw	r2, #1917	@ 0x77d
 8013c94:	4932      	ldr	r1, [pc, #200]	@ (8013d60 <tcp_parseopt+0xe0>)
 8013c96:	4833      	ldr	r0, [pc, #204]	@ (8013d64 <tcp_parseopt+0xe4>)
 8013c98:	f004 fe94 	bl	80189c4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013c9c:	4b32      	ldr	r3, [pc, #200]	@ (8013d68 <tcp_parseopt+0xe8>)
 8013c9e:	881b      	ldrh	r3, [r3, #0]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d057      	beq.n	8013d54 <tcp_parseopt+0xd4>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013ca4:	4b31      	ldr	r3, [pc, #196]	@ (8013d6c <tcp_parseopt+0xec>)
 8013ca6:	2200      	movs	r2, #0
 8013ca8:	801a      	strh	r2, [r3, #0]
 8013caa:	e047      	b.n	8013d3c <tcp_parseopt+0xbc>
      u8_t opt = tcp_get_next_optbyte();
 8013cac:	f7ff ffb2 	bl	8013c14 <tcp_get_next_optbyte>
 8013cb0:	4603      	mov	r3, r0
 8013cb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013cb4:	7bfb      	ldrb	r3, [r7, #15]
 8013cb6:	2b02      	cmp	r3, #2
 8013cb8:	d006      	beq.n	8013cc8 <tcp_parseopt+0x48>
 8013cba:	2b02      	cmp	r3, #2
 8013cbc:	dc2b      	bgt.n	8013d16 <tcp_parseopt+0x96>
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d043      	beq.n	8013d4a <tcp_parseopt+0xca>
 8013cc2:	2b01      	cmp	r3, #1
 8013cc4:	d039      	beq.n	8013d3a <tcp_parseopt+0xba>
 8013cc6:	e026      	b.n	8013d16 <tcp_parseopt+0x96>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013cc8:	f7ff ffa4 	bl	8013c14 <tcp_get_next_optbyte>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	2b04      	cmp	r3, #4
 8013cd0:	d13d      	bne.n	8013d4e <tcp_parseopt+0xce>
 8013cd2:	4b26      	ldr	r3, [pc, #152]	@ (8013d6c <tcp_parseopt+0xec>)
 8013cd4:	881b      	ldrh	r3, [r3, #0]
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	4a23      	ldr	r2, [pc, #140]	@ (8013d68 <tcp_parseopt+0xe8>)
 8013cda:	8812      	ldrh	r2, [r2, #0]
 8013cdc:	4293      	cmp	r3, r2
 8013cde:	da36      	bge.n	8013d4e <tcp_parseopt+0xce>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013ce0:	f7ff ff98 	bl	8013c14 <tcp_get_next_optbyte>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	021b      	lsls	r3, r3, #8
 8013ce8:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013cea:	f7ff ff93 	bl	8013c14 <tcp_get_next_optbyte>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	89bb      	ldrh	r3, [r7, #12]
 8013cf4:	4313      	orrs	r3, r2
 8013cf6:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013cf8:	89bb      	ldrh	r3, [r7, #12]
 8013cfa:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	d804      	bhi.n	8013d0c <tcp_parseopt+0x8c>
 8013d02:	89bb      	ldrh	r3, [r7, #12]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d001      	beq.n	8013d0c <tcp_parseopt+0x8c>
 8013d08:	89ba      	ldrh	r2, [r7, #12]
 8013d0a:	e001      	b.n	8013d10 <tcp_parseopt+0x90>
 8013d0c:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8013d14:	e012      	b.n	8013d3c <tcp_parseopt+0xbc>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013d16:	f7ff ff7d 	bl	8013c14 <tcp_get_next_optbyte>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013d1e:	7afb      	ldrb	r3, [r7, #11]
 8013d20:	2b01      	cmp	r3, #1
 8013d22:	d916      	bls.n	8013d52 <tcp_parseopt+0xd2>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013d24:	7afb      	ldrb	r3, [r7, #11]
 8013d26:	b29a      	uxth	r2, r3
 8013d28:	4b10      	ldr	r3, [pc, #64]	@ (8013d6c <tcp_parseopt+0xec>)
 8013d2a:	881b      	ldrh	r3, [r3, #0]
 8013d2c:	4413      	add	r3, r2
 8013d2e:	b29b      	uxth	r3, r3
 8013d30:	3b02      	subs	r3, #2
 8013d32:	b29a      	uxth	r2, r3
 8013d34:	4b0d      	ldr	r3, [pc, #52]	@ (8013d6c <tcp_parseopt+0xec>)
 8013d36:	801a      	strh	r2, [r3, #0]
 8013d38:	e000      	b.n	8013d3c <tcp_parseopt+0xbc>
          break;
 8013d3a:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8013d6c <tcp_parseopt+0xec>)
 8013d3e:	881a      	ldrh	r2, [r3, #0]
 8013d40:	4b09      	ldr	r3, [pc, #36]	@ (8013d68 <tcp_parseopt+0xe8>)
 8013d42:	881b      	ldrh	r3, [r3, #0]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d3b1      	bcc.n	8013cac <tcp_parseopt+0x2c>
 8013d48:	e004      	b.n	8013d54 <tcp_parseopt+0xd4>
          return;
 8013d4a:	bf00      	nop
 8013d4c:	e002      	b.n	8013d54 <tcp_parseopt+0xd4>
            return;
 8013d4e:	bf00      	nop
 8013d50:	e000      	b.n	8013d54 <tcp_parseopt+0xd4>
            return;
 8013d52:	bf00      	nop
      }
    }
  }
}
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}
 8013d5a:	bf00      	nop
 8013d5c:	0801ac70 	.word	0x0801ac70
 8013d60:	0801b0d4 	.word	0x0801b0d4
 8013d64:	0801acbc 	.word	0x0801acbc
 8013d68:	24010384 	.word	0x24010384
 8013d6c:	2401038c 	.word	0x2401038c

08013d70 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013d70:	b480      	push	{r7}
 8013d72:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013d74:	4b05      	ldr	r3, [pc, #20]	@ (8013d8c <tcp_trigger_input_pcb_close+0x1c>)
 8013d76:	781b      	ldrb	r3, [r3, #0]
 8013d78:	f043 0310 	orr.w	r3, r3, #16
 8013d7c:	b2da      	uxtb	r2, r3
 8013d7e:	4b03      	ldr	r3, [pc, #12]	@ (8013d8c <tcp_trigger_input_pcb_close+0x1c>)
 8013d80:	701a      	strb	r2, [r3, #0]
}
 8013d82:	bf00      	nop
 8013d84:	46bd      	mov	sp, r7
 8013d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8a:	4770      	bx	lr
 8013d8c:	2401039d 	.word	0x2401039d

08013d90 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	60f8      	str	r0, [r7, #12]
 8013d98:	60b9      	str	r1, [r7, #8]
 8013d9a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d00a      	beq.n	8013db8 <tcp_route+0x28>
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	7a1b      	ldrb	r3, [r3, #8]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d006      	beq.n	8013db8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	7a1b      	ldrb	r3, [r3, #8]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7fb fb08 	bl	800f3c4 <netif_get_by_index>
 8013db4:	4603      	mov	r3, r0
 8013db6:	e003      	b.n	8013dc0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f003 fa01 	bl	80171c0 <ip4_route>
 8013dbe:	4603      	mov	r3, r0
  }
}
 8013dc0:	4618      	mov	r0, r3
 8013dc2:	3710      	adds	r7, #16
 8013dc4:	46bd      	mov	sp, r7
 8013dc6:	bd80      	pop	{r7, pc}

08013dc8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013dc8:	b590      	push	{r4, r7, lr}
 8013dca:	b087      	sub	sp, #28
 8013dcc:	af00      	add	r7, sp, #0
 8013dce:	60f8      	str	r0, [r7, #12]
 8013dd0:	60b9      	str	r1, [r7, #8]
 8013dd2:	603b      	str	r3, [r7, #0]
 8013dd4:	4613      	mov	r3, r2
 8013dd6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d105      	bne.n	8013dea <tcp_create_segment+0x22>
 8013dde:	4b43      	ldr	r3, [pc, #268]	@ (8013eec <tcp_create_segment+0x124>)
 8013de0:	22a3      	movs	r2, #163	@ 0xa3
 8013de2:	4943      	ldr	r1, [pc, #268]	@ (8013ef0 <tcp_create_segment+0x128>)
 8013de4:	4843      	ldr	r0, [pc, #268]	@ (8013ef4 <tcp_create_segment+0x12c>)
 8013de6:	f004 fded 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013dea:	68bb      	ldr	r3, [r7, #8]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d105      	bne.n	8013dfc <tcp_create_segment+0x34>
 8013df0:	4b3e      	ldr	r3, [pc, #248]	@ (8013eec <tcp_create_segment+0x124>)
 8013df2:	22a4      	movs	r2, #164	@ 0xa4
 8013df4:	4940      	ldr	r1, [pc, #256]	@ (8013ef8 <tcp_create_segment+0x130>)
 8013df6:	483f      	ldr	r0, [pc, #252]	@ (8013ef4 <tcp_create_segment+0x12c>)
 8013df8:	f004 fde4 	bl	80189c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013dfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	f003 0304 	and.w	r3, r3, #4
 8013e08:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013e0a:	2003      	movs	r0, #3
 8013e0c:	f7fa ff4e 	bl	800ecac <memp_malloc>
 8013e10:	6138      	str	r0, [r7, #16]
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d104      	bne.n	8013e22 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013e18:	68b8      	ldr	r0, [r7, #8]
 8013e1a:	f7fb fe65 	bl	800fae8 <pbuf_free>
    return NULL;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	e060      	b.n	8013ee4 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8013e28:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	68ba      	ldr	r2, [r7, #8]
 8013e34:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	891a      	ldrh	r2, [r3, #8]
 8013e3a:	7dfb      	ldrb	r3, [r7, #23]
 8013e3c:	b29b      	uxth	r3, r3
 8013e3e:	429a      	cmp	r2, r3
 8013e40:	d205      	bcs.n	8013e4e <tcp_create_segment+0x86>
 8013e42:	4b2a      	ldr	r3, [pc, #168]	@ (8013eec <tcp_create_segment+0x124>)
 8013e44:	22b0      	movs	r2, #176	@ 0xb0
 8013e46:	492d      	ldr	r1, [pc, #180]	@ (8013efc <tcp_create_segment+0x134>)
 8013e48:	482a      	ldr	r0, [pc, #168]	@ (8013ef4 <tcp_create_segment+0x12c>)
 8013e4a:	f004 fdbb 	bl	80189c4 <iprintf>
  seg->len = p->tot_len - optlen;
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	891a      	ldrh	r2, [r3, #8]
 8013e52:	7dfb      	ldrb	r3, [r7, #23]
 8013e54:	b29b      	uxth	r3, r3
 8013e56:	1ad3      	subs	r3, r2, r3
 8013e58:	b29a      	uxth	r2, r3
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013e5e:	2114      	movs	r1, #20
 8013e60:	68b8      	ldr	r0, [r7, #8]
 8013e62:	f7fb fdab 	bl	800f9bc <pbuf_add_header>
 8013e66:	4603      	mov	r3, r0
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d004      	beq.n	8013e76 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013e6c:	6938      	ldr	r0, [r7, #16]
 8013e6e:	f7fd f8d0 	bl	8011012 <tcp_seg_free>
    return NULL;
 8013e72:	2300      	movs	r3, #0
 8013e74:	e036      	b.n	8013ee4 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	685a      	ldr	r2, [r3, #4]
 8013e7c:	693b      	ldr	r3, [r7, #16]
 8013e7e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	8ada      	ldrh	r2, [r3, #22]
 8013e84:	693b      	ldr	r3, [r7, #16]
 8013e86:	68dc      	ldr	r4, [r3, #12]
 8013e88:	4610      	mov	r0, r2
 8013e8a:	f7fa f96f 	bl	800e16c <lwip_htons>
 8013e8e:	4603      	mov	r3, r0
 8013e90:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	8b1a      	ldrh	r2, [r3, #24]
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	68dc      	ldr	r4, [r3, #12]
 8013e9a:	4610      	mov	r0, r2
 8013e9c:	f7fa f966 	bl	800e16c <lwip_htons>
 8013ea0:	4603      	mov	r3, r0
 8013ea2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013ea4:	693b      	ldr	r3, [r7, #16]
 8013ea6:	68dc      	ldr	r4, [r3, #12]
 8013ea8:	6838      	ldr	r0, [r7, #0]
 8013eaa:	f7fa f974 	bl	800e196 <lwip_htonl>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8013eb2:	7dfb      	ldrb	r3, [r7, #23]
 8013eb4:	089b      	lsrs	r3, r3, #2
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	3305      	adds	r3, #5
 8013eba:	b29b      	uxth	r3, r3
 8013ebc:	031b      	lsls	r3, r3, #12
 8013ebe:	b29a      	uxth	r2, r3
 8013ec0:	79fb      	ldrb	r3, [r7, #7]
 8013ec2:	b29b      	uxth	r3, r3
 8013ec4:	4313      	orrs	r3, r2
 8013ec6:	b29a      	uxth	r2, r3
 8013ec8:	693b      	ldr	r3, [r7, #16]
 8013eca:	68dc      	ldr	r4, [r3, #12]
 8013ecc:	4610      	mov	r0, r2
 8013ece:	f7fa f94d 	bl	800e16c <lwip_htons>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	68db      	ldr	r3, [r3, #12]
 8013eda:	2200      	movs	r2, #0
 8013edc:	749a      	strb	r2, [r3, #18]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	74da      	strb	r2, [r3, #19]
  return seg;
 8013ee2:	693b      	ldr	r3, [r7, #16]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	371c      	adds	r7, #28
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd90      	pop	{r4, r7, pc}
 8013eec:	0801b0f0 	.word	0x0801b0f0
 8013ef0:	0801b124 	.word	0x0801b124
 8013ef4:	0801b144 	.word	0x0801b144
 8013ef8:	0801b16c 	.word	0x0801b16c
 8013efc:	0801b190 	.word	0x0801b190

08013f00 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013f00:	b590      	push	{r4, r7, lr}
 8013f02:	b08b      	sub	sp, #44	@ 0x2c
 8013f04:	af02      	add	r7, sp, #8
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	460b      	mov	r3, r1
 8013f0a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	61fb      	str	r3, [r7, #28]
 8013f10:	2300      	movs	r3, #0
 8013f12:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013f14:	2300      	movs	r3, #0
 8013f16:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d106      	bne.n	8013f2c <tcp_split_unsent_seg+0x2c>
 8013f1e:	4b95      	ldr	r3, [pc, #596]	@ (8014174 <tcp_split_unsent_seg+0x274>)
 8013f20:	f240 324b 	movw	r2, #843	@ 0x34b
 8013f24:	4994      	ldr	r1, [pc, #592]	@ (8014178 <tcp_split_unsent_seg+0x278>)
 8013f26:	4895      	ldr	r0, [pc, #596]	@ (801417c <tcp_split_unsent_seg+0x27c>)
 8013f28:	f004 fd4c 	bl	80189c4 <iprintf>

  useg = pcb->unsent;
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013f30:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d102      	bne.n	8013f3e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013f38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013f3c:	e116      	b.n	801416c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013f3e:	887b      	ldrh	r3, [r7, #2]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d109      	bne.n	8013f58 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013f44:	4b8b      	ldr	r3, [pc, #556]	@ (8014174 <tcp_split_unsent_seg+0x274>)
 8013f46:	f240 3253 	movw	r2, #851	@ 0x353
 8013f4a:	498d      	ldr	r1, [pc, #564]	@ (8014180 <tcp_split_unsent_seg+0x280>)
 8013f4c:	488b      	ldr	r0, [pc, #556]	@ (801417c <tcp_split_unsent_seg+0x27c>)
 8013f4e:	f004 fd39 	bl	80189c4 <iprintf>
    return ERR_VAL;
 8013f52:	f06f 0305 	mvn.w	r3, #5
 8013f56:	e109      	b.n	801416c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013f58:	697b      	ldr	r3, [r7, #20]
 8013f5a:	891b      	ldrh	r3, [r3, #8]
 8013f5c:	887a      	ldrh	r2, [r7, #2]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d301      	bcc.n	8013f66 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013f62:	2300      	movs	r3, #0
 8013f64:	e102      	b.n	801416c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f6a:	887a      	ldrh	r2, [r7, #2]
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d906      	bls.n	8013f7e <tcp_split_unsent_seg+0x7e>
 8013f70:	4b80      	ldr	r3, [pc, #512]	@ (8014174 <tcp_split_unsent_seg+0x274>)
 8013f72:	f240 325b 	movw	r2, #859	@ 0x35b
 8013f76:	4983      	ldr	r1, [pc, #524]	@ (8014184 <tcp_split_unsent_seg+0x284>)
 8013f78:	4880      	ldr	r0, [pc, #512]	@ (801417c <tcp_split_unsent_seg+0x27c>)
 8013f7a:	f004 fd23 	bl	80189c4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013f7e:	697b      	ldr	r3, [r7, #20]
 8013f80:	891b      	ldrh	r3, [r3, #8]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d106      	bne.n	8013f94 <tcp_split_unsent_seg+0x94>
 8013f86:	4b7b      	ldr	r3, [pc, #492]	@ (8014174 <tcp_split_unsent_seg+0x274>)
 8013f88:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8013f8c:	497e      	ldr	r1, [pc, #504]	@ (8014188 <tcp_split_unsent_seg+0x288>)
 8013f8e:	487b      	ldr	r0, [pc, #492]	@ (801417c <tcp_split_unsent_seg+0x27c>)
 8013f90:	f004 fd18 	bl	80189c4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013f94:	697b      	ldr	r3, [r7, #20]
 8013f96:	7a9b      	ldrb	r3, [r3, #10]
 8013f98:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013f9a:	7bfb      	ldrb	r3, [r7, #15]
 8013f9c:	009b      	lsls	r3, r3, #2
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	f003 0304 	and.w	r3, r3, #4
 8013fa4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	891a      	ldrh	r2, [r3, #8]
 8013faa:	887b      	ldrh	r3, [r7, #2]
 8013fac:	1ad3      	subs	r3, r2, r3
 8013fae:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013fb0:	7bbb      	ldrb	r3, [r7, #14]
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	89bb      	ldrh	r3, [r7, #12]
 8013fb6:	4413      	add	r3, r2
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	2036      	movs	r0, #54	@ 0x36
 8013fc2:	f7fb faa9 	bl	800f518 <pbuf_alloc>
 8013fc6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f000 80b7 	beq.w	801413e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	685b      	ldr	r3, [r3, #4]
 8013fd4:	891a      	ldrh	r2, [r3, #8]
 8013fd6:	697b      	ldr	r3, [r7, #20]
 8013fd8:	891b      	ldrh	r3, [r3, #8]
 8013fda:	1ad3      	subs	r3, r2, r3
 8013fdc:	b29a      	uxth	r2, r3
 8013fde:	887b      	ldrh	r3, [r7, #2]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013fe4:	697b      	ldr	r3, [r7, #20]
 8013fe6:	6858      	ldr	r0, [r3, #4]
 8013fe8:	693b      	ldr	r3, [r7, #16]
 8013fea:	685a      	ldr	r2, [r3, #4]
 8013fec:	7bbb      	ldrb	r3, [r7, #14]
 8013fee:	18d1      	adds	r1, r2, r3
 8013ff0:	897b      	ldrh	r3, [r7, #10]
 8013ff2:	89ba      	ldrh	r2, [r7, #12]
 8013ff4:	f7fb ff7e 	bl	800fef4 <pbuf_copy_partial>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	461a      	mov	r2, r3
 8013ffc:	89bb      	ldrh	r3, [r7, #12]
 8013ffe:	4293      	cmp	r3, r2
 8014000:	f040 809f 	bne.w	8014142 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	899b      	ldrh	r3, [r3, #12]
 801400a:	b29b      	uxth	r3, r3
 801400c:	4618      	mov	r0, r3
 801400e:	f7fa f8ad 	bl	800e16c <lwip_htons>
 8014012:	4603      	mov	r3, r0
 8014014:	b2db      	uxtb	r3, r3
 8014016:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801401a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801401c:	2300      	movs	r3, #0
 801401e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8014020:	7efb      	ldrb	r3, [r7, #27]
 8014022:	f003 0308 	and.w	r3, r3, #8
 8014026:	2b00      	cmp	r3, #0
 8014028:	d007      	beq.n	801403a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801402a:	7efb      	ldrb	r3, [r7, #27]
 801402c:	f023 0308 	bic.w	r3, r3, #8
 8014030:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8014032:	7ebb      	ldrb	r3, [r7, #26]
 8014034:	f043 0308 	orr.w	r3, r3, #8
 8014038:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801403a:	7efb      	ldrb	r3, [r7, #27]
 801403c:	f003 0301 	and.w	r3, r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	d007      	beq.n	8014054 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8014044:	7efb      	ldrb	r3, [r7, #27]
 8014046:	f023 0301 	bic.w	r3, r3, #1
 801404a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801404c:	7ebb      	ldrb	r3, [r7, #26]
 801404e:	f043 0301 	orr.w	r3, r3, #1
 8014052:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8014054:	697b      	ldr	r3, [r7, #20]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	685b      	ldr	r3, [r3, #4]
 801405a:	4618      	mov	r0, r3
 801405c:	f7fa f89b 	bl	800e196 <lwip_htonl>
 8014060:	4602      	mov	r2, r0
 8014062:	887b      	ldrh	r3, [r7, #2]
 8014064:	18d1      	adds	r1, r2, r3
 8014066:	7eba      	ldrb	r2, [r7, #26]
 8014068:	7bfb      	ldrb	r3, [r7, #15]
 801406a:	9300      	str	r3, [sp, #0]
 801406c:	460b      	mov	r3, r1
 801406e:	6939      	ldr	r1, [r7, #16]
 8014070:	6878      	ldr	r0, [r7, #4]
 8014072:	f7ff fea9 	bl	8013dc8 <tcp_create_segment>
 8014076:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8014078:	69fb      	ldr	r3, [r7, #28]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d063      	beq.n	8014146 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	4618      	mov	r0, r3
 8014084:	f7fb fdbe 	bl	800fc04 <pbuf_clen>
 8014088:	4603      	mov	r3, r0
 801408a:	461a      	mov	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014092:	1a9b      	subs	r3, r3, r2
 8014094:	b29a      	uxth	r2, r3
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	6858      	ldr	r0, [r3, #4]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	685b      	ldr	r3, [r3, #4]
 80140a4:	891a      	ldrh	r2, [r3, #8]
 80140a6:	89bb      	ldrh	r3, [r7, #12]
 80140a8:	1ad3      	subs	r3, r2, r3
 80140aa:	b29b      	uxth	r3, r3
 80140ac:	4619      	mov	r1, r3
 80140ae:	f7fb fb95 	bl	800f7dc <pbuf_realloc>
  useg->len -= remainder;
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	891a      	ldrh	r2, [r3, #8]
 80140b6:	89bb      	ldrh	r3, [r7, #12]
 80140b8:	1ad3      	subs	r3, r2, r3
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	899b      	ldrh	r3, [r3, #12]
 80140c6:	b29c      	uxth	r4, r3
 80140c8:	7efb      	ldrb	r3, [r7, #27]
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	4618      	mov	r0, r3
 80140ce:	f7fa f84d 	bl	800e16c <lwip_htons>
 80140d2:	4603      	mov	r3, r0
 80140d4:	461a      	mov	r2, r3
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	68db      	ldr	r3, [r3, #12]
 80140da:	4322      	orrs	r2, r4
 80140dc:	b292      	uxth	r2, r2
 80140de:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	685b      	ldr	r3, [r3, #4]
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7fb fd8d 	bl	800fc04 <pbuf_clen>
 80140ea:	4603      	mov	r3, r0
 80140ec:	461a      	mov	r2, r3
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80140f4:	4413      	add	r3, r2
 80140f6:	b29a      	uxth	r2, r3
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80140fe:	69fb      	ldr	r3, [r7, #28]
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	4618      	mov	r0, r3
 8014104:	f7fb fd7e 	bl	800fc04 <pbuf_clen>
 8014108:	4603      	mov	r3, r0
 801410a:	461a      	mov	r2, r3
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014112:	4413      	add	r3, r2
 8014114:	b29a      	uxth	r2, r3
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	681a      	ldr	r2, [r3, #0]
 8014120:	69fb      	ldr	r3, [r7, #28]
 8014122:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	69fa      	ldr	r2, [r7, #28]
 8014128:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d103      	bne.n	801413a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2200      	movs	r2, #0
 8014136:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801413a:	2300      	movs	r3, #0
 801413c:	e016      	b.n	801416c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801413e:	bf00      	nop
 8014140:	e002      	b.n	8014148 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014142:	bf00      	nop
 8014144:	e000      	b.n	8014148 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8014146:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d006      	beq.n	801415c <tcp_split_unsent_seg+0x25c>
 801414e:	4b09      	ldr	r3, [pc, #36]	@ (8014174 <tcp_split_unsent_seg+0x274>)
 8014150:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8014154:	490d      	ldr	r1, [pc, #52]	@ (801418c <tcp_split_unsent_seg+0x28c>)
 8014156:	4809      	ldr	r0, [pc, #36]	@ (801417c <tcp_split_unsent_seg+0x27c>)
 8014158:	f004 fc34 	bl	80189c4 <iprintf>
  if (p != NULL) {
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d002      	beq.n	8014168 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8014162:	6938      	ldr	r0, [r7, #16]
 8014164:	f7fb fcc0 	bl	800fae8 <pbuf_free>
  }

  return ERR_MEM;
 8014168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801416c:	4618      	mov	r0, r3
 801416e:	3724      	adds	r7, #36	@ 0x24
 8014170:	46bd      	mov	sp, r7
 8014172:	bd90      	pop	{r4, r7, pc}
 8014174:	0801b0f0 	.word	0x0801b0f0
 8014178:	0801b484 	.word	0x0801b484
 801417c:	0801b144 	.word	0x0801b144
 8014180:	0801b4a8 	.word	0x0801b4a8
 8014184:	0801b4cc 	.word	0x0801b4cc
 8014188:	0801b4dc 	.word	0x0801b4dc
 801418c:	0801b4ec 	.word	0x0801b4ec

08014190 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014190:	b590      	push	{r4, r7, lr}
 8014192:	b085      	sub	sp, #20
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	2b00      	cmp	r3, #0
 801419c:	d106      	bne.n	80141ac <tcp_send_fin+0x1c>
 801419e:	4b21      	ldr	r3, [pc, #132]	@ (8014224 <tcp_send_fin+0x94>)
 80141a0:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80141a4:	4920      	ldr	r1, [pc, #128]	@ (8014228 <tcp_send_fin+0x98>)
 80141a6:	4821      	ldr	r0, [pc, #132]	@ (801422c <tcp_send_fin+0x9c>)
 80141a8:	f004 fc0c 	bl	80189c4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d02e      	beq.n	8014212 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80141b8:	60fb      	str	r3, [r7, #12]
 80141ba:	e002      	b.n	80141c2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d1f8      	bne.n	80141bc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80141ca:	68fb      	ldr	r3, [r7, #12]
 80141cc:	68db      	ldr	r3, [r3, #12]
 80141ce:	899b      	ldrh	r3, [r3, #12]
 80141d0:	b29b      	uxth	r3, r3
 80141d2:	4618      	mov	r0, r3
 80141d4:	f7f9 ffca 	bl	800e16c <lwip_htons>
 80141d8:	4603      	mov	r3, r0
 80141da:	b2db      	uxtb	r3, r3
 80141dc:	f003 0307 	and.w	r3, r3, #7
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d116      	bne.n	8014212 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	899b      	ldrh	r3, [r3, #12]
 80141ea:	b29c      	uxth	r4, r3
 80141ec:	2001      	movs	r0, #1
 80141ee:	f7f9 ffbd 	bl	800e16c <lwip_htons>
 80141f2:	4603      	mov	r3, r0
 80141f4:	461a      	mov	r2, r3
 80141f6:	68fb      	ldr	r3, [r7, #12]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	4322      	orrs	r2, r4
 80141fc:	b292      	uxth	r2, r2
 80141fe:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	8b5b      	ldrh	r3, [r3, #26]
 8014204:	f043 0320 	orr.w	r3, r3, #32
 8014208:	b29a      	uxth	r2, r3
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801420e:	2300      	movs	r3, #0
 8014210:	e004      	b.n	801421c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014212:	2101      	movs	r1, #1
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 f80b 	bl	8014230 <tcp_enqueue_flags>
 801421a:	4603      	mov	r3, r0
}
 801421c:	4618      	mov	r0, r3
 801421e:	3714      	adds	r7, #20
 8014220:	46bd      	mov	sp, r7
 8014222:	bd90      	pop	{r4, r7, pc}
 8014224:	0801b0f0 	.word	0x0801b0f0
 8014228:	0801b4f8 	.word	0x0801b4f8
 801422c:	0801b144 	.word	0x0801b144

08014230 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08a      	sub	sp, #40	@ 0x28
 8014234:	af02      	add	r7, sp, #8
 8014236:	6078      	str	r0, [r7, #4]
 8014238:	460b      	mov	r3, r1
 801423a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801423c:	2300      	movs	r3, #0
 801423e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8014240:	2300      	movs	r3, #0
 8014242:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8014244:	78fb      	ldrb	r3, [r7, #3]
 8014246:	f003 0303 	and.w	r3, r3, #3
 801424a:	2b00      	cmp	r3, #0
 801424c:	d106      	bne.n	801425c <tcp_enqueue_flags+0x2c>
 801424e:	4b67      	ldr	r3, [pc, #412]	@ (80143ec <tcp_enqueue_flags+0x1bc>)
 8014250:	f240 4211 	movw	r2, #1041	@ 0x411
 8014254:	4966      	ldr	r1, [pc, #408]	@ (80143f0 <tcp_enqueue_flags+0x1c0>)
 8014256:	4867      	ldr	r0, [pc, #412]	@ (80143f4 <tcp_enqueue_flags+0x1c4>)
 8014258:	f004 fbb4 	bl	80189c4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d106      	bne.n	8014270 <tcp_enqueue_flags+0x40>
 8014262:	4b62      	ldr	r3, [pc, #392]	@ (80143ec <tcp_enqueue_flags+0x1bc>)
 8014264:	f240 4213 	movw	r2, #1043	@ 0x413
 8014268:	4963      	ldr	r1, [pc, #396]	@ (80143f8 <tcp_enqueue_flags+0x1c8>)
 801426a:	4862      	ldr	r0, [pc, #392]	@ (80143f4 <tcp_enqueue_flags+0x1c4>)
 801426c:	f004 fbaa 	bl	80189c4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8014270:	78fb      	ldrb	r3, [r7, #3]
 8014272:	f003 0302 	and.w	r3, r3, #2
 8014276:	2b00      	cmp	r3, #0
 8014278:	d001      	beq.n	801427e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801427a:	2301      	movs	r3, #1
 801427c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801427e:	7ffb      	ldrb	r3, [r7, #31]
 8014280:	009b      	lsls	r3, r3, #2
 8014282:	b2db      	uxtb	r3, r3
 8014284:	f003 0304 	and.w	r3, r3, #4
 8014288:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801428a:	7dfb      	ldrb	r3, [r7, #23]
 801428c:	b29b      	uxth	r3, r3
 801428e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014292:	4619      	mov	r1, r3
 8014294:	2036      	movs	r0, #54	@ 0x36
 8014296:	f7fb f93f 	bl	800f518 <pbuf_alloc>
 801429a:	6138      	str	r0, [r7, #16]
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d109      	bne.n	80142b6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	8b5b      	ldrh	r3, [r3, #26]
 80142a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80142b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142b4:	e095      	b.n	80143e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80142b6:	693b      	ldr	r3, [r7, #16]
 80142b8:	895a      	ldrh	r2, [r3, #10]
 80142ba:	7dfb      	ldrb	r3, [r7, #23]
 80142bc:	b29b      	uxth	r3, r3
 80142be:	429a      	cmp	r2, r3
 80142c0:	d206      	bcs.n	80142d0 <tcp_enqueue_flags+0xa0>
 80142c2:	4b4a      	ldr	r3, [pc, #296]	@ (80143ec <tcp_enqueue_flags+0x1bc>)
 80142c4:	f240 4239 	movw	r2, #1081	@ 0x439
 80142c8:	494c      	ldr	r1, [pc, #304]	@ (80143fc <tcp_enqueue_flags+0x1cc>)
 80142ca:	484a      	ldr	r0, [pc, #296]	@ (80143f4 <tcp_enqueue_flags+0x1c4>)
 80142cc:	f004 fb7a 	bl	80189c4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80142d4:	78fa      	ldrb	r2, [r7, #3]
 80142d6:	7ffb      	ldrb	r3, [r7, #31]
 80142d8:	9300      	str	r3, [sp, #0]
 80142da:	460b      	mov	r3, r1
 80142dc:	6939      	ldr	r1, [r7, #16]
 80142de:	6878      	ldr	r0, [r7, #4]
 80142e0:	f7ff fd72 	bl	8013dc8 <tcp_create_segment>
 80142e4:	60f8      	str	r0, [r7, #12]
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d109      	bne.n	8014300 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	8b5b      	ldrh	r3, [r3, #26]
 80142f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80142f4:	b29a      	uxth	r2, r3
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80142fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80142fe:	e070      	b.n	80143e2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	68db      	ldr	r3, [r3, #12]
 8014304:	f003 0303 	and.w	r3, r3, #3
 8014308:	2b00      	cmp	r3, #0
 801430a:	d006      	beq.n	801431a <tcp_enqueue_flags+0xea>
 801430c:	4b37      	ldr	r3, [pc, #220]	@ (80143ec <tcp_enqueue_flags+0x1bc>)
 801430e:	f240 4242 	movw	r2, #1090	@ 0x442
 8014312:	493b      	ldr	r1, [pc, #236]	@ (8014400 <tcp_enqueue_flags+0x1d0>)
 8014314:	4837      	ldr	r0, [pc, #220]	@ (80143f4 <tcp_enqueue_flags+0x1c4>)
 8014316:	f004 fb55 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	891b      	ldrh	r3, [r3, #8]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d006      	beq.n	8014330 <tcp_enqueue_flags+0x100>
 8014322:	4b32      	ldr	r3, [pc, #200]	@ (80143ec <tcp_enqueue_flags+0x1bc>)
 8014324:	f240 4243 	movw	r2, #1091	@ 0x443
 8014328:	4936      	ldr	r1, [pc, #216]	@ (8014404 <tcp_enqueue_flags+0x1d4>)
 801432a:	4832      	ldr	r0, [pc, #200]	@ (80143f4 <tcp_enqueue_flags+0x1c4>)
 801432c:	f004 fb4a 	bl	80189c4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014334:	2b00      	cmp	r3, #0
 8014336:	d103      	bne.n	8014340 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	68fa      	ldr	r2, [r7, #12]
 801433c:	66da      	str	r2, [r3, #108]	@ 0x6c
 801433e:	e00d      	b.n	801435c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014344:	61bb      	str	r3, [r7, #24]
 8014346:	e002      	b.n	801434e <tcp_enqueue_flags+0x11e>
 8014348:	69bb      	ldr	r3, [r7, #24]
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	61bb      	str	r3, [r7, #24]
 801434e:	69bb      	ldr	r3, [r7, #24]
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d1f8      	bne.n	8014348 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014356:	69bb      	ldr	r3, [r7, #24]
 8014358:	68fa      	ldr	r2, [r7, #12]
 801435a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2200      	movs	r2, #0
 8014360:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014364:	78fb      	ldrb	r3, [r7, #3]
 8014366:	f003 0302 	and.w	r3, r3, #2
 801436a:	2b00      	cmp	r3, #0
 801436c:	d104      	bne.n	8014378 <tcp_enqueue_flags+0x148>
 801436e:	78fb      	ldrb	r3, [r7, #3]
 8014370:	f003 0301 	and.w	r3, r3, #1
 8014374:	2b00      	cmp	r3, #0
 8014376:	d004      	beq.n	8014382 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801437c:	1c5a      	adds	r2, r3, #1
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014382:	78fb      	ldrb	r3, [r7, #3]
 8014384:	f003 0301 	and.w	r3, r3, #1
 8014388:	2b00      	cmp	r3, #0
 801438a:	d006      	beq.n	801439a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	8b5b      	ldrh	r3, [r3, #26]
 8014390:	f043 0320 	orr.w	r3, r3, #32
 8014394:	b29a      	uxth	r2, r3
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801439a:	68fb      	ldr	r3, [r7, #12]
 801439c:	685b      	ldr	r3, [r3, #4]
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fb fc30 	bl	800fc04 <pbuf_clen>
 80143a4:	4603      	mov	r3, r0
 80143a6:	461a      	mov	r2, r3
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80143ae:	4413      	add	r3, r2
 80143b0:	b29a      	uxth	r2, r3
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d00e      	beq.n	80143e0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d10a      	bne.n	80143e0 <tcp_enqueue_flags+0x1b0>
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d106      	bne.n	80143e0 <tcp_enqueue_flags+0x1b0>
 80143d2:	4b06      	ldr	r3, [pc, #24]	@ (80143ec <tcp_enqueue_flags+0x1bc>)
 80143d4:	f240 4265 	movw	r2, #1125	@ 0x465
 80143d8:	490b      	ldr	r1, [pc, #44]	@ (8014408 <tcp_enqueue_flags+0x1d8>)
 80143da:	4806      	ldr	r0, [pc, #24]	@ (80143f4 <tcp_enqueue_flags+0x1c4>)
 80143dc:	f004 faf2 	bl	80189c4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80143e0:	2300      	movs	r3, #0
}
 80143e2:	4618      	mov	r0, r3
 80143e4:	3720      	adds	r7, #32
 80143e6:	46bd      	mov	sp, r7
 80143e8:	bd80      	pop	{r7, pc}
 80143ea:	bf00      	nop
 80143ec:	0801b0f0 	.word	0x0801b0f0
 80143f0:	0801b514 	.word	0x0801b514
 80143f4:	0801b144 	.word	0x0801b144
 80143f8:	0801b56c 	.word	0x0801b56c
 80143fc:	0801b58c 	.word	0x0801b58c
 8014400:	0801b5c8 	.word	0x0801b5c8
 8014404:	0801b5e0 	.word	0x0801b5e0
 8014408:	0801b60c 	.word	0x0801b60c

0801440c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801440c:	b5b0      	push	{r4, r5, r7, lr}
 801440e:	b08a      	sub	sp, #40	@ 0x28
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	2b00      	cmp	r3, #0
 8014418:	d106      	bne.n	8014428 <tcp_output+0x1c>
 801441a:	4b8a      	ldr	r3, [pc, #552]	@ (8014644 <tcp_output+0x238>)
 801441c:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8014420:	4989      	ldr	r1, [pc, #548]	@ (8014648 <tcp_output+0x23c>)
 8014422:	488a      	ldr	r0, [pc, #552]	@ (801464c <tcp_output+0x240>)
 8014424:	f004 face 	bl	80189c4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	7d1b      	ldrb	r3, [r3, #20]
 801442c:	2b01      	cmp	r3, #1
 801442e:	d106      	bne.n	801443e <tcp_output+0x32>
 8014430:	4b84      	ldr	r3, [pc, #528]	@ (8014644 <tcp_output+0x238>)
 8014432:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8014436:	4986      	ldr	r1, [pc, #536]	@ (8014650 <tcp_output+0x244>)
 8014438:	4884      	ldr	r0, [pc, #528]	@ (801464c <tcp_output+0x240>)
 801443a:	f004 fac3 	bl	80189c4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801443e:	4b85      	ldr	r3, [pc, #532]	@ (8014654 <tcp_output+0x248>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	429a      	cmp	r2, r3
 8014446:	d101      	bne.n	801444c <tcp_output+0x40>
    return ERR_OK;
 8014448:	2300      	movs	r3, #0
 801444a:	e1ce      	b.n	80147ea <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014458:	4293      	cmp	r3, r2
 801445a:	bf28      	it	cs
 801445c:	4613      	movcs	r3, r2
 801445e:	b29b      	uxth	r3, r3
 8014460:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014466:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8014468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801446a:	2b00      	cmp	r3, #0
 801446c:	d10b      	bne.n	8014486 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	8b5b      	ldrh	r3, [r3, #26]
 8014472:	f003 0302 	and.w	r3, r3, #2
 8014476:	2b00      	cmp	r3, #0
 8014478:	f000 81aa 	beq.w	80147d0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801447c:	6878      	ldr	r0, [r7, #4]
 801447e:	f000 fdcb 	bl	8015018 <tcp_send_empty_ack>
 8014482:	4603      	mov	r3, r0
 8014484:	e1b1      	b.n	80147ea <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014486:	6879      	ldr	r1, [r7, #4]
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	3304      	adds	r3, #4
 801448c:	461a      	mov	r2, r3
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f7ff fc7e 	bl	8013d90 <tcp_route>
 8014494:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d102      	bne.n	80144a2 <tcp_output+0x96>
    return ERR_RTE;
 801449c:	f06f 0303 	mvn.w	r3, #3
 80144a0:	e1a3      	b.n	80147ea <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d003      	beq.n	80144b0 <tcp_output+0xa4>
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d111      	bne.n	80144d4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80144b0:	697b      	ldr	r3, [r7, #20]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d002      	beq.n	80144bc <tcp_output+0xb0>
 80144b6:	697b      	ldr	r3, [r7, #20]
 80144b8:	3304      	adds	r3, #4
 80144ba:	e000      	b.n	80144be <tcp_output+0xb2>
 80144bc:	2300      	movs	r3, #0
 80144be:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d102      	bne.n	80144cc <tcp_output+0xc0>
      return ERR_RTE;
 80144c6:	f06f 0303 	mvn.w	r3, #3
 80144ca:	e18e      	b.n	80147ea <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80144cc:	693b      	ldr	r3, [r7, #16]
 80144ce:	681a      	ldr	r2, [r3, #0]
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80144d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	4618      	mov	r0, r3
 80144dc:	f7f9 fe5b 	bl	800e196 <lwip_htonl>
 80144e0:	4602      	mov	r2, r0
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80144e6:	1ad3      	subs	r3, r2, r3
 80144e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80144ea:	8912      	ldrh	r2, [r2, #8]
 80144ec:	4413      	add	r3, r2
 80144ee:	69ba      	ldr	r2, [r7, #24]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d227      	bcs.n	8014544 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80144fa:	461a      	mov	r2, r3
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	4293      	cmp	r3, r2
 8014500:	d114      	bne.n	801452c <tcp_output+0x120>
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014506:	2b00      	cmp	r3, #0
 8014508:	d110      	bne.n	801452c <tcp_output+0x120>
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8014510:	2b00      	cmp	r3, #0
 8014512:	d10b      	bne.n	801452c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2200      	movs	r2, #0
 8014518:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2201      	movs	r2, #1
 8014520:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2200      	movs	r2, #0
 8014528:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	8b5b      	ldrh	r3, [r3, #26]
 8014530:	f003 0302 	and.w	r3, r3, #2
 8014534:	2b00      	cmp	r3, #0
 8014536:	f000 814d 	beq.w	80147d4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f000 fd6c 	bl	8015018 <tcp_send_empty_ack>
 8014540:	4603      	mov	r3, r0
 8014542:	e152      	b.n	80147ea <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	2200      	movs	r2, #0
 8014548:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014550:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014552:	6a3b      	ldr	r3, [r7, #32]
 8014554:	2b00      	cmp	r3, #0
 8014556:	f000 811c 	beq.w	8014792 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801455a:	e002      	b.n	8014562 <tcp_output+0x156>
 801455c:	6a3b      	ldr	r3, [r7, #32]
 801455e:	681b      	ldr	r3, [r3, #0]
 8014560:	623b      	str	r3, [r7, #32]
 8014562:	6a3b      	ldr	r3, [r7, #32]
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d1f8      	bne.n	801455c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801456a:	e112      	b.n	8014792 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801456c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801456e:	68db      	ldr	r3, [r3, #12]
 8014570:	899b      	ldrh	r3, [r3, #12]
 8014572:	b29b      	uxth	r3, r3
 8014574:	4618      	mov	r0, r3
 8014576:	f7f9 fdf9 	bl	800e16c <lwip_htons>
 801457a:	4603      	mov	r3, r0
 801457c:	b2db      	uxtb	r3, r3
 801457e:	f003 0304 	and.w	r3, r3, #4
 8014582:	2b00      	cmp	r3, #0
 8014584:	d006      	beq.n	8014594 <tcp_output+0x188>
 8014586:	4b2f      	ldr	r3, [pc, #188]	@ (8014644 <tcp_output+0x238>)
 8014588:	f240 5236 	movw	r2, #1334	@ 0x536
 801458c:	4932      	ldr	r1, [pc, #200]	@ (8014658 <tcp_output+0x24c>)
 801458e:	482f      	ldr	r0, [pc, #188]	@ (801464c <tcp_output+0x240>)
 8014590:	f004 fa18 	bl	80189c4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014598:	2b00      	cmp	r3, #0
 801459a:	d01f      	beq.n	80145dc <tcp_output+0x1d0>
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	8b5b      	ldrh	r3, [r3, #26]
 80145a0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d119      	bne.n	80145dc <tcp_output+0x1d0>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	d00b      	beq.n	80145c8 <tcp_output+0x1bc>
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d110      	bne.n	80145dc <tcp_output+0x1d0>
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145be:	891a      	ldrh	r2, [r3, #8]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d209      	bcs.n	80145dc <tcp_output+0x1d0>
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d004      	beq.n	80145dc <tcp_output+0x1d0>
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80145d8:	2b0f      	cmp	r3, #15
 80145da:	d901      	bls.n	80145e0 <tcp_output+0x1d4>
 80145dc:	2301      	movs	r3, #1
 80145de:	e000      	b.n	80145e2 <tcp_output+0x1d6>
 80145e0:	2300      	movs	r3, #0
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d106      	bne.n	80145f4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	8b5b      	ldrh	r3, [r3, #26]
 80145ea:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	f000 80e4 	beq.w	80147bc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	7d1b      	ldrb	r3, [r3, #20]
 80145f8:	2b02      	cmp	r3, #2
 80145fa:	d00d      	beq.n	8014618 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80145fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145fe:	68db      	ldr	r3, [r3, #12]
 8014600:	899b      	ldrh	r3, [r3, #12]
 8014602:	b29c      	uxth	r4, r3
 8014604:	2010      	movs	r0, #16
 8014606:	f7f9 fdb1 	bl	800e16c <lwip_htons>
 801460a:	4603      	mov	r3, r0
 801460c:	461a      	mov	r2, r3
 801460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014610:	68db      	ldr	r3, [r3, #12]
 8014612:	4322      	orrs	r2, r4
 8014614:	b292      	uxth	r2, r2
 8014616:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014618:	697a      	ldr	r2, [r7, #20]
 801461a:	6879      	ldr	r1, [r7, #4]
 801461c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801461e:	f000 f909 	bl	8014834 <tcp_output_segment>
 8014622:	4603      	mov	r3, r0
 8014624:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d016      	beq.n	801465c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	8b5b      	ldrh	r3, [r3, #26]
 8014632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014636:	b29a      	uxth	r2, r3
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	835a      	strh	r2, [r3, #26]
      return err;
 801463c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014640:	e0d3      	b.n	80147ea <tcp_output+0x3de>
 8014642:	bf00      	nop
 8014644:	0801b0f0 	.word	0x0801b0f0
 8014648:	0801b634 	.word	0x0801b634
 801464c:	0801b144 	.word	0x0801b144
 8014650:	0801b64c 	.word	0x0801b64c
 8014654:	240103a4 	.word	0x240103a4
 8014658:	0801b674 	.word	0x0801b674
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801465e:	681a      	ldr	r2, [r3, #0]
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	7d1b      	ldrb	r3, [r3, #20]
 8014668:	2b02      	cmp	r3, #2
 801466a:	d006      	beq.n	801467a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	8b5b      	ldrh	r3, [r3, #26]
 8014670:	f023 0303 	bic.w	r3, r3, #3
 8014674:	b29a      	uxth	r2, r3
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801467a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	685b      	ldr	r3, [r3, #4]
 8014680:	4618      	mov	r0, r3
 8014682:	f7f9 fd88 	bl	800e196 <lwip_htonl>
 8014686:	4604      	mov	r4, r0
 8014688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801468a:	891b      	ldrh	r3, [r3, #8]
 801468c:	461d      	mov	r5, r3
 801468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014690:	68db      	ldr	r3, [r3, #12]
 8014692:	899b      	ldrh	r3, [r3, #12]
 8014694:	b29b      	uxth	r3, r3
 8014696:	4618      	mov	r0, r3
 8014698:	f7f9 fd68 	bl	800e16c <lwip_htons>
 801469c:	4603      	mov	r3, r0
 801469e:	b2db      	uxtb	r3, r3
 80146a0:	f003 0303 	and.w	r3, r3, #3
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d001      	beq.n	80146ac <tcp_output+0x2a0>
 80146a8:	2301      	movs	r3, #1
 80146aa:	e000      	b.n	80146ae <tcp_output+0x2a2>
 80146ac:	2300      	movs	r3, #0
 80146ae:	442b      	add	r3, r5
 80146b0:	4423      	add	r3, r4
 80146b2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146b8:	68bb      	ldr	r3, [r7, #8]
 80146ba:	1ad3      	subs	r3, r2, r3
 80146bc:	2b00      	cmp	r3, #0
 80146be:	da02      	bge.n	80146c6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	68ba      	ldr	r2, [r7, #8]
 80146c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80146c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146c8:	891b      	ldrh	r3, [r3, #8]
 80146ca:	461c      	mov	r4, r3
 80146cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	899b      	ldrh	r3, [r3, #12]
 80146d2:	b29b      	uxth	r3, r3
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7f9 fd49 	bl	800e16c <lwip_htons>
 80146da:	4603      	mov	r3, r0
 80146dc:	b2db      	uxtb	r3, r3
 80146de:	f003 0303 	and.w	r3, r3, #3
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d001      	beq.n	80146ea <tcp_output+0x2de>
 80146e6:	2301      	movs	r3, #1
 80146e8:	e000      	b.n	80146ec <tcp_output+0x2e0>
 80146ea:	2300      	movs	r3, #0
 80146ec:	4423      	add	r3, r4
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d049      	beq.n	8014786 <tcp_output+0x37a>
      seg->next = NULL;
 80146f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80146f4:	2200      	movs	r2, #0
 80146f6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d105      	bne.n	801470c <tcp_output+0x300>
        pcb->unacked = seg;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014704:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8014706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014708:	623b      	str	r3, [r7, #32]
 801470a:	e03f      	b.n	801478c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801470e:	68db      	ldr	r3, [r3, #12]
 8014710:	685b      	ldr	r3, [r3, #4]
 8014712:	4618      	mov	r0, r3
 8014714:	f7f9 fd3f 	bl	800e196 <lwip_htonl>
 8014718:	4604      	mov	r4, r0
 801471a:	6a3b      	ldr	r3, [r7, #32]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4618      	mov	r0, r3
 8014722:	f7f9 fd38 	bl	800e196 <lwip_htonl>
 8014726:	4603      	mov	r3, r0
 8014728:	1ae3      	subs	r3, r4, r3
 801472a:	2b00      	cmp	r3, #0
 801472c:	da24      	bge.n	8014778 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	3370      	adds	r3, #112	@ 0x70
 8014732:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014734:	e002      	b.n	801473c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801473c:	69fb      	ldr	r3, [r7, #28]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d011      	beq.n	8014768 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014744:	69fb      	ldr	r3, [r7, #28]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	68db      	ldr	r3, [r3, #12]
 801474a:	685b      	ldr	r3, [r3, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	f7f9 fd22 	bl	800e196 <lwip_htonl>
 8014752:	4604      	mov	r4, r0
 8014754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014756:	68db      	ldr	r3, [r3, #12]
 8014758:	685b      	ldr	r3, [r3, #4]
 801475a:	4618      	mov	r0, r3
 801475c:	f7f9 fd1b 	bl	800e196 <lwip_htonl>
 8014760:	4603      	mov	r3, r0
 8014762:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014764:	2b00      	cmp	r3, #0
 8014766:	dbe6      	blt.n	8014736 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	681a      	ldr	r2, [r3, #0]
 801476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801476e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014770:	69fb      	ldr	r3, [r7, #28]
 8014772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014774:	601a      	str	r2, [r3, #0]
 8014776:	e009      	b.n	801478c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014778:	6a3b      	ldr	r3, [r7, #32]
 801477a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801477c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801477e:	6a3b      	ldr	r3, [r7, #32]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	623b      	str	r3, [r7, #32]
 8014784:	e002      	b.n	801478c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014788:	f7fc fc43 	bl	8011012 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014790:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8014792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014794:	2b00      	cmp	r3, #0
 8014796:	d012      	beq.n	80147be <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	685b      	ldr	r3, [r3, #4]
 801479e:	4618      	mov	r0, r3
 80147a0:	f7f9 fcf9 	bl	800e196 <lwip_htonl>
 80147a4:	4602      	mov	r2, r0
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80147aa:	1ad3      	subs	r3, r2, r3
 80147ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80147ae:	8912      	ldrh	r2, [r2, #8]
 80147b0:	4413      	add	r3, r2
  while (seg != NULL &&
 80147b2:	69ba      	ldr	r2, [r7, #24]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	f4bf aed9 	bcs.w	801456c <tcp_output+0x160>
 80147ba:	e000      	b.n	80147be <tcp_output+0x3b2>
      break;
 80147bc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d108      	bne.n	80147d8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	2200      	movs	r2, #0
 80147ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80147ce:	e004      	b.n	80147da <tcp_output+0x3ce>
    goto output_done;
 80147d0:	bf00      	nop
 80147d2:	e002      	b.n	80147da <tcp_output+0x3ce>
    goto output_done;
 80147d4:	bf00      	nop
 80147d6:	e000      	b.n	80147da <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80147d8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	8b5b      	ldrh	r3, [r3, #26]
 80147de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80147e2:	b29a      	uxth	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80147e8:	2300      	movs	r3, #0
}
 80147ea:	4618      	mov	r0, r3
 80147ec:	3728      	adds	r7, #40	@ 0x28
 80147ee:	46bd      	mov	sp, r7
 80147f0:	bdb0      	pop	{r4, r5, r7, pc}
 80147f2:	bf00      	nop

080147f4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d106      	bne.n	8014810 <tcp_output_segment_busy+0x1c>
 8014802:	4b09      	ldr	r3, [pc, #36]	@ (8014828 <tcp_output_segment_busy+0x34>)
 8014804:	f240 529a 	movw	r2, #1434	@ 0x59a
 8014808:	4908      	ldr	r1, [pc, #32]	@ (801482c <tcp_output_segment_busy+0x38>)
 801480a:	4809      	ldr	r0, [pc, #36]	@ (8014830 <tcp_output_segment_busy+0x3c>)
 801480c:	f004 f8da 	bl	80189c4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	7b9b      	ldrb	r3, [r3, #14]
 8014816:	2b01      	cmp	r3, #1
 8014818:	d001      	beq.n	801481e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801481a:	2301      	movs	r3, #1
 801481c:	e000      	b.n	8014820 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801481e:	2300      	movs	r3, #0
}
 8014820:	4618      	mov	r0, r3
 8014822:	3708      	adds	r7, #8
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}
 8014828:	0801b0f0 	.word	0x0801b0f0
 801482c:	0801b68c 	.word	0x0801b68c
 8014830:	0801b144 	.word	0x0801b144

08014834 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014834:	b5b0      	push	{r4, r5, r7, lr}
 8014836:	b08c      	sub	sp, #48	@ 0x30
 8014838:	af04      	add	r7, sp, #16
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014840:	68fb      	ldr	r3, [r7, #12]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <tcp_output_segment+0x20>
 8014846:	4b64      	ldr	r3, [pc, #400]	@ (80149d8 <tcp_output_segment+0x1a4>)
 8014848:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801484c:	4963      	ldr	r1, [pc, #396]	@ (80149dc <tcp_output_segment+0x1a8>)
 801484e:	4864      	ldr	r0, [pc, #400]	@ (80149e0 <tcp_output_segment+0x1ac>)
 8014850:	f004 f8b8 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014854:	68bb      	ldr	r3, [r7, #8]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d106      	bne.n	8014868 <tcp_output_segment+0x34>
 801485a:	4b5f      	ldr	r3, [pc, #380]	@ (80149d8 <tcp_output_segment+0x1a4>)
 801485c:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8014860:	4960      	ldr	r1, [pc, #384]	@ (80149e4 <tcp_output_segment+0x1b0>)
 8014862:	485f      	ldr	r0, [pc, #380]	@ (80149e0 <tcp_output_segment+0x1ac>)
 8014864:	f004 f8ae 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2b00      	cmp	r3, #0
 801486c:	d106      	bne.n	801487c <tcp_output_segment+0x48>
 801486e:	4b5a      	ldr	r3, [pc, #360]	@ (80149d8 <tcp_output_segment+0x1a4>)
 8014870:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8014874:	495c      	ldr	r1, [pc, #368]	@ (80149e8 <tcp_output_segment+0x1b4>)
 8014876:	485a      	ldr	r0, [pc, #360]	@ (80149e0 <tcp_output_segment+0x1ac>)
 8014878:	f004 f8a4 	bl	80189c4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801487c:	68f8      	ldr	r0, [r7, #12]
 801487e:	f7ff ffb9 	bl	80147f4 <tcp_output_segment_busy>
 8014882:	4603      	mov	r3, r0
 8014884:	2b00      	cmp	r3, #0
 8014886:	d001      	beq.n	801488c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014888:	2300      	movs	r3, #0
 801488a:	e0a1      	b.n	80149d0 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801488c:	68bb      	ldr	r3, [r7, #8]
 801488e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014890:	68fb      	ldr	r3, [r7, #12]
 8014892:	68dc      	ldr	r4, [r3, #12]
 8014894:	4610      	mov	r0, r2
 8014896:	f7f9 fc7e 	bl	800e196 <lwip_htonl>
 801489a:	4603      	mov	r3, r0
 801489c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	68dc      	ldr	r4, [r3, #12]
 80148a6:	4610      	mov	r0, r2
 80148a8:	f7f9 fc60 	bl	800e16c <lwip_htons>
 80148ac:	4603      	mov	r3, r0
 80148ae:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80148b4:	68ba      	ldr	r2, [r7, #8]
 80148b6:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80148b8:	441a      	add	r2, r3
 80148ba:	68bb      	ldr	r3, [r7, #8]
 80148bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	68db      	ldr	r3, [r3, #12]
 80148c2:	3314      	adds	r3, #20
 80148c4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	7a9b      	ldrb	r3, [r3, #10]
 80148ca:	f003 0301 	and.w	r3, r3, #1
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d015      	beq.n	80148fe <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80148d2:	68bb      	ldr	r3, [r7, #8]
 80148d4:	3304      	adds	r3, #4
 80148d6:	461a      	mov	r2, r3
 80148d8:	6879      	ldr	r1, [r7, #4]
 80148da:	f240 50b4 	movw	r0, #1460	@ 0x5b4
 80148de:	f7fc fe8f 	bl	8011600 <tcp_eff_send_mss_netif>
 80148e2:	4603      	mov	r3, r0
 80148e4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80148e6:	8b7b      	ldrh	r3, [r7, #26]
 80148e8:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80148ec:	4618      	mov	r0, r3
 80148ee:	f7f9 fc52 	bl	800e196 <lwip_htonl>
 80148f2:	4602      	mov	r2, r0
 80148f4:	69fb      	ldr	r3, [r7, #28]
 80148f6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80148f8:	69fb      	ldr	r3, [r7, #28]
 80148fa:	3304      	adds	r3, #4
 80148fc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80148fe:	68bb      	ldr	r3, [r7, #8]
 8014900:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014904:	2b00      	cmp	r3, #0
 8014906:	da02      	bge.n	801490e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014908:	68bb      	ldr	r3, [r7, #8]
 801490a:	2200      	movs	r2, #0
 801490c:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014912:	2b00      	cmp	r3, #0
 8014914:	d10c      	bne.n	8014930 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014916:	4b35      	ldr	r3, [pc, #212]	@ (80149ec <tcp_output_segment+0x1b8>)
 8014918:	681a      	ldr	r2, [r3, #0]
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	68db      	ldr	r3, [r3, #12]
 8014922:	685b      	ldr	r3, [r3, #4]
 8014924:	4618      	mov	r0, r3
 8014926:	f7f9 fc36 	bl	800e196 <lwip_htonl>
 801492a:	4602      	mov	r2, r0
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	68da      	ldr	r2, [r3, #12]
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	685b      	ldr	r3, [r3, #4]
 8014938:	685b      	ldr	r3, [r3, #4]
 801493a:	1ad3      	subs	r3, r2, r3
 801493c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	685b      	ldr	r3, [r3, #4]
 8014942:	8959      	ldrh	r1, [r3, #10]
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	8b3a      	ldrh	r2, [r7, #24]
 801494a:	1a8a      	subs	r2, r1, r2
 801494c:	b292      	uxth	r2, r2
 801494e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	8919      	ldrh	r1, [r3, #8]
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	8b3a      	ldrh	r2, [r7, #24]
 801495c:	1a8a      	subs	r2, r1, r2
 801495e:	b292      	uxth	r2, r2
 8014960:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	68d2      	ldr	r2, [r2, #12]
 801496a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	2200      	movs	r2, #0
 8014972:	741a      	strb	r2, [r3, #16]
 8014974:	2200      	movs	r2, #0
 8014976:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	68da      	ldr	r2, [r3, #12]
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	7a9b      	ldrb	r3, [r3, #10]
 8014980:	f003 0301 	and.w	r3, r3, #1
 8014984:	2b00      	cmp	r3, #0
 8014986:	d001      	beq.n	801498c <tcp_output_segment+0x158>
 8014988:	2318      	movs	r3, #24
 801498a:	e000      	b.n	801498e <tcp_output_segment+0x15a>
 801498c:	2314      	movs	r3, #20
 801498e:	4413      	add	r3, r2
 8014990:	69fa      	ldr	r2, [r7, #28]
 8014992:	429a      	cmp	r2, r3
 8014994:	d006      	beq.n	80149a4 <tcp_output_segment+0x170>
 8014996:	4b10      	ldr	r3, [pc, #64]	@ (80149d8 <tcp_output_segment+0x1a4>)
 8014998:	f240 621c 	movw	r2, #1564	@ 0x61c
 801499c:	4914      	ldr	r1, [pc, #80]	@ (80149f0 <tcp_output_segment+0x1bc>)
 801499e:	4810      	ldr	r0, [pc, #64]	@ (80149e0 <tcp_output_segment+0x1ac>)
 80149a0:	f004 f810 	bl	80189c4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	6858      	ldr	r0, [r3, #4]
 80149a8:	68b9      	ldr	r1, [r7, #8]
 80149aa:	68bb      	ldr	r3, [r7, #8]
 80149ac:	1d1c      	adds	r4, r3, #4
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	7add      	ldrb	r5, [r3, #11]
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	7a9b      	ldrb	r3, [r3, #10]
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	9202      	str	r2, [sp, #8]
 80149ba:	2206      	movs	r2, #6
 80149bc:	9201      	str	r2, [sp, #4]
 80149be:	9300      	str	r3, [sp, #0]
 80149c0:	462b      	mov	r3, r5
 80149c2:	4622      	mov	r2, r4
 80149c4:	f002 fdba 	bl	801753c <ip4_output_if>
 80149c8:	4603      	mov	r3, r0
 80149ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80149cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3720      	adds	r7, #32
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bdb0      	pop	{r4, r5, r7, pc}
 80149d8:	0801b0f0 	.word	0x0801b0f0
 80149dc:	0801b6b4 	.word	0x0801b6b4
 80149e0:	0801b144 	.word	0x0801b144
 80149e4:	0801b6d4 	.word	0x0801b6d4
 80149e8:	0801b6f4 	.word	0x0801b6f4
 80149ec:	24010358 	.word	0x24010358
 80149f0:	0801b718 	.word	0x0801b718

080149f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80149f4:	b5b0      	push	{r4, r5, r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d106      	bne.n	8014a10 <tcp_rexmit_rto_prepare+0x1c>
 8014a02:	4b31      	ldr	r3, [pc, #196]	@ (8014ac8 <tcp_rexmit_rto_prepare+0xd4>)
 8014a04:	f240 6263 	movw	r2, #1635	@ 0x663
 8014a08:	4930      	ldr	r1, [pc, #192]	@ (8014acc <tcp_rexmit_rto_prepare+0xd8>)
 8014a0a:	4831      	ldr	r0, [pc, #196]	@ (8014ad0 <tcp_rexmit_rto_prepare+0xdc>)
 8014a0c:	f003 ffda 	bl	80189c4 <iprintf>

  if (pcb->unacked == NULL) {
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d102      	bne.n	8014a1e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014a18:	f06f 0305 	mvn.w	r3, #5
 8014a1c:	e050      	b.n	8014ac0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014a22:	60fb      	str	r3, [r7, #12]
 8014a24:	e00b      	b.n	8014a3e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014a26:	68f8      	ldr	r0, [r7, #12]
 8014a28:	f7ff fee4 	bl	80147f4 <tcp_output_segment_busy>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d002      	beq.n	8014a38 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014a32:	f06f 0305 	mvn.w	r3, #5
 8014a36:	e043      	b.n	8014ac0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014a38:	68fb      	ldr	r3, [r7, #12]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	60fb      	str	r3, [r7, #12]
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d1ef      	bne.n	8014a26 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	f7ff fed4 	bl	80147f4 <tcp_output_segment_busy>
 8014a4c:	4603      	mov	r3, r0
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d002      	beq.n	8014a58 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014a52:	f06f 0305 	mvn.w	r3, #5
 8014a56:	e033      	b.n	8014ac0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	8b5b      	ldrh	r3, [r3, #26]
 8014a72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8014a76:	b29a      	uxth	r2, r3
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	68db      	ldr	r3, [r3, #12]
 8014a80:	685b      	ldr	r3, [r3, #4]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f7f9 fb87 	bl	800e196 <lwip_htonl>
 8014a88:	4604      	mov	r4, r0
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	891b      	ldrh	r3, [r3, #8]
 8014a8e:	461d      	mov	r5, r3
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	899b      	ldrh	r3, [r3, #12]
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f7f9 fb67 	bl	800e16c <lwip_htons>
 8014a9e:	4603      	mov	r3, r0
 8014aa0:	b2db      	uxtb	r3, r3
 8014aa2:	f003 0303 	and.w	r3, r3, #3
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d001      	beq.n	8014aae <tcp_rexmit_rto_prepare+0xba>
 8014aaa:	2301      	movs	r3, #1
 8014aac:	e000      	b.n	8014ab0 <tcp_rexmit_rto_prepare+0xbc>
 8014aae:	2300      	movs	r3, #0
 8014ab0:	442b      	add	r3, r5
 8014ab2:	18e2      	adds	r2, r4, r3
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2200      	movs	r2, #0
 8014abc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8014abe:	2300      	movs	r3, #0
}
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	3710      	adds	r7, #16
 8014ac4:	46bd      	mov	sp, r7
 8014ac6:	bdb0      	pop	{r4, r5, r7, pc}
 8014ac8:	0801b0f0 	.word	0x0801b0f0
 8014acc:	0801b72c 	.word	0x0801b72c
 8014ad0:	0801b144 	.word	0x0801b144

08014ad4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b082      	sub	sp, #8
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d106      	bne.n	8014af0 <tcp_rexmit_rto_commit+0x1c>
 8014ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8014b18 <tcp_rexmit_rto_commit+0x44>)
 8014ae4:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8014ae8:	490c      	ldr	r1, [pc, #48]	@ (8014b1c <tcp_rexmit_rto_commit+0x48>)
 8014aea:	480d      	ldr	r0, [pc, #52]	@ (8014b20 <tcp_rexmit_rto_commit+0x4c>)
 8014aec:	f003 ff6a 	bl	80189c4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014af6:	2bff      	cmp	r3, #255	@ 0xff
 8014af8:	d007      	beq.n	8014b0a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014b00:	3301      	adds	r3, #1
 8014b02:	b2da      	uxtb	r2, r3
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014b0a:	6878      	ldr	r0, [r7, #4]
 8014b0c:	f7ff fc7e 	bl	801440c <tcp_output>
}
 8014b10:	bf00      	nop
 8014b12:	3708      	adds	r7, #8
 8014b14:	46bd      	mov	sp, r7
 8014b16:	bd80      	pop	{r7, pc}
 8014b18:	0801b0f0 	.word	0x0801b0f0
 8014b1c:	0801b750 	.word	0x0801b750
 8014b20:	0801b144 	.word	0x0801b144

08014b24 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d106      	bne.n	8014b40 <tcp_rexmit_rto+0x1c>
 8014b32:	4b0a      	ldr	r3, [pc, #40]	@ (8014b5c <tcp_rexmit_rto+0x38>)
 8014b34:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8014b38:	4909      	ldr	r1, [pc, #36]	@ (8014b60 <tcp_rexmit_rto+0x3c>)
 8014b3a:	480a      	ldr	r0, [pc, #40]	@ (8014b64 <tcp_rexmit_rto+0x40>)
 8014b3c:	f003 ff42 	bl	80189c4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014b40:	6878      	ldr	r0, [r7, #4]
 8014b42:	f7ff ff57 	bl	80149f4 <tcp_rexmit_rto_prepare>
 8014b46:	4603      	mov	r3, r0
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d102      	bne.n	8014b52 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7ff ffc1 	bl	8014ad4 <tcp_rexmit_rto_commit>
  }
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	0801b0f0 	.word	0x0801b0f0
 8014b60:	0801b774 	.word	0x0801b774
 8014b64:	0801b144 	.word	0x0801b144

08014b68 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014b68:	b590      	push	{r4, r7, lr}
 8014b6a:	b085      	sub	sp, #20
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d106      	bne.n	8014b84 <tcp_rexmit+0x1c>
 8014b76:	4b2f      	ldr	r3, [pc, #188]	@ (8014c34 <tcp_rexmit+0xcc>)
 8014b78:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8014b7c:	492e      	ldr	r1, [pc, #184]	@ (8014c38 <tcp_rexmit+0xd0>)
 8014b7e:	482f      	ldr	r0, [pc, #188]	@ (8014c3c <tcp_rexmit+0xd4>)
 8014b80:	f003 ff20 	bl	80189c4 <iprintf>

  if (pcb->unacked == NULL) {
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d102      	bne.n	8014b92 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014b8c:	f06f 0305 	mvn.w	r3, #5
 8014b90:	e04c      	b.n	8014c2c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b96:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014b98:	68b8      	ldr	r0, [r7, #8]
 8014b9a:	f7ff fe2b 	bl	80147f4 <tcp_output_segment_busy>
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d002      	beq.n	8014baa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014ba4:	f06f 0305 	mvn.w	r3, #5
 8014ba8:	e040      	b.n	8014c2c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014baa:	68bb      	ldr	r3, [r7, #8]
 8014bac:	681a      	ldr	r2, [r3, #0]
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	336c      	adds	r3, #108	@ 0x6c
 8014bb6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014bb8:	e002      	b.n	8014bc0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	681b      	ldr	r3, [r3, #0]
 8014bbe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d011      	beq.n	8014bec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	68db      	ldr	r3, [r3, #12]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7f9 fae0 	bl	800e196 <lwip_htonl>
 8014bd6:	4604      	mov	r4, r0
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	68db      	ldr	r3, [r3, #12]
 8014bdc:	685b      	ldr	r3, [r3, #4]
 8014bde:	4618      	mov	r0, r3
 8014be0:	f7f9 fad9 	bl	800e196 <lwip_htonl>
 8014be4:	4603      	mov	r3, r0
 8014be6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	dbe6      	blt.n	8014bba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	681a      	ldr	r2, [r3, #0]
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	68ba      	ldr	r2, [r7, #8]
 8014bf8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	681b      	ldr	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d103      	bne.n	8014c0a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	2200      	movs	r2, #0
 8014c06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c10:	2bff      	cmp	r3, #255	@ 0xff
 8014c12:	d007      	beq.n	8014c24 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014c1a:	3301      	adds	r3, #1
 8014c1c:	b2da      	uxtb	r2, r3
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2200      	movs	r2, #0
 8014c28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014c2a:	2300      	movs	r3, #0
}
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	3714      	adds	r7, #20
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd90      	pop	{r4, r7, pc}
 8014c34:	0801b0f0 	.word	0x0801b0f0
 8014c38:	0801b790 	.word	0x0801b790
 8014c3c:	0801b144 	.word	0x0801b144

08014c40 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b082      	sub	sp, #8
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d106      	bne.n	8014c5c <tcp_rexmit_fast+0x1c>
 8014c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8014cf8 <tcp_rexmit_fast+0xb8>)
 8014c50:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8014c54:	4929      	ldr	r1, [pc, #164]	@ (8014cfc <tcp_rexmit_fast+0xbc>)
 8014c56:	482a      	ldr	r0, [pc, #168]	@ (8014d00 <tcp_rexmit_fast+0xc0>)
 8014c58:	f003 feb4 	bl	80189c4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d045      	beq.n	8014cf0 <tcp_rexmit_fast+0xb0>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	8b5b      	ldrh	r3, [r3, #26]
 8014c68:	f003 0304 	and.w	r3, r3, #4
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d13f      	bne.n	8014cf0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f7ff ff79 	bl	8014b68 <tcp_rexmit>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d139      	bne.n	8014cf0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014c88:	4293      	cmp	r3, r2
 8014c8a:	bf28      	it	cs
 8014c8c:	4613      	movcs	r3, r2
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	da00      	bge.n	8014c96 <tcp_rexmit_fast+0x56>
 8014c94:	3301      	adds	r3, #1
 8014c96:	105b      	asrs	r3, r3, #1
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014ca6:	461a      	mov	r2, r3
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	429a      	cmp	r2, r3
 8014cb0:	d206      	bcs.n	8014cc0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cb6:	005b      	lsls	r3, r3, #1
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cca:	4619      	mov	r1, r3
 8014ccc:	0049      	lsls	r1, r1, #1
 8014cce:	440b      	add	r3, r1
 8014cd0:	b29b      	uxth	r3, r3
 8014cd2:	4413      	add	r3, r2
 8014cd4:	b29a      	uxth	r2, r3
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	8b5b      	ldrh	r3, [r3, #26]
 8014ce0:	f043 0304 	orr.w	r3, r3, #4
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2200      	movs	r2, #0
 8014cee:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8014cf0:	bf00      	nop
 8014cf2:	3708      	adds	r7, #8
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	bd80      	pop	{r7, pc}
 8014cf8:	0801b0f0 	.word	0x0801b0f0
 8014cfc:	0801b7a8 	.word	0x0801b7a8
 8014d00:	0801b144 	.word	0x0801b144

08014d04 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b086      	sub	sp, #24
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	607b      	str	r3, [r7, #4]
 8014d0e:	460b      	mov	r3, r1
 8014d10:	817b      	strh	r3, [r7, #10]
 8014d12:	4613      	mov	r3, r2
 8014d14:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014d16:	897a      	ldrh	r2, [r7, #10]
 8014d18:	893b      	ldrh	r3, [r7, #8]
 8014d1a:	4413      	add	r3, r2
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	3314      	adds	r3, #20
 8014d20:	b29b      	uxth	r3, r3
 8014d22:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8014d26:	4619      	mov	r1, r3
 8014d28:	2022      	movs	r0, #34	@ 0x22
 8014d2a:	f7fa fbf5 	bl	800f518 <pbuf_alloc>
 8014d2e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d04d      	beq.n	8014dd2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014d36:	897b      	ldrh	r3, [r7, #10]
 8014d38:	3313      	adds	r3, #19
 8014d3a:	697a      	ldr	r2, [r7, #20]
 8014d3c:	8952      	ldrh	r2, [r2, #10]
 8014d3e:	4293      	cmp	r3, r2
 8014d40:	db06      	blt.n	8014d50 <tcp_output_alloc_header_common+0x4c>
 8014d42:	4b26      	ldr	r3, [pc, #152]	@ (8014ddc <tcp_output_alloc_header_common+0xd8>)
 8014d44:	f240 7223 	movw	r2, #1827	@ 0x723
 8014d48:	4925      	ldr	r1, [pc, #148]	@ (8014de0 <tcp_output_alloc_header_common+0xdc>)
 8014d4a:	4826      	ldr	r0, [pc, #152]	@ (8014de4 <tcp_output_alloc_header_common+0xe0>)
 8014d4c:	f003 fe3a 	bl	80189c4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014d50:	697b      	ldr	r3, [r7, #20]
 8014d52:	685b      	ldr	r3, [r3, #4]
 8014d54:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014d56:	8c3b      	ldrh	r3, [r7, #32]
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7f9 fa07 	bl	800e16c <lwip_htons>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	461a      	mov	r2, r3
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014d66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7f9 f9ff 	bl	800e16c <lwip_htons>
 8014d6e:	4603      	mov	r3, r0
 8014d70:	461a      	mov	r2, r3
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	687a      	ldr	r2, [r7, #4]
 8014d7a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014d7c:	68f8      	ldr	r0, [r7, #12]
 8014d7e:	f7f9 fa0a 	bl	800e196 <lwip_htonl>
 8014d82:	4602      	mov	r2, r0
 8014d84:	693b      	ldr	r3, [r7, #16]
 8014d86:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014d88:	897b      	ldrh	r3, [r7, #10]
 8014d8a:	089b      	lsrs	r3, r3, #2
 8014d8c:	b29b      	uxth	r3, r3
 8014d8e:	3305      	adds	r3, #5
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	031b      	lsls	r3, r3, #12
 8014d94:	b29a      	uxth	r2, r3
 8014d96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	4313      	orrs	r3, r2
 8014d9e:	b29b      	uxth	r3, r3
 8014da0:	4618      	mov	r0, r3
 8014da2:	f7f9 f9e3 	bl	800e16c <lwip_htons>
 8014da6:	4603      	mov	r3, r0
 8014da8:	461a      	mov	r2, r3
 8014daa:	693b      	ldr	r3, [r7, #16]
 8014dac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014dae:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014db0:	4618      	mov	r0, r3
 8014db2:	f7f9 f9db 	bl	800e16c <lwip_htons>
 8014db6:	4603      	mov	r3, r0
 8014db8:	461a      	mov	r2, r3
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014dbe:	693b      	ldr	r3, [r7, #16]
 8014dc0:	2200      	movs	r2, #0
 8014dc2:	741a      	strb	r2, [r3, #16]
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	2200      	movs	r2, #0
 8014dcc:	749a      	strb	r2, [r3, #18]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014dd2:	697b      	ldr	r3, [r7, #20]
}
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	3718      	adds	r7, #24
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}
 8014ddc:	0801b0f0 	.word	0x0801b0f0
 8014de0:	0801b7c8 	.word	0x0801b7c8
 8014de4:	0801b144 	.word	0x0801b144

08014de8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014de8:	b5b0      	push	{r4, r5, r7, lr}
 8014dea:	b08a      	sub	sp, #40	@ 0x28
 8014dec:	af04      	add	r7, sp, #16
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	607b      	str	r3, [r7, #4]
 8014df2:	460b      	mov	r3, r1
 8014df4:	817b      	strh	r3, [r7, #10]
 8014df6:	4613      	mov	r3, r2
 8014df8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d106      	bne.n	8014e0e <tcp_output_alloc_header+0x26>
 8014e00:	4b15      	ldr	r3, [pc, #84]	@ (8014e58 <tcp_output_alloc_header+0x70>)
 8014e02:	f240 7242 	movw	r2, #1858	@ 0x742
 8014e06:	4915      	ldr	r1, [pc, #84]	@ (8014e5c <tcp_output_alloc_header+0x74>)
 8014e08:	4815      	ldr	r0, [pc, #84]	@ (8014e60 <tcp_output_alloc_header+0x78>)
 8014e0a:	f003 fddb 	bl	80189c4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	8adb      	ldrh	r3, [r3, #22]
 8014e16:	68fa      	ldr	r2, [r7, #12]
 8014e18:	8b12      	ldrh	r2, [r2, #24]
 8014e1a:	68f9      	ldr	r1, [r7, #12]
 8014e1c:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8014e1e:	893d      	ldrh	r5, [r7, #8]
 8014e20:	897c      	ldrh	r4, [r7, #10]
 8014e22:	9103      	str	r1, [sp, #12]
 8014e24:	2110      	movs	r1, #16
 8014e26:	9102      	str	r1, [sp, #8]
 8014e28:	9201      	str	r2, [sp, #4]
 8014e2a:	9300      	str	r3, [sp, #0]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	462a      	mov	r2, r5
 8014e30:	4621      	mov	r1, r4
 8014e32:	f7ff ff67 	bl	8014d04 <tcp_output_alloc_header_common>
 8014e36:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d006      	beq.n	8014e4c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e42:	68fa      	ldr	r2, [r7, #12]
 8014e44:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8014e46:	441a      	add	r2, r3
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8014e4c:	697b      	ldr	r3, [r7, #20]
}
 8014e4e:	4618      	mov	r0, r3
 8014e50:	3718      	adds	r7, #24
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bdb0      	pop	{r4, r5, r7, pc}
 8014e56:	bf00      	nop
 8014e58:	0801b0f0 	.word	0x0801b0f0
 8014e5c:	0801b7f8 	.word	0x0801b7f8
 8014e60:	0801b144 	.word	0x0801b144

08014e64 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b088      	sub	sp, #32
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	4611      	mov	r1, r2
 8014e70:	461a      	mov	r2, r3
 8014e72:	460b      	mov	r3, r1
 8014e74:	71fb      	strb	r3, [r7, #7]
 8014e76:	4613      	mov	r3, r2
 8014e78:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d106      	bne.n	8014e92 <tcp_output_fill_options+0x2e>
 8014e84:	4b12      	ldr	r3, [pc, #72]	@ (8014ed0 <tcp_output_fill_options+0x6c>)
 8014e86:	f240 7256 	movw	r2, #1878	@ 0x756
 8014e8a:	4912      	ldr	r1, [pc, #72]	@ (8014ed4 <tcp_output_fill_options+0x70>)
 8014e8c:	4812      	ldr	r0, [pc, #72]	@ (8014ed8 <tcp_output_fill_options+0x74>)
 8014e8e:	f003 fd99 	bl	80189c4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	3314      	adds	r3, #20
 8014e9c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014e9e:	8bfb      	ldrh	r3, [r7, #30]
 8014ea0:	009b      	lsls	r3, r3, #2
 8014ea2:	461a      	mov	r2, r3
 8014ea4:	79fb      	ldrb	r3, [r7, #7]
 8014ea6:	009b      	lsls	r3, r3, #2
 8014ea8:	f003 0304 	and.w	r3, r3, #4
 8014eac:	4413      	add	r3, r2
 8014eae:	3314      	adds	r3, #20
 8014eb0:	69ba      	ldr	r2, [r7, #24]
 8014eb2:	4413      	add	r3, r2
 8014eb4:	697a      	ldr	r2, [r7, #20]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d006      	beq.n	8014ec8 <tcp_output_fill_options+0x64>
 8014eba:	4b05      	ldr	r3, [pc, #20]	@ (8014ed0 <tcp_output_fill_options+0x6c>)
 8014ebc:	f240 7275 	movw	r2, #1909	@ 0x775
 8014ec0:	4906      	ldr	r1, [pc, #24]	@ (8014edc <tcp_output_fill_options+0x78>)
 8014ec2:	4805      	ldr	r0, [pc, #20]	@ (8014ed8 <tcp_output_fill_options+0x74>)
 8014ec4:	f003 fd7e 	bl	80189c4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014ec8:	bf00      	nop
 8014eca:	3720      	adds	r7, #32
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	0801b0f0 	.word	0x0801b0f0
 8014ed4:	0801b820 	.word	0x0801b820
 8014ed8:	0801b144 	.word	0x0801b144
 8014edc:	0801b718 	.word	0x0801b718

08014ee0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b08a      	sub	sp, #40	@ 0x28
 8014ee4:	af04      	add	r7, sp, #16
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	60b9      	str	r1, [r7, #8]
 8014eea:	607a      	str	r2, [r7, #4]
 8014eec:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d106      	bne.n	8014f02 <tcp_output_control_segment+0x22>
 8014ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8014f68 <tcp_output_control_segment+0x88>)
 8014ef6:	f240 7287 	movw	r2, #1927	@ 0x787
 8014efa:	491c      	ldr	r1, [pc, #112]	@ (8014f6c <tcp_output_control_segment+0x8c>)
 8014efc:	481c      	ldr	r0, [pc, #112]	@ (8014f70 <tcp_output_control_segment+0x90>)
 8014efe:	f003 fd61 	bl	80189c4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014f02:	683a      	ldr	r2, [r7, #0]
 8014f04:	6879      	ldr	r1, [r7, #4]
 8014f06:	68f8      	ldr	r0, [r7, #12]
 8014f08:	f7fe ff42 	bl	8013d90 <tcp_route>
 8014f0c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d102      	bne.n	8014f1a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014f14:	23fc      	movs	r3, #252	@ 0xfc
 8014f16:	75fb      	strb	r3, [r7, #23]
 8014f18:	e01c      	b.n	8014f54 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014f1a:	68fb      	ldr	r3, [r7, #12]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d006      	beq.n	8014f2e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	7adb      	ldrb	r3, [r3, #11]
 8014f24:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014f26:	68fb      	ldr	r3, [r7, #12]
 8014f28:	7a9b      	ldrb	r3, [r3, #10]
 8014f2a:	757b      	strb	r3, [r7, #21]
 8014f2c:	e003      	b.n	8014f36 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014f2e:	23ff      	movs	r3, #255	@ 0xff
 8014f30:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014f36:	7dba      	ldrb	r2, [r7, #22]
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	9302      	str	r3, [sp, #8]
 8014f3c:	2306      	movs	r3, #6
 8014f3e:	9301      	str	r3, [sp, #4]
 8014f40:	7d7b      	ldrb	r3, [r7, #21]
 8014f42:	9300      	str	r3, [sp, #0]
 8014f44:	4613      	mov	r3, r2
 8014f46:	683a      	ldr	r2, [r7, #0]
 8014f48:	6879      	ldr	r1, [r7, #4]
 8014f4a:	68b8      	ldr	r0, [r7, #8]
 8014f4c:	f002 faf6 	bl	801753c <ip4_output_if>
 8014f50:	4603      	mov	r3, r0
 8014f52:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014f54:	68b8      	ldr	r0, [r7, #8]
 8014f56:	f7fa fdc7 	bl	800fae8 <pbuf_free>
  return err;
 8014f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014f5e:	4618      	mov	r0, r3
 8014f60:	3718      	adds	r7, #24
 8014f62:	46bd      	mov	sp, r7
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	0801b0f0 	.word	0x0801b0f0
 8014f6c:	0801b848 	.word	0x0801b848
 8014f70:	0801b144 	.word	0x0801b144

08014f74 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014f74:	b590      	push	{r4, r7, lr}
 8014f76:	b08b      	sub	sp, #44	@ 0x2c
 8014f78:	af04      	add	r7, sp, #16
 8014f7a:	60f8      	str	r0, [r7, #12]
 8014f7c:	60b9      	str	r1, [r7, #8]
 8014f7e:	607a      	str	r2, [r7, #4]
 8014f80:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d106      	bne.n	8014f96 <tcp_rst+0x22>
 8014f88:	4b1f      	ldr	r3, [pc, #124]	@ (8015008 <tcp_rst+0x94>)
 8014f8a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8014f8e:	491f      	ldr	r1, [pc, #124]	@ (801500c <tcp_rst+0x98>)
 8014f90:	481f      	ldr	r0, [pc, #124]	@ (8015010 <tcp_rst+0x9c>)
 8014f92:	f003 fd17 	bl	80189c4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d106      	bne.n	8014faa <tcp_rst+0x36>
 8014f9c:	4b1a      	ldr	r3, [pc, #104]	@ (8015008 <tcp_rst+0x94>)
 8014f9e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8014fa2:	491c      	ldr	r1, [pc, #112]	@ (8015014 <tcp_rst+0xa0>)
 8014fa4:	481a      	ldr	r0, [pc, #104]	@ (8015010 <tcp_rst+0x9c>)
 8014fa6:	f003 fd0d 	bl	80189c4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014faa:	2300      	movs	r3, #0
 8014fac:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014fae:	f24d 0316 	movw	r3, #53270	@ 0xd016
 8014fb2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014fb4:	7dfb      	ldrb	r3, [r7, #23]
 8014fb6:	b29c      	uxth	r4, r3
 8014fb8:	68b8      	ldr	r0, [r7, #8]
 8014fba:	f7f9 f8ec 	bl	800e196 <lwip_htonl>
 8014fbe:	4602      	mov	r2, r0
 8014fc0:	8abb      	ldrh	r3, [r7, #20]
 8014fc2:	9303      	str	r3, [sp, #12]
 8014fc4:	2314      	movs	r3, #20
 8014fc6:	9302      	str	r3, [sp, #8]
 8014fc8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014fca:	9301      	str	r3, [sp, #4]
 8014fcc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	4613      	mov	r3, r2
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	4621      	mov	r1, r4
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f7ff fe94 	bl	8014d04 <tcp_output_alloc_header_common>
 8014fdc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014fde:	693b      	ldr	r3, [r7, #16]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d00c      	beq.n	8014ffe <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014fe4:	7dfb      	ldrb	r3, [r7, #23]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	6939      	ldr	r1, [r7, #16]
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	f7ff ff3a 	bl	8014e64 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ff2:	683a      	ldr	r2, [r7, #0]
 8014ff4:	6939      	ldr	r1, [r7, #16]
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f7ff ff72 	bl	8014ee0 <tcp_output_control_segment>
 8014ffc:	e000      	b.n	8015000 <tcp_rst+0x8c>
    return;
 8014ffe:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015000:	371c      	adds	r7, #28
 8015002:	46bd      	mov	sp, r7
 8015004:	bd90      	pop	{r4, r7, pc}
 8015006:	bf00      	nop
 8015008:	0801b0f0 	.word	0x0801b0f0
 801500c:	0801b874 	.word	0x0801b874
 8015010:	0801b144 	.word	0x0801b144
 8015014:	0801b890 	.word	0x0801b890

08015018 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015018:	b590      	push	{r4, r7, lr}
 801501a:	b087      	sub	sp, #28
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8015020:	2300      	movs	r3, #0
 8015022:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015024:	2300      	movs	r3, #0
 8015026:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d106      	bne.n	801503c <tcp_send_empty_ack+0x24>
 801502e:	4b28      	ldr	r3, [pc, #160]	@ (80150d0 <tcp_send_empty_ack+0xb8>)
 8015030:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8015034:	4927      	ldr	r1, [pc, #156]	@ (80150d4 <tcp_send_empty_ack+0xbc>)
 8015036:	4828      	ldr	r0, [pc, #160]	@ (80150d8 <tcp_send_empty_ack+0xc0>)
 8015038:	f003 fcc4 	bl	80189c4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801503c:	7dfb      	ldrb	r3, [r7, #23]
 801503e:	009b      	lsls	r3, r3, #2
 8015040:	b2db      	uxtb	r3, r3
 8015042:	f003 0304 	and.w	r3, r3, #4
 8015046:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8015048:	7d7b      	ldrb	r3, [r7, #21]
 801504a:	b29c      	uxth	r4, r3
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015050:	4618      	mov	r0, r3
 8015052:	f7f9 f8a0 	bl	800e196 <lwip_htonl>
 8015056:	4603      	mov	r3, r0
 8015058:	2200      	movs	r2, #0
 801505a:	4621      	mov	r1, r4
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f7ff fec3 	bl	8014de8 <tcp_output_alloc_header>
 8015062:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015064:	693b      	ldr	r3, [r7, #16]
 8015066:	2b00      	cmp	r3, #0
 8015068:	d109      	bne.n	801507e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	8b5b      	ldrh	r3, [r3, #26]
 801506e:	f043 0303 	orr.w	r3, r3, #3
 8015072:	b29a      	uxth	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8015078:	f06f 0301 	mvn.w	r3, #1
 801507c:	e023      	b.n	80150c6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801507e:	7dbb      	ldrb	r3, [r7, #22]
 8015080:	7dfa      	ldrb	r2, [r7, #23]
 8015082:	6939      	ldr	r1, [r7, #16]
 8015084:	6878      	ldr	r0, [r7, #4]
 8015086:	f7ff feed 	bl	8014e64 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801508a:	687a      	ldr	r2, [r7, #4]
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	3304      	adds	r3, #4
 8015090:	6939      	ldr	r1, [r7, #16]
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f7ff ff24 	bl	8014ee0 <tcp_output_control_segment>
 8015098:	4603      	mov	r3, r0
 801509a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801509c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d007      	beq.n	80150b4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	8b5b      	ldrh	r3, [r3, #26]
 80150a8:	f043 0303 	orr.w	r3, r3, #3
 80150ac:	b29a      	uxth	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	835a      	strh	r2, [r3, #26]
 80150b2:	e006      	b.n	80150c2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	8b5b      	ldrh	r3, [r3, #26]
 80150b8:	f023 0303 	bic.w	r3, r3, #3
 80150bc:	b29a      	uxth	r2, r3
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80150c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	371c      	adds	r7, #28
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd90      	pop	{r4, r7, pc}
 80150ce:	bf00      	nop
 80150d0:	0801b0f0 	.word	0x0801b0f0
 80150d4:	0801b8ac 	.word	0x0801b8ac
 80150d8:	0801b144 	.word	0x0801b144

080150dc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80150dc:	b590      	push	{r4, r7, lr}
 80150de:	b087      	sub	sp, #28
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80150e4:	2300      	movs	r3, #0
 80150e6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d106      	bne.n	80150fc <tcp_keepalive+0x20>
 80150ee:	4b18      	ldr	r3, [pc, #96]	@ (8015150 <tcp_keepalive+0x74>)
 80150f0:	f640 0224 	movw	r2, #2084	@ 0x824
 80150f4:	4917      	ldr	r1, [pc, #92]	@ (8015154 <tcp_keepalive+0x78>)
 80150f6:	4818      	ldr	r0, [pc, #96]	@ (8015158 <tcp_keepalive+0x7c>)
 80150f8:	f003 fc64 	bl	80189c4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80150fc:	7dfb      	ldrb	r3, [r7, #23]
 80150fe:	b29c      	uxth	r4, r3
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015104:	3b01      	subs	r3, #1
 8015106:	4618      	mov	r0, r3
 8015108:	f7f9 f845 	bl	800e196 <lwip_htonl>
 801510c:	4603      	mov	r3, r0
 801510e:	2200      	movs	r2, #0
 8015110:	4621      	mov	r1, r4
 8015112:	6878      	ldr	r0, [r7, #4]
 8015114:	f7ff fe68 	bl	8014de8 <tcp_output_alloc_header>
 8015118:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801511a:	693b      	ldr	r3, [r7, #16]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d102      	bne.n	8015126 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8015120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015124:	e010      	b.n	8015148 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015126:	7dfb      	ldrb	r3, [r7, #23]
 8015128:	2200      	movs	r2, #0
 801512a:	6939      	ldr	r1, [r7, #16]
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f7ff fe99 	bl	8014e64 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	3304      	adds	r3, #4
 8015138:	6939      	ldr	r1, [r7, #16]
 801513a:	6878      	ldr	r0, [r7, #4]
 801513c:	f7ff fed0 	bl	8014ee0 <tcp_output_control_segment>
 8015140:	4603      	mov	r3, r0
 8015142:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015144:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015148:	4618      	mov	r0, r3
 801514a:	371c      	adds	r7, #28
 801514c:	46bd      	mov	sp, r7
 801514e:	bd90      	pop	{r4, r7, pc}
 8015150:	0801b0f0 	.word	0x0801b0f0
 8015154:	0801b8cc 	.word	0x0801b8cc
 8015158:	0801b144 	.word	0x0801b144

0801515c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801515c:	b590      	push	{r4, r7, lr}
 801515e:	b08b      	sub	sp, #44	@ 0x2c
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015164:	2300      	movs	r3, #0
 8015166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d106      	bne.n	801517e <tcp_zero_window_probe+0x22>
 8015170:	4b4c      	ldr	r3, [pc, #304]	@ (80152a4 <tcp_zero_window_probe+0x148>)
 8015172:	f640 024f 	movw	r2, #2127	@ 0x84f
 8015176:	494c      	ldr	r1, [pc, #304]	@ (80152a8 <tcp_zero_window_probe+0x14c>)
 8015178:	484c      	ldr	r0, [pc, #304]	@ (80152ac <tcp_zero_window_probe+0x150>)
 801517a:	f003 fc23 	bl	80189c4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015182:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015184:	6a3b      	ldr	r3, [r7, #32]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d101      	bne.n	801518e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801518a:	2300      	movs	r3, #0
 801518c:	e086      	b.n	801529c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015194:	2bff      	cmp	r3, #255	@ 0xff
 8015196:	d007      	beq.n	80151a8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801519e:	3301      	adds	r3, #1
 80151a0:	b2da      	uxtb	r2, r3
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80151a8:	6a3b      	ldr	r3, [r7, #32]
 80151aa:	68db      	ldr	r3, [r3, #12]
 80151ac:	899b      	ldrh	r3, [r3, #12]
 80151ae:	b29b      	uxth	r3, r3
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7f8 ffdb 	bl	800e16c <lwip_htons>
 80151b6:	4603      	mov	r3, r0
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	f003 0301 	and.w	r3, r3, #1
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d005      	beq.n	80151ce <tcp_zero_window_probe+0x72>
 80151c2:	6a3b      	ldr	r3, [r7, #32]
 80151c4:	891b      	ldrh	r3, [r3, #8]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d101      	bne.n	80151ce <tcp_zero_window_probe+0x72>
 80151ca:	2301      	movs	r3, #1
 80151cc:	e000      	b.n	80151d0 <tcp_zero_window_probe+0x74>
 80151ce:	2300      	movs	r3, #0
 80151d0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80151d2:	7ffb      	ldrb	r3, [r7, #31]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	bf0c      	ite	eq
 80151d8:	2301      	moveq	r3, #1
 80151da:	2300      	movne	r3, #0
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80151e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80151e4:	b299      	uxth	r1, r3
 80151e6:	6a3b      	ldr	r3, [r7, #32]
 80151e8:	68db      	ldr	r3, [r3, #12]
 80151ea:	685b      	ldr	r3, [r3, #4]
 80151ec:	8bba      	ldrh	r2, [r7, #28]
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f7ff fdfa 	bl	8014de8 <tcp_output_alloc_header>
 80151f4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d102      	bne.n	8015202 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80151fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015200:	e04c      	b.n	801529c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015208:	7ffb      	ldrb	r3, [r7, #31]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d011      	beq.n	8015232 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801520e:	697b      	ldr	r3, [r7, #20]
 8015210:	899b      	ldrh	r3, [r3, #12]
 8015212:	b29b      	uxth	r3, r3
 8015214:	b21b      	sxth	r3, r3
 8015216:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801521a:	b21c      	sxth	r4, r3
 801521c:	2011      	movs	r0, #17
 801521e:	f7f8 ffa5 	bl	800e16c <lwip_htons>
 8015222:	4603      	mov	r3, r0
 8015224:	b21b      	sxth	r3, r3
 8015226:	4323      	orrs	r3, r4
 8015228:	b21b      	sxth	r3, r3
 801522a:	b29a      	uxth	r2, r3
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	819a      	strh	r2, [r3, #12]
 8015230:	e010      	b.n	8015254 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	3314      	adds	r3, #20
 8015238:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801523a:	6a3b      	ldr	r3, [r7, #32]
 801523c:	6858      	ldr	r0, [r3, #4]
 801523e:	6a3b      	ldr	r3, [r7, #32]
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	891a      	ldrh	r2, [r3, #8]
 8015244:	6a3b      	ldr	r3, [r7, #32]
 8015246:	891b      	ldrh	r3, [r3, #8]
 8015248:	1ad3      	subs	r3, r2, r3
 801524a:	b29b      	uxth	r3, r3
 801524c:	2201      	movs	r2, #1
 801524e:	6939      	ldr	r1, [r7, #16]
 8015250:	f7fa fe50 	bl	800fef4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8015254:	6a3b      	ldr	r3, [r7, #32]
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	685b      	ldr	r3, [r3, #4]
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 ff9b 	bl	800e196 <lwip_htonl>
 8015260:	4603      	mov	r3, r0
 8015262:	3301      	adds	r3, #1
 8015264:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	1ad3      	subs	r3, r2, r3
 801526e:	2b00      	cmp	r3, #0
 8015270:	da02      	bge.n	8015278 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	68fa      	ldr	r2, [r7, #12]
 8015276:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015278:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801527c:	2200      	movs	r2, #0
 801527e:	69b9      	ldr	r1, [r7, #24]
 8015280:	6878      	ldr	r0, [r7, #4]
 8015282:	f7ff fdef 	bl	8014e64 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015286:	687a      	ldr	r2, [r7, #4]
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	3304      	adds	r3, #4
 801528c:	69b9      	ldr	r1, [r7, #24]
 801528e:	6878      	ldr	r0, [r7, #4]
 8015290:	f7ff fe26 	bl	8014ee0 <tcp_output_control_segment>
 8015294:	4603      	mov	r3, r0
 8015296:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015298:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801529c:	4618      	mov	r0, r3
 801529e:	372c      	adds	r7, #44	@ 0x2c
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd90      	pop	{r4, r7, pc}
 80152a4:	0801b0f0 	.word	0x0801b0f0
 80152a8:	0801b8e8 	.word	0x0801b8e8
 80152ac:	0801b144 	.word	0x0801b144

080152b0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b082      	sub	sp, #8
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80152b8:	f7fa ff0a 	bl	80100d0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80152bc:	4b0a      	ldr	r3, [pc, #40]	@ (80152e8 <tcpip_tcp_timer+0x38>)
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d103      	bne.n	80152cc <tcpip_tcp_timer+0x1c>
 80152c4:	4b09      	ldr	r3, [pc, #36]	@ (80152ec <tcpip_tcp_timer+0x3c>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d005      	beq.n	80152d8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80152cc:	2200      	movs	r2, #0
 80152ce:	4908      	ldr	r1, [pc, #32]	@ (80152f0 <tcpip_tcp_timer+0x40>)
 80152d0:	20fa      	movs	r0, #250	@ 0xfa
 80152d2:	f000 f8f3 	bl	80154bc <sys_timeout>
 80152d6:	e003      	b.n	80152e0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80152d8:	4b06      	ldr	r3, [pc, #24]	@ (80152f4 <tcpip_tcp_timer+0x44>)
 80152da:	2200      	movs	r2, #0
 80152dc:	601a      	str	r2, [r3, #0]
  }
}
 80152de:	bf00      	nop
 80152e0:	bf00      	nop
 80152e2:	3708      	adds	r7, #8
 80152e4:	46bd      	mov	sp, r7
 80152e6:	bd80      	pop	{r7, pc}
 80152e8:	24010364 	.word	0x24010364
 80152ec:	24010368 	.word	0x24010368
 80152f0:	080152b1 	.word	0x080152b1
 80152f4:	240103b0 	.word	0x240103b0

080152f8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80152fc:	4b0a      	ldr	r3, [pc, #40]	@ (8015328 <tcp_timer_needed+0x30>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d10f      	bne.n	8015324 <tcp_timer_needed+0x2c>
 8015304:	4b09      	ldr	r3, [pc, #36]	@ (801532c <tcp_timer_needed+0x34>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d103      	bne.n	8015314 <tcp_timer_needed+0x1c>
 801530c:	4b08      	ldr	r3, [pc, #32]	@ (8015330 <tcp_timer_needed+0x38>)
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d007      	beq.n	8015324 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015314:	4b04      	ldr	r3, [pc, #16]	@ (8015328 <tcp_timer_needed+0x30>)
 8015316:	2201      	movs	r2, #1
 8015318:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801531a:	2200      	movs	r2, #0
 801531c:	4905      	ldr	r1, [pc, #20]	@ (8015334 <tcp_timer_needed+0x3c>)
 801531e:	20fa      	movs	r0, #250	@ 0xfa
 8015320:	f000 f8cc 	bl	80154bc <sys_timeout>
  }
}
 8015324:	bf00      	nop
 8015326:	bd80      	pop	{r7, pc}
 8015328:	240103b0 	.word	0x240103b0
 801532c:	24010364 	.word	0x24010364
 8015330:	24010368 	.word	0x24010368
 8015334:	080152b1 	.word	0x080152b1

08015338 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015338:	b580      	push	{r7, lr}
 801533a:	b086      	sub	sp, #24
 801533c:	af00      	add	r7, sp, #0
 801533e:	60f8      	str	r0, [r7, #12]
 8015340:	60b9      	str	r1, [r7, #8]
 8015342:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015344:	200a      	movs	r0, #10
 8015346:	f7f9 fcb1 	bl	800ecac <memp_malloc>
 801534a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801534c:	693b      	ldr	r3, [r7, #16]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d109      	bne.n	8015366 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015352:	693b      	ldr	r3, [r7, #16]
 8015354:	2b00      	cmp	r3, #0
 8015356:	d151      	bne.n	80153fc <sys_timeout_abs+0xc4>
 8015358:	4b2a      	ldr	r3, [pc, #168]	@ (8015404 <sys_timeout_abs+0xcc>)
 801535a:	22be      	movs	r2, #190	@ 0xbe
 801535c:	492a      	ldr	r1, [pc, #168]	@ (8015408 <sys_timeout_abs+0xd0>)
 801535e:	482b      	ldr	r0, [pc, #172]	@ (801540c <sys_timeout_abs+0xd4>)
 8015360:	f003 fb30 	bl	80189c4 <iprintf>
    return;
 8015364:	e04a      	b.n	80153fc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015366:	693b      	ldr	r3, [r7, #16]
 8015368:	2200      	movs	r2, #0
 801536a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801536c:	693b      	ldr	r3, [r7, #16]
 801536e:	68ba      	ldr	r2, [r7, #8]
 8015370:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015372:	693b      	ldr	r3, [r7, #16]
 8015374:	687a      	ldr	r2, [r7, #4]
 8015376:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015378:	693b      	ldr	r3, [r7, #16]
 801537a:	68fa      	ldr	r2, [r7, #12]
 801537c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801537e:	4b24      	ldr	r3, [pc, #144]	@ (8015410 <sys_timeout_abs+0xd8>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d103      	bne.n	801538e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015386:	4a22      	ldr	r2, [pc, #136]	@ (8015410 <sys_timeout_abs+0xd8>)
 8015388:	693b      	ldr	r3, [r7, #16]
 801538a:	6013      	str	r3, [r2, #0]
    return;
 801538c:	e037      	b.n	80153fe <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801538e:	693b      	ldr	r3, [r7, #16]
 8015390:	685a      	ldr	r2, [r3, #4]
 8015392:	4b1f      	ldr	r3, [pc, #124]	@ (8015410 <sys_timeout_abs+0xd8>)
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	0fdb      	lsrs	r3, r3, #31
 801539c:	f003 0301 	and.w	r3, r3, #1
 80153a0:	b2db      	uxtb	r3, r3
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d007      	beq.n	80153b6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80153a6:	4b1a      	ldr	r3, [pc, #104]	@ (8015410 <sys_timeout_abs+0xd8>)
 80153a8:	681a      	ldr	r2, [r3, #0]
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80153ae:	4a18      	ldr	r2, [pc, #96]	@ (8015410 <sys_timeout_abs+0xd8>)
 80153b0:	693b      	ldr	r3, [r7, #16]
 80153b2:	6013      	str	r3, [r2, #0]
 80153b4:	e023      	b.n	80153fe <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80153b6:	4b16      	ldr	r3, [pc, #88]	@ (8015410 <sys_timeout_abs+0xd8>)
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	617b      	str	r3, [r7, #20]
 80153bc:	e01a      	b.n	80153f4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	681b      	ldr	r3, [r3, #0]
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00b      	beq.n	80153de <sys_timeout_abs+0xa6>
 80153c6:	693b      	ldr	r3, [r7, #16]
 80153c8:	685a      	ldr	r2, [r3, #4]
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	1ad3      	subs	r3, r2, r3
 80153d2:	0fdb      	lsrs	r3, r3, #31
 80153d4:	f003 0301 	and.w	r3, r3, #1
 80153d8:	b2db      	uxtb	r3, r3
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d007      	beq.n	80153ee <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80153de:	697b      	ldr	r3, [r7, #20]
 80153e0:	681a      	ldr	r2, [r3, #0]
 80153e2:	693b      	ldr	r3, [r7, #16]
 80153e4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	693a      	ldr	r2, [r7, #16]
 80153ea:	601a      	str	r2, [r3, #0]
        break;
 80153ec:	e007      	b.n	80153fe <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80153ee:	697b      	ldr	r3, [r7, #20]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	617b      	str	r3, [r7, #20]
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d1e1      	bne.n	80153be <sys_timeout_abs+0x86>
 80153fa:	e000      	b.n	80153fe <sys_timeout_abs+0xc6>
    return;
 80153fc:	bf00      	nop
      }
    }
  }
}
 80153fe:	3718      	adds	r7, #24
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}
 8015404:	0801b90c 	.word	0x0801b90c
 8015408:	0801b940 	.word	0x0801b940
 801540c:	0801b980 	.word	0x0801b980
 8015410:	240103a8 	.word	0x240103a8

08015414 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b086      	sub	sp, #24
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015420:	697b      	ldr	r3, [r7, #20]
 8015422:	685b      	ldr	r3, [r3, #4]
 8015424:	4798      	blx	r3

  now = sys_now();
 8015426:	f7f5 fa53 	bl	800a8d0 <sys_now>
 801542a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	4b0f      	ldr	r3, [pc, #60]	@ (8015470 <lwip_cyclic_timer+0x5c>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	4413      	add	r3, r2
 8015436:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015438:	68fa      	ldr	r2, [r7, #12]
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	1ad3      	subs	r3, r2, r3
 801543e:	0fdb      	lsrs	r3, r3, #31
 8015440:	f003 0301 	and.w	r3, r3, #1
 8015444:	b2db      	uxtb	r3, r3
 8015446:	2b00      	cmp	r3, #0
 8015448:	d009      	beq.n	801545e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	681a      	ldr	r2, [r3, #0]
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	4413      	add	r3, r2
 8015452:	687a      	ldr	r2, [r7, #4]
 8015454:	4907      	ldr	r1, [pc, #28]	@ (8015474 <lwip_cyclic_timer+0x60>)
 8015456:	4618      	mov	r0, r3
 8015458:	f7ff ff6e 	bl	8015338 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801545c:	e004      	b.n	8015468 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801545e:	687a      	ldr	r2, [r7, #4]
 8015460:	4904      	ldr	r1, [pc, #16]	@ (8015474 <lwip_cyclic_timer+0x60>)
 8015462:	68f8      	ldr	r0, [r7, #12]
 8015464:	f7ff ff68 	bl	8015338 <sys_timeout_abs>
}
 8015468:	bf00      	nop
 801546a:	3718      	adds	r7, #24
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}
 8015470:	240103ac 	.word	0x240103ac
 8015474:	08015415 	.word	0x08015415

08015478 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b082      	sub	sp, #8
 801547c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801547e:	2301      	movs	r3, #1
 8015480:	607b      	str	r3, [r7, #4]
 8015482:	e00e      	b.n	80154a2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015484:	4a0b      	ldr	r2, [pc, #44]	@ (80154b4 <sys_timeouts_init+0x3c>)
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	00db      	lsls	r3, r3, #3
 8015490:	4a08      	ldr	r2, [pc, #32]	@ (80154b4 <sys_timeouts_init+0x3c>)
 8015492:	4413      	add	r3, r2
 8015494:	461a      	mov	r2, r3
 8015496:	4908      	ldr	r1, [pc, #32]	@ (80154b8 <sys_timeouts_init+0x40>)
 8015498:	f000 f810 	bl	80154bc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	3301      	adds	r3, #1
 80154a0:	607b      	str	r3, [r7, #4]
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	2b02      	cmp	r3, #2
 80154a6:	d9ed      	bls.n	8015484 <sys_timeouts_init+0xc>
  }
}
 80154a8:	bf00      	nop
 80154aa:	bf00      	nop
 80154ac:	3708      	adds	r7, #8
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bd80      	pop	{r7, pc}
 80154b2:	bf00      	nop
 80154b4:	0801c538 	.word	0x0801c538
 80154b8:	08015415 	.word	0x08015415

080154bc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80154bc:	b580      	push	{r7, lr}
 80154be:	b086      	sub	sp, #24
 80154c0:	af00      	add	r7, sp, #0
 80154c2:	60f8      	str	r0, [r7, #12]
 80154c4:	60b9      	str	r1, [r7, #8]
 80154c6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80154ce:	d306      	bcc.n	80154de <sys_timeout+0x22>
 80154d0:	4b0a      	ldr	r3, [pc, #40]	@ (80154fc <sys_timeout+0x40>)
 80154d2:	f240 1229 	movw	r2, #297	@ 0x129
 80154d6:	490a      	ldr	r1, [pc, #40]	@ (8015500 <sys_timeout+0x44>)
 80154d8:	480a      	ldr	r0, [pc, #40]	@ (8015504 <sys_timeout+0x48>)
 80154da:	f003 fa73 	bl	80189c4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80154de:	f7f5 f9f7 	bl	800a8d0 <sys_now>
 80154e2:	4602      	mov	r2, r0
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	4413      	add	r3, r2
 80154e8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	68b9      	ldr	r1, [r7, #8]
 80154ee:	6978      	ldr	r0, [r7, #20]
 80154f0:	f7ff ff22 	bl	8015338 <sys_timeout_abs>
#endif
}
 80154f4:	bf00      	nop
 80154f6:	3718      	adds	r7, #24
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}
 80154fc:	0801b90c 	.word	0x0801b90c
 8015500:	0801b9a8 	.word	0x0801b9a8
 8015504:	0801b980 	.word	0x0801b980

08015508 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015508:	b580      	push	{r7, lr}
 801550a:	b084      	sub	sp, #16
 801550c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801550e:	f7f5 f9df 	bl	800a8d0 <sys_now>
 8015512:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015514:	4b17      	ldr	r3, [pc, #92]	@ (8015574 <sys_check_timeouts+0x6c>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d022      	beq.n	8015566 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	68fa      	ldr	r2, [r7, #12]
 8015526:	1ad3      	subs	r3, r2, r3
 8015528:	0fdb      	lsrs	r3, r3, #31
 801552a:	f003 0301 	and.w	r3, r3, #1
 801552e:	b2db      	uxtb	r3, r3
 8015530:	2b00      	cmp	r3, #0
 8015532:	d11a      	bne.n	801556a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	4a0e      	ldr	r2, [pc, #56]	@ (8015574 <sys_check_timeouts+0x6c>)
 801553a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	689b      	ldr	r3, [r3, #8]
 8015540:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015542:	68bb      	ldr	r3, [r7, #8]
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	685b      	ldr	r3, [r3, #4]
 801554c:	4a0a      	ldr	r2, [pc, #40]	@ (8015578 <sys_check_timeouts+0x70>)
 801554e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015550:	68b9      	ldr	r1, [r7, #8]
 8015552:	200a      	movs	r0, #10
 8015554:	f7f9 fc20 	bl	800ed98 <memp_free>
    if (handler != NULL) {
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	2b00      	cmp	r3, #0
 801555c:	d0da      	beq.n	8015514 <sys_check_timeouts+0xc>
      handler(arg);
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	6838      	ldr	r0, [r7, #0]
 8015562:	4798      	blx	r3
  do {
 8015564:	e7d6      	b.n	8015514 <sys_check_timeouts+0xc>
      return;
 8015566:	bf00      	nop
 8015568:	e000      	b.n	801556c <sys_check_timeouts+0x64>
      return;
 801556a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801556c:	3710      	adds	r7, #16
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	240103a8 	.word	0x240103a8
 8015578:	240103ac 	.word	0x240103ac

0801557c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b082      	sub	sp, #8
 8015580:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015582:	4b16      	ldr	r3, [pc, #88]	@ (80155dc <sys_timeouts_sleeptime+0x60>)
 8015584:	681b      	ldr	r3, [r3, #0]
 8015586:	2b00      	cmp	r3, #0
 8015588:	d102      	bne.n	8015590 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801558a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801558e:	e020      	b.n	80155d2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015590:	f7f5 f99e 	bl	800a8d0 <sys_now>
 8015594:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015596:	4b11      	ldr	r3, [pc, #68]	@ (80155dc <sys_timeouts_sleeptime+0x60>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	685a      	ldr	r2, [r3, #4]
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	1ad3      	subs	r3, r2, r3
 80155a0:	0fdb      	lsrs	r3, r3, #31
 80155a2:	f003 0301 	and.w	r3, r3, #1
 80155a6:	b2db      	uxtb	r3, r3
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d001      	beq.n	80155b0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80155ac:	2300      	movs	r3, #0
 80155ae:	e010      	b.n	80155d2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80155b0:	4b0a      	ldr	r3, [pc, #40]	@ (80155dc <sys_timeouts_sleeptime+0x60>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	685a      	ldr	r2, [r3, #4]
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	1ad3      	subs	r3, r2, r3
 80155ba:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80155bc:	683b      	ldr	r3, [r7, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	da06      	bge.n	80155d0 <sys_timeouts_sleeptime+0x54>
 80155c2:	4b07      	ldr	r3, [pc, #28]	@ (80155e0 <sys_timeouts_sleeptime+0x64>)
 80155c4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80155c8:	4906      	ldr	r1, [pc, #24]	@ (80155e4 <sys_timeouts_sleeptime+0x68>)
 80155ca:	4807      	ldr	r0, [pc, #28]	@ (80155e8 <sys_timeouts_sleeptime+0x6c>)
 80155cc:	f003 f9fa 	bl	80189c4 <iprintf>
    return ret;
 80155d0:	683b      	ldr	r3, [r7, #0]
  }
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	240103a8 	.word	0x240103a8
 80155e0:	0801b90c 	.word	0x0801b90c
 80155e4:	0801b9e0 	.word	0x0801b9e0
 80155e8:	0801b980 	.word	0x0801b980

080155ec <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80155f0:	f003 f8e8 	bl	80187c4 <rand>
 80155f4:	4603      	mov	r3, r0
 80155f6:	b29b      	uxth	r3, r3
 80155f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80155fc:	b29b      	uxth	r3, r3
 80155fe:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015602:	b29a      	uxth	r2, r3
 8015604:	4b01      	ldr	r3, [pc, #4]	@ (801560c <udp_init+0x20>)
 8015606:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015608:	bf00      	nop
 801560a:	bd80      	pop	{r7, pc}
 801560c:	240049bc 	.word	0x240049bc

08015610 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015610:	b480      	push	{r7}
 8015612:	b083      	sub	sp, #12
 8015614:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015616:	2300      	movs	r3, #0
 8015618:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801561a:	4b17      	ldr	r3, [pc, #92]	@ (8015678 <udp_new_port+0x68>)
 801561c:	881b      	ldrh	r3, [r3, #0]
 801561e:	1c5a      	adds	r2, r3, #1
 8015620:	b291      	uxth	r1, r2
 8015622:	4a15      	ldr	r2, [pc, #84]	@ (8015678 <udp_new_port+0x68>)
 8015624:	8011      	strh	r1, [r2, #0]
 8015626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801562a:	4293      	cmp	r3, r2
 801562c:	d103      	bne.n	8015636 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801562e:	4b12      	ldr	r3, [pc, #72]	@ (8015678 <udp_new_port+0x68>)
 8015630:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015634:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015636:	4b11      	ldr	r3, [pc, #68]	@ (801567c <udp_new_port+0x6c>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	603b      	str	r3, [r7, #0]
 801563c:	e011      	b.n	8015662 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	8a5a      	ldrh	r2, [r3, #18]
 8015642:	4b0d      	ldr	r3, [pc, #52]	@ (8015678 <udp_new_port+0x68>)
 8015644:	881b      	ldrh	r3, [r3, #0]
 8015646:	429a      	cmp	r2, r3
 8015648:	d108      	bne.n	801565c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801564a:	88fb      	ldrh	r3, [r7, #6]
 801564c:	3301      	adds	r3, #1
 801564e:	80fb      	strh	r3, [r7, #6]
 8015650:	88fb      	ldrh	r3, [r7, #6]
 8015652:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015656:	d3e0      	bcc.n	801561a <udp_new_port+0xa>
        return 0;
 8015658:	2300      	movs	r3, #0
 801565a:	e007      	b.n	801566c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801565c:	683b      	ldr	r3, [r7, #0]
 801565e:	68db      	ldr	r3, [r3, #12]
 8015660:	603b      	str	r3, [r7, #0]
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d1ea      	bne.n	801563e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015668:	4b03      	ldr	r3, [pc, #12]	@ (8015678 <udp_new_port+0x68>)
 801566a:	881b      	ldrh	r3, [r3, #0]
}
 801566c:	4618      	mov	r0, r3
 801566e:	370c      	adds	r7, #12
 8015670:	46bd      	mov	sp, r7
 8015672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015676:	4770      	bx	lr
 8015678:	240049bc 	.word	0x240049bc
 801567c:	240103b4 	.word	0x240103b4

08015680 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	60b9      	str	r1, [r7, #8]
 801568a:	4613      	mov	r3, r2
 801568c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d105      	bne.n	80156a0 <udp_input_local_match+0x20>
 8015694:	4b27      	ldr	r3, [pc, #156]	@ (8015734 <udp_input_local_match+0xb4>)
 8015696:	2287      	movs	r2, #135	@ 0x87
 8015698:	4927      	ldr	r1, [pc, #156]	@ (8015738 <udp_input_local_match+0xb8>)
 801569a:	4828      	ldr	r0, [pc, #160]	@ (801573c <udp_input_local_match+0xbc>)
 801569c:	f003 f992 	bl	80189c4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80156a0:	68bb      	ldr	r3, [r7, #8]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d105      	bne.n	80156b2 <udp_input_local_match+0x32>
 80156a6:	4b23      	ldr	r3, [pc, #140]	@ (8015734 <udp_input_local_match+0xb4>)
 80156a8:	2288      	movs	r2, #136	@ 0x88
 80156aa:	4925      	ldr	r1, [pc, #148]	@ (8015740 <udp_input_local_match+0xc0>)
 80156ac:	4823      	ldr	r0, [pc, #140]	@ (801573c <udp_input_local_match+0xbc>)
 80156ae:	f003 f989 	bl	80189c4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	7a1b      	ldrb	r3, [r3, #8]
 80156b6:	2b00      	cmp	r3, #0
 80156b8:	d00b      	beq.n	80156d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	7a1a      	ldrb	r2, [r3, #8]
 80156be:	4b21      	ldr	r3, [pc, #132]	@ (8015744 <udp_input_local_match+0xc4>)
 80156c0:	685b      	ldr	r3, [r3, #4]
 80156c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80156c6:	3301      	adds	r3, #1
 80156c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d001      	beq.n	80156d2 <udp_input_local_match+0x52>
    return 0;
 80156ce:	2300      	movs	r3, #0
 80156d0:	e02b      	b.n	801572a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80156d2:	79fb      	ldrb	r3, [r7, #7]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d018      	beq.n	801570a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d013      	beq.n	8015706 <udp_input_local_match+0x86>
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00f      	beq.n	8015706 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80156e6:	4b17      	ldr	r3, [pc, #92]	@ (8015744 <udp_input_local_match+0xc4>)
 80156e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80156ee:	d00a      	beq.n	8015706 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	681a      	ldr	r2, [r3, #0]
 80156f4:	4b13      	ldr	r3, [pc, #76]	@ (8015744 <udp_input_local_match+0xc4>)
 80156f6:	695b      	ldr	r3, [r3, #20]
 80156f8:	405a      	eors	r2, r3
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	3308      	adds	r3, #8
 80156fe:	681b      	ldr	r3, [r3, #0]
 8015700:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015702:	2b00      	cmp	r3, #0
 8015704:	d110      	bne.n	8015728 <udp_input_local_match+0xa8>
          return 1;
 8015706:	2301      	movs	r3, #1
 8015708:	e00f      	b.n	801572a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d009      	beq.n	8015724 <udp_input_local_match+0xa4>
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d005      	beq.n	8015724 <udp_input_local_match+0xa4>
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	4b09      	ldr	r3, [pc, #36]	@ (8015744 <udp_input_local_match+0xc4>)
 801571e:	695b      	ldr	r3, [r3, #20]
 8015720:	429a      	cmp	r2, r3
 8015722:	d101      	bne.n	8015728 <udp_input_local_match+0xa8>
        return 1;
 8015724:	2301      	movs	r3, #1
 8015726:	e000      	b.n	801572a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015728:	2300      	movs	r3, #0
}
 801572a:	4618      	mov	r0, r3
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	0801b9f4 	.word	0x0801b9f4
 8015738:	0801ba24 	.word	0x0801ba24
 801573c:	0801ba48 	.word	0x0801ba48
 8015740:	0801ba70 	.word	0x0801ba70
 8015744:	24009898 	.word	0x24009898

08015748 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015748:	b590      	push	{r4, r7, lr}
 801574a:	b08d      	sub	sp, #52	@ 0x34
 801574c:	af02      	add	r7, sp, #8
 801574e:	6078      	str	r0, [r7, #4]
 8015750:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015752:	2300      	movs	r3, #0
 8015754:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2b00      	cmp	r3, #0
 801575a:	d105      	bne.n	8015768 <udp_input+0x20>
 801575c:	4b7c      	ldr	r3, [pc, #496]	@ (8015950 <udp_input+0x208>)
 801575e:	22cf      	movs	r2, #207	@ 0xcf
 8015760:	497c      	ldr	r1, [pc, #496]	@ (8015954 <udp_input+0x20c>)
 8015762:	487d      	ldr	r0, [pc, #500]	@ (8015958 <udp_input+0x210>)
 8015764:	f003 f92e 	bl	80189c4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d105      	bne.n	801577a <udp_input+0x32>
 801576e:	4b78      	ldr	r3, [pc, #480]	@ (8015950 <udp_input+0x208>)
 8015770:	22d0      	movs	r2, #208	@ 0xd0
 8015772:	497a      	ldr	r1, [pc, #488]	@ (801595c <udp_input+0x214>)
 8015774:	4878      	ldr	r0, [pc, #480]	@ (8015958 <udp_input+0x210>)
 8015776:	f003 f925 	bl	80189c4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	895b      	ldrh	r3, [r3, #10]
 801577e:	2b07      	cmp	r3, #7
 8015780:	d803      	bhi.n	801578a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015782:	6878      	ldr	r0, [r7, #4]
 8015784:	f7fa f9b0 	bl	800fae8 <pbuf_free>
    goto end;
 8015788:	e0de      	b.n	8015948 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	685b      	ldr	r3, [r3, #4]
 801578e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015790:	4b73      	ldr	r3, [pc, #460]	@ (8015960 <udp_input+0x218>)
 8015792:	695b      	ldr	r3, [r3, #20]
 8015794:	4a72      	ldr	r2, [pc, #456]	@ (8015960 <udp_input+0x218>)
 8015796:	6812      	ldr	r2, [r2, #0]
 8015798:	4611      	mov	r1, r2
 801579a:	4618      	mov	r0, r3
 801579c:	f001 ffa6 	bl	80176ec <ip4_addr_isbroadcast_u32>
 80157a0:	4603      	mov	r3, r0
 80157a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80157a4:	697b      	ldr	r3, [r7, #20]
 80157a6:	881b      	ldrh	r3, [r3, #0]
 80157a8:	b29b      	uxth	r3, r3
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7f8 fcde 	bl	800e16c <lwip_htons>
 80157b0:	4603      	mov	r3, r0
 80157b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	885b      	ldrh	r3, [r3, #2]
 80157b8:	b29b      	uxth	r3, r3
 80157ba:	4618      	mov	r0, r3
 80157bc:	f7f8 fcd6 	bl	800e16c <lwip_htons>
 80157c0:	4603      	mov	r3, r0
 80157c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80157c4:	2300      	movs	r3, #0
 80157c6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80157c8:	2300      	movs	r3, #0
 80157ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80157cc:	2300      	movs	r3, #0
 80157ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80157d0:	4b64      	ldr	r3, [pc, #400]	@ (8015964 <udp_input+0x21c>)
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80157d6:	e054      	b.n	8015882 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80157d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157da:	8a5b      	ldrh	r3, [r3, #18]
 80157dc:	89fa      	ldrh	r2, [r7, #14]
 80157de:	429a      	cmp	r2, r3
 80157e0:	d14a      	bne.n	8015878 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80157e2:	7cfb      	ldrb	r3, [r7, #19]
 80157e4:	461a      	mov	r2, r3
 80157e6:	6839      	ldr	r1, [r7, #0]
 80157e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80157ea:	f7ff ff49 	bl	8015680 <udp_input_local_match>
 80157ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d041      	beq.n	8015878 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80157f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157f6:	7c1b      	ldrb	r3, [r3, #16]
 80157f8:	f003 0304 	and.w	r3, r3, #4
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d11d      	bne.n	801583c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015800:	69fb      	ldr	r3, [r7, #28]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d102      	bne.n	801580c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015808:	61fb      	str	r3, [r7, #28]
 801580a:	e017      	b.n	801583c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801580c:	7cfb      	ldrb	r3, [r7, #19]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d014      	beq.n	801583c <udp_input+0xf4>
 8015812:	4b53      	ldr	r3, [pc, #332]	@ (8015960 <udp_input+0x218>)
 8015814:	695b      	ldr	r3, [r3, #20]
 8015816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801581a:	d10f      	bne.n	801583c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801581c:	69fb      	ldr	r3, [r7, #28]
 801581e:	681a      	ldr	r2, [r3, #0]
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	3304      	adds	r3, #4
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	429a      	cmp	r2, r3
 8015828:	d008      	beq.n	801583c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	3304      	adds	r3, #4
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	429a      	cmp	r2, r3
 8015836:	d101      	bne.n	801583c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801583a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801583c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801583e:	8a9b      	ldrh	r3, [r3, #20]
 8015840:	8a3a      	ldrh	r2, [r7, #16]
 8015842:	429a      	cmp	r2, r3
 8015844:	d118      	bne.n	8015878 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015848:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801584a:	2b00      	cmp	r3, #0
 801584c:	d005      	beq.n	801585a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015850:	685a      	ldr	r2, [r3, #4]
 8015852:	4b43      	ldr	r3, [pc, #268]	@ (8015960 <udp_input+0x218>)
 8015854:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015856:	429a      	cmp	r2, r3
 8015858:	d10e      	bne.n	8015878 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801585a:	6a3b      	ldr	r3, [r7, #32]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d014      	beq.n	801588a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015862:	68da      	ldr	r2, [r3, #12]
 8015864:	6a3b      	ldr	r3, [r7, #32]
 8015866:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015868:	4b3e      	ldr	r3, [pc, #248]	@ (8015964 <udp_input+0x21c>)
 801586a:	681a      	ldr	r2, [r3, #0]
 801586c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801586e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015870:	4a3c      	ldr	r2, [pc, #240]	@ (8015964 <udp_input+0x21c>)
 8015872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015874:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015876:	e008      	b.n	801588a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801587a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801587c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801587e:	68db      	ldr	r3, [r3, #12]
 8015880:	627b      	str	r3, [r7, #36]	@ 0x24
 8015882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015884:	2b00      	cmp	r3, #0
 8015886:	d1a7      	bne.n	80157d8 <udp_input+0x90>
 8015888:	e000      	b.n	801588c <udp_input+0x144>
        break;
 801588a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801588e:	2b00      	cmp	r3, #0
 8015890:	d101      	bne.n	8015896 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015898:	2b00      	cmp	r3, #0
 801589a:	d002      	beq.n	80158a2 <udp_input+0x15a>
    for_us = 1;
 801589c:	2301      	movs	r3, #1
 801589e:	76fb      	strb	r3, [r7, #27]
 80158a0:	e00a      	b.n	80158b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80158a2:	683b      	ldr	r3, [r7, #0]
 80158a4:	3304      	adds	r3, #4
 80158a6:	681a      	ldr	r2, [r3, #0]
 80158a8:	4b2d      	ldr	r3, [pc, #180]	@ (8015960 <udp_input+0x218>)
 80158aa:	695b      	ldr	r3, [r3, #20]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	bf0c      	ite	eq
 80158b0:	2301      	moveq	r3, #1
 80158b2:	2300      	movne	r3, #0
 80158b4:	b2db      	uxtb	r3, r3
 80158b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80158b8:	7efb      	ldrb	r3, [r7, #27]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d041      	beq.n	8015942 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80158be:	2108      	movs	r1, #8
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f7fa f88b 	bl	800f9dc <pbuf_remove_header>
 80158c6:	4603      	mov	r3, r0
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d00a      	beq.n	80158e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80158cc:	4b20      	ldr	r3, [pc, #128]	@ (8015950 <udp_input+0x208>)
 80158ce:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80158d2:	4925      	ldr	r1, [pc, #148]	@ (8015968 <udp_input+0x220>)
 80158d4:	4820      	ldr	r0, [pc, #128]	@ (8015958 <udp_input+0x210>)
 80158d6:	f003 f875 	bl	80189c4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f7fa f904 	bl	800fae8 <pbuf_free>
      goto end;
 80158e0:	e032      	b.n	8015948 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80158e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d012      	beq.n	801590e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80158e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158ea:	699b      	ldr	r3, [r3, #24]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d00a      	beq.n	8015906 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80158f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f2:	699c      	ldr	r4, [r3, #24]
 80158f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158f6:	69d8      	ldr	r0, [r3, #28]
 80158f8:	8a3b      	ldrh	r3, [r7, #16]
 80158fa:	9300      	str	r3, [sp, #0]
 80158fc:	4b1b      	ldr	r3, [pc, #108]	@ (801596c <udp_input+0x224>)
 80158fe:	687a      	ldr	r2, [r7, #4]
 8015900:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015902:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015904:	e021      	b.n	801594a <udp_input+0x202>
        pbuf_free(p);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f7fa f8ee 	bl	800fae8 <pbuf_free>
        goto end;
 801590c:	e01c      	b.n	8015948 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801590e:	7cfb      	ldrb	r3, [r7, #19]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d112      	bne.n	801593a <udp_input+0x1f2>
 8015914:	4b12      	ldr	r3, [pc, #72]	@ (8015960 <udp_input+0x218>)
 8015916:	695b      	ldr	r3, [r3, #20]
 8015918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801591c:	2be0      	cmp	r3, #224	@ 0xe0
 801591e:	d00c      	beq.n	801593a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015920:	4b0f      	ldr	r3, [pc, #60]	@ (8015960 <udp_input+0x218>)
 8015922:	899b      	ldrh	r3, [r3, #12]
 8015924:	3308      	adds	r3, #8
 8015926:	b29b      	uxth	r3, r3
 8015928:	b21b      	sxth	r3, r3
 801592a:	4619      	mov	r1, r3
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7fa f8c8 	bl	800fac2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015932:	2103      	movs	r1, #3
 8015934:	6878      	ldr	r0, [r7, #4]
 8015936:	f001 fbaf 	bl	8017098 <icmp_dest_unreach>
      pbuf_free(p);
 801593a:	6878      	ldr	r0, [r7, #4]
 801593c:	f7fa f8d4 	bl	800fae8 <pbuf_free>
  return;
 8015940:	e003      	b.n	801594a <udp_input+0x202>
    pbuf_free(p);
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7fa f8d0 	bl	800fae8 <pbuf_free>
  return;
 8015948:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801594a:	372c      	adds	r7, #44	@ 0x2c
 801594c:	46bd      	mov	sp, r7
 801594e:	bd90      	pop	{r4, r7, pc}
 8015950:	0801b9f4 	.word	0x0801b9f4
 8015954:	0801ba98 	.word	0x0801ba98
 8015958:	0801ba48 	.word	0x0801ba48
 801595c:	0801bab0 	.word	0x0801bab0
 8015960:	24009898 	.word	0x24009898
 8015964:	240103b4 	.word	0x240103b4
 8015968:	0801bacc 	.word	0x0801bacc
 801596c:	240098a8 	.word	0x240098a8

08015970 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	b082      	sub	sp, #8
 8015974:	af00      	add	r7, sp, #0
 8015976:	6078      	str	r0, [r7, #4]
 8015978:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d109      	bne.n	8015994 <udp_send+0x24>
 8015980:	4b11      	ldr	r3, [pc, #68]	@ (80159c8 <udp_send+0x58>)
 8015982:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8015986:	4911      	ldr	r1, [pc, #68]	@ (80159cc <udp_send+0x5c>)
 8015988:	4811      	ldr	r0, [pc, #68]	@ (80159d0 <udp_send+0x60>)
 801598a:	f003 f81b 	bl	80189c4 <iprintf>
 801598e:	f06f 030f 	mvn.w	r3, #15
 8015992:	e015      	b.n	80159c0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015994:	683b      	ldr	r3, [r7, #0]
 8015996:	2b00      	cmp	r3, #0
 8015998:	d109      	bne.n	80159ae <udp_send+0x3e>
 801599a:	4b0b      	ldr	r3, [pc, #44]	@ (80159c8 <udp_send+0x58>)
 801599c:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80159a0:	490c      	ldr	r1, [pc, #48]	@ (80159d4 <udp_send+0x64>)
 80159a2:	480b      	ldr	r0, [pc, #44]	@ (80159d0 <udp_send+0x60>)
 80159a4:	f003 f80e 	bl	80189c4 <iprintf>
 80159a8:	f06f 030f 	mvn.w	r3, #15
 80159ac:	e008      	b.n	80159c0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	1d1a      	adds	r2, r3, #4
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	8a9b      	ldrh	r3, [r3, #20]
 80159b6:	6839      	ldr	r1, [r7, #0]
 80159b8:	6878      	ldr	r0, [r7, #4]
 80159ba:	f000 f80d 	bl	80159d8 <udp_sendto>
 80159be:	4603      	mov	r3, r0
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3708      	adds	r7, #8
 80159c4:	46bd      	mov	sp, r7
 80159c6:	bd80      	pop	{r7, pc}
 80159c8:	0801b9f4 	.word	0x0801b9f4
 80159cc:	0801bae8 	.word	0x0801bae8
 80159d0:	0801ba48 	.word	0x0801ba48
 80159d4:	0801bb00 	.word	0x0801bb00

080159d8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b088      	sub	sp, #32
 80159dc:	af02      	add	r7, sp, #8
 80159de:	60f8      	str	r0, [r7, #12]
 80159e0:	60b9      	str	r1, [r7, #8]
 80159e2:	607a      	str	r2, [r7, #4]
 80159e4:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d109      	bne.n	8015a00 <udp_sendto+0x28>
 80159ec:	4b23      	ldr	r3, [pc, #140]	@ (8015a7c <udp_sendto+0xa4>)
 80159ee:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80159f2:	4923      	ldr	r1, [pc, #140]	@ (8015a80 <udp_sendto+0xa8>)
 80159f4:	4823      	ldr	r0, [pc, #140]	@ (8015a84 <udp_sendto+0xac>)
 80159f6:	f002 ffe5 	bl	80189c4 <iprintf>
 80159fa:	f06f 030f 	mvn.w	r3, #15
 80159fe:	e038      	b.n	8015a72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d109      	bne.n	8015a1a <udp_sendto+0x42>
 8015a06:	4b1d      	ldr	r3, [pc, #116]	@ (8015a7c <udp_sendto+0xa4>)
 8015a08:	f240 2219 	movw	r2, #537	@ 0x219
 8015a0c:	491e      	ldr	r1, [pc, #120]	@ (8015a88 <udp_sendto+0xb0>)
 8015a0e:	481d      	ldr	r0, [pc, #116]	@ (8015a84 <udp_sendto+0xac>)
 8015a10:	f002 ffd8 	bl	80189c4 <iprintf>
 8015a14:	f06f 030f 	mvn.w	r3, #15
 8015a18:	e02b      	b.n	8015a72 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d109      	bne.n	8015a34 <udp_sendto+0x5c>
 8015a20:	4b16      	ldr	r3, [pc, #88]	@ (8015a7c <udp_sendto+0xa4>)
 8015a22:	f240 221a 	movw	r2, #538	@ 0x21a
 8015a26:	4919      	ldr	r1, [pc, #100]	@ (8015a8c <udp_sendto+0xb4>)
 8015a28:	4816      	ldr	r0, [pc, #88]	@ (8015a84 <udp_sendto+0xac>)
 8015a2a:	f002 ffcb 	bl	80189c4 <iprintf>
 8015a2e:	f06f 030f 	mvn.w	r3, #15
 8015a32:	e01e      	b.n	8015a72 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	7a1b      	ldrb	r3, [r3, #8]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d006      	beq.n	8015a4a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	7a1b      	ldrb	r3, [r3, #8]
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7f9 fcbf 	bl	800f3c4 <netif_get_by_index>
 8015a46:	6178      	str	r0, [r7, #20]
 8015a48:	e003      	b.n	8015a52 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f001 fbb8 	bl	80171c0 <ip4_route>
 8015a50:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d102      	bne.n	8015a5e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015a58:	f06f 0303 	mvn.w	r3, #3
 8015a5c:	e009      	b.n	8015a72 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015a5e:	887a      	ldrh	r2, [r7, #2]
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	9300      	str	r3, [sp, #0]
 8015a64:	4613      	mov	r3, r2
 8015a66:	687a      	ldr	r2, [r7, #4]
 8015a68:	68b9      	ldr	r1, [r7, #8]
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	f000 f810 	bl	8015a90 <udp_sendto_if>
 8015a70:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3718      	adds	r7, #24
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	0801b9f4 	.word	0x0801b9f4
 8015a80:	0801bb18 	.word	0x0801bb18
 8015a84:	0801ba48 	.word	0x0801ba48
 8015a88:	0801bb30 	.word	0x0801bb30
 8015a8c:	0801bb4c 	.word	0x0801bb4c

08015a90 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b088      	sub	sp, #32
 8015a94:	af02      	add	r7, sp, #8
 8015a96:	60f8      	str	r0, [r7, #12]
 8015a98:	60b9      	str	r1, [r7, #8]
 8015a9a:	607a      	str	r2, [r7, #4]
 8015a9c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d109      	bne.n	8015ab8 <udp_sendto_if+0x28>
 8015aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8015b60 <udp_sendto_if+0xd0>)
 8015aa6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015aaa:	492e      	ldr	r1, [pc, #184]	@ (8015b64 <udp_sendto_if+0xd4>)
 8015aac:	482e      	ldr	r0, [pc, #184]	@ (8015b68 <udp_sendto_if+0xd8>)
 8015aae:	f002 ff89 	bl	80189c4 <iprintf>
 8015ab2:	f06f 030f 	mvn.w	r3, #15
 8015ab6:	e04f      	b.n	8015b58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015ab8:	68bb      	ldr	r3, [r7, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d109      	bne.n	8015ad2 <udp_sendto_if+0x42>
 8015abe:	4b28      	ldr	r3, [pc, #160]	@ (8015b60 <udp_sendto_if+0xd0>)
 8015ac0:	f240 2281 	movw	r2, #641	@ 0x281
 8015ac4:	4929      	ldr	r1, [pc, #164]	@ (8015b6c <udp_sendto_if+0xdc>)
 8015ac6:	4828      	ldr	r0, [pc, #160]	@ (8015b68 <udp_sendto_if+0xd8>)
 8015ac8:	f002 ff7c 	bl	80189c4 <iprintf>
 8015acc:	f06f 030f 	mvn.w	r3, #15
 8015ad0:	e042      	b.n	8015b58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d109      	bne.n	8015aec <udp_sendto_if+0x5c>
 8015ad8:	4b21      	ldr	r3, [pc, #132]	@ (8015b60 <udp_sendto_if+0xd0>)
 8015ada:	f240 2282 	movw	r2, #642	@ 0x282
 8015ade:	4924      	ldr	r1, [pc, #144]	@ (8015b70 <udp_sendto_if+0xe0>)
 8015ae0:	4821      	ldr	r0, [pc, #132]	@ (8015b68 <udp_sendto_if+0xd8>)
 8015ae2:	f002 ff6f 	bl	80189c4 <iprintf>
 8015ae6:	f06f 030f 	mvn.w	r3, #15
 8015aea:	e035      	b.n	8015b58 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015aec:	6a3b      	ldr	r3, [r7, #32]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d109      	bne.n	8015b06 <udp_sendto_if+0x76>
 8015af2:	4b1b      	ldr	r3, [pc, #108]	@ (8015b60 <udp_sendto_if+0xd0>)
 8015af4:	f240 2283 	movw	r2, #643	@ 0x283
 8015af8:	491e      	ldr	r1, [pc, #120]	@ (8015b74 <udp_sendto_if+0xe4>)
 8015afa:	481b      	ldr	r0, [pc, #108]	@ (8015b68 <udp_sendto_if+0xd8>)
 8015afc:	f002 ff62 	bl	80189c4 <iprintf>
 8015b00:	f06f 030f 	mvn.w	r3, #15
 8015b04:	e028      	b.n	8015b58 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d009      	beq.n	8015b20 <udp_sendto_if+0x90>
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d005      	beq.n	8015b20 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015b1c:	2be0      	cmp	r3, #224	@ 0xe0
 8015b1e:	d103      	bne.n	8015b28 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015b20:	6a3b      	ldr	r3, [r7, #32]
 8015b22:	3304      	adds	r3, #4
 8015b24:	617b      	str	r3, [r7, #20]
 8015b26:	e00b      	b.n	8015b40 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	681a      	ldr	r2, [r3, #0]
 8015b2c:	6a3b      	ldr	r3, [r7, #32]
 8015b2e:	3304      	adds	r3, #4
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	429a      	cmp	r2, r3
 8015b34:	d002      	beq.n	8015b3c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015b36:	f06f 0303 	mvn.w	r3, #3
 8015b3a:	e00d      	b.n	8015b58 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015b40:	887a      	ldrh	r2, [r7, #2]
 8015b42:	697b      	ldr	r3, [r7, #20]
 8015b44:	9301      	str	r3, [sp, #4]
 8015b46:	6a3b      	ldr	r3, [r7, #32]
 8015b48:	9300      	str	r3, [sp, #0]
 8015b4a:	4613      	mov	r3, r2
 8015b4c:	687a      	ldr	r2, [r7, #4]
 8015b4e:	68b9      	ldr	r1, [r7, #8]
 8015b50:	68f8      	ldr	r0, [r7, #12]
 8015b52:	f000 f811 	bl	8015b78 <udp_sendto_if_src>
 8015b56:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3718      	adds	r7, #24
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	0801b9f4 	.word	0x0801b9f4
 8015b64:	0801bb68 	.word	0x0801bb68
 8015b68:	0801ba48 	.word	0x0801ba48
 8015b6c:	0801bb84 	.word	0x0801bb84
 8015b70:	0801bba0 	.word	0x0801bba0
 8015b74:	0801bbc0 	.word	0x0801bbc0

08015b78 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08c      	sub	sp, #48	@ 0x30
 8015b7c:	af04      	add	r7, sp, #16
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	60b9      	str	r1, [r7, #8]
 8015b82:	607a      	str	r2, [r7, #4]
 8015b84:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b86:	68fb      	ldr	r3, [r7, #12]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d109      	bne.n	8015ba0 <udp_sendto_if_src+0x28>
 8015b8c:	4b65      	ldr	r3, [pc, #404]	@ (8015d24 <udp_sendto_if_src+0x1ac>)
 8015b8e:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8015b92:	4965      	ldr	r1, [pc, #404]	@ (8015d28 <udp_sendto_if_src+0x1b0>)
 8015b94:	4865      	ldr	r0, [pc, #404]	@ (8015d2c <udp_sendto_if_src+0x1b4>)
 8015b96:	f002 ff15 	bl	80189c4 <iprintf>
 8015b9a:	f06f 030f 	mvn.w	r3, #15
 8015b9e:	e0bc      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015ba0:	68bb      	ldr	r3, [r7, #8]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d109      	bne.n	8015bba <udp_sendto_if_src+0x42>
 8015ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8015d24 <udp_sendto_if_src+0x1ac>)
 8015ba8:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8015bac:	4960      	ldr	r1, [pc, #384]	@ (8015d30 <udp_sendto_if_src+0x1b8>)
 8015bae:	485f      	ldr	r0, [pc, #380]	@ (8015d2c <udp_sendto_if_src+0x1b4>)
 8015bb0:	f002 ff08 	bl	80189c4 <iprintf>
 8015bb4:	f06f 030f 	mvn.w	r3, #15
 8015bb8:	e0af      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d109      	bne.n	8015bd4 <udp_sendto_if_src+0x5c>
 8015bc0:	4b58      	ldr	r3, [pc, #352]	@ (8015d24 <udp_sendto_if_src+0x1ac>)
 8015bc2:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8015bc6:	495b      	ldr	r1, [pc, #364]	@ (8015d34 <udp_sendto_if_src+0x1bc>)
 8015bc8:	4858      	ldr	r0, [pc, #352]	@ (8015d2c <udp_sendto_if_src+0x1b4>)
 8015bca:	f002 fefb 	bl	80189c4 <iprintf>
 8015bce:	f06f 030f 	mvn.w	r3, #15
 8015bd2:	e0a2      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	d109      	bne.n	8015bee <udp_sendto_if_src+0x76>
 8015bda:	4b52      	ldr	r3, [pc, #328]	@ (8015d24 <udp_sendto_if_src+0x1ac>)
 8015bdc:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8015be0:	4955      	ldr	r1, [pc, #340]	@ (8015d38 <udp_sendto_if_src+0x1c0>)
 8015be2:	4852      	ldr	r0, [pc, #328]	@ (8015d2c <udp_sendto_if_src+0x1b4>)
 8015be4:	f002 feee 	bl	80189c4 <iprintf>
 8015be8:	f06f 030f 	mvn.w	r3, #15
 8015bec:	e095      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d109      	bne.n	8015c08 <udp_sendto_if_src+0x90>
 8015bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8015d24 <udp_sendto_if_src+0x1ac>)
 8015bf6:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8015bfa:	4950      	ldr	r1, [pc, #320]	@ (8015d3c <udp_sendto_if_src+0x1c4>)
 8015bfc:	484b      	ldr	r0, [pc, #300]	@ (8015d2c <udp_sendto_if_src+0x1b4>)
 8015bfe:	f002 fee1 	bl	80189c4 <iprintf>
 8015c02:	f06f 030f 	mvn.w	r3, #15
 8015c06:	e088      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	8a5b      	ldrh	r3, [r3, #18]
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d10f      	bne.n	8015c30 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015c10:	68f9      	ldr	r1, [r7, #12]
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	8a5b      	ldrh	r3, [r3, #18]
 8015c16:	461a      	mov	r2, r3
 8015c18:	68f8      	ldr	r0, [r7, #12]
 8015c1a:	f000 f893 	bl	8015d44 <udp_bind>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015c22:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d002      	beq.n	8015c30 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015c2a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015c2e:	e074      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	891b      	ldrh	r3, [r3, #8]
 8015c34:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8015c38:	4293      	cmp	r3, r2
 8015c3a:	d902      	bls.n	8015c42 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015c3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c40:	e06b      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015c42:	2108      	movs	r1, #8
 8015c44:	68b8      	ldr	r0, [r7, #8]
 8015c46:	f7f9 feb9 	bl	800f9bc <pbuf_add_header>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d015      	beq.n	8015c7c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015c50:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015c54:	2108      	movs	r1, #8
 8015c56:	2022      	movs	r0, #34	@ 0x22
 8015c58:	f7f9 fc5e 	bl	800f518 <pbuf_alloc>
 8015c5c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015c5e:	69fb      	ldr	r3, [r7, #28]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d102      	bne.n	8015c6a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015c64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015c68:	e057      	b.n	8015d1a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	891b      	ldrh	r3, [r3, #8]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d006      	beq.n	8015c80 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015c72:	68b9      	ldr	r1, [r7, #8]
 8015c74:	69f8      	ldr	r0, [r7, #28]
 8015c76:	f7fa f85b 	bl	800fd30 <pbuf_chain>
 8015c7a:	e001      	b.n	8015c80 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	895b      	ldrh	r3, [r3, #10]
 8015c84:	2b07      	cmp	r3, #7
 8015c86:	d806      	bhi.n	8015c96 <udp_sendto_if_src+0x11e>
 8015c88:	4b26      	ldr	r3, [pc, #152]	@ (8015d24 <udp_sendto_if_src+0x1ac>)
 8015c8a:	f240 320d 	movw	r2, #781	@ 0x30d
 8015c8e:	492c      	ldr	r1, [pc, #176]	@ (8015d40 <udp_sendto_if_src+0x1c8>)
 8015c90:	4826      	ldr	r0, [pc, #152]	@ (8015d2c <udp_sendto_if_src+0x1b4>)
 8015c92:	f002 fe97 	bl	80189c4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015c96:	69fb      	ldr	r3, [r7, #28]
 8015c98:	685b      	ldr	r3, [r3, #4]
 8015c9a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	8a5b      	ldrh	r3, [r3, #18]
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	f7f8 fa63 	bl	800e16c <lwip_htons>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	461a      	mov	r2, r3
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8015cae:	887b      	ldrh	r3, [r7, #2]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7f8 fa5b 	bl	800e16c <lwip_htons>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	461a      	mov	r2, r3
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015cbe:	697b      	ldr	r3, [r7, #20]
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	719a      	strb	r2, [r3, #6]
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	891b      	ldrh	r3, [r3, #8]
 8015ccc:	4618      	mov	r0, r3
 8015cce:	f7f8 fa4d 	bl	800e16c <lwip_htons>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	461a      	mov	r2, r3
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015cda:	2311      	movs	r3, #17
 8015cdc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	7adb      	ldrb	r3, [r3, #11]
 8015ce2:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8015ce4:	68fb      	ldr	r3, [r7, #12]
 8015ce6:	7a9b      	ldrb	r3, [r3, #10]
 8015ce8:	7cb9      	ldrb	r1, [r7, #18]
 8015cea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015cec:	9202      	str	r2, [sp, #8]
 8015cee:	7cfa      	ldrb	r2, [r7, #19]
 8015cf0:	9201      	str	r2, [sp, #4]
 8015cf2:	9300      	str	r3, [sp, #0]
 8015cf4:	460b      	mov	r3, r1
 8015cf6:	687a      	ldr	r2, [r7, #4]
 8015cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015cfa:	69f8      	ldr	r0, [r7, #28]
 8015cfc:	f001 fc48 	bl	8017590 <ip4_output_if_src>
 8015d00:	4603      	mov	r3, r0
 8015d02:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8015d04:	69fa      	ldr	r2, [r7, #28]
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d004      	beq.n	8015d16 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8015d0c:	69f8      	ldr	r0, [r7, #28]
 8015d0e:	f7f9 feeb 	bl	800fae8 <pbuf_free>
    q = NULL;
 8015d12:	2300      	movs	r3, #0
 8015d14:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015d16:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3720      	adds	r7, #32
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	0801b9f4 	.word	0x0801b9f4
 8015d28:	0801bbe0 	.word	0x0801bbe0
 8015d2c:	0801ba48 	.word	0x0801ba48
 8015d30:	0801bc00 	.word	0x0801bc00
 8015d34:	0801bc20 	.word	0x0801bc20
 8015d38:	0801bc44 	.word	0x0801bc44
 8015d3c:	0801bc68 	.word	0x0801bc68
 8015d40:	0801bc8c 	.word	0x0801bc8c

08015d44 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b086      	sub	sp, #24
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	60f8      	str	r0, [r7, #12]
 8015d4c:	60b9      	str	r1, [r7, #8]
 8015d4e:	4613      	mov	r3, r2
 8015d50:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d101      	bne.n	8015d5c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015d58:	4b39      	ldr	r3, [pc, #228]	@ (8015e40 <udp_bind+0xfc>)
 8015d5a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d109      	bne.n	8015d76 <udp_bind+0x32>
 8015d62:	4b38      	ldr	r3, [pc, #224]	@ (8015e44 <udp_bind+0x100>)
 8015d64:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8015d68:	4937      	ldr	r1, [pc, #220]	@ (8015e48 <udp_bind+0x104>)
 8015d6a:	4838      	ldr	r0, [pc, #224]	@ (8015e4c <udp_bind+0x108>)
 8015d6c:	f002 fe2a 	bl	80189c4 <iprintf>
 8015d70:	f06f 030f 	mvn.w	r3, #15
 8015d74:	e060      	b.n	8015e38 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d7a:	4b35      	ldr	r3, [pc, #212]	@ (8015e50 <udp_bind+0x10c>)
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	617b      	str	r3, [r7, #20]
 8015d80:	e009      	b.n	8015d96 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8015d82:	68fa      	ldr	r2, [r7, #12]
 8015d84:	697b      	ldr	r3, [r7, #20]
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d102      	bne.n	8015d90 <udp_bind+0x4c>
      rebind = 1;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	74fb      	strb	r3, [r7, #19]
      break;
 8015d8e:	e005      	b.n	8015d9c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015d90:	697b      	ldr	r3, [r7, #20]
 8015d92:	68db      	ldr	r3, [r3, #12]
 8015d94:	617b      	str	r3, [r7, #20]
 8015d96:	697b      	ldr	r3, [r7, #20]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d1f2      	bne.n	8015d82 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015d9c:	88fb      	ldrh	r3, [r7, #6]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d109      	bne.n	8015db6 <udp_bind+0x72>
    port = udp_new_port();
 8015da2:	f7ff fc35 	bl	8015610 <udp_new_port>
 8015da6:	4603      	mov	r3, r0
 8015da8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015daa:	88fb      	ldrh	r3, [r7, #6]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d12c      	bne.n	8015e0a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8015db0:	f06f 0307 	mvn.w	r3, #7
 8015db4:	e040      	b.n	8015e38 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015db6:	4b26      	ldr	r3, [pc, #152]	@ (8015e50 <udp_bind+0x10c>)
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	617b      	str	r3, [r7, #20]
 8015dbc:	e022      	b.n	8015e04 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	429a      	cmp	r2, r3
 8015dc4:	d01b      	beq.n	8015dfe <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015dc6:	697b      	ldr	r3, [r7, #20]
 8015dc8:	8a5b      	ldrh	r3, [r3, #18]
 8015dca:	88fa      	ldrh	r2, [r7, #6]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d116      	bne.n	8015dfe <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015dd0:	697b      	ldr	r3, [r7, #20]
 8015dd2:	681a      	ldr	r2, [r3, #0]
 8015dd4:	68bb      	ldr	r3, [r7, #8]
 8015dd6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015dd8:	429a      	cmp	r2, r3
 8015dda:	d00d      	beq.n	8015df8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d00a      	beq.n	8015df8 <udp_bind+0xb4>
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d006      	beq.n	8015df8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015dea:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d003      	beq.n	8015df8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015df0:	697b      	ldr	r3, [r7, #20]
 8015df2:	681b      	ldr	r3, [r3, #0]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d102      	bne.n	8015dfe <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015df8:	f06f 0307 	mvn.w	r3, #7
 8015dfc:	e01c      	b.n	8015e38 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	617b      	str	r3, [r7, #20]
 8015e04:	697b      	ldr	r3, [r7, #20]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d1d9      	bne.n	8015dbe <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015e0a:	68bb      	ldr	r3, [r7, #8]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d002      	beq.n	8015e16 <udp_bind+0xd2>
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	e000      	b.n	8015e18 <udp_bind+0xd4>
 8015e16:	2300      	movs	r3, #0
 8015e18:	68fa      	ldr	r2, [r7, #12]
 8015e1a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	88fa      	ldrh	r2, [r7, #6]
 8015e20:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015e22:	7cfb      	ldrb	r3, [r7, #19]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d106      	bne.n	8015e36 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015e28:	4b09      	ldr	r3, [pc, #36]	@ (8015e50 <udp_bind+0x10c>)
 8015e2a:	681a      	ldr	r2, [r3, #0]
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015e30:	4a07      	ldr	r2, [pc, #28]	@ (8015e50 <udp_bind+0x10c>)
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015e36:	2300      	movs	r3, #0
}
 8015e38:	4618      	mov	r0, r3
 8015e3a:	3718      	adds	r7, #24
 8015e3c:	46bd      	mov	sp, r7
 8015e3e:	bd80      	pop	{r7, pc}
 8015e40:	0801c550 	.word	0x0801c550
 8015e44:	0801b9f4 	.word	0x0801b9f4
 8015e48:	0801bcbc 	.word	0x0801bcbc
 8015e4c:	0801ba48 	.word	0x0801ba48
 8015e50:	240103b4 	.word	0x240103b4

08015e54 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015e54:	b580      	push	{r7, lr}
 8015e56:	b086      	sub	sp, #24
 8015e58:	af00      	add	r7, sp, #0
 8015e5a:	60f8      	str	r0, [r7, #12]
 8015e5c:	60b9      	str	r1, [r7, #8]
 8015e5e:	4613      	mov	r3, r2
 8015e60:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d109      	bne.n	8015e7c <udp_connect+0x28>
 8015e68:	4b2c      	ldr	r3, [pc, #176]	@ (8015f1c <udp_connect+0xc8>)
 8015e6a:	f240 4235 	movw	r2, #1077	@ 0x435
 8015e6e:	492c      	ldr	r1, [pc, #176]	@ (8015f20 <udp_connect+0xcc>)
 8015e70:	482c      	ldr	r0, [pc, #176]	@ (8015f24 <udp_connect+0xd0>)
 8015e72:	f002 fda7 	bl	80189c4 <iprintf>
 8015e76:	f06f 030f 	mvn.w	r3, #15
 8015e7a:	e04b      	b.n	8015f14 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015e7c:	68bb      	ldr	r3, [r7, #8]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d109      	bne.n	8015e96 <udp_connect+0x42>
 8015e82:	4b26      	ldr	r3, [pc, #152]	@ (8015f1c <udp_connect+0xc8>)
 8015e84:	f240 4236 	movw	r2, #1078	@ 0x436
 8015e88:	4927      	ldr	r1, [pc, #156]	@ (8015f28 <udp_connect+0xd4>)
 8015e8a:	4826      	ldr	r0, [pc, #152]	@ (8015f24 <udp_connect+0xd0>)
 8015e8c:	f002 fd9a 	bl	80189c4 <iprintf>
 8015e90:	f06f 030f 	mvn.w	r3, #15
 8015e94:	e03e      	b.n	8015f14 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	8a5b      	ldrh	r3, [r3, #18]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d10f      	bne.n	8015ebe <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015e9e:	68f9      	ldr	r1, [r7, #12]
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	8a5b      	ldrh	r3, [r3, #18]
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	68f8      	ldr	r0, [r7, #12]
 8015ea8:	f7ff ff4c 	bl	8015d44 <udp_bind>
 8015eac:	4603      	mov	r3, r0
 8015eae:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015eb0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d002      	beq.n	8015ebe <udp_connect+0x6a>
      return err;
 8015eb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ebc:	e02a      	b.n	8015f14 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015ebe:	68bb      	ldr	r3, [r7, #8]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d002      	beq.n	8015eca <udp_connect+0x76>
 8015ec4:	68bb      	ldr	r3, [r7, #8]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	e000      	b.n	8015ecc <udp_connect+0x78>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	68fa      	ldr	r2, [r7, #12]
 8015ece:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	88fa      	ldrh	r2, [r7, #6]
 8015ed4:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	7c1b      	ldrb	r3, [r3, #16]
 8015eda:	f043 0304 	orr.w	r3, r3, #4
 8015ede:	b2da      	uxtb	r2, r3
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015ee4:	4b11      	ldr	r3, [pc, #68]	@ (8015f2c <udp_connect+0xd8>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	617b      	str	r3, [r7, #20]
 8015eea:	e008      	b.n	8015efe <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015eec:	68fa      	ldr	r2, [r7, #12]
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d101      	bne.n	8015ef8 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	e00d      	b.n	8015f14 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015ef8:	697b      	ldr	r3, [r7, #20]
 8015efa:	68db      	ldr	r3, [r3, #12]
 8015efc:	617b      	str	r3, [r7, #20]
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d1f3      	bne.n	8015eec <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015f04:	4b09      	ldr	r3, [pc, #36]	@ (8015f2c <udp_connect+0xd8>)
 8015f06:	681a      	ldr	r2, [r3, #0]
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015f0c:	4a07      	ldr	r2, [pc, #28]	@ (8015f2c <udp_connect+0xd8>)
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8015f12:	2300      	movs	r3, #0
}
 8015f14:	4618      	mov	r0, r3
 8015f16:	3718      	adds	r7, #24
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}
 8015f1c:	0801b9f4 	.word	0x0801b9f4
 8015f20:	0801bcd4 	.word	0x0801bcd4
 8015f24:	0801ba48 	.word	0x0801ba48
 8015f28:	0801bcf0 	.word	0x0801bcf0
 8015f2c:	240103b4 	.word	0x240103b4

08015f30 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b082      	sub	sp, #8
 8015f34:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015f36:	2000      	movs	r0, #0
 8015f38:	f7f8 feb8 	bl	800ecac <memp_malloc>
 8015f3c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d007      	beq.n	8015f54 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015f44:	2220      	movs	r2, #32
 8015f46:	2100      	movs	r1, #0
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f002 fd5d 	bl	8018a08 <memset>
    pcb->ttl = UDP_TTL;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	22ff      	movs	r2, #255	@ 0xff
 8015f52:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015f54:	687b      	ldr	r3, [r7, #4]
}
 8015f56:	4618      	mov	r0, r3
 8015f58:	3708      	adds	r7, #8
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
	...

08015f60 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015f60:	b480      	push	{r7}
 8015f62:	b085      	sub	sp, #20
 8015f64:	af00      	add	r7, sp, #0
 8015f66:	6078      	str	r0, [r7, #4]
 8015f68:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d01e      	beq.n	8015fae <udp_netif_ip_addr_changed+0x4e>
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d01a      	beq.n	8015fae <udp_netif_ip_addr_changed+0x4e>
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d017      	beq.n	8015fae <udp_netif_ip_addr_changed+0x4e>
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d013      	beq.n	8015fae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015f86:	4b0d      	ldr	r3, [pc, #52]	@ (8015fbc <udp_netif_ip_addr_changed+0x5c>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	60fb      	str	r3, [r7, #12]
 8015f8c:	e00c      	b.n	8015fa8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015f8e:	68fb      	ldr	r3, [r7, #12]
 8015f90:	681a      	ldr	r2, [r3, #0]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	429a      	cmp	r2, r3
 8015f98:	d103      	bne.n	8015fa2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	68db      	ldr	r3, [r3, #12]
 8015fa6:	60fb      	str	r3, [r7, #12]
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d1ef      	bne.n	8015f8e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015fae:	bf00      	nop
 8015fb0:	3714      	adds	r7, #20
 8015fb2:	46bd      	mov	sp, r7
 8015fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb8:	4770      	bx	lr
 8015fba:	bf00      	nop
 8015fbc:	240103b4 	.word	0x240103b4

08015fc0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015fc8:	4915      	ldr	r1, [pc, #84]	@ (8016020 <etharp_free_entry+0x60>)
 8015fca:	687a      	ldr	r2, [r7, #4]
 8015fcc:	4613      	mov	r3, r2
 8015fce:	005b      	lsls	r3, r3, #1
 8015fd0:	4413      	add	r3, r2
 8015fd2:	00db      	lsls	r3, r3, #3
 8015fd4:	440b      	add	r3, r1
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d013      	beq.n	8016004 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015fdc:	4910      	ldr	r1, [pc, #64]	@ (8016020 <etharp_free_entry+0x60>)
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	005b      	lsls	r3, r3, #1
 8015fe4:	4413      	add	r3, r2
 8015fe6:	00db      	lsls	r3, r3, #3
 8015fe8:	440b      	add	r3, r1
 8015fea:	681b      	ldr	r3, [r3, #0]
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7f9 fd7b 	bl	800fae8 <pbuf_free>
    arp_table[i].q = NULL;
 8015ff2:	490b      	ldr	r1, [pc, #44]	@ (8016020 <etharp_free_entry+0x60>)
 8015ff4:	687a      	ldr	r2, [r7, #4]
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	005b      	lsls	r3, r3, #1
 8015ffa:	4413      	add	r3, r2
 8015ffc:	00db      	lsls	r3, r3, #3
 8015ffe:	440b      	add	r3, r1
 8016000:	2200      	movs	r2, #0
 8016002:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016004:	4906      	ldr	r1, [pc, #24]	@ (8016020 <etharp_free_entry+0x60>)
 8016006:	687a      	ldr	r2, [r7, #4]
 8016008:	4613      	mov	r3, r2
 801600a:	005b      	lsls	r3, r3, #1
 801600c:	4413      	add	r3, r2
 801600e:	00db      	lsls	r3, r3, #3
 8016010:	440b      	add	r3, r1
 8016012:	3314      	adds	r3, #20
 8016014:	2200      	movs	r2, #0
 8016016:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016018:	bf00      	nop
 801601a:	3708      	adds	r7, #8
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}
 8016020:	240103b8 	.word	0x240103b8

08016024 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b082      	sub	sp, #8
 8016028:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801602a:	2300      	movs	r3, #0
 801602c:	607b      	str	r3, [r7, #4]
 801602e:	e096      	b.n	801615e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016030:	494f      	ldr	r1, [pc, #316]	@ (8016170 <etharp_tmr+0x14c>)
 8016032:	687a      	ldr	r2, [r7, #4]
 8016034:	4613      	mov	r3, r2
 8016036:	005b      	lsls	r3, r3, #1
 8016038:	4413      	add	r3, r2
 801603a:	00db      	lsls	r3, r3, #3
 801603c:	440b      	add	r3, r1
 801603e:	3314      	adds	r3, #20
 8016040:	781b      	ldrb	r3, [r3, #0]
 8016042:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016044:	78fb      	ldrb	r3, [r7, #3]
 8016046:	2b00      	cmp	r3, #0
 8016048:	f000 8086 	beq.w	8016158 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801604c:	4948      	ldr	r1, [pc, #288]	@ (8016170 <etharp_tmr+0x14c>)
 801604e:	687a      	ldr	r2, [r7, #4]
 8016050:	4613      	mov	r3, r2
 8016052:	005b      	lsls	r3, r3, #1
 8016054:	4413      	add	r3, r2
 8016056:	00db      	lsls	r3, r3, #3
 8016058:	440b      	add	r3, r1
 801605a:	3312      	adds	r3, #18
 801605c:	881b      	ldrh	r3, [r3, #0]
 801605e:	3301      	adds	r3, #1
 8016060:	b298      	uxth	r0, r3
 8016062:	4943      	ldr	r1, [pc, #268]	@ (8016170 <etharp_tmr+0x14c>)
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	4613      	mov	r3, r2
 8016068:	005b      	lsls	r3, r3, #1
 801606a:	4413      	add	r3, r2
 801606c:	00db      	lsls	r3, r3, #3
 801606e:	440b      	add	r3, r1
 8016070:	3312      	adds	r3, #18
 8016072:	4602      	mov	r2, r0
 8016074:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016076:	493e      	ldr	r1, [pc, #248]	@ (8016170 <etharp_tmr+0x14c>)
 8016078:	687a      	ldr	r2, [r7, #4]
 801607a:	4613      	mov	r3, r2
 801607c:	005b      	lsls	r3, r3, #1
 801607e:	4413      	add	r3, r2
 8016080:	00db      	lsls	r3, r3, #3
 8016082:	440b      	add	r3, r1
 8016084:	3312      	adds	r3, #18
 8016086:	881b      	ldrh	r3, [r3, #0]
 8016088:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801608c:	d215      	bcs.n	80160ba <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801608e:	4938      	ldr	r1, [pc, #224]	@ (8016170 <etharp_tmr+0x14c>)
 8016090:	687a      	ldr	r2, [r7, #4]
 8016092:	4613      	mov	r3, r2
 8016094:	005b      	lsls	r3, r3, #1
 8016096:	4413      	add	r3, r2
 8016098:	00db      	lsls	r3, r3, #3
 801609a:	440b      	add	r3, r1
 801609c:	3314      	adds	r3, #20
 801609e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80160a0:	2b01      	cmp	r3, #1
 80160a2:	d10e      	bne.n	80160c2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80160a4:	4932      	ldr	r1, [pc, #200]	@ (8016170 <etharp_tmr+0x14c>)
 80160a6:	687a      	ldr	r2, [r7, #4]
 80160a8:	4613      	mov	r3, r2
 80160aa:	005b      	lsls	r3, r3, #1
 80160ac:	4413      	add	r3, r2
 80160ae:	00db      	lsls	r3, r3, #3
 80160b0:	440b      	add	r3, r1
 80160b2:	3312      	adds	r3, #18
 80160b4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80160b6:	2b04      	cmp	r3, #4
 80160b8:	d903      	bls.n	80160c2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f7ff ff80 	bl	8015fc0 <etharp_free_entry>
 80160c0:	e04a      	b.n	8016158 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80160c2:	492b      	ldr	r1, [pc, #172]	@ (8016170 <etharp_tmr+0x14c>)
 80160c4:	687a      	ldr	r2, [r7, #4]
 80160c6:	4613      	mov	r3, r2
 80160c8:	005b      	lsls	r3, r3, #1
 80160ca:	4413      	add	r3, r2
 80160cc:	00db      	lsls	r3, r3, #3
 80160ce:	440b      	add	r3, r1
 80160d0:	3314      	adds	r3, #20
 80160d2:	781b      	ldrb	r3, [r3, #0]
 80160d4:	2b03      	cmp	r3, #3
 80160d6:	d10a      	bne.n	80160ee <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80160d8:	4925      	ldr	r1, [pc, #148]	@ (8016170 <etharp_tmr+0x14c>)
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	4613      	mov	r3, r2
 80160de:	005b      	lsls	r3, r3, #1
 80160e0:	4413      	add	r3, r2
 80160e2:	00db      	lsls	r3, r3, #3
 80160e4:	440b      	add	r3, r1
 80160e6:	3314      	adds	r3, #20
 80160e8:	2204      	movs	r2, #4
 80160ea:	701a      	strb	r2, [r3, #0]
 80160ec:	e034      	b.n	8016158 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80160ee:	4920      	ldr	r1, [pc, #128]	@ (8016170 <etharp_tmr+0x14c>)
 80160f0:	687a      	ldr	r2, [r7, #4]
 80160f2:	4613      	mov	r3, r2
 80160f4:	005b      	lsls	r3, r3, #1
 80160f6:	4413      	add	r3, r2
 80160f8:	00db      	lsls	r3, r3, #3
 80160fa:	440b      	add	r3, r1
 80160fc:	3314      	adds	r3, #20
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	2b04      	cmp	r3, #4
 8016102:	d10a      	bne.n	801611a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016104:	491a      	ldr	r1, [pc, #104]	@ (8016170 <etharp_tmr+0x14c>)
 8016106:	687a      	ldr	r2, [r7, #4]
 8016108:	4613      	mov	r3, r2
 801610a:	005b      	lsls	r3, r3, #1
 801610c:	4413      	add	r3, r2
 801610e:	00db      	lsls	r3, r3, #3
 8016110:	440b      	add	r3, r1
 8016112:	3314      	adds	r3, #20
 8016114:	2202      	movs	r2, #2
 8016116:	701a      	strb	r2, [r3, #0]
 8016118:	e01e      	b.n	8016158 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801611a:	4915      	ldr	r1, [pc, #84]	@ (8016170 <etharp_tmr+0x14c>)
 801611c:	687a      	ldr	r2, [r7, #4]
 801611e:	4613      	mov	r3, r2
 8016120:	005b      	lsls	r3, r3, #1
 8016122:	4413      	add	r3, r2
 8016124:	00db      	lsls	r3, r3, #3
 8016126:	440b      	add	r3, r1
 8016128:	3314      	adds	r3, #20
 801612a:	781b      	ldrb	r3, [r3, #0]
 801612c:	2b01      	cmp	r3, #1
 801612e:	d113      	bne.n	8016158 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016130:	490f      	ldr	r1, [pc, #60]	@ (8016170 <etharp_tmr+0x14c>)
 8016132:	687a      	ldr	r2, [r7, #4]
 8016134:	4613      	mov	r3, r2
 8016136:	005b      	lsls	r3, r3, #1
 8016138:	4413      	add	r3, r2
 801613a:	00db      	lsls	r3, r3, #3
 801613c:	440b      	add	r3, r1
 801613e:	3308      	adds	r3, #8
 8016140:	6818      	ldr	r0, [r3, #0]
 8016142:	687a      	ldr	r2, [r7, #4]
 8016144:	4613      	mov	r3, r2
 8016146:	005b      	lsls	r3, r3, #1
 8016148:	4413      	add	r3, r2
 801614a:	00db      	lsls	r3, r3, #3
 801614c:	4a08      	ldr	r2, [pc, #32]	@ (8016170 <etharp_tmr+0x14c>)
 801614e:	4413      	add	r3, r2
 8016150:	3304      	adds	r3, #4
 8016152:	4619      	mov	r1, r3
 8016154:	f000 fe6e 	bl	8016e34 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	3301      	adds	r3, #1
 801615c:	607b      	str	r3, [r7, #4]
 801615e:	687b      	ldr	r3, [r7, #4]
 8016160:	2b09      	cmp	r3, #9
 8016162:	f77f af65 	ble.w	8016030 <etharp_tmr+0xc>
      }
    }
  }
}
 8016166:	bf00      	nop
 8016168:	bf00      	nop
 801616a:	3708      	adds	r7, #8
 801616c:	46bd      	mov	sp, r7
 801616e:	bd80      	pop	{r7, pc}
 8016170:	240103b8 	.word	0x240103b8

08016174 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b08a      	sub	sp, #40	@ 0x28
 8016178:	af00      	add	r7, sp, #0
 801617a:	60f8      	str	r0, [r7, #12]
 801617c:	460b      	mov	r3, r1
 801617e:	607a      	str	r2, [r7, #4]
 8016180:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016182:	230a      	movs	r3, #10
 8016184:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8016186:	230a      	movs	r3, #10
 8016188:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801618a:	230a      	movs	r3, #10
 801618c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801618e:	2300      	movs	r3, #0
 8016190:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016192:	230a      	movs	r3, #10
 8016194:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016196:	2300      	movs	r3, #0
 8016198:	83bb      	strh	r3, [r7, #28]
 801619a:	2300      	movs	r3, #0
 801619c:	837b      	strh	r3, [r7, #26]
 801619e:	2300      	movs	r3, #0
 80161a0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161a2:	2300      	movs	r3, #0
 80161a4:	843b      	strh	r3, [r7, #32]
 80161a6:	e0ae      	b.n	8016306 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80161a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80161ac:	49a6      	ldr	r1, [pc, #664]	@ (8016448 <etharp_find_entry+0x2d4>)
 80161ae:	4613      	mov	r3, r2
 80161b0:	005b      	lsls	r3, r3, #1
 80161b2:	4413      	add	r3, r2
 80161b4:	00db      	lsls	r3, r3, #3
 80161b6:	440b      	add	r3, r1
 80161b8:	3314      	adds	r3, #20
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80161be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80161c2:	2b0a      	cmp	r3, #10
 80161c4:	d105      	bne.n	80161d2 <etharp_find_entry+0x5e>
 80161c6:	7dfb      	ldrb	r3, [r7, #23]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d102      	bne.n	80161d2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80161cc:	8c3b      	ldrh	r3, [r7, #32]
 80161ce:	847b      	strh	r3, [r7, #34]	@ 0x22
 80161d0:	e095      	b.n	80162fe <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80161d2:	7dfb      	ldrb	r3, [r7, #23]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	f000 8092 	beq.w	80162fe <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80161da:	7dfb      	ldrb	r3, [r7, #23]
 80161dc:	2b01      	cmp	r3, #1
 80161de:	d009      	beq.n	80161f4 <etharp_find_entry+0x80>
 80161e0:	7dfb      	ldrb	r3, [r7, #23]
 80161e2:	2b01      	cmp	r3, #1
 80161e4:	d806      	bhi.n	80161f4 <etharp_find_entry+0x80>
 80161e6:	4b99      	ldr	r3, [pc, #612]	@ (801644c <etharp_find_entry+0x2d8>)
 80161e8:	f240 1223 	movw	r2, #291	@ 0x123
 80161ec:	4998      	ldr	r1, [pc, #608]	@ (8016450 <etharp_find_entry+0x2dc>)
 80161ee:	4899      	ldr	r0, [pc, #612]	@ (8016454 <etharp_find_entry+0x2e0>)
 80161f0:	f002 fbe8 	bl	80189c4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d020      	beq.n	801623c <etharp_find_entry+0xc8>
 80161fa:	68fb      	ldr	r3, [r7, #12]
 80161fc:	6819      	ldr	r1, [r3, #0]
 80161fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016202:	4891      	ldr	r0, [pc, #580]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016204:	4613      	mov	r3, r2
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	4413      	add	r3, r2
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	4403      	add	r3, r0
 801620e:	3304      	adds	r3, #4
 8016210:	681b      	ldr	r3, [r3, #0]
 8016212:	4299      	cmp	r1, r3
 8016214:	d112      	bne.n	801623c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	d00c      	beq.n	8016236 <etharp_find_entry+0xc2>
 801621c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016220:	4989      	ldr	r1, [pc, #548]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016222:	4613      	mov	r3, r2
 8016224:	005b      	lsls	r3, r3, #1
 8016226:	4413      	add	r3, r2
 8016228:	00db      	lsls	r3, r3, #3
 801622a:	440b      	add	r3, r1
 801622c:	3308      	adds	r3, #8
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	687a      	ldr	r2, [r7, #4]
 8016232:	429a      	cmp	r2, r3
 8016234:	d102      	bne.n	801623c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016236:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801623a:	e100      	b.n	801643e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801623c:	7dfb      	ldrb	r3, [r7, #23]
 801623e:	2b01      	cmp	r3, #1
 8016240:	d140      	bne.n	80162c4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016242:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016246:	4980      	ldr	r1, [pc, #512]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016248:	4613      	mov	r3, r2
 801624a:	005b      	lsls	r3, r3, #1
 801624c:	4413      	add	r3, r2
 801624e:	00db      	lsls	r3, r3, #3
 8016250:	440b      	add	r3, r1
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d01a      	beq.n	801628e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016258:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801625c:	497a      	ldr	r1, [pc, #488]	@ (8016448 <etharp_find_entry+0x2d4>)
 801625e:	4613      	mov	r3, r2
 8016260:	005b      	lsls	r3, r3, #1
 8016262:	4413      	add	r3, r2
 8016264:	00db      	lsls	r3, r3, #3
 8016266:	440b      	add	r3, r1
 8016268:	3312      	adds	r3, #18
 801626a:	881b      	ldrh	r3, [r3, #0]
 801626c:	8bba      	ldrh	r2, [r7, #28]
 801626e:	429a      	cmp	r2, r3
 8016270:	d845      	bhi.n	80162fe <etharp_find_entry+0x18a>
            old_queue = i;
 8016272:	8c3b      	ldrh	r3, [r7, #32]
 8016274:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016276:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801627a:	4973      	ldr	r1, [pc, #460]	@ (8016448 <etharp_find_entry+0x2d4>)
 801627c:	4613      	mov	r3, r2
 801627e:	005b      	lsls	r3, r3, #1
 8016280:	4413      	add	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	440b      	add	r3, r1
 8016286:	3312      	adds	r3, #18
 8016288:	881b      	ldrh	r3, [r3, #0]
 801628a:	83bb      	strh	r3, [r7, #28]
 801628c:	e037      	b.n	80162fe <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801628e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016292:	496d      	ldr	r1, [pc, #436]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016294:	4613      	mov	r3, r2
 8016296:	005b      	lsls	r3, r3, #1
 8016298:	4413      	add	r3, r2
 801629a:	00db      	lsls	r3, r3, #3
 801629c:	440b      	add	r3, r1
 801629e:	3312      	adds	r3, #18
 80162a0:	881b      	ldrh	r3, [r3, #0]
 80162a2:	8b7a      	ldrh	r2, [r7, #26]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d82a      	bhi.n	80162fe <etharp_find_entry+0x18a>
            old_pending = i;
 80162a8:	8c3b      	ldrh	r3, [r7, #32]
 80162aa:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 80162ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162b0:	4965      	ldr	r1, [pc, #404]	@ (8016448 <etharp_find_entry+0x2d4>)
 80162b2:	4613      	mov	r3, r2
 80162b4:	005b      	lsls	r3, r3, #1
 80162b6:	4413      	add	r3, r2
 80162b8:	00db      	lsls	r3, r3, #3
 80162ba:	440b      	add	r3, r1
 80162bc:	3312      	adds	r3, #18
 80162be:	881b      	ldrh	r3, [r3, #0]
 80162c0:	837b      	strh	r3, [r7, #26]
 80162c2:	e01c      	b.n	80162fe <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80162c4:	7dfb      	ldrb	r3, [r7, #23]
 80162c6:	2b01      	cmp	r3, #1
 80162c8:	d919      	bls.n	80162fe <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80162ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ce:	495e      	ldr	r1, [pc, #376]	@ (8016448 <etharp_find_entry+0x2d4>)
 80162d0:	4613      	mov	r3, r2
 80162d2:	005b      	lsls	r3, r3, #1
 80162d4:	4413      	add	r3, r2
 80162d6:	00db      	lsls	r3, r3, #3
 80162d8:	440b      	add	r3, r1
 80162da:	3312      	adds	r3, #18
 80162dc:	881b      	ldrh	r3, [r3, #0]
 80162de:	8b3a      	ldrh	r2, [r7, #24]
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d80c      	bhi.n	80162fe <etharp_find_entry+0x18a>
            old_stable = i;
 80162e4:	8c3b      	ldrh	r3, [r7, #32]
 80162e6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80162e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80162ec:	4956      	ldr	r1, [pc, #344]	@ (8016448 <etharp_find_entry+0x2d4>)
 80162ee:	4613      	mov	r3, r2
 80162f0:	005b      	lsls	r3, r3, #1
 80162f2:	4413      	add	r3, r2
 80162f4:	00db      	lsls	r3, r3, #3
 80162f6:	440b      	add	r3, r1
 80162f8:	3312      	adds	r3, #18
 80162fa:	881b      	ldrh	r3, [r3, #0]
 80162fc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80162fe:	8c3b      	ldrh	r3, [r7, #32]
 8016300:	3301      	adds	r3, #1
 8016302:	b29b      	uxth	r3, r3
 8016304:	843b      	strh	r3, [r7, #32]
 8016306:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801630a:	2b09      	cmp	r3, #9
 801630c:	f77f af4c 	ble.w	80161a8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016310:	7afb      	ldrb	r3, [r7, #11]
 8016312:	f003 0302 	and.w	r3, r3, #2
 8016316:	2b00      	cmp	r3, #0
 8016318:	d108      	bne.n	801632c <etharp_find_entry+0x1b8>
 801631a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801631e:	2b0a      	cmp	r3, #10
 8016320:	d107      	bne.n	8016332 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016322:	7afb      	ldrb	r3, [r7, #11]
 8016324:	f003 0301 	and.w	r3, r3, #1
 8016328:	2b00      	cmp	r3, #0
 801632a:	d102      	bne.n	8016332 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801632c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016330:	e085      	b.n	801643e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016332:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8016336:	2b09      	cmp	r3, #9
 8016338:	dc02      	bgt.n	8016340 <etharp_find_entry+0x1cc>
    i = empty;
 801633a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801633c:	843b      	strh	r3, [r7, #32]
 801633e:	e039      	b.n	80163b4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016340:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8016344:	2b09      	cmp	r3, #9
 8016346:	dc14      	bgt.n	8016372 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801634a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801634c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016350:	493d      	ldr	r1, [pc, #244]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016352:	4613      	mov	r3, r2
 8016354:	005b      	lsls	r3, r3, #1
 8016356:	4413      	add	r3, r2
 8016358:	00db      	lsls	r3, r3, #3
 801635a:	440b      	add	r3, r1
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	2b00      	cmp	r3, #0
 8016360:	d018      	beq.n	8016394 <etharp_find_entry+0x220>
 8016362:	4b3a      	ldr	r3, [pc, #232]	@ (801644c <etharp_find_entry+0x2d8>)
 8016364:	f240 126d 	movw	r2, #365	@ 0x16d
 8016368:	493b      	ldr	r1, [pc, #236]	@ (8016458 <etharp_find_entry+0x2e4>)
 801636a:	483a      	ldr	r0, [pc, #232]	@ (8016454 <etharp_find_entry+0x2e0>)
 801636c:	f002 fb2a 	bl	80189c4 <iprintf>
 8016370:	e010      	b.n	8016394 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016372:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8016376:	2b09      	cmp	r3, #9
 8016378:	dc02      	bgt.n	8016380 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801637a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801637c:	843b      	strh	r3, [r7, #32]
 801637e:	e009      	b.n	8016394 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016380:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016384:	2b09      	cmp	r3, #9
 8016386:	dc02      	bgt.n	801638e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016388:	8bfb      	ldrh	r3, [r7, #30]
 801638a:	843b      	strh	r3, [r7, #32]
 801638c:	e002      	b.n	8016394 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801638e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016392:	e054      	b.n	801643e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016394:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016398:	2b09      	cmp	r3, #9
 801639a:	dd06      	ble.n	80163aa <etharp_find_entry+0x236>
 801639c:	4b2b      	ldr	r3, [pc, #172]	@ (801644c <etharp_find_entry+0x2d8>)
 801639e:	f240 127f 	movw	r2, #383	@ 0x17f
 80163a2:	492e      	ldr	r1, [pc, #184]	@ (801645c <etharp_find_entry+0x2e8>)
 80163a4:	482b      	ldr	r0, [pc, #172]	@ (8016454 <etharp_find_entry+0x2e0>)
 80163a6:	f002 fb0d 	bl	80189c4 <iprintf>
    etharp_free_entry(i);
 80163aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163ae:	4618      	mov	r0, r3
 80163b0:	f7ff fe06 	bl	8015fc0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80163b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80163b8:	2b09      	cmp	r3, #9
 80163ba:	dd06      	ble.n	80163ca <etharp_find_entry+0x256>
 80163bc:	4b23      	ldr	r3, [pc, #140]	@ (801644c <etharp_find_entry+0x2d8>)
 80163be:	f240 1283 	movw	r2, #387	@ 0x183
 80163c2:	4926      	ldr	r1, [pc, #152]	@ (801645c <etharp_find_entry+0x2e8>)
 80163c4:	4823      	ldr	r0, [pc, #140]	@ (8016454 <etharp_find_entry+0x2e0>)
 80163c6:	f002 fafd 	bl	80189c4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80163ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163ce:	491e      	ldr	r1, [pc, #120]	@ (8016448 <etharp_find_entry+0x2d4>)
 80163d0:	4613      	mov	r3, r2
 80163d2:	005b      	lsls	r3, r3, #1
 80163d4:	4413      	add	r3, r2
 80163d6:	00db      	lsls	r3, r3, #3
 80163d8:	440b      	add	r3, r1
 80163da:	3314      	adds	r3, #20
 80163dc:	781b      	ldrb	r3, [r3, #0]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d006      	beq.n	80163f0 <etharp_find_entry+0x27c>
 80163e2:	4b1a      	ldr	r3, [pc, #104]	@ (801644c <etharp_find_entry+0x2d8>)
 80163e4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80163e8:	491d      	ldr	r1, [pc, #116]	@ (8016460 <etharp_find_entry+0x2ec>)
 80163ea:	481a      	ldr	r0, [pc, #104]	@ (8016454 <etharp_find_entry+0x2e0>)
 80163ec:	f002 faea 	bl	80189c4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d00b      	beq.n	801640e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80163f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	6819      	ldr	r1, [r3, #0]
 80163fe:	4812      	ldr	r0, [pc, #72]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016400:	4613      	mov	r3, r2
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	4413      	add	r3, r2
 8016406:	00db      	lsls	r3, r3, #3
 8016408:	4403      	add	r3, r0
 801640a:	3304      	adds	r3, #4
 801640c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801640e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016412:	490d      	ldr	r1, [pc, #52]	@ (8016448 <etharp_find_entry+0x2d4>)
 8016414:	4613      	mov	r3, r2
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	4413      	add	r3, r2
 801641a:	00db      	lsls	r3, r3, #3
 801641c:	440b      	add	r3, r1
 801641e:	3312      	adds	r3, #18
 8016420:	2200      	movs	r2, #0
 8016422:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016424:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016428:	4907      	ldr	r1, [pc, #28]	@ (8016448 <etharp_find_entry+0x2d4>)
 801642a:	4613      	mov	r3, r2
 801642c:	005b      	lsls	r3, r3, #1
 801642e:	4413      	add	r3, r2
 8016430:	00db      	lsls	r3, r3, #3
 8016432:	440b      	add	r3, r1
 8016434:	3308      	adds	r3, #8
 8016436:	687a      	ldr	r2, [r7, #4]
 8016438:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801643a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801643e:	4618      	mov	r0, r3
 8016440:	3728      	adds	r7, #40	@ 0x28
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
 8016446:	bf00      	nop
 8016448:	240103b8 	.word	0x240103b8
 801644c:	0801bd58 	.word	0x0801bd58
 8016450:	0801bd90 	.word	0x0801bd90
 8016454:	0801bdd0 	.word	0x0801bdd0
 8016458:	0801bdf8 	.word	0x0801bdf8
 801645c:	0801be10 	.word	0x0801be10
 8016460:	0801be24 	.word	0x0801be24

08016464 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b088      	sub	sp, #32
 8016468:	af02      	add	r7, sp, #8
 801646a:	60f8      	str	r0, [r7, #12]
 801646c:	60b9      	str	r1, [r7, #8]
 801646e:	607a      	str	r2, [r7, #4]
 8016470:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016478:	2b06      	cmp	r3, #6
 801647a:	d006      	beq.n	801648a <etharp_update_arp_entry+0x26>
 801647c:	4b48      	ldr	r3, [pc, #288]	@ (80165a0 <etharp_update_arp_entry+0x13c>)
 801647e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8016482:	4948      	ldr	r1, [pc, #288]	@ (80165a4 <etharp_update_arp_entry+0x140>)
 8016484:	4848      	ldr	r0, [pc, #288]	@ (80165a8 <etharp_update_arp_entry+0x144>)
 8016486:	f002 fa9d 	bl	80189c4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d012      	beq.n	80164b6 <etharp_update_arp_entry+0x52>
 8016490:	68bb      	ldr	r3, [r7, #8]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	2b00      	cmp	r3, #0
 8016496:	d00e      	beq.n	80164b6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016498:	68bb      	ldr	r3, [r7, #8]
 801649a:	681b      	ldr	r3, [r3, #0]
 801649c:	68f9      	ldr	r1, [r7, #12]
 801649e:	4618      	mov	r0, r3
 80164a0:	f001 f924 	bl	80176ec <ip4_addr_isbroadcast_u32>
 80164a4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d105      	bne.n	80164b6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80164aa:	68bb      	ldr	r3, [r7, #8]
 80164ac:	681b      	ldr	r3, [r3, #0]
 80164ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80164b2:	2be0      	cmp	r3, #224	@ 0xe0
 80164b4:	d102      	bne.n	80164bc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164b6:	f06f 030f 	mvn.w	r3, #15
 80164ba:	e06c      	b.n	8016596 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80164bc:	78fb      	ldrb	r3, [r7, #3]
 80164be:	68fa      	ldr	r2, [r7, #12]
 80164c0:	4619      	mov	r1, r3
 80164c2:	68b8      	ldr	r0, [r7, #8]
 80164c4:	f7ff fe56 	bl	8016174 <etharp_find_entry>
 80164c8:	4603      	mov	r3, r0
 80164ca:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80164cc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	da02      	bge.n	80164da <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80164d4:	8afb      	ldrh	r3, [r7, #22]
 80164d6:	b25b      	sxtb	r3, r3
 80164d8:	e05d      	b.n	8016596 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80164da:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164de:	4933      	ldr	r1, [pc, #204]	@ (80165ac <etharp_update_arp_entry+0x148>)
 80164e0:	4613      	mov	r3, r2
 80164e2:	005b      	lsls	r3, r3, #1
 80164e4:	4413      	add	r3, r2
 80164e6:	00db      	lsls	r3, r3, #3
 80164e8:	440b      	add	r3, r1
 80164ea:	3314      	adds	r3, #20
 80164ec:	2202      	movs	r2, #2
 80164ee:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80164f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80164f4:	492d      	ldr	r1, [pc, #180]	@ (80165ac <etharp_update_arp_entry+0x148>)
 80164f6:	4613      	mov	r3, r2
 80164f8:	005b      	lsls	r3, r3, #1
 80164fa:	4413      	add	r3, r2
 80164fc:	00db      	lsls	r3, r3, #3
 80164fe:	440b      	add	r3, r1
 8016500:	3308      	adds	r3, #8
 8016502:	68fa      	ldr	r2, [r7, #12]
 8016504:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016506:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801650a:	4613      	mov	r3, r2
 801650c:	005b      	lsls	r3, r3, #1
 801650e:	4413      	add	r3, r2
 8016510:	00db      	lsls	r3, r3, #3
 8016512:	3308      	adds	r3, #8
 8016514:	4a25      	ldr	r2, [pc, #148]	@ (80165ac <etharp_update_arp_entry+0x148>)
 8016516:	4413      	add	r3, r2
 8016518:	3304      	adds	r3, #4
 801651a:	2206      	movs	r2, #6
 801651c:	6879      	ldr	r1, [r7, #4]
 801651e:	4618      	mov	r0, r3
 8016520:	f002 faf7 	bl	8018b12 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016524:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016528:	4920      	ldr	r1, [pc, #128]	@ (80165ac <etharp_update_arp_entry+0x148>)
 801652a:	4613      	mov	r3, r2
 801652c:	005b      	lsls	r3, r3, #1
 801652e:	4413      	add	r3, r2
 8016530:	00db      	lsls	r3, r3, #3
 8016532:	440b      	add	r3, r1
 8016534:	3312      	adds	r3, #18
 8016536:	2200      	movs	r2, #0
 8016538:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801653a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801653e:	491b      	ldr	r1, [pc, #108]	@ (80165ac <etharp_update_arp_entry+0x148>)
 8016540:	4613      	mov	r3, r2
 8016542:	005b      	lsls	r3, r3, #1
 8016544:	4413      	add	r3, r2
 8016546:	00db      	lsls	r3, r3, #3
 8016548:	440b      	add	r3, r1
 801654a:	681b      	ldr	r3, [r3, #0]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d021      	beq.n	8016594 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016550:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016554:	4915      	ldr	r1, [pc, #84]	@ (80165ac <etharp_update_arp_entry+0x148>)
 8016556:	4613      	mov	r3, r2
 8016558:	005b      	lsls	r3, r3, #1
 801655a:	4413      	add	r3, r2
 801655c:	00db      	lsls	r3, r3, #3
 801655e:	440b      	add	r3, r1
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016564:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016568:	4910      	ldr	r1, [pc, #64]	@ (80165ac <etharp_update_arp_entry+0x148>)
 801656a:	4613      	mov	r3, r2
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	4413      	add	r3, r2
 8016570:	00db      	lsls	r3, r3, #3
 8016572:	440b      	add	r3, r1
 8016574:	2200      	movs	r2, #0
 8016576:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801657e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016582:	9300      	str	r3, [sp, #0]
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	6939      	ldr	r1, [r7, #16]
 8016588:	68f8      	ldr	r0, [r7, #12]
 801658a:	f001 ffbd 	bl	8018508 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801658e:	6938      	ldr	r0, [r7, #16]
 8016590:	f7f9 faaa 	bl	800fae8 <pbuf_free>
  }
  return ERR_OK;
 8016594:	2300      	movs	r3, #0
}
 8016596:	4618      	mov	r0, r3
 8016598:	3718      	adds	r7, #24
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	0801bd58 	.word	0x0801bd58
 80165a4:	0801be50 	.word	0x0801be50
 80165a8:	0801bdd0 	.word	0x0801bdd0
 80165ac:	240103b8 	.word	0x240103b8

080165b0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b084      	sub	sp, #16
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165b8:	2300      	movs	r3, #0
 80165ba:	60fb      	str	r3, [r7, #12]
 80165bc:	e01e      	b.n	80165fc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80165be:	4913      	ldr	r1, [pc, #76]	@ (801660c <etharp_cleanup_netif+0x5c>)
 80165c0:	68fa      	ldr	r2, [r7, #12]
 80165c2:	4613      	mov	r3, r2
 80165c4:	005b      	lsls	r3, r3, #1
 80165c6:	4413      	add	r3, r2
 80165c8:	00db      	lsls	r3, r3, #3
 80165ca:	440b      	add	r3, r1
 80165cc:	3314      	adds	r3, #20
 80165ce:	781b      	ldrb	r3, [r3, #0]
 80165d0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80165d2:	7afb      	ldrb	r3, [r7, #11]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d00e      	beq.n	80165f6 <etharp_cleanup_netif+0x46>
 80165d8:	490c      	ldr	r1, [pc, #48]	@ (801660c <etharp_cleanup_netif+0x5c>)
 80165da:	68fa      	ldr	r2, [r7, #12]
 80165dc:	4613      	mov	r3, r2
 80165de:	005b      	lsls	r3, r3, #1
 80165e0:	4413      	add	r3, r2
 80165e2:	00db      	lsls	r3, r3, #3
 80165e4:	440b      	add	r3, r1
 80165e6:	3308      	adds	r3, #8
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	687a      	ldr	r2, [r7, #4]
 80165ec:	429a      	cmp	r2, r3
 80165ee:	d102      	bne.n	80165f6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80165f0:	68f8      	ldr	r0, [r7, #12]
 80165f2:	f7ff fce5 	bl	8015fc0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	3301      	adds	r3, #1
 80165fa:	60fb      	str	r3, [r7, #12]
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	2b09      	cmp	r3, #9
 8016600:	dddd      	ble.n	80165be <etharp_cleanup_netif+0xe>
    }
  }
}
 8016602:	bf00      	nop
 8016604:	bf00      	nop
 8016606:	3710      	adds	r7, #16
 8016608:	46bd      	mov	sp, r7
 801660a:	bd80      	pop	{r7, pc}
 801660c:	240103b8 	.word	0x240103b8

08016610 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016610:	b5b0      	push	{r4, r5, r7, lr}
 8016612:	b08a      	sub	sp, #40	@ 0x28
 8016614:	af04      	add	r7, sp, #16
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d107      	bne.n	8016630 <etharp_input+0x20>
 8016620:	4b3d      	ldr	r3, [pc, #244]	@ (8016718 <etharp_input+0x108>)
 8016622:	f240 228a 	movw	r2, #650	@ 0x28a
 8016626:	493d      	ldr	r1, [pc, #244]	@ (801671c <etharp_input+0x10c>)
 8016628:	483d      	ldr	r0, [pc, #244]	@ (8016720 <etharp_input+0x110>)
 801662a:	f002 f9cb 	bl	80189c4 <iprintf>
 801662e:	e06f      	b.n	8016710 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	685b      	ldr	r3, [r3, #4]
 8016634:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	881b      	ldrh	r3, [r3, #0]
 801663a:	b29b      	uxth	r3, r3
 801663c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016640:	d10c      	bne.n	801665c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016642:	693b      	ldr	r3, [r7, #16]
 8016644:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016646:	2b06      	cmp	r3, #6
 8016648:	d108      	bne.n	801665c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801664a:	693b      	ldr	r3, [r7, #16]
 801664c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801664e:	2b04      	cmp	r3, #4
 8016650:	d104      	bne.n	801665c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016652:	693b      	ldr	r3, [r7, #16]
 8016654:	885b      	ldrh	r3, [r3, #2]
 8016656:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016658:	2b08      	cmp	r3, #8
 801665a:	d003      	beq.n	8016664 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801665c:	6878      	ldr	r0, [r7, #4]
 801665e:	f7f9 fa43 	bl	800fae8 <pbuf_free>
    return;
 8016662:	e055      	b.n	8016710 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016664:	693b      	ldr	r3, [r7, #16]
 8016666:	330e      	adds	r3, #14
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	3318      	adds	r3, #24
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	3304      	adds	r3, #4
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b00      	cmp	r3, #0
 801667c:	d102      	bne.n	8016684 <etharp_input+0x74>
    for_us = 0;
 801667e:	2300      	movs	r3, #0
 8016680:	75fb      	strb	r3, [r7, #23]
 8016682:	e009      	b.n	8016698 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016684:	68ba      	ldr	r2, [r7, #8]
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	3304      	adds	r3, #4
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	429a      	cmp	r2, r3
 801668e:	bf0c      	ite	eq
 8016690:	2301      	moveq	r3, #1
 8016692:	2300      	movne	r3, #0
 8016694:	b2db      	uxtb	r3, r3
 8016696:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	f103 0208 	add.w	r2, r3, #8
 801669e:	7dfb      	ldrb	r3, [r7, #23]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d001      	beq.n	80166a8 <etharp_input+0x98>
 80166a4:	2301      	movs	r3, #1
 80166a6:	e000      	b.n	80166aa <etharp_input+0x9a>
 80166a8:	2302      	movs	r3, #2
 80166aa:	f107 010c 	add.w	r1, r7, #12
 80166ae:	6838      	ldr	r0, [r7, #0]
 80166b0:	f7ff fed8 	bl	8016464 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	88db      	ldrh	r3, [r3, #6]
 80166b8:	b29b      	uxth	r3, r3
 80166ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80166be:	d003      	beq.n	80166c8 <etharp_input+0xb8>
 80166c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80166c4:	d01e      	beq.n	8016704 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80166c6:	e020      	b.n	801670a <etharp_input+0xfa>
      if (for_us) {
 80166c8:	7dfb      	ldrb	r3, [r7, #23]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d01c      	beq.n	8016708 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80166ce:	683b      	ldr	r3, [r7, #0]
 80166d0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80166d4:	693b      	ldr	r3, [r7, #16]
 80166d6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80166e4:	693a      	ldr	r2, [r7, #16]
 80166e6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80166e8:	2102      	movs	r1, #2
 80166ea:	9103      	str	r1, [sp, #12]
 80166ec:	f107 010c 	add.w	r1, r7, #12
 80166f0:	9102      	str	r1, [sp, #8]
 80166f2:	9201      	str	r2, [sp, #4]
 80166f4:	9300      	str	r3, [sp, #0]
 80166f6:	462b      	mov	r3, r5
 80166f8:	4622      	mov	r2, r4
 80166fa:	4601      	mov	r1, r0
 80166fc:	6838      	ldr	r0, [r7, #0]
 80166fe:	f000 faeb 	bl	8016cd8 <etharp_raw>
      break;
 8016702:	e001      	b.n	8016708 <etharp_input+0xf8>
      break;
 8016704:	bf00      	nop
 8016706:	e000      	b.n	801670a <etharp_input+0xfa>
      break;
 8016708:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f7f9 f9ec 	bl	800fae8 <pbuf_free>
}
 8016710:	3718      	adds	r7, #24
 8016712:	46bd      	mov	sp, r7
 8016714:	bdb0      	pop	{r4, r5, r7, pc}
 8016716:	bf00      	nop
 8016718:	0801bd58 	.word	0x0801bd58
 801671c:	0801bea8 	.word	0x0801bea8
 8016720:	0801bdd0 	.word	0x0801bdd0

08016724 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b086      	sub	sp, #24
 8016728:	af02      	add	r7, sp, #8
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	4613      	mov	r3, r2
 8016730:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016732:	79fa      	ldrb	r2, [r7, #7]
 8016734:	4944      	ldr	r1, [pc, #272]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 8016736:	4613      	mov	r3, r2
 8016738:	005b      	lsls	r3, r3, #1
 801673a:	4413      	add	r3, r2
 801673c:	00db      	lsls	r3, r3, #3
 801673e:	440b      	add	r3, r1
 8016740:	3314      	adds	r3, #20
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	2b01      	cmp	r3, #1
 8016746:	d806      	bhi.n	8016756 <etharp_output_to_arp_index+0x32>
 8016748:	4b40      	ldr	r3, [pc, #256]	@ (801684c <etharp_output_to_arp_index+0x128>)
 801674a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801674e:	4940      	ldr	r1, [pc, #256]	@ (8016850 <etharp_output_to_arp_index+0x12c>)
 8016750:	4840      	ldr	r0, [pc, #256]	@ (8016854 <etharp_output_to_arp_index+0x130>)
 8016752:	f002 f937 	bl	80189c4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016756:	79fa      	ldrb	r2, [r7, #7]
 8016758:	493b      	ldr	r1, [pc, #236]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 801675a:	4613      	mov	r3, r2
 801675c:	005b      	lsls	r3, r3, #1
 801675e:	4413      	add	r3, r2
 8016760:	00db      	lsls	r3, r3, #3
 8016762:	440b      	add	r3, r1
 8016764:	3314      	adds	r3, #20
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	2b02      	cmp	r3, #2
 801676a:	d153      	bne.n	8016814 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801676c:	79fa      	ldrb	r2, [r7, #7]
 801676e:	4936      	ldr	r1, [pc, #216]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 8016770:	4613      	mov	r3, r2
 8016772:	005b      	lsls	r3, r3, #1
 8016774:	4413      	add	r3, r2
 8016776:	00db      	lsls	r3, r3, #3
 8016778:	440b      	add	r3, r1
 801677a:	3312      	adds	r3, #18
 801677c:	881b      	ldrh	r3, [r3, #0]
 801677e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8016782:	d919      	bls.n	80167b8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016784:	79fa      	ldrb	r2, [r7, #7]
 8016786:	4613      	mov	r3, r2
 8016788:	005b      	lsls	r3, r3, #1
 801678a:	4413      	add	r3, r2
 801678c:	00db      	lsls	r3, r3, #3
 801678e:	4a2e      	ldr	r2, [pc, #184]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 8016790:	4413      	add	r3, r2
 8016792:	3304      	adds	r3, #4
 8016794:	4619      	mov	r1, r3
 8016796:	68f8      	ldr	r0, [r7, #12]
 8016798:	f000 fb4c 	bl	8016e34 <etharp_request>
 801679c:	4603      	mov	r3, r0
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d138      	bne.n	8016814 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80167a2:	79fa      	ldrb	r2, [r7, #7]
 80167a4:	4928      	ldr	r1, [pc, #160]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 80167a6:	4613      	mov	r3, r2
 80167a8:	005b      	lsls	r3, r3, #1
 80167aa:	4413      	add	r3, r2
 80167ac:	00db      	lsls	r3, r3, #3
 80167ae:	440b      	add	r3, r1
 80167b0:	3314      	adds	r3, #20
 80167b2:	2203      	movs	r2, #3
 80167b4:	701a      	strb	r2, [r3, #0]
 80167b6:	e02d      	b.n	8016814 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80167b8:	79fa      	ldrb	r2, [r7, #7]
 80167ba:	4923      	ldr	r1, [pc, #140]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 80167bc:	4613      	mov	r3, r2
 80167be:	005b      	lsls	r3, r3, #1
 80167c0:	4413      	add	r3, r2
 80167c2:	00db      	lsls	r3, r3, #3
 80167c4:	440b      	add	r3, r1
 80167c6:	3312      	adds	r3, #18
 80167c8:	881b      	ldrh	r3, [r3, #0]
 80167ca:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 80167ce:	d321      	bcc.n	8016814 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80167d0:	79fa      	ldrb	r2, [r7, #7]
 80167d2:	4613      	mov	r3, r2
 80167d4:	005b      	lsls	r3, r3, #1
 80167d6:	4413      	add	r3, r2
 80167d8:	00db      	lsls	r3, r3, #3
 80167da:	4a1b      	ldr	r2, [pc, #108]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 80167dc:	4413      	add	r3, r2
 80167de:	1d19      	adds	r1, r3, #4
 80167e0:	79fa      	ldrb	r2, [r7, #7]
 80167e2:	4613      	mov	r3, r2
 80167e4:	005b      	lsls	r3, r3, #1
 80167e6:	4413      	add	r3, r2
 80167e8:	00db      	lsls	r3, r3, #3
 80167ea:	3308      	adds	r3, #8
 80167ec:	4a16      	ldr	r2, [pc, #88]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 80167ee:	4413      	add	r3, r2
 80167f0:	3304      	adds	r3, #4
 80167f2:	461a      	mov	r2, r3
 80167f4:	68f8      	ldr	r0, [r7, #12]
 80167f6:	f000 fafb 	bl	8016df0 <etharp_request_dst>
 80167fa:	4603      	mov	r3, r0
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d109      	bne.n	8016814 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016800:	79fa      	ldrb	r2, [r7, #7]
 8016802:	4911      	ldr	r1, [pc, #68]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 8016804:	4613      	mov	r3, r2
 8016806:	005b      	lsls	r3, r3, #1
 8016808:	4413      	add	r3, r2
 801680a:	00db      	lsls	r3, r3, #3
 801680c:	440b      	add	r3, r1
 801680e:	3314      	adds	r3, #20
 8016810:	2203      	movs	r2, #3
 8016812:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801681a:	79fa      	ldrb	r2, [r7, #7]
 801681c:	4613      	mov	r3, r2
 801681e:	005b      	lsls	r3, r3, #1
 8016820:	4413      	add	r3, r2
 8016822:	00db      	lsls	r3, r3, #3
 8016824:	3308      	adds	r3, #8
 8016826:	4a08      	ldr	r2, [pc, #32]	@ (8016848 <etharp_output_to_arp_index+0x124>)
 8016828:	4413      	add	r3, r2
 801682a:	3304      	adds	r3, #4
 801682c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016830:	9200      	str	r2, [sp, #0]
 8016832:	460a      	mov	r2, r1
 8016834:	68b9      	ldr	r1, [r7, #8]
 8016836:	68f8      	ldr	r0, [r7, #12]
 8016838:	f001 fe66 	bl	8018508 <ethernet_output>
 801683c:	4603      	mov	r3, r0
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}
 8016846:	bf00      	nop
 8016848:	240103b8 	.word	0x240103b8
 801684c:	0801bd58 	.word	0x0801bd58
 8016850:	0801bec8 	.word	0x0801bec8
 8016854:	0801bdd0 	.word	0x0801bdd0

08016858 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016858:	b580      	push	{r7, lr}
 801685a:	b08a      	sub	sp, #40	@ 0x28
 801685c:	af02      	add	r7, sp, #8
 801685e:	60f8      	str	r0, [r7, #12]
 8016860:	60b9      	str	r1, [r7, #8]
 8016862:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d106      	bne.n	801687c <etharp_output+0x24>
 801686e:	4b73      	ldr	r3, [pc, #460]	@ (8016a3c <etharp_output+0x1e4>)
 8016870:	f240 321e 	movw	r2, #798	@ 0x31e
 8016874:	4972      	ldr	r1, [pc, #456]	@ (8016a40 <etharp_output+0x1e8>)
 8016876:	4873      	ldr	r0, [pc, #460]	@ (8016a44 <etharp_output+0x1ec>)
 8016878:	f002 f8a4 	bl	80189c4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d106      	bne.n	8016890 <etharp_output+0x38>
 8016882:	4b6e      	ldr	r3, [pc, #440]	@ (8016a3c <etharp_output+0x1e4>)
 8016884:	f240 321f 	movw	r2, #799	@ 0x31f
 8016888:	496f      	ldr	r1, [pc, #444]	@ (8016a48 <etharp_output+0x1f0>)
 801688a:	486e      	ldr	r0, [pc, #440]	@ (8016a44 <etharp_output+0x1ec>)
 801688c:	f002 f89a 	bl	80189c4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d106      	bne.n	80168a4 <etharp_output+0x4c>
 8016896:	4b69      	ldr	r3, [pc, #420]	@ (8016a3c <etharp_output+0x1e4>)
 8016898:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801689c:	496b      	ldr	r1, [pc, #428]	@ (8016a4c <etharp_output+0x1f4>)
 801689e:	4869      	ldr	r0, [pc, #420]	@ (8016a44 <etharp_output+0x1ec>)
 80168a0:	f002 f890 	bl	80189c4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	68f9      	ldr	r1, [r7, #12]
 80168aa:	4618      	mov	r0, r3
 80168ac:	f000 ff1e 	bl	80176ec <ip4_addr_isbroadcast_u32>
 80168b0:	4603      	mov	r3, r0
 80168b2:	2b00      	cmp	r3, #0
 80168b4:	d002      	beq.n	80168bc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80168b6:	4b66      	ldr	r3, [pc, #408]	@ (8016a50 <etharp_output+0x1f8>)
 80168b8:	61fb      	str	r3, [r7, #28]
 80168ba:	e0af      	b.n	8016a1c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80168c4:	2be0      	cmp	r3, #224	@ 0xe0
 80168c6:	d118      	bne.n	80168fa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80168c8:	2301      	movs	r3, #1
 80168ca:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80168cc:	2300      	movs	r3, #0
 80168ce:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80168d0:	235e      	movs	r3, #94	@ 0x5e
 80168d2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	3301      	adds	r3, #1
 80168d8:	781b      	ldrb	r3, [r3, #0]
 80168da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80168de:	b2db      	uxtb	r3, r3
 80168e0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	3302      	adds	r3, #2
 80168e6:	781b      	ldrb	r3, [r3, #0]
 80168e8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	3303      	adds	r3, #3
 80168ee:	781b      	ldrb	r3, [r3, #0]
 80168f0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80168f2:	f107 0310 	add.w	r3, r7, #16
 80168f6:	61fb      	str	r3, [r7, #28]
 80168f8:	e090      	b.n	8016a1c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	3304      	adds	r3, #4
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	405a      	eors	r2, r3
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	3308      	adds	r3, #8
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	4013      	ands	r3, r2
 801690e:	2b00      	cmp	r3, #0
 8016910:	d012      	beq.n	8016938 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016918:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801691c:	4293      	cmp	r3, r2
 801691e:	d00b      	beq.n	8016938 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016920:	68fb      	ldr	r3, [r7, #12]
 8016922:	330c      	adds	r3, #12
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d003      	beq.n	8016932 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	330c      	adds	r3, #12
 801692e:	61bb      	str	r3, [r7, #24]
 8016930:	e002      	b.n	8016938 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016932:	f06f 0303 	mvn.w	r3, #3
 8016936:	e07d      	b.n	8016a34 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016938:	4b46      	ldr	r3, [pc, #280]	@ (8016a54 <etharp_output+0x1fc>)
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	4619      	mov	r1, r3
 801693e:	4a46      	ldr	r2, [pc, #280]	@ (8016a58 <etharp_output+0x200>)
 8016940:	460b      	mov	r3, r1
 8016942:	005b      	lsls	r3, r3, #1
 8016944:	440b      	add	r3, r1
 8016946:	00db      	lsls	r3, r3, #3
 8016948:	4413      	add	r3, r2
 801694a:	3314      	adds	r3, #20
 801694c:	781b      	ldrb	r3, [r3, #0]
 801694e:	2b01      	cmp	r3, #1
 8016950:	d925      	bls.n	801699e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016952:	4b40      	ldr	r3, [pc, #256]	@ (8016a54 <etharp_output+0x1fc>)
 8016954:	781b      	ldrb	r3, [r3, #0]
 8016956:	4619      	mov	r1, r3
 8016958:	4a3f      	ldr	r2, [pc, #252]	@ (8016a58 <etharp_output+0x200>)
 801695a:	460b      	mov	r3, r1
 801695c:	005b      	lsls	r3, r3, #1
 801695e:	440b      	add	r3, r1
 8016960:	00db      	lsls	r3, r3, #3
 8016962:	4413      	add	r3, r2
 8016964:	3308      	adds	r3, #8
 8016966:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016968:	68fa      	ldr	r2, [r7, #12]
 801696a:	429a      	cmp	r2, r3
 801696c:	d117      	bne.n	801699e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801696e:	69bb      	ldr	r3, [r7, #24]
 8016970:	681a      	ldr	r2, [r3, #0]
 8016972:	4b38      	ldr	r3, [pc, #224]	@ (8016a54 <etharp_output+0x1fc>)
 8016974:	781b      	ldrb	r3, [r3, #0]
 8016976:	4618      	mov	r0, r3
 8016978:	4937      	ldr	r1, [pc, #220]	@ (8016a58 <etharp_output+0x200>)
 801697a:	4603      	mov	r3, r0
 801697c:	005b      	lsls	r3, r3, #1
 801697e:	4403      	add	r3, r0
 8016980:	00db      	lsls	r3, r3, #3
 8016982:	440b      	add	r3, r1
 8016984:	3304      	adds	r3, #4
 8016986:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016988:	429a      	cmp	r2, r3
 801698a:	d108      	bne.n	801699e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801698c:	4b31      	ldr	r3, [pc, #196]	@ (8016a54 <etharp_output+0x1fc>)
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	461a      	mov	r2, r3
 8016992:	68b9      	ldr	r1, [r7, #8]
 8016994:	68f8      	ldr	r0, [r7, #12]
 8016996:	f7ff fec5 	bl	8016724 <etharp_output_to_arp_index>
 801699a:	4603      	mov	r3, r0
 801699c:	e04a      	b.n	8016a34 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801699e:	2300      	movs	r3, #0
 80169a0:	75fb      	strb	r3, [r7, #23]
 80169a2:	e031      	b.n	8016a08 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169a4:	7dfa      	ldrb	r2, [r7, #23]
 80169a6:	492c      	ldr	r1, [pc, #176]	@ (8016a58 <etharp_output+0x200>)
 80169a8:	4613      	mov	r3, r2
 80169aa:	005b      	lsls	r3, r3, #1
 80169ac:	4413      	add	r3, r2
 80169ae:	00db      	lsls	r3, r3, #3
 80169b0:	440b      	add	r3, r1
 80169b2:	3314      	adds	r3, #20
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	2b01      	cmp	r3, #1
 80169b8:	d923      	bls.n	8016a02 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80169ba:	7dfa      	ldrb	r2, [r7, #23]
 80169bc:	4926      	ldr	r1, [pc, #152]	@ (8016a58 <etharp_output+0x200>)
 80169be:	4613      	mov	r3, r2
 80169c0:	005b      	lsls	r3, r3, #1
 80169c2:	4413      	add	r3, r2
 80169c4:	00db      	lsls	r3, r3, #3
 80169c6:	440b      	add	r3, r1
 80169c8:	3308      	adds	r3, #8
 80169ca:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80169cc:	68fa      	ldr	r2, [r7, #12]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d117      	bne.n	8016a02 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80169d2:	69bb      	ldr	r3, [r7, #24]
 80169d4:	6819      	ldr	r1, [r3, #0]
 80169d6:	7dfa      	ldrb	r2, [r7, #23]
 80169d8:	481f      	ldr	r0, [pc, #124]	@ (8016a58 <etharp_output+0x200>)
 80169da:	4613      	mov	r3, r2
 80169dc:	005b      	lsls	r3, r3, #1
 80169de:	4413      	add	r3, r2
 80169e0:	00db      	lsls	r3, r3, #3
 80169e2:	4403      	add	r3, r0
 80169e4:	3304      	adds	r3, #4
 80169e6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80169e8:	4299      	cmp	r1, r3
 80169ea:	d10a      	bne.n	8016a02 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80169ec:	4a19      	ldr	r2, [pc, #100]	@ (8016a54 <etharp_output+0x1fc>)
 80169ee:	7dfb      	ldrb	r3, [r7, #23]
 80169f0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80169f2:	7dfb      	ldrb	r3, [r7, #23]
 80169f4:	461a      	mov	r2, r3
 80169f6:	68b9      	ldr	r1, [r7, #8]
 80169f8:	68f8      	ldr	r0, [r7, #12]
 80169fa:	f7ff fe93 	bl	8016724 <etharp_output_to_arp_index>
 80169fe:	4603      	mov	r3, r0
 8016a00:	e018      	b.n	8016a34 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016a02:	7dfb      	ldrb	r3, [r7, #23]
 8016a04:	3301      	adds	r3, #1
 8016a06:	75fb      	strb	r3, [r7, #23]
 8016a08:	7dfb      	ldrb	r3, [r7, #23]
 8016a0a:	2b09      	cmp	r3, #9
 8016a0c:	d9ca      	bls.n	80169a4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016a0e:	68ba      	ldr	r2, [r7, #8]
 8016a10:	69b9      	ldr	r1, [r7, #24]
 8016a12:	68f8      	ldr	r0, [r7, #12]
 8016a14:	f000 f822 	bl	8016a5c <etharp_query>
 8016a18:	4603      	mov	r3, r0
 8016a1a:	e00b      	b.n	8016a34 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8016a22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016a26:	9300      	str	r3, [sp, #0]
 8016a28:	69fb      	ldr	r3, [r7, #28]
 8016a2a:	68b9      	ldr	r1, [r7, #8]
 8016a2c:	68f8      	ldr	r0, [r7, #12]
 8016a2e:	f001 fd6b 	bl	8018508 <ethernet_output>
 8016a32:	4603      	mov	r3, r0
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3720      	adds	r7, #32
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}
 8016a3c:	0801bd58 	.word	0x0801bd58
 8016a40:	0801bea8 	.word	0x0801bea8
 8016a44:	0801bdd0 	.word	0x0801bdd0
 8016a48:	0801bef8 	.word	0x0801bef8
 8016a4c:	0801be98 	.word	0x0801be98
 8016a50:	0801c554 	.word	0x0801c554
 8016a54:	240104a8 	.word	0x240104a8
 8016a58:	240103b8 	.word	0x240103b8

08016a5c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b08c      	sub	sp, #48	@ 0x30
 8016a60:	af02      	add	r7, sp, #8
 8016a62:	60f8      	str	r0, [r7, #12]
 8016a64:	60b9      	str	r1, [r7, #8]
 8016a66:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	3326      	adds	r3, #38	@ 0x26
 8016a6c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016a6e:	23ff      	movs	r3, #255	@ 0xff
 8016a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8016a74:	2300      	movs	r3, #0
 8016a76:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	68f9      	ldr	r1, [r7, #12]
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f000 fe34 	bl	80176ec <ip4_addr_isbroadcast_u32>
 8016a84:	4603      	mov	r3, r0
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d10c      	bne.n	8016aa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a8a:	68bb      	ldr	r3, [r7, #8]
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016a92:	2be0      	cmp	r3, #224	@ 0xe0
 8016a94:	d006      	beq.n	8016aa4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016a96:	68bb      	ldr	r3, [r7, #8]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d003      	beq.n	8016aa4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016a9c:	68bb      	ldr	r3, [r7, #8]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d102      	bne.n	8016aaa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016aa4:	f06f 030f 	mvn.w	r3, #15
 8016aa8:	e101      	b.n	8016cae <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016aaa:	68fa      	ldr	r2, [r7, #12]
 8016aac:	2101      	movs	r1, #1
 8016aae:	68b8      	ldr	r0, [r7, #8]
 8016ab0:	f7ff fb60 	bl	8016174 <etharp_find_entry>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016ab8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	da02      	bge.n	8016ac6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016ac0:	8a7b      	ldrh	r3, [r7, #18]
 8016ac2:	b25b      	sxtb	r3, r3
 8016ac4:	e0f3      	b.n	8016cae <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016ac6:	8a7b      	ldrh	r3, [r7, #18]
 8016ac8:	2b7e      	cmp	r3, #126	@ 0x7e
 8016aca:	d906      	bls.n	8016ada <etharp_query+0x7e>
 8016acc:	4b7a      	ldr	r3, [pc, #488]	@ (8016cb8 <etharp_query+0x25c>)
 8016ace:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8016ad2:	497a      	ldr	r1, [pc, #488]	@ (8016cbc <etharp_query+0x260>)
 8016ad4:	487a      	ldr	r0, [pc, #488]	@ (8016cc0 <etharp_query+0x264>)
 8016ad6:	f001 ff75 	bl	80189c4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016ada:	8a7b      	ldrh	r3, [r7, #18]
 8016adc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016ade:	7c7a      	ldrb	r2, [r7, #17]
 8016ae0:	4978      	ldr	r1, [pc, #480]	@ (8016cc4 <etharp_query+0x268>)
 8016ae2:	4613      	mov	r3, r2
 8016ae4:	005b      	lsls	r3, r3, #1
 8016ae6:	4413      	add	r3, r2
 8016ae8:	00db      	lsls	r3, r3, #3
 8016aea:	440b      	add	r3, r1
 8016aec:	3314      	adds	r3, #20
 8016aee:	781b      	ldrb	r3, [r3, #0]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d115      	bne.n	8016b20 <etharp_query+0xc4>
    is_new_entry = 1;
 8016af4:	2301      	movs	r3, #1
 8016af6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016af8:	7c7a      	ldrb	r2, [r7, #17]
 8016afa:	4972      	ldr	r1, [pc, #456]	@ (8016cc4 <etharp_query+0x268>)
 8016afc:	4613      	mov	r3, r2
 8016afe:	005b      	lsls	r3, r3, #1
 8016b00:	4413      	add	r3, r2
 8016b02:	00db      	lsls	r3, r3, #3
 8016b04:	440b      	add	r3, r1
 8016b06:	3314      	adds	r3, #20
 8016b08:	2201      	movs	r2, #1
 8016b0a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016b0c:	7c7a      	ldrb	r2, [r7, #17]
 8016b0e:	496d      	ldr	r1, [pc, #436]	@ (8016cc4 <etharp_query+0x268>)
 8016b10:	4613      	mov	r3, r2
 8016b12:	005b      	lsls	r3, r3, #1
 8016b14:	4413      	add	r3, r2
 8016b16:	00db      	lsls	r3, r3, #3
 8016b18:	440b      	add	r3, r1
 8016b1a:	3308      	adds	r3, #8
 8016b1c:	68fa      	ldr	r2, [r7, #12]
 8016b1e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016b20:	7c7a      	ldrb	r2, [r7, #17]
 8016b22:	4968      	ldr	r1, [pc, #416]	@ (8016cc4 <etharp_query+0x268>)
 8016b24:	4613      	mov	r3, r2
 8016b26:	005b      	lsls	r3, r3, #1
 8016b28:	4413      	add	r3, r2
 8016b2a:	00db      	lsls	r3, r3, #3
 8016b2c:	440b      	add	r3, r1
 8016b2e:	3314      	adds	r3, #20
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d011      	beq.n	8016b5a <etharp_query+0xfe>
 8016b36:	7c7a      	ldrb	r2, [r7, #17]
 8016b38:	4962      	ldr	r1, [pc, #392]	@ (8016cc4 <etharp_query+0x268>)
 8016b3a:	4613      	mov	r3, r2
 8016b3c:	005b      	lsls	r3, r3, #1
 8016b3e:	4413      	add	r3, r2
 8016b40:	00db      	lsls	r3, r3, #3
 8016b42:	440b      	add	r3, r1
 8016b44:	3314      	adds	r3, #20
 8016b46:	781b      	ldrb	r3, [r3, #0]
 8016b48:	2b01      	cmp	r3, #1
 8016b4a:	d806      	bhi.n	8016b5a <etharp_query+0xfe>
 8016b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8016cb8 <etharp_query+0x25c>)
 8016b4e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8016b52:	495d      	ldr	r1, [pc, #372]	@ (8016cc8 <etharp_query+0x26c>)
 8016b54:	485a      	ldr	r0, [pc, #360]	@ (8016cc0 <etharp_query+0x264>)
 8016b56:	f001 ff35 	bl	80189c4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016b5a:	6a3b      	ldr	r3, [r7, #32]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d102      	bne.n	8016b66 <etharp_query+0x10a>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d10c      	bne.n	8016b80 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016b66:	68b9      	ldr	r1, [r7, #8]
 8016b68:	68f8      	ldr	r0, [r7, #12]
 8016b6a:	f000 f963 	bl	8016e34 <etharp_request>
 8016b6e:	4603      	mov	r3, r0
 8016b70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d102      	bne.n	8016b80 <etharp_query+0x124>
      return result;
 8016b7a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8016b7e:	e096      	b.n	8016cae <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d106      	bne.n	8016b94 <etharp_query+0x138>
 8016b86:	4b4c      	ldr	r3, [pc, #304]	@ (8016cb8 <etharp_query+0x25c>)
 8016b88:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8016b8c:	494f      	ldr	r1, [pc, #316]	@ (8016ccc <etharp_query+0x270>)
 8016b8e:	484c      	ldr	r0, [pc, #304]	@ (8016cc0 <etharp_query+0x264>)
 8016b90:	f001 ff18 	bl	80189c4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016b94:	7c7a      	ldrb	r2, [r7, #17]
 8016b96:	494b      	ldr	r1, [pc, #300]	@ (8016cc4 <etharp_query+0x268>)
 8016b98:	4613      	mov	r3, r2
 8016b9a:	005b      	lsls	r3, r3, #1
 8016b9c:	4413      	add	r3, r2
 8016b9e:	00db      	lsls	r3, r3, #3
 8016ba0:	440b      	add	r3, r1
 8016ba2:	3314      	adds	r3, #20
 8016ba4:	781b      	ldrb	r3, [r3, #0]
 8016ba6:	2b01      	cmp	r3, #1
 8016ba8:	d917      	bls.n	8016bda <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016baa:	4a49      	ldr	r2, [pc, #292]	@ (8016cd0 <etharp_query+0x274>)
 8016bac:	7c7b      	ldrb	r3, [r7, #17]
 8016bae:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016bb0:	7c7a      	ldrb	r2, [r7, #17]
 8016bb2:	4613      	mov	r3, r2
 8016bb4:	005b      	lsls	r3, r3, #1
 8016bb6:	4413      	add	r3, r2
 8016bb8:	00db      	lsls	r3, r3, #3
 8016bba:	3308      	adds	r3, #8
 8016bbc:	4a41      	ldr	r2, [pc, #260]	@ (8016cc4 <etharp_query+0x268>)
 8016bbe:	4413      	add	r3, r2
 8016bc0:	3304      	adds	r3, #4
 8016bc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016bc6:	9200      	str	r2, [sp, #0]
 8016bc8:	697a      	ldr	r2, [r7, #20]
 8016bca:	6879      	ldr	r1, [r7, #4]
 8016bcc:	68f8      	ldr	r0, [r7, #12]
 8016bce:	f001 fc9b 	bl	8018508 <ethernet_output>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016bd8:	e067      	b.n	8016caa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016bda:	7c7a      	ldrb	r2, [r7, #17]
 8016bdc:	4939      	ldr	r1, [pc, #228]	@ (8016cc4 <etharp_query+0x268>)
 8016bde:	4613      	mov	r3, r2
 8016be0:	005b      	lsls	r3, r3, #1
 8016be2:	4413      	add	r3, r2
 8016be4:	00db      	lsls	r3, r3, #3
 8016be6:	440b      	add	r3, r1
 8016be8:	3314      	adds	r3, #20
 8016bea:	781b      	ldrb	r3, [r3, #0]
 8016bec:	2b01      	cmp	r3, #1
 8016bee:	d15c      	bne.n	8016caa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016bf8:	e01c      	b.n	8016c34 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016bfa:	69fb      	ldr	r3, [r7, #28]
 8016bfc:	895a      	ldrh	r2, [r3, #10]
 8016bfe:	69fb      	ldr	r3, [r7, #28]
 8016c00:	891b      	ldrh	r3, [r3, #8]
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d10a      	bne.n	8016c1c <etharp_query+0x1c0>
 8016c06:	69fb      	ldr	r3, [r7, #28]
 8016c08:	681b      	ldr	r3, [r3, #0]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d006      	beq.n	8016c1c <etharp_query+0x1c0>
 8016c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8016cb8 <etharp_query+0x25c>)
 8016c10:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8016c14:	492f      	ldr	r1, [pc, #188]	@ (8016cd4 <etharp_query+0x278>)
 8016c16:	482a      	ldr	r0, [pc, #168]	@ (8016cc0 <etharp_query+0x264>)
 8016c18:	f001 fed4 	bl	80189c4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	7b1b      	ldrb	r3, [r3, #12]
 8016c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d002      	beq.n	8016c2e <etharp_query+0x1d2>
        copy_needed = 1;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	61bb      	str	r3, [r7, #24]
        break;
 8016c2c:	e005      	b.n	8016c3a <etharp_query+0x1de>
      }
      p = p->next;
 8016c2e:	69fb      	ldr	r3, [r7, #28]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016c34:	69fb      	ldr	r3, [r7, #28]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d1df      	bne.n	8016bfa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016c3a:	69bb      	ldr	r3, [r7, #24]
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d007      	beq.n	8016c50 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8016c46:	200e      	movs	r0, #14
 8016c48:	f7f9 f9c6 	bl	800ffd8 <pbuf_clone>
 8016c4c:	61f8      	str	r0, [r7, #28]
 8016c4e:	e004      	b.n	8016c5a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016c54:	69f8      	ldr	r0, [r7, #28]
 8016c56:	f7f8 ffed 	bl	800fc34 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016c5a:	69fb      	ldr	r3, [r7, #28]
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d021      	beq.n	8016ca4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016c60:	7c7a      	ldrb	r2, [r7, #17]
 8016c62:	4918      	ldr	r1, [pc, #96]	@ (8016cc4 <etharp_query+0x268>)
 8016c64:	4613      	mov	r3, r2
 8016c66:	005b      	lsls	r3, r3, #1
 8016c68:	4413      	add	r3, r2
 8016c6a:	00db      	lsls	r3, r3, #3
 8016c6c:	440b      	add	r3, r1
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d00a      	beq.n	8016c8a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016c74:	7c7a      	ldrb	r2, [r7, #17]
 8016c76:	4913      	ldr	r1, [pc, #76]	@ (8016cc4 <etharp_query+0x268>)
 8016c78:	4613      	mov	r3, r2
 8016c7a:	005b      	lsls	r3, r3, #1
 8016c7c:	4413      	add	r3, r2
 8016c7e:	00db      	lsls	r3, r3, #3
 8016c80:	440b      	add	r3, r1
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	4618      	mov	r0, r3
 8016c86:	f7f8 ff2f 	bl	800fae8 <pbuf_free>
      }
      arp_table[i].q = p;
 8016c8a:	7c7a      	ldrb	r2, [r7, #17]
 8016c8c:	490d      	ldr	r1, [pc, #52]	@ (8016cc4 <etharp_query+0x268>)
 8016c8e:	4613      	mov	r3, r2
 8016c90:	005b      	lsls	r3, r3, #1
 8016c92:	4413      	add	r3, r2
 8016c94:	00db      	lsls	r3, r3, #3
 8016c96:	440b      	add	r3, r1
 8016c98:	69fa      	ldr	r2, [r7, #28]
 8016c9a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016c9c:	2300      	movs	r3, #0
 8016c9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016ca2:	e002      	b.n	8016caa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016ca4:	23ff      	movs	r3, #255	@ 0xff
 8016ca6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8016caa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3728      	adds	r7, #40	@ 0x28
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	0801bd58 	.word	0x0801bd58
 8016cbc:	0801bf04 	.word	0x0801bf04
 8016cc0:	0801bdd0 	.word	0x0801bdd0
 8016cc4:	240103b8 	.word	0x240103b8
 8016cc8:	0801bf14 	.word	0x0801bf14
 8016ccc:	0801bef8 	.word	0x0801bef8
 8016cd0:	240104a8 	.word	0x240104a8
 8016cd4:	0801bf3c 	.word	0x0801bf3c

08016cd8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b08a      	sub	sp, #40	@ 0x28
 8016cdc:	af02      	add	r7, sp, #8
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
 8016ce4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d106      	bne.n	8016cfe <etharp_raw+0x26>
 8016cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8016ddc <etharp_raw+0x104>)
 8016cf2:	f240 4257 	movw	r2, #1111	@ 0x457
 8016cf6:	493a      	ldr	r1, [pc, #232]	@ (8016de0 <etharp_raw+0x108>)
 8016cf8:	483a      	ldr	r0, [pc, #232]	@ (8016de4 <etharp_raw+0x10c>)
 8016cfa:	f001 fe63 	bl	80189c4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8016cfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016d02:	211c      	movs	r1, #28
 8016d04:	200e      	movs	r0, #14
 8016d06:	f7f8 fc07 	bl	800f518 <pbuf_alloc>
 8016d0a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d102      	bne.n	8016d18 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8016d12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016d16:	e05d      	b.n	8016dd4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016d18:	69bb      	ldr	r3, [r7, #24]
 8016d1a:	895b      	ldrh	r3, [r3, #10]
 8016d1c:	2b1b      	cmp	r3, #27
 8016d1e:	d806      	bhi.n	8016d2e <etharp_raw+0x56>
 8016d20:	4b2e      	ldr	r3, [pc, #184]	@ (8016ddc <etharp_raw+0x104>)
 8016d22:	f240 4262 	movw	r2, #1122	@ 0x462
 8016d26:	4930      	ldr	r1, [pc, #192]	@ (8016de8 <etharp_raw+0x110>)
 8016d28:	482e      	ldr	r0, [pc, #184]	@ (8016de4 <etharp_raw+0x10c>)
 8016d2a:	f001 fe4b 	bl	80189c4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8016d2e:	69bb      	ldr	r3, [r7, #24]
 8016d30:	685b      	ldr	r3, [r3, #4]
 8016d32:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016d34:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7f7 fa18 	bl	800e16c <lwip_htons>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	461a      	mov	r2, r3
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016d44:	68fb      	ldr	r3, [r7, #12]
 8016d46:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8016d4a:	2b06      	cmp	r3, #6
 8016d4c:	d006      	beq.n	8016d5c <etharp_raw+0x84>
 8016d4e:	4b23      	ldr	r3, [pc, #140]	@ (8016ddc <etharp_raw+0x104>)
 8016d50:	f240 4269 	movw	r2, #1129	@ 0x469
 8016d54:	4925      	ldr	r1, [pc, #148]	@ (8016dec <etharp_raw+0x114>)
 8016d56:	4823      	ldr	r0, [pc, #140]	@ (8016de4 <etharp_raw+0x10c>)
 8016d58:	f001 fe34 	bl	80189c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016d5c:	697b      	ldr	r3, [r7, #20]
 8016d5e:	3308      	adds	r3, #8
 8016d60:	2206      	movs	r2, #6
 8016d62:	6839      	ldr	r1, [r7, #0]
 8016d64:	4618      	mov	r0, r3
 8016d66:	f001 fed4 	bl	8018b12 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	3312      	adds	r3, #18
 8016d6e:	2206      	movs	r2, #6
 8016d70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016d72:	4618      	mov	r0, r3
 8016d74:	f001 fecd 	bl	8018b12 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016d78:	697b      	ldr	r3, [r7, #20]
 8016d7a:	330e      	adds	r3, #14
 8016d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016d7e:	6812      	ldr	r2, [r2, #0]
 8016d80:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	3318      	adds	r3, #24
 8016d86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016d88:	6812      	ldr	r2, [r2, #0]
 8016d8a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	2200      	movs	r2, #0
 8016d90:	701a      	strb	r2, [r3, #0]
 8016d92:	2200      	movs	r2, #0
 8016d94:	f042 0201 	orr.w	r2, r2, #1
 8016d98:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	f042 0208 	orr.w	r2, r2, #8
 8016da2:	709a      	strb	r2, [r3, #2]
 8016da4:	2200      	movs	r2, #0
 8016da6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016da8:	697b      	ldr	r3, [r7, #20]
 8016daa:	2206      	movs	r2, #6
 8016dac:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	2204      	movs	r2, #4
 8016db2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8016db4:	f640 0306 	movw	r3, #2054	@ 0x806
 8016db8:	9300      	str	r3, [sp, #0]
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	68ba      	ldr	r2, [r7, #8]
 8016dbe:	69b9      	ldr	r1, [r7, #24]
 8016dc0:	68f8      	ldr	r0, [r7, #12]
 8016dc2:	f001 fba1 	bl	8018508 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016dc6:	69b8      	ldr	r0, [r7, #24]
 8016dc8:	f7f8 fe8e 	bl	800fae8 <pbuf_free>
  p = NULL;
 8016dcc:	2300      	movs	r3, #0
 8016dce:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016dd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3720      	adds	r7, #32
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}
 8016ddc:	0801bd58 	.word	0x0801bd58
 8016de0:	0801bea8 	.word	0x0801bea8
 8016de4:	0801bdd0 	.word	0x0801bdd0
 8016de8:	0801bf58 	.word	0x0801bf58
 8016dec:	0801bf8c 	.word	0x0801bf8c

08016df0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b088      	sub	sp, #32
 8016df4:	af04      	add	r7, sp, #16
 8016df6:	60f8      	str	r0, [r7, #12]
 8016df8:	60b9      	str	r1, [r7, #8]
 8016dfa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8016e08:	68fb      	ldr	r3, [r7, #12]
 8016e0a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	9203      	str	r2, [sp, #12]
 8016e10:	68ba      	ldr	r2, [r7, #8]
 8016e12:	9202      	str	r2, [sp, #8]
 8016e14:	4a06      	ldr	r2, [pc, #24]	@ (8016e30 <etharp_request_dst+0x40>)
 8016e16:	9201      	str	r2, [sp, #4]
 8016e18:	9300      	str	r3, [sp, #0]
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	687a      	ldr	r2, [r7, #4]
 8016e1e:	68f8      	ldr	r0, [r7, #12]
 8016e20:	f7ff ff5a 	bl	8016cd8 <etharp_raw>
 8016e24:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016e26:	4618      	mov	r0, r3
 8016e28:	3710      	adds	r7, #16
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bd80      	pop	{r7, pc}
 8016e2e:	bf00      	nop
 8016e30:	0801c55c 	.word	0x0801c55c

08016e34 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016e34:	b580      	push	{r7, lr}
 8016e36:	b082      	sub	sp, #8
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
 8016e3c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016e3e:	4a05      	ldr	r2, [pc, #20]	@ (8016e54 <etharp_request+0x20>)
 8016e40:	6839      	ldr	r1, [r7, #0]
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f7ff ffd4 	bl	8016df0 <etharp_request_dst>
 8016e48:	4603      	mov	r3, r0
}
 8016e4a:	4618      	mov	r0, r3
 8016e4c:	3708      	adds	r7, #8
 8016e4e:	46bd      	mov	sp, r7
 8016e50:	bd80      	pop	{r7, pc}
 8016e52:	bf00      	nop
 8016e54:	0801c554 	.word	0x0801c554

08016e58 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b08e      	sub	sp, #56	@ 0x38
 8016e5c:	af04      	add	r7, sp, #16
 8016e5e:	6078      	str	r0, [r7, #4]
 8016e60:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016e62:	4b87      	ldr	r3, [pc, #540]	@ (8017080 <icmp_input+0x228>)
 8016e64:	689b      	ldr	r3, [r3, #8]
 8016e66:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e6a:	781b      	ldrb	r3, [r3, #0]
 8016e6c:	f003 030f 	and.w	r3, r3, #15
 8016e70:	b2db      	uxtb	r3, r3
 8016e72:	009b      	lsls	r3, r3, #2
 8016e74:	b2db      	uxtb	r3, r3
 8016e76:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8016e78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016e7a:	2b13      	cmp	r3, #19
 8016e7c:	f240 80e8 	bls.w	8017050 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	895b      	ldrh	r3, [r3, #10]
 8016e84:	2b03      	cmp	r3, #3
 8016e86:	f240 80e5 	bls.w	8017054 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016e94:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	f000 80d2 	beq.w	8017042 <icmp_input+0x1ea>
 8016e9e:	2b08      	cmp	r3, #8
 8016ea0:	f040 80d2 	bne.w	8017048 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016ea4:	4b77      	ldr	r3, [pc, #476]	@ (8017084 <icmp_input+0x22c>)
 8016ea6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016ea8:	4b75      	ldr	r3, [pc, #468]	@ (8017080 <icmp_input+0x228>)
 8016eaa:	695b      	ldr	r3, [r3, #20]
 8016eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016eb0:	2be0      	cmp	r3, #224	@ 0xe0
 8016eb2:	f000 80d6 	beq.w	8017062 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016eb6:	4b72      	ldr	r3, [pc, #456]	@ (8017080 <icmp_input+0x228>)
 8016eb8:	695b      	ldr	r3, [r3, #20]
 8016eba:	4a71      	ldr	r2, [pc, #452]	@ (8017080 <icmp_input+0x228>)
 8016ebc:	6812      	ldr	r2, [r2, #0]
 8016ebe:	4611      	mov	r1, r2
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f000 fc13 	bl	80176ec <ip4_addr_isbroadcast_u32>
 8016ec6:	4603      	mov	r3, r0
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	f040 80cc 	bne.w	8017066 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	891b      	ldrh	r3, [r3, #8]
 8016ed2:	2b07      	cmp	r3, #7
 8016ed4:	f240 80c0 	bls.w	8017058 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f7f7 f9e4 	bl	800e2a6 <inet_chksum_pbuf>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d003      	beq.n	8016eec <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016ee4:	6878      	ldr	r0, [r7, #4]
 8016ee6:	f7f8 fdff 	bl	800fae8 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016eea:	e0c5      	b.n	8017078 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016eec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016eee:	330e      	adds	r3, #14
 8016ef0:	4619      	mov	r1, r3
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f7f8 fd62 	bl	800f9bc <pbuf_add_header>
 8016ef8:	4603      	mov	r3, r0
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d04b      	beq.n	8016f96 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	891a      	ldrh	r2, [r3, #8]
 8016f02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f04:	4413      	add	r3, r2
 8016f06:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	891b      	ldrh	r3, [r3, #8]
 8016f0c:	8b7a      	ldrh	r2, [r7, #26]
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	f0c0 80ab 	bcc.w	801706a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016f14:	8b7b      	ldrh	r3, [r7, #26]
 8016f16:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	200e      	movs	r0, #14
 8016f1e:	f7f8 fafb 	bl	800f518 <pbuf_alloc>
 8016f22:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016f24:	697b      	ldr	r3, [r7, #20]
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	f000 80a1 	beq.w	801706e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	895b      	ldrh	r3, [r3, #10]
 8016f30:	461a      	mov	r2, r3
 8016f32:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f34:	3308      	adds	r3, #8
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d203      	bcs.n	8016f42 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016f3a:	6978      	ldr	r0, [r7, #20]
 8016f3c:	f7f8 fdd4 	bl	800fae8 <pbuf_free>
          goto icmperr;
 8016f40:	e096      	b.n	8017070 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	685b      	ldr	r3, [r3, #4]
 8016f46:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8016f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f001 fde1 	bl	8018b12 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f52:	4619      	mov	r1, r3
 8016f54:	6978      	ldr	r0, [r7, #20]
 8016f56:	f7f8 fd41 	bl	800f9dc <pbuf_remove_header>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d009      	beq.n	8016f74 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016f60:	4b49      	ldr	r3, [pc, #292]	@ (8017088 <icmp_input+0x230>)
 8016f62:	22b6      	movs	r2, #182	@ 0xb6
 8016f64:	4949      	ldr	r1, [pc, #292]	@ (801708c <icmp_input+0x234>)
 8016f66:	484a      	ldr	r0, [pc, #296]	@ (8017090 <icmp_input+0x238>)
 8016f68:	f001 fd2c 	bl	80189c4 <iprintf>
          pbuf_free(r);
 8016f6c:	6978      	ldr	r0, [r7, #20]
 8016f6e:	f7f8 fdbb 	bl	800fae8 <pbuf_free>
          goto icmperr;
 8016f72:	e07d      	b.n	8017070 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016f74:	6879      	ldr	r1, [r7, #4]
 8016f76:	6978      	ldr	r0, [r7, #20]
 8016f78:	f7f8 feea 	bl	800fd50 <pbuf_copy>
 8016f7c:	4603      	mov	r3, r0
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d003      	beq.n	8016f8a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016f82:	6978      	ldr	r0, [r7, #20]
 8016f84:	f7f8 fdb0 	bl	800fae8 <pbuf_free>
          goto icmperr;
 8016f88:	e072      	b.n	8017070 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8016f8a:	6878      	ldr	r0, [r7, #4]
 8016f8c:	f7f8 fdac 	bl	800fae8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016f90:	697b      	ldr	r3, [r7, #20]
 8016f92:	607b      	str	r3, [r7, #4]
 8016f94:	e00f      	b.n	8016fb6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016f96:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016f98:	330e      	adds	r3, #14
 8016f9a:	4619      	mov	r1, r3
 8016f9c:	6878      	ldr	r0, [r7, #4]
 8016f9e:	f7f8 fd1d 	bl	800f9dc <pbuf_remove_header>
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d006      	beq.n	8016fb6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016fa8:	4b37      	ldr	r3, [pc, #220]	@ (8017088 <icmp_input+0x230>)
 8016faa:	22c7      	movs	r2, #199	@ 0xc7
 8016fac:	4939      	ldr	r1, [pc, #228]	@ (8017094 <icmp_input+0x23c>)
 8016fae:	4838      	ldr	r0, [pc, #224]	@ (8017090 <icmp_input+0x238>)
 8016fb0:	f001 fd08 	bl	80189c4 <iprintf>
          goto icmperr;
 8016fb4:	e05c      	b.n	8017070 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	685b      	ldr	r3, [r3, #4]
 8016fba:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016fbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8016fbe:	4619      	mov	r1, r3
 8016fc0:	6878      	ldr	r0, [r7, #4]
 8016fc2:	f7f8 fcfb 	bl	800f9bc <pbuf_add_header>
 8016fc6:	4603      	mov	r3, r0
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d13c      	bne.n	8017046 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016fd2:	69fb      	ldr	r3, [r7, #28]
 8016fd4:	681a      	ldr	r2, [r3, #0]
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016fda:	4b29      	ldr	r3, [pc, #164]	@ (8017080 <icmp_input+0x228>)
 8016fdc:	691a      	ldr	r2, [r3, #16]
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016fe2:	693b      	ldr	r3, [r7, #16]
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016fe8:	693b      	ldr	r3, [r7, #16]
 8016fea:	885b      	ldrh	r3, [r3, #2]
 8016fec:	b29b      	uxth	r3, r3
 8016fee:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8016ff2:	4293      	cmp	r3, r2
 8016ff4:	d907      	bls.n	8017006 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8016ff6:	693b      	ldr	r3, [r7, #16]
 8016ff8:	885b      	ldrh	r3, [r3, #2]
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	3309      	adds	r3, #9
 8016ffe:	b29a      	uxth	r2, r3
 8017000:	693b      	ldr	r3, [r7, #16]
 8017002:	805a      	strh	r2, [r3, #2]
 8017004:	e006      	b.n	8017014 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	885b      	ldrh	r3, [r3, #2]
 801700a:	b29b      	uxth	r3, r3
 801700c:	3308      	adds	r3, #8
 801700e:	b29a      	uxth	r2, r3
 8017010:	693b      	ldr	r3, [r7, #16]
 8017012:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	22ff      	movs	r2, #255	@ 0xff
 8017018:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801701a:	68fb      	ldr	r3, [r7, #12]
 801701c:	2200      	movs	r2, #0
 801701e:	729a      	strb	r2, [r3, #10]
 8017020:	2200      	movs	r2, #0
 8017022:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017024:	683b      	ldr	r3, [r7, #0]
 8017026:	9302      	str	r3, [sp, #8]
 8017028:	2301      	movs	r3, #1
 801702a:	9301      	str	r3, [sp, #4]
 801702c:	2300      	movs	r3, #0
 801702e:	9300      	str	r3, [sp, #0]
 8017030:	23ff      	movs	r3, #255	@ 0xff
 8017032:	2200      	movs	r2, #0
 8017034:	69f9      	ldr	r1, [r7, #28]
 8017036:	6878      	ldr	r0, [r7, #4]
 8017038:	f000 fa80 	bl	801753c <ip4_output_if>
 801703c:	4603      	mov	r3, r0
 801703e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017040:	e001      	b.n	8017046 <icmp_input+0x1ee>
      break;
 8017042:	bf00      	nop
 8017044:	e000      	b.n	8017048 <icmp_input+0x1f0>
      break;
 8017046:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f7f8 fd4d 	bl	800fae8 <pbuf_free>
  return;
 801704e:	e013      	b.n	8017078 <icmp_input+0x220>
    goto lenerr;
 8017050:	bf00      	nop
 8017052:	e002      	b.n	801705a <icmp_input+0x202>
    goto lenerr;
 8017054:	bf00      	nop
 8017056:	e000      	b.n	801705a <icmp_input+0x202>
        goto lenerr;
 8017058:	bf00      	nop
lenerr:
  pbuf_free(p);
 801705a:	6878      	ldr	r0, [r7, #4]
 801705c:	f7f8 fd44 	bl	800fae8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017060:	e00a      	b.n	8017078 <icmp_input+0x220>
        goto icmperr;
 8017062:	bf00      	nop
 8017064:	e004      	b.n	8017070 <icmp_input+0x218>
        goto icmperr;
 8017066:	bf00      	nop
 8017068:	e002      	b.n	8017070 <icmp_input+0x218>
          goto icmperr;
 801706a:	bf00      	nop
 801706c:	e000      	b.n	8017070 <icmp_input+0x218>
          goto icmperr;
 801706e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017070:	6878      	ldr	r0, [r7, #4]
 8017072:	f7f8 fd39 	bl	800fae8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017076:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017078:	3728      	adds	r7, #40	@ 0x28
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	24009898 	.word	0x24009898
 8017084:	240098ac 	.word	0x240098ac
 8017088:	0801bfd0 	.word	0x0801bfd0
 801708c:	0801c008 	.word	0x0801c008
 8017090:	0801c040 	.word	0x0801c040
 8017094:	0801c068 	.word	0x0801c068

08017098 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b082      	sub	sp, #8
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	460b      	mov	r3, r1
 80170a2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80170a4:	78fb      	ldrb	r3, [r7, #3]
 80170a6:	461a      	mov	r2, r3
 80170a8:	2103      	movs	r1, #3
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f000 f814 	bl	80170d8 <icmp_send_response>
}
 80170b0:	bf00      	nop
 80170b2:	3708      	adds	r7, #8
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bd80      	pop	{r7, pc}

080170b8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	460b      	mov	r3, r1
 80170c2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80170c4:	78fb      	ldrb	r3, [r7, #3]
 80170c6:	461a      	mov	r2, r3
 80170c8:	210b      	movs	r1, #11
 80170ca:	6878      	ldr	r0, [r7, #4]
 80170cc:	f000 f804 	bl	80170d8 <icmp_send_response>
}
 80170d0:	bf00      	nop
 80170d2:	3708      	adds	r7, #8
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}

080170d8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b08c      	sub	sp, #48	@ 0x30
 80170dc:	af04      	add	r7, sp, #16
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	460b      	mov	r3, r1
 80170e2:	70fb      	strb	r3, [r7, #3]
 80170e4:	4613      	mov	r3, r2
 80170e6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80170e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170ec:	2124      	movs	r1, #36	@ 0x24
 80170ee:	2022      	movs	r0, #34	@ 0x22
 80170f0:	f7f8 fa12 	bl	800f518 <pbuf_alloc>
 80170f4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80170f6:	69fb      	ldr	r3, [r7, #28]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d056      	beq.n	80171aa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80170fc:	69fb      	ldr	r3, [r7, #28]
 80170fe:	895b      	ldrh	r3, [r3, #10]
 8017100:	2b23      	cmp	r3, #35	@ 0x23
 8017102:	d806      	bhi.n	8017112 <icmp_send_response+0x3a>
 8017104:	4b2b      	ldr	r3, [pc, #172]	@ (80171b4 <icmp_send_response+0xdc>)
 8017106:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801710a:	492b      	ldr	r1, [pc, #172]	@ (80171b8 <icmp_send_response+0xe0>)
 801710c:	482b      	ldr	r0, [pc, #172]	@ (80171bc <icmp_send_response+0xe4>)
 801710e:	f001 fc59 	bl	80189c4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017118:	69fb      	ldr	r3, [r7, #28]
 801711a:	685b      	ldr	r3, [r3, #4]
 801711c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	78fa      	ldrb	r2, [r7, #3]
 8017122:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017124:	697b      	ldr	r3, [r7, #20]
 8017126:	78ba      	ldrb	r2, [r7, #2]
 8017128:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801712a:	697b      	ldr	r3, [r7, #20]
 801712c:	2200      	movs	r2, #0
 801712e:	711a      	strb	r2, [r3, #4]
 8017130:	2200      	movs	r2, #0
 8017132:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	2200      	movs	r2, #0
 8017138:	719a      	strb	r2, [r3, #6]
 801713a:	2200      	movs	r2, #0
 801713c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801713e:	69fb      	ldr	r3, [r7, #28]
 8017140:	685b      	ldr	r3, [r3, #4]
 8017142:	f103 0008 	add.w	r0, r3, #8
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	221c      	movs	r2, #28
 801714c:	4619      	mov	r1, r3
 801714e:	f001 fce0 	bl	8018b12 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	68db      	ldr	r3, [r3, #12]
 8017156:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017158:	f107 030c 	add.w	r3, r7, #12
 801715c:	4618      	mov	r0, r3
 801715e:	f000 f82f 	bl	80171c0 <ip4_route>
 8017162:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d01b      	beq.n	80171a2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801716a:	697b      	ldr	r3, [r7, #20]
 801716c:	2200      	movs	r2, #0
 801716e:	709a      	strb	r2, [r3, #2]
 8017170:	2200      	movs	r2, #0
 8017172:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8017174:	69fb      	ldr	r3, [r7, #28]
 8017176:	895b      	ldrh	r3, [r3, #10]
 8017178:	4619      	mov	r1, r3
 801717a:	6978      	ldr	r0, [r7, #20]
 801717c:	f7f7 f881 	bl	800e282 <inet_chksum>
 8017180:	4603      	mov	r3, r0
 8017182:	461a      	mov	r2, r3
 8017184:	697b      	ldr	r3, [r7, #20]
 8017186:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017188:	f107 020c 	add.w	r2, r7, #12
 801718c:	693b      	ldr	r3, [r7, #16]
 801718e:	9302      	str	r3, [sp, #8]
 8017190:	2301      	movs	r3, #1
 8017192:	9301      	str	r3, [sp, #4]
 8017194:	2300      	movs	r3, #0
 8017196:	9300      	str	r3, [sp, #0]
 8017198:	23ff      	movs	r3, #255	@ 0xff
 801719a:	2100      	movs	r1, #0
 801719c:	69f8      	ldr	r0, [r7, #28]
 801719e:	f000 f9cd 	bl	801753c <ip4_output_if>
  }
  pbuf_free(q);
 80171a2:	69f8      	ldr	r0, [r7, #28]
 80171a4:	f7f8 fca0 	bl	800fae8 <pbuf_free>
 80171a8:	e000      	b.n	80171ac <icmp_send_response+0xd4>
    return;
 80171aa:	bf00      	nop
}
 80171ac:	3720      	adds	r7, #32
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	0801bfd0 	.word	0x0801bfd0
 80171b8:	0801c09c 	.word	0x0801c09c
 80171bc:	0801c040 	.word	0x0801c040

080171c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80171c0:	b480      	push	{r7}
 80171c2:	b085      	sub	sp, #20
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80171c8:	4b33      	ldr	r3, [pc, #204]	@ (8017298 <ip4_route+0xd8>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	60fb      	str	r3, [r7, #12]
 80171ce:	e036      	b.n	801723e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80171d6:	f003 0301 	and.w	r3, r3, #1
 80171da:	b2db      	uxtb	r3, r3
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d02b      	beq.n	8017238 <ip4_route+0x78>
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80171e6:	089b      	lsrs	r3, r3, #2
 80171e8:	f003 0301 	and.w	r3, r3, #1
 80171ec:	b2db      	uxtb	r3, r3
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d022      	beq.n	8017238 <ip4_route+0x78>
 80171f2:	68fb      	ldr	r3, [r7, #12]
 80171f4:	3304      	adds	r3, #4
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d01d      	beq.n	8017238 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681a      	ldr	r2, [r3, #0]
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	3304      	adds	r3, #4
 8017204:	681b      	ldr	r3, [r3, #0]
 8017206:	405a      	eors	r2, r3
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	3308      	adds	r3, #8
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	4013      	ands	r3, r2
 8017210:	2b00      	cmp	r3, #0
 8017212:	d101      	bne.n	8017218 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	e038      	b.n	801728a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801721e:	f003 0302 	and.w	r3, r3, #2
 8017222:	2b00      	cmp	r3, #0
 8017224:	d108      	bne.n	8017238 <ip4_route+0x78>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	330c      	adds	r3, #12
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	429a      	cmp	r2, r3
 8017232:	d101      	bne.n	8017238 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	e028      	b.n	801728a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	60fb      	str	r3, [r7, #12]
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d1c5      	bne.n	80171d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017244:	4b15      	ldr	r3, [pc, #84]	@ (801729c <ip4_route+0xdc>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d01a      	beq.n	8017282 <ip4_route+0xc2>
 801724c:	4b13      	ldr	r3, [pc, #76]	@ (801729c <ip4_route+0xdc>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017254:	f003 0301 	and.w	r3, r3, #1
 8017258:	2b00      	cmp	r3, #0
 801725a:	d012      	beq.n	8017282 <ip4_route+0xc2>
 801725c:	4b0f      	ldr	r3, [pc, #60]	@ (801729c <ip4_route+0xdc>)
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017264:	f003 0304 	and.w	r3, r3, #4
 8017268:	2b00      	cmp	r3, #0
 801726a:	d00a      	beq.n	8017282 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801726c:	4b0b      	ldr	r3, [pc, #44]	@ (801729c <ip4_route+0xdc>)
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	3304      	adds	r3, #4
 8017272:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017274:	2b00      	cmp	r3, #0
 8017276:	d004      	beq.n	8017282 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681b      	ldr	r3, [r3, #0]
 801727c:	b2db      	uxtb	r3, r3
 801727e:	2b7f      	cmp	r3, #127	@ 0x7f
 8017280:	d101      	bne.n	8017286 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017282:	2300      	movs	r3, #0
 8017284:	e001      	b.n	801728a <ip4_route+0xca>
  }

  return netif_default;
 8017286:	4b05      	ldr	r3, [pc, #20]	@ (801729c <ip4_route+0xdc>)
 8017288:	681b      	ldr	r3, [r3, #0]
}
 801728a:	4618      	mov	r0, r3
 801728c:	3714      	adds	r7, #20
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr
 8017296:	bf00      	nop
 8017298:	2401034c 	.word	0x2401034c
 801729c:	24010350 	.word	0x24010350

080172a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80172a0:	b580      	push	{r7, lr}
 80172a2:	b082      	sub	sp, #8
 80172a4:	af00      	add	r7, sp, #0
 80172a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80172ae:	f003 0301 	and.w	r3, r3, #1
 80172b2:	b2db      	uxtb	r3, r3
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d016      	beq.n	80172e6 <ip4_input_accept+0x46>
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	3304      	adds	r3, #4
 80172bc:	681b      	ldr	r3, [r3, #0]
 80172be:	2b00      	cmp	r3, #0
 80172c0:	d011      	beq.n	80172e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172c2:	4b0b      	ldr	r3, [pc, #44]	@ (80172f0 <ip4_input_accept+0x50>)
 80172c4:	695a      	ldr	r2, [r3, #20]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	3304      	adds	r3, #4
 80172ca:	681b      	ldr	r3, [r3, #0]
 80172cc:	429a      	cmp	r2, r3
 80172ce:	d008      	beq.n	80172e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80172d0:	4b07      	ldr	r3, [pc, #28]	@ (80172f0 <ip4_input_accept+0x50>)
 80172d2:	695b      	ldr	r3, [r3, #20]
 80172d4:	6879      	ldr	r1, [r7, #4]
 80172d6:	4618      	mov	r0, r3
 80172d8:	f000 fa08 	bl	80176ec <ip4_addr_isbroadcast_u32>
 80172dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d001      	beq.n	80172e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80172e2:	2301      	movs	r3, #1
 80172e4:	e000      	b.n	80172e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80172e6:	2300      	movs	r3, #0
}
 80172e8:	4618      	mov	r0, r3
 80172ea:	3708      	adds	r7, #8
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}
 80172f0:	24009898 	.word	0x24009898

080172f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b086      	sub	sp, #24
 80172f8:	af00      	add	r7, sp, #0
 80172fa:	6078      	str	r0, [r7, #4]
 80172fc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	685b      	ldr	r3, [r3, #4]
 8017302:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	781b      	ldrb	r3, [r3, #0]
 8017308:	091b      	lsrs	r3, r3, #4
 801730a:	b2db      	uxtb	r3, r3
 801730c:	2b04      	cmp	r3, #4
 801730e:	d004      	beq.n	801731a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f7f8 fbe9 	bl	800fae8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017316:	2300      	movs	r3, #0
 8017318:	e107      	b.n	801752a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	781b      	ldrb	r3, [r3, #0]
 801731e:	f003 030f 	and.w	r3, r3, #15
 8017322:	b2db      	uxtb	r3, r3
 8017324:	009b      	lsls	r3, r3, #2
 8017326:	b2db      	uxtb	r3, r3
 8017328:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	885b      	ldrh	r3, [r3, #2]
 801732e:	b29b      	uxth	r3, r3
 8017330:	4618      	mov	r0, r3
 8017332:	f7f6 ff1b 	bl	800e16c <lwip_htons>
 8017336:	4603      	mov	r3, r0
 8017338:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	891b      	ldrh	r3, [r3, #8]
 801733e:	89ba      	ldrh	r2, [r7, #12]
 8017340:	429a      	cmp	r2, r3
 8017342:	d204      	bcs.n	801734e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017344:	89bb      	ldrh	r3, [r7, #12]
 8017346:	4619      	mov	r1, r3
 8017348:	6878      	ldr	r0, [r7, #4]
 801734a:	f7f8 fa47 	bl	800f7dc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	895b      	ldrh	r3, [r3, #10]
 8017352:	89fa      	ldrh	r2, [r7, #14]
 8017354:	429a      	cmp	r2, r3
 8017356:	d807      	bhi.n	8017368 <ip4_input+0x74>
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	891b      	ldrh	r3, [r3, #8]
 801735c:	89ba      	ldrh	r2, [r7, #12]
 801735e:	429a      	cmp	r2, r3
 8017360:	d802      	bhi.n	8017368 <ip4_input+0x74>
 8017362:	89fb      	ldrh	r3, [r7, #14]
 8017364:	2b13      	cmp	r3, #19
 8017366:	d804      	bhi.n	8017372 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7f8 fbbd 	bl	800fae8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801736e:	2300      	movs	r3, #0
 8017370:	e0db      	b.n	801752a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	691b      	ldr	r3, [r3, #16]
 8017376:	4a6f      	ldr	r2, [pc, #444]	@ (8017534 <ip4_input+0x240>)
 8017378:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801737a:	697b      	ldr	r3, [r7, #20]
 801737c:	68db      	ldr	r3, [r3, #12]
 801737e:	4a6d      	ldr	r2, [pc, #436]	@ (8017534 <ip4_input+0x240>)
 8017380:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017382:	4b6c      	ldr	r3, [pc, #432]	@ (8017534 <ip4_input+0x240>)
 8017384:	695b      	ldr	r3, [r3, #20]
 8017386:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801738a:	2be0      	cmp	r3, #224	@ 0xe0
 801738c:	d112      	bne.n	80173b4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801738e:	683b      	ldr	r3, [r7, #0]
 8017390:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017394:	f003 0301 	and.w	r3, r3, #1
 8017398:	b2db      	uxtb	r3, r3
 801739a:	2b00      	cmp	r3, #0
 801739c:	d007      	beq.n	80173ae <ip4_input+0xba>
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	3304      	adds	r3, #4
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d002      	beq.n	80173ae <ip4_input+0xba>
      netif = inp;
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	613b      	str	r3, [r7, #16]
 80173ac:	e02a      	b.n	8017404 <ip4_input+0x110>
    } else {
      netif = NULL;
 80173ae:	2300      	movs	r3, #0
 80173b0:	613b      	str	r3, [r7, #16]
 80173b2:	e027      	b.n	8017404 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80173b4:	6838      	ldr	r0, [r7, #0]
 80173b6:	f7ff ff73 	bl	80172a0 <ip4_input_accept>
 80173ba:	4603      	mov	r3, r0
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d002      	beq.n	80173c6 <ip4_input+0xd2>
      netif = inp;
 80173c0:	683b      	ldr	r3, [r7, #0]
 80173c2:	613b      	str	r3, [r7, #16]
 80173c4:	e01e      	b.n	8017404 <ip4_input+0x110>
    } else {
      netif = NULL;
 80173c6:	2300      	movs	r3, #0
 80173c8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80173ca:	4b5a      	ldr	r3, [pc, #360]	@ (8017534 <ip4_input+0x240>)
 80173cc:	695b      	ldr	r3, [r3, #20]
 80173ce:	b2db      	uxtb	r3, r3
 80173d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80173d2:	d017      	beq.n	8017404 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80173d4:	4b58      	ldr	r3, [pc, #352]	@ (8017538 <ip4_input+0x244>)
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	613b      	str	r3, [r7, #16]
 80173da:	e00e      	b.n	80173fa <ip4_input+0x106>
          if (netif == inp) {
 80173dc:	693a      	ldr	r2, [r7, #16]
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	429a      	cmp	r2, r3
 80173e2:	d006      	beq.n	80173f2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80173e4:	6938      	ldr	r0, [r7, #16]
 80173e6:	f7ff ff5b 	bl	80172a0 <ip4_input_accept>
 80173ea:	4603      	mov	r3, r0
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d108      	bne.n	8017402 <ip4_input+0x10e>
 80173f0:	e000      	b.n	80173f4 <ip4_input+0x100>
            continue;
 80173f2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80173f4:	693b      	ldr	r3, [r7, #16]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	613b      	str	r3, [r7, #16]
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d1ed      	bne.n	80173dc <ip4_input+0xe8>
 8017400:	e000      	b.n	8017404 <ip4_input+0x110>
            break;
 8017402:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017404:	4b4b      	ldr	r3, [pc, #300]	@ (8017534 <ip4_input+0x240>)
 8017406:	691b      	ldr	r3, [r3, #16]
 8017408:	6839      	ldr	r1, [r7, #0]
 801740a:	4618      	mov	r0, r3
 801740c:	f000 f96e 	bl	80176ec <ip4_addr_isbroadcast_u32>
 8017410:	4603      	mov	r3, r0
 8017412:	2b00      	cmp	r3, #0
 8017414:	d105      	bne.n	8017422 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017416:	4b47      	ldr	r3, [pc, #284]	@ (8017534 <ip4_input+0x240>)
 8017418:	691b      	ldr	r3, [r3, #16]
 801741a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801741e:	2be0      	cmp	r3, #224	@ 0xe0
 8017420:	d104      	bne.n	801742c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017422:	6878      	ldr	r0, [r7, #4]
 8017424:	f7f8 fb60 	bl	800fae8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017428:	2300      	movs	r3, #0
 801742a:	e07e      	b.n	801752a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801742c:	693b      	ldr	r3, [r7, #16]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d104      	bne.n	801743c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017432:	6878      	ldr	r0, [r7, #4]
 8017434:	f7f8 fb58 	bl	800fae8 <pbuf_free>
    return ERR_OK;
 8017438:	2300      	movs	r3, #0
 801743a:	e076      	b.n	801752a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801743c:	697b      	ldr	r3, [r7, #20]
 801743e:	88db      	ldrh	r3, [r3, #6]
 8017440:	b29b      	uxth	r3, r3
 8017442:	461a      	mov	r2, r3
 8017444:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 8017448:	4013      	ands	r3, r2
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00b      	beq.n	8017466 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f000 fc92 	bl	8017d78 <ip4_reass>
 8017454:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d101      	bne.n	8017460 <ip4_input+0x16c>
      return ERR_OK;
 801745c:	2300      	movs	r3, #0
 801745e:	e064      	b.n	801752a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	685b      	ldr	r3, [r3, #4]
 8017464:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017466:	4a33      	ldr	r2, [pc, #204]	@ (8017534 <ip4_input+0x240>)
 8017468:	693b      	ldr	r3, [r7, #16]
 801746a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801746c:	4a31      	ldr	r2, [pc, #196]	@ (8017534 <ip4_input+0x240>)
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017472:	4a30      	ldr	r2, [pc, #192]	@ (8017534 <ip4_input+0x240>)
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	f003 030f 	and.w	r3, r3, #15
 8017480:	b2db      	uxtb	r3, r3
 8017482:	009b      	lsls	r3, r3, #2
 8017484:	b2db      	uxtb	r3, r3
 8017486:	461a      	mov	r2, r3
 8017488:	4b2a      	ldr	r3, [pc, #168]	@ (8017534 <ip4_input+0x240>)
 801748a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801748c:	89fb      	ldrh	r3, [r7, #14]
 801748e:	4619      	mov	r1, r3
 8017490:	6878      	ldr	r0, [r7, #4]
 8017492:	f7f8 faa3 	bl	800f9dc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017496:	697b      	ldr	r3, [r7, #20]
 8017498:	7a5b      	ldrb	r3, [r3, #9]
 801749a:	2b11      	cmp	r3, #17
 801749c:	d006      	beq.n	80174ac <ip4_input+0x1b8>
 801749e:	2b11      	cmp	r3, #17
 80174a0:	dc13      	bgt.n	80174ca <ip4_input+0x1d6>
 80174a2:	2b01      	cmp	r3, #1
 80174a4:	d00c      	beq.n	80174c0 <ip4_input+0x1cc>
 80174a6:	2b06      	cmp	r3, #6
 80174a8:	d005      	beq.n	80174b6 <ip4_input+0x1c2>
 80174aa:	e00e      	b.n	80174ca <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80174ac:	6839      	ldr	r1, [r7, #0]
 80174ae:	6878      	ldr	r0, [r7, #4]
 80174b0:	f7fe f94a 	bl	8015748 <udp_input>
        break;
 80174b4:	e026      	b.n	8017504 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80174b6:	6839      	ldr	r1, [r7, #0]
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f7fa f95f 	bl	801177c <tcp_input>
        break;
 80174be:	e021      	b.n	8017504 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80174c0:	6839      	ldr	r1, [r7, #0]
 80174c2:	6878      	ldr	r0, [r7, #4]
 80174c4:	f7ff fcc8 	bl	8016e58 <icmp_input>
        break;
 80174c8:	e01c      	b.n	8017504 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174ca:	4b1a      	ldr	r3, [pc, #104]	@ (8017534 <ip4_input+0x240>)
 80174cc:	695b      	ldr	r3, [r3, #20]
 80174ce:	6939      	ldr	r1, [r7, #16]
 80174d0:	4618      	mov	r0, r3
 80174d2:	f000 f90b 	bl	80176ec <ip4_addr_isbroadcast_u32>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d10f      	bne.n	80174fc <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80174dc:	4b15      	ldr	r3, [pc, #84]	@ (8017534 <ip4_input+0x240>)
 80174de:	695b      	ldr	r3, [r3, #20]
 80174e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80174e4:	2be0      	cmp	r3, #224	@ 0xe0
 80174e6:	d009      	beq.n	80174fc <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80174e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80174ec:	4619      	mov	r1, r3
 80174ee:	6878      	ldr	r0, [r7, #4]
 80174f0:	f7f8 fae7 	bl	800fac2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80174f4:	2102      	movs	r1, #2
 80174f6:	6878      	ldr	r0, [r7, #4]
 80174f8:	f7ff fdce 	bl	8017098 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80174fc:	6878      	ldr	r0, [r7, #4]
 80174fe:	f7f8 faf3 	bl	800fae8 <pbuf_free>
        break;
 8017502:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017504:	4b0b      	ldr	r3, [pc, #44]	@ (8017534 <ip4_input+0x240>)
 8017506:	2200      	movs	r2, #0
 8017508:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801750a:	4b0a      	ldr	r3, [pc, #40]	@ (8017534 <ip4_input+0x240>)
 801750c:	2200      	movs	r2, #0
 801750e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017510:	4b08      	ldr	r3, [pc, #32]	@ (8017534 <ip4_input+0x240>)
 8017512:	2200      	movs	r2, #0
 8017514:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017516:	4b07      	ldr	r3, [pc, #28]	@ (8017534 <ip4_input+0x240>)
 8017518:	2200      	movs	r2, #0
 801751a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801751c:	4b05      	ldr	r3, [pc, #20]	@ (8017534 <ip4_input+0x240>)
 801751e:	2200      	movs	r2, #0
 8017520:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017522:	4b04      	ldr	r3, [pc, #16]	@ (8017534 <ip4_input+0x240>)
 8017524:	2200      	movs	r2, #0
 8017526:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017528:	2300      	movs	r3, #0
}
 801752a:	4618      	mov	r0, r3
 801752c:	3718      	adds	r7, #24
 801752e:	46bd      	mov	sp, r7
 8017530:	bd80      	pop	{r7, pc}
 8017532:	bf00      	nop
 8017534:	24009898 	.word	0x24009898
 8017538:	2401034c 	.word	0x2401034c

0801753c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b08a      	sub	sp, #40	@ 0x28
 8017540:	af04      	add	r7, sp, #16
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	60b9      	str	r1, [r7, #8]
 8017546:	607a      	str	r2, [r7, #4]
 8017548:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d009      	beq.n	8017568 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017554:	68bb      	ldr	r3, [r7, #8]
 8017556:	2b00      	cmp	r3, #0
 8017558:	d003      	beq.n	8017562 <ip4_output_if+0x26>
 801755a:	68bb      	ldr	r3, [r7, #8]
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d102      	bne.n	8017568 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017564:	3304      	adds	r3, #4
 8017566:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017568:	78fa      	ldrb	r2, [r7, #3]
 801756a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801756c:	9302      	str	r3, [sp, #8]
 801756e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017572:	9301      	str	r3, [sp, #4]
 8017574:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017578:	9300      	str	r3, [sp, #0]
 801757a:	4613      	mov	r3, r2
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	6979      	ldr	r1, [r7, #20]
 8017580:	68f8      	ldr	r0, [r7, #12]
 8017582:	f000 f805 	bl	8017590 <ip4_output_if_src>
 8017586:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017588:	4618      	mov	r0, r3
 801758a:	3718      	adds	r7, #24
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b088      	sub	sp, #32
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	60b9      	str	r1, [r7, #8]
 801759a:	607a      	str	r2, [r7, #4]
 801759c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	7b9b      	ldrb	r3, [r3, #14]
 80175a2:	2b01      	cmp	r3, #1
 80175a4:	d006      	beq.n	80175b4 <ip4_output_if_src+0x24>
 80175a6:	4b4b      	ldr	r3, [pc, #300]	@ (80176d4 <ip4_output_if_src+0x144>)
 80175a8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 80175ac:	494a      	ldr	r1, [pc, #296]	@ (80176d8 <ip4_output_if_src+0x148>)
 80175ae:	484b      	ldr	r0, [pc, #300]	@ (80176dc <ip4_output_if_src+0x14c>)
 80175b0:	f001 fa08 	bl	80189c4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d060      	beq.n	801767c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80175ba:	2314      	movs	r3, #20
 80175bc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80175be:	2114      	movs	r1, #20
 80175c0:	68f8      	ldr	r0, [r7, #12]
 80175c2:	f7f8 f9fb 	bl	800f9bc <pbuf_add_header>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d002      	beq.n	80175d2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80175cc:	f06f 0301 	mvn.w	r3, #1
 80175d0:	e07c      	b.n	80176cc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80175d2:	68fb      	ldr	r3, [r7, #12]
 80175d4:	685b      	ldr	r3, [r3, #4]
 80175d6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80175d8:	68fb      	ldr	r3, [r7, #12]
 80175da:	895b      	ldrh	r3, [r3, #10]
 80175dc:	2b13      	cmp	r3, #19
 80175de:	d806      	bhi.n	80175ee <ip4_output_if_src+0x5e>
 80175e0:	4b3c      	ldr	r3, [pc, #240]	@ (80176d4 <ip4_output_if_src+0x144>)
 80175e2:	f44f 7262 	mov.w	r2, #904	@ 0x388
 80175e6:	493e      	ldr	r1, [pc, #248]	@ (80176e0 <ip4_output_if_src+0x150>)
 80175e8:	483c      	ldr	r0, [pc, #240]	@ (80176dc <ip4_output_if_src+0x14c>)
 80175ea:	f001 f9eb 	bl	80189c4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80175ee:	69fb      	ldr	r3, [r7, #28]
 80175f0:	78fa      	ldrb	r2, [r7, #3]
 80175f2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80175fa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681a      	ldr	r2, [r3, #0]
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017604:	8b7b      	ldrh	r3, [r7, #26]
 8017606:	089b      	lsrs	r3, r3, #2
 8017608:	b29b      	uxth	r3, r3
 801760a:	b2db      	uxtb	r3, r3
 801760c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017610:	b2da      	uxtb	r2, r3
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017616:	69fb      	ldr	r3, [r7, #28]
 8017618:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801761c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	891b      	ldrh	r3, [r3, #8]
 8017622:	4618      	mov	r0, r3
 8017624:	f7f6 fda2 	bl	800e16c <lwip_htons>
 8017628:	4603      	mov	r3, r0
 801762a:	461a      	mov	r2, r3
 801762c:	69fb      	ldr	r3, [r7, #28]
 801762e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	2200      	movs	r2, #0
 8017634:	719a      	strb	r2, [r3, #6]
 8017636:	2200      	movs	r2, #0
 8017638:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801763a:	4b2a      	ldr	r3, [pc, #168]	@ (80176e4 <ip4_output_if_src+0x154>)
 801763c:	881b      	ldrh	r3, [r3, #0]
 801763e:	4618      	mov	r0, r3
 8017640:	f7f6 fd94 	bl	800e16c <lwip_htons>
 8017644:	4603      	mov	r3, r0
 8017646:	461a      	mov	r2, r3
 8017648:	69fb      	ldr	r3, [r7, #28]
 801764a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801764c:	4b25      	ldr	r3, [pc, #148]	@ (80176e4 <ip4_output_if_src+0x154>)
 801764e:	881b      	ldrh	r3, [r3, #0]
 8017650:	3301      	adds	r3, #1
 8017652:	b29a      	uxth	r2, r3
 8017654:	4b23      	ldr	r3, [pc, #140]	@ (80176e4 <ip4_output_if_src+0x154>)
 8017656:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d104      	bne.n	8017668 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801765e:	4b22      	ldr	r3, [pc, #136]	@ (80176e8 <ip4_output_if_src+0x158>)
 8017660:	681a      	ldr	r2, [r3, #0]
 8017662:	69fb      	ldr	r3, [r7, #28]
 8017664:	60da      	str	r2, [r3, #12]
 8017666:	e003      	b.n	8017670 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017668:	68bb      	ldr	r3, [r7, #8]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	69fb      	ldr	r3, [r7, #28]
 801766e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017670:	69fb      	ldr	r3, [r7, #28]
 8017672:	2200      	movs	r2, #0
 8017674:	729a      	strb	r2, [r3, #10]
 8017676:	2200      	movs	r2, #0
 8017678:	72da      	strb	r2, [r3, #11]
 801767a:	e00f      	b.n	801769c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	895b      	ldrh	r3, [r3, #10]
 8017680:	2b13      	cmp	r3, #19
 8017682:	d802      	bhi.n	801768a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017684:	f06f 0301 	mvn.w	r3, #1
 8017688:	e020      	b.n	80176cc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801768a:	68fb      	ldr	r3, [r7, #12]
 801768c:	685b      	ldr	r3, [r3, #4]
 801768e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017690:	69fb      	ldr	r3, [r7, #28]
 8017692:	691b      	ldr	r3, [r3, #16]
 8017694:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017696:	f107 0314 	add.w	r3, r7, #20
 801769a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801769c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801769e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d00c      	beq.n	80176be <ip4_output_if_src+0x12e>
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	891a      	ldrh	r2, [r3, #8]
 80176a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176aa:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d906      	bls.n	80176be <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80176b4:	68f8      	ldr	r0, [r7, #12]
 80176b6:	f000 fd53 	bl	8018160 <ip4_frag>
 80176ba:	4603      	mov	r3, r0
 80176bc:	e006      	b.n	80176cc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80176be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176c0:	695b      	ldr	r3, [r3, #20]
 80176c2:	687a      	ldr	r2, [r7, #4]
 80176c4:	68f9      	ldr	r1, [r7, #12]
 80176c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80176c8:	4798      	blx	r3
 80176ca:	4603      	mov	r3, r0
}
 80176cc:	4618      	mov	r0, r3
 80176ce:	3720      	adds	r7, #32
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	0801c0c8 	.word	0x0801c0c8
 80176d8:	0801c0fc 	.word	0x0801c0fc
 80176dc:	0801c108 	.word	0x0801c108
 80176e0:	0801c130 	.word	0x0801c130
 80176e4:	240104aa 	.word	0x240104aa
 80176e8:	0801c550 	.word	0x0801c550

080176ec <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b085      	sub	sp, #20
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
 80176f4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80176fa:	687b      	ldr	r3, [r7, #4]
 80176fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017700:	d002      	beq.n	8017708 <ip4_addr_isbroadcast_u32+0x1c>
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d101      	bne.n	801770c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017708:	2301      	movs	r3, #1
 801770a:	e02a      	b.n	8017762 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8017712:	f003 0302 	and.w	r3, r3, #2
 8017716:	2b00      	cmp	r3, #0
 8017718:	d101      	bne.n	801771e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801771a:	2300      	movs	r3, #0
 801771c:	e021      	b.n	8017762 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	3304      	adds	r3, #4
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	687a      	ldr	r2, [r7, #4]
 8017726:	429a      	cmp	r2, r3
 8017728:	d101      	bne.n	801772e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801772a:	2300      	movs	r3, #0
 801772c:	e019      	b.n	8017762 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801772e:	68fa      	ldr	r2, [r7, #12]
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	3304      	adds	r3, #4
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	405a      	eors	r2, r3
 8017738:	683b      	ldr	r3, [r7, #0]
 801773a:	3308      	adds	r3, #8
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	4013      	ands	r3, r2
 8017740:	2b00      	cmp	r3, #0
 8017742:	d10d      	bne.n	8017760 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	3308      	adds	r3, #8
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	43da      	mvns	r2, r3
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	3308      	adds	r3, #8
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017758:	429a      	cmp	r2, r3
 801775a:	d101      	bne.n	8017760 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801775c:	2301      	movs	r3, #1
 801775e:	e000      	b.n	8017762 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017760:	2300      	movs	r3, #0
  }
}
 8017762:	4618      	mov	r0, r3
 8017764:	3714      	adds	r7, #20
 8017766:	46bd      	mov	sp, r7
 8017768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776c:	4770      	bx	lr
	...

08017770 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b084      	sub	sp, #16
 8017774:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017776:	2300      	movs	r3, #0
 8017778:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801777a:	4b12      	ldr	r3, [pc, #72]	@ (80177c4 <ip_reass_tmr+0x54>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017780:	e018      	b.n	80177b4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7fdb      	ldrb	r3, [r3, #31]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d00b      	beq.n	80177a2 <ip_reass_tmr+0x32>
      r->timer--;
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	7fdb      	ldrb	r3, [r3, #31]
 801778e:	3b01      	subs	r3, #1
 8017790:	b2da      	uxtb	r2, r3
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	60fb      	str	r3, [r7, #12]
 80177a0:	e008      	b.n	80177b4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80177a2:	68fb      	ldr	r3, [r7, #12]
 80177a4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80177ac:	68b9      	ldr	r1, [r7, #8]
 80177ae:	6878      	ldr	r0, [r7, #4]
 80177b0:	f000 f80a 	bl	80177c8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1e3      	bne.n	8017782 <ip_reass_tmr+0x12>
    }
  }
}
 80177ba:	bf00      	nop
 80177bc:	bf00      	nop
 80177be:	3710      	adds	r7, #16
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	240104ac 	.word	0x240104ac

080177c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b088      	sub	sp, #32
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	6078      	str	r0, [r7, #4]
 80177d0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80177d2:	2300      	movs	r3, #0
 80177d4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80177d6:	683a      	ldr	r2, [r7, #0]
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	429a      	cmp	r2, r3
 80177dc:	d105      	bne.n	80177ea <ip_reass_free_complete_datagram+0x22>
 80177de:	4b45      	ldr	r3, [pc, #276]	@ (80178f4 <ip_reass_free_complete_datagram+0x12c>)
 80177e0:	22ab      	movs	r2, #171	@ 0xab
 80177e2:	4945      	ldr	r1, [pc, #276]	@ (80178f8 <ip_reass_free_complete_datagram+0x130>)
 80177e4:	4845      	ldr	r0, [pc, #276]	@ (80178fc <ip_reass_free_complete_datagram+0x134>)
 80177e6:	f001 f8ed 	bl	80189c4 <iprintf>
  if (prev != NULL) {
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d00a      	beq.n	8017806 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80177f0:	683b      	ldr	r3, [r7, #0]
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d005      	beq.n	8017806 <ip_reass_free_complete_datagram+0x3e>
 80177fa:	4b3e      	ldr	r3, [pc, #248]	@ (80178f4 <ip_reass_free_complete_datagram+0x12c>)
 80177fc:	22ad      	movs	r2, #173	@ 0xad
 80177fe:	4940      	ldr	r1, [pc, #256]	@ (8017900 <ip_reass_free_complete_datagram+0x138>)
 8017800:	483e      	ldr	r0, [pc, #248]	@ (80178fc <ip_reass_free_complete_datagram+0x134>)
 8017802:	f001 f8df 	bl	80189c4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	685b      	ldr	r3, [r3, #4]
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801780e:	697b      	ldr	r3, [r7, #20]
 8017810:	889b      	ldrh	r3, [r3, #4]
 8017812:	b29b      	uxth	r3, r3
 8017814:	2b00      	cmp	r3, #0
 8017816:	d12a      	bne.n	801786e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	685b      	ldr	r3, [r3, #4]
 801781c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801781e:	697b      	ldr	r3, [r7, #20]
 8017820:	681a      	ldr	r2, [r3, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017826:	69bb      	ldr	r3, [r7, #24]
 8017828:	6858      	ldr	r0, [r3, #4]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	3308      	adds	r3, #8
 801782e:	2214      	movs	r2, #20
 8017830:	4619      	mov	r1, r3
 8017832:	f001 f96e 	bl	8018b12 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017836:	2101      	movs	r1, #1
 8017838:	69b8      	ldr	r0, [r7, #24]
 801783a:	f7ff fc3d 	bl	80170b8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801783e:	69b8      	ldr	r0, [r7, #24]
 8017840:	f7f8 f9e0 	bl	800fc04 <pbuf_clen>
 8017844:	4603      	mov	r3, r0
 8017846:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017848:	8bfa      	ldrh	r2, [r7, #30]
 801784a:	8a7b      	ldrh	r3, [r7, #18]
 801784c:	4413      	add	r3, r2
 801784e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017852:	db05      	blt.n	8017860 <ip_reass_free_complete_datagram+0x98>
 8017854:	4b27      	ldr	r3, [pc, #156]	@ (80178f4 <ip_reass_free_complete_datagram+0x12c>)
 8017856:	22bc      	movs	r2, #188	@ 0xbc
 8017858:	492a      	ldr	r1, [pc, #168]	@ (8017904 <ip_reass_free_complete_datagram+0x13c>)
 801785a:	4828      	ldr	r0, [pc, #160]	@ (80178fc <ip_reass_free_complete_datagram+0x134>)
 801785c:	f001 f8b2 	bl	80189c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017860:	8bfa      	ldrh	r2, [r7, #30]
 8017862:	8a7b      	ldrh	r3, [r7, #18]
 8017864:	4413      	add	r3, r2
 8017866:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017868:	69b8      	ldr	r0, [r7, #24]
 801786a:	f7f8 f93d 	bl	800fae8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	685b      	ldr	r3, [r3, #4]
 8017872:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017874:	e01f      	b.n	80178b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017876:	69bb      	ldr	r3, [r7, #24]
 8017878:	685b      	ldr	r3, [r3, #4]
 801787a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801787c:	69bb      	ldr	r3, [r7, #24]
 801787e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017880:	697b      	ldr	r3, [r7, #20]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017886:	68f8      	ldr	r0, [r7, #12]
 8017888:	f7f8 f9bc 	bl	800fc04 <pbuf_clen>
 801788c:	4603      	mov	r3, r0
 801788e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017890:	8bfa      	ldrh	r2, [r7, #30]
 8017892:	8a7b      	ldrh	r3, [r7, #18]
 8017894:	4413      	add	r3, r2
 8017896:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801789a:	db05      	blt.n	80178a8 <ip_reass_free_complete_datagram+0xe0>
 801789c:	4b15      	ldr	r3, [pc, #84]	@ (80178f4 <ip_reass_free_complete_datagram+0x12c>)
 801789e:	22cc      	movs	r2, #204	@ 0xcc
 80178a0:	4918      	ldr	r1, [pc, #96]	@ (8017904 <ip_reass_free_complete_datagram+0x13c>)
 80178a2:	4816      	ldr	r0, [pc, #88]	@ (80178fc <ip_reass_free_complete_datagram+0x134>)
 80178a4:	f001 f88e 	bl	80189c4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80178a8:	8bfa      	ldrh	r2, [r7, #30]
 80178aa:	8a7b      	ldrh	r3, [r7, #18]
 80178ac:	4413      	add	r3, r2
 80178ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80178b0:	68f8      	ldr	r0, [r7, #12]
 80178b2:	f7f8 f919 	bl	800fae8 <pbuf_free>
  while (p != NULL) {
 80178b6:	69bb      	ldr	r3, [r7, #24]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d1dc      	bne.n	8017876 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80178bc:	6839      	ldr	r1, [r7, #0]
 80178be:	6878      	ldr	r0, [r7, #4]
 80178c0:	f000 f8c2 	bl	8017a48 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80178c4:	4b10      	ldr	r3, [pc, #64]	@ (8017908 <ip_reass_free_complete_datagram+0x140>)
 80178c6:	881b      	ldrh	r3, [r3, #0]
 80178c8:	8bfa      	ldrh	r2, [r7, #30]
 80178ca:	429a      	cmp	r2, r3
 80178cc:	d905      	bls.n	80178da <ip_reass_free_complete_datagram+0x112>
 80178ce:	4b09      	ldr	r3, [pc, #36]	@ (80178f4 <ip_reass_free_complete_datagram+0x12c>)
 80178d0:	22d2      	movs	r2, #210	@ 0xd2
 80178d2:	490e      	ldr	r1, [pc, #56]	@ (801790c <ip_reass_free_complete_datagram+0x144>)
 80178d4:	4809      	ldr	r0, [pc, #36]	@ (80178fc <ip_reass_free_complete_datagram+0x134>)
 80178d6:	f001 f875 	bl	80189c4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80178da:	4b0b      	ldr	r3, [pc, #44]	@ (8017908 <ip_reass_free_complete_datagram+0x140>)
 80178dc:	881a      	ldrh	r2, [r3, #0]
 80178de:	8bfb      	ldrh	r3, [r7, #30]
 80178e0:	1ad3      	subs	r3, r2, r3
 80178e2:	b29a      	uxth	r2, r3
 80178e4:	4b08      	ldr	r3, [pc, #32]	@ (8017908 <ip_reass_free_complete_datagram+0x140>)
 80178e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80178e8:	8bfb      	ldrh	r3, [r7, #30]
}
 80178ea:	4618      	mov	r0, r3
 80178ec:	3720      	adds	r7, #32
 80178ee:	46bd      	mov	sp, r7
 80178f0:	bd80      	pop	{r7, pc}
 80178f2:	bf00      	nop
 80178f4:	0801c160 	.word	0x0801c160
 80178f8:	0801c19c 	.word	0x0801c19c
 80178fc:	0801c1a8 	.word	0x0801c1a8
 8017900:	0801c1d0 	.word	0x0801c1d0
 8017904:	0801c1e4 	.word	0x0801c1e4
 8017908:	240104b0 	.word	0x240104b0
 801790c:	0801c204 	.word	0x0801c204

08017910 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017910:	b580      	push	{r7, lr}
 8017912:	b08a      	sub	sp, #40	@ 0x28
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801791a:	2300      	movs	r3, #0
 801791c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801791e:	2300      	movs	r3, #0
 8017920:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017922:	2300      	movs	r3, #0
 8017924:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017926:	2300      	movs	r3, #0
 8017928:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801792a:	2300      	movs	r3, #0
 801792c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801792e:	4b28      	ldr	r3, [pc, #160]	@ (80179d0 <ip_reass_remove_oldest_datagram+0xc0>)
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017934:	e030      	b.n	8017998 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017938:	695a      	ldr	r2, [r3, #20]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	68db      	ldr	r3, [r3, #12]
 801793e:	429a      	cmp	r2, r3
 8017940:	d10c      	bne.n	801795c <ip_reass_remove_oldest_datagram+0x4c>
 8017942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017944:	699a      	ldr	r2, [r3, #24]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	691b      	ldr	r3, [r3, #16]
 801794a:	429a      	cmp	r2, r3
 801794c:	d106      	bne.n	801795c <ip_reass_remove_oldest_datagram+0x4c>
 801794e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017950:	899a      	ldrh	r2, [r3, #12]
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	889b      	ldrh	r3, [r3, #4]
 8017956:	b29b      	uxth	r3, r3
 8017958:	429a      	cmp	r2, r3
 801795a:	d014      	beq.n	8017986 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801795c:	693b      	ldr	r3, [r7, #16]
 801795e:	3301      	adds	r3, #1
 8017960:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017962:	6a3b      	ldr	r3, [r7, #32]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d104      	bne.n	8017972 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801796a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801796c:	69fb      	ldr	r3, [r7, #28]
 801796e:	61bb      	str	r3, [r7, #24]
 8017970:	e009      	b.n	8017986 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017974:	7fda      	ldrb	r2, [r3, #31]
 8017976:	6a3b      	ldr	r3, [r7, #32]
 8017978:	7fdb      	ldrb	r3, [r3, #31]
 801797a:	429a      	cmp	r2, r3
 801797c:	d803      	bhi.n	8017986 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801797e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017980:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017982:	69fb      	ldr	r3, [r7, #28]
 8017984:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017988:	681b      	ldr	r3, [r3, #0]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d001      	beq.n	8017992 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017990:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8017998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801799a:	2b00      	cmp	r3, #0
 801799c:	d1cb      	bne.n	8017936 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801799e:	6a3b      	ldr	r3, [r7, #32]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d008      	beq.n	80179b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80179a4:	69b9      	ldr	r1, [r7, #24]
 80179a6:	6a38      	ldr	r0, [r7, #32]
 80179a8:	f7ff ff0e 	bl	80177c8 <ip_reass_free_complete_datagram>
 80179ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80179ae:	697a      	ldr	r2, [r7, #20]
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	4413      	add	r3, r2
 80179b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80179b6:	697a      	ldr	r2, [r7, #20]
 80179b8:	683b      	ldr	r3, [r7, #0]
 80179ba:	429a      	cmp	r2, r3
 80179bc:	da02      	bge.n	80179c4 <ip_reass_remove_oldest_datagram+0xb4>
 80179be:	693b      	ldr	r3, [r7, #16]
 80179c0:	2b01      	cmp	r3, #1
 80179c2:	dcac      	bgt.n	801791e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80179c4:	697b      	ldr	r3, [r7, #20]
}
 80179c6:	4618      	mov	r0, r3
 80179c8:	3728      	adds	r7, #40	@ 0x28
 80179ca:	46bd      	mov	sp, r7
 80179cc:	bd80      	pop	{r7, pc}
 80179ce:	bf00      	nop
 80179d0:	240104ac 	.word	0x240104ac

080179d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b084      	sub	sp, #16
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
 80179dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179de:	2004      	movs	r0, #4
 80179e0:	f7f7 f964 	bl	800ecac <memp_malloc>
 80179e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d110      	bne.n	8017a0e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80179ec:	6839      	ldr	r1, [r7, #0]
 80179ee:	6878      	ldr	r0, [r7, #4]
 80179f0:	f7ff ff8e 	bl	8017910 <ip_reass_remove_oldest_datagram>
 80179f4:	4602      	mov	r2, r0
 80179f6:	683b      	ldr	r3, [r7, #0]
 80179f8:	4293      	cmp	r3, r2
 80179fa:	dc03      	bgt.n	8017a04 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80179fc:	2004      	movs	r0, #4
 80179fe:	f7f7 f955 	bl	800ecac <memp_malloc>
 8017a02:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d101      	bne.n	8017a0e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017a0a:	2300      	movs	r3, #0
 8017a0c:	e016      	b.n	8017a3c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017a0e:	2220      	movs	r2, #32
 8017a10:	2100      	movs	r1, #0
 8017a12:	68f8      	ldr	r0, [r7, #12]
 8017a14:	f000 fff8 	bl	8018a08 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017a18:	68fb      	ldr	r3, [r7, #12]
 8017a1a:	220f      	movs	r2, #15
 8017a1c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017a1e:	4b09      	ldr	r3, [pc, #36]	@ (8017a44 <ip_reass_enqueue_new_datagram+0x70>)
 8017a20:	681a      	ldr	r2, [r3, #0]
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017a26:	4a07      	ldr	r2, [pc, #28]	@ (8017a44 <ip_reass_enqueue_new_datagram+0x70>)
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017a2c:	68fb      	ldr	r3, [r7, #12]
 8017a2e:	3308      	adds	r3, #8
 8017a30:	2214      	movs	r2, #20
 8017a32:	6879      	ldr	r1, [r7, #4]
 8017a34:	4618      	mov	r0, r3
 8017a36:	f001 f86c 	bl	8018b12 <memcpy>
  return ipr;
 8017a3a:	68fb      	ldr	r3, [r7, #12]
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3710      	adds	r7, #16
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}
 8017a44:	240104ac 	.word	0x240104ac

08017a48 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b082      	sub	sp, #8
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
 8017a50:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017a52:	4b10      	ldr	r3, [pc, #64]	@ (8017a94 <ip_reass_dequeue_datagram+0x4c>)
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	687a      	ldr	r2, [r7, #4]
 8017a58:	429a      	cmp	r2, r3
 8017a5a:	d104      	bne.n	8017a66 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	4a0c      	ldr	r2, [pc, #48]	@ (8017a94 <ip_reass_dequeue_datagram+0x4c>)
 8017a62:	6013      	str	r3, [r2, #0]
 8017a64:	e00d      	b.n	8017a82 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017a66:	683b      	ldr	r3, [r7, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d106      	bne.n	8017a7a <ip_reass_dequeue_datagram+0x32>
 8017a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8017a98 <ip_reass_dequeue_datagram+0x50>)
 8017a6e:	f240 1245 	movw	r2, #325	@ 0x145
 8017a72:	490a      	ldr	r1, [pc, #40]	@ (8017a9c <ip_reass_dequeue_datagram+0x54>)
 8017a74:	480a      	ldr	r0, [pc, #40]	@ (8017aa0 <ip_reass_dequeue_datagram+0x58>)
 8017a76:	f000 ffa5 	bl	80189c4 <iprintf>
    prev->next = ipr->next;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681a      	ldr	r2, [r3, #0]
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017a82:	6879      	ldr	r1, [r7, #4]
 8017a84:	2004      	movs	r0, #4
 8017a86:	f7f7 f987 	bl	800ed98 <memp_free>
}
 8017a8a:	bf00      	nop
 8017a8c:	3708      	adds	r7, #8
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}
 8017a92:	bf00      	nop
 8017a94:	240104ac 	.word	0x240104ac
 8017a98:	0801c160 	.word	0x0801c160
 8017a9c:	0801c228 	.word	0x0801c228
 8017aa0:	0801c1a8 	.word	0x0801c1a8

08017aa4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b08c      	sub	sp, #48	@ 0x30
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	60f8      	str	r0, [r7, #12]
 8017aac:	60b9      	str	r1, [r7, #8]
 8017aae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017ab4:	2301      	movs	r3, #1
 8017ab6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017abe:	69fb      	ldr	r3, [r7, #28]
 8017ac0:	885b      	ldrh	r3, [r3, #2]
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	4618      	mov	r0, r3
 8017ac6:	f7f6 fb51 	bl	800e16c <lwip_htons>
 8017aca:	4603      	mov	r3, r0
 8017acc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017ace:	69fb      	ldr	r3, [r7, #28]
 8017ad0:	781b      	ldrb	r3, [r3, #0]
 8017ad2:	f003 030f 	and.w	r3, r3, #15
 8017ad6:	b2db      	uxtb	r3, r3
 8017ad8:	009b      	lsls	r3, r3, #2
 8017ada:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017adc:	7e7b      	ldrb	r3, [r7, #25]
 8017ade:	b29b      	uxth	r3, r3
 8017ae0:	8b7a      	ldrh	r2, [r7, #26]
 8017ae2:	429a      	cmp	r2, r3
 8017ae4:	d202      	bcs.n	8017aec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017aea:	e135      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017aec:	7e7b      	ldrb	r3, [r7, #25]
 8017aee:	b29b      	uxth	r3, r3
 8017af0:	8b7a      	ldrh	r2, [r7, #26]
 8017af2:	1ad3      	subs	r3, r2, r3
 8017af4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017af6:	69fb      	ldr	r3, [r7, #28]
 8017af8:	88db      	ldrh	r3, [r3, #6]
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	4618      	mov	r0, r3
 8017afe:	f7f6 fb35 	bl	800e16c <lwip_htons>
 8017b02:	4603      	mov	r3, r0
 8017b04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017b08:	b29b      	uxth	r3, r3
 8017b0a:	00db      	lsls	r3, r3, #3
 8017b0c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017b0e:	68bb      	ldr	r3, [r7, #8]
 8017b10:	685b      	ldr	r3, [r3, #4]
 8017b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8017b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b16:	2200      	movs	r2, #0
 8017b18:	701a      	strb	r2, [r3, #0]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	705a      	strb	r2, [r3, #1]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	709a      	strb	r2, [r3, #2]
 8017b22:	2200      	movs	r2, #0
 8017b24:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b28:	8afa      	ldrh	r2, [r7, #22]
 8017b2a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017b2c:	8afa      	ldrh	r2, [r7, #22]
 8017b2e:	8b7b      	ldrh	r3, [r7, #26]
 8017b30:	4413      	add	r3, r2
 8017b32:	b29a      	uxth	r2, r3
 8017b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b36:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b3a:	88db      	ldrh	r3, [r3, #6]
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	8afa      	ldrh	r2, [r7, #22]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d902      	bls.n	8017b4a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b48:	e106      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	685b      	ldr	r3, [r3, #4]
 8017b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b50:	e068      	b.n	8017c24 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b54:	685b      	ldr	r3, [r3, #4]
 8017b56:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b5a:	889b      	ldrh	r3, [r3, #4]
 8017b5c:	b29a      	uxth	r2, r3
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	889b      	ldrh	r3, [r3, #4]
 8017b62:	b29b      	uxth	r3, r3
 8017b64:	429a      	cmp	r2, r3
 8017b66:	d235      	bcs.n	8017bd4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017b6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d020      	beq.n	8017bb6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b76:	889b      	ldrh	r3, [r3, #4]
 8017b78:	b29a      	uxth	r2, r3
 8017b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b7c:	88db      	ldrh	r3, [r3, #6]
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d307      	bcc.n	8017b94 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017b86:	88db      	ldrh	r3, [r3, #6]
 8017b88:	b29a      	uxth	r2, r3
 8017b8a:	693b      	ldr	r3, [r7, #16]
 8017b8c:	889b      	ldrh	r3, [r3, #4]
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d902      	bls.n	8017b9a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017b94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017b98:	e0de      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017b9c:	68ba      	ldr	r2, [r7, #8]
 8017b9e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ba2:	88db      	ldrh	r3, [r3, #6]
 8017ba4:	b29a      	uxth	r2, r3
 8017ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017ba8:	889b      	ldrh	r3, [r3, #4]
 8017baa:	b29b      	uxth	r3, r3
 8017bac:	429a      	cmp	r2, r3
 8017bae:	d03d      	beq.n	8017c2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017bb0:	2300      	movs	r3, #0
 8017bb2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017bb4:	e03a      	b.n	8017c2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bb8:	88db      	ldrh	r3, [r3, #6]
 8017bba:	b29a      	uxth	r2, r3
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	889b      	ldrh	r3, [r3, #4]
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	429a      	cmp	r2, r3
 8017bc4:	d902      	bls.n	8017bcc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017bca:	e0c5      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	68ba      	ldr	r2, [r7, #8]
 8017bd0:	605a      	str	r2, [r3, #4]
      break;
 8017bd2:	e02b      	b.n	8017c2c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bd6:	889b      	ldrh	r3, [r3, #4]
 8017bd8:	b29a      	uxth	r2, r3
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	889b      	ldrh	r3, [r3, #4]
 8017bde:	b29b      	uxth	r3, r3
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d102      	bne.n	8017bea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017be4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017be8:	e0b6      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017bec:	889b      	ldrh	r3, [r3, #4]
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	88db      	ldrh	r3, [r3, #6]
 8017bf4:	b29b      	uxth	r3, r3
 8017bf6:	429a      	cmp	r2, r3
 8017bf8:	d202      	bcs.n	8017c00 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017bfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017bfe:	e0ab      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d009      	beq.n	8017c1a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c08:	88db      	ldrh	r3, [r3, #6]
 8017c0a:	b29a      	uxth	r2, r3
 8017c0c:	693b      	ldr	r3, [r7, #16]
 8017c0e:	889b      	ldrh	r3, [r3, #4]
 8017c10:	b29b      	uxth	r3, r3
 8017c12:	429a      	cmp	r2, r3
 8017c14:	d001      	beq.n	8017c1a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017c1a:	693b      	ldr	r3, [r7, #16]
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 8017c20:	693b      	ldr	r3, [r7, #16]
 8017c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 8017c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d193      	bne.n	8017b52 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017c2a:	e000      	b.n	8017c2e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017c2c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d12d      	bne.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	d01c      	beq.n	8017c74 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c3c:	88db      	ldrh	r3, [r3, #6]
 8017c3e:	b29a      	uxth	r2, r3
 8017c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c42:	889b      	ldrh	r3, [r3, #4]
 8017c44:	b29b      	uxth	r3, r3
 8017c46:	429a      	cmp	r2, r3
 8017c48:	d906      	bls.n	8017c58 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017c4a:	4b45      	ldr	r3, [pc, #276]	@ (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c4c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 8017c50:	4944      	ldr	r1, [pc, #272]	@ (8017d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017c52:	4845      	ldr	r0, [pc, #276]	@ (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c54:	f000 feb6 	bl	80189c4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c5a:	68ba      	ldr	r2, [r7, #8]
 8017c5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c60:	88db      	ldrh	r3, [r3, #6]
 8017c62:	b29a      	uxth	r2, r3
 8017c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c66:	889b      	ldrh	r3, [r3, #4]
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d010      	beq.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017c6e:	2300      	movs	r3, #0
 8017c70:	623b      	str	r3, [r7, #32]
 8017c72:	e00d      	b.n	8017c90 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017c74:	68fb      	ldr	r3, [r7, #12]
 8017c76:	685b      	ldr	r3, [r3, #4]
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d006      	beq.n	8017c8a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017c7c:	4b38      	ldr	r3, [pc, #224]	@ (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017c7e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8017c82:	493a      	ldr	r1, [pc, #232]	@ (8017d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017c84:	4838      	ldr	r0, [pc, #224]	@ (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017c86:	f000 fe9d 	bl	80189c4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	68ba      	ldr	r2, [r7, #8]
 8017c8e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d105      	bne.n	8017ca2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	7f9b      	ldrb	r3, [r3, #30]
 8017c9a:	f003 0301 	and.w	r3, r3, #1
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d059      	beq.n	8017d56 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017ca2:	6a3b      	ldr	r3, [r7, #32]
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d04f      	beq.n	8017d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	685b      	ldr	r3, [r3, #4]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d006      	beq.n	8017cbe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	685b      	ldr	r3, [r3, #4]
 8017cb4:	685b      	ldr	r3, [r3, #4]
 8017cb6:	889b      	ldrh	r3, [r3, #4]
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d002      	beq.n	8017cc4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	623b      	str	r3, [r7, #32]
 8017cc2:	e041      	b.n	8017d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 8017cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017cce:	e012      	b.n	8017cf6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cd2:	685b      	ldr	r3, [r3, #4]
 8017cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 8017cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cd8:	88db      	ldrh	r3, [r3, #6]
 8017cda:	b29a      	uxth	r2, r3
 8017cdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cde:	889b      	ldrh	r3, [r3, #4]
 8017ce0:	b29b      	uxth	r3, r3
 8017ce2:	429a      	cmp	r2, r3
 8017ce4:	d002      	beq.n	8017cec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017ce6:	2300      	movs	r3, #0
 8017ce8:	623b      	str	r3, [r7, #32]
            break;
 8017cea:	e007      	b.n	8017cfc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cee:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8017cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8017cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d1e9      	bne.n	8017cd0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017cfc:	6a3b      	ldr	r3, [r7, #32]
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	d022      	beq.n	8017d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8017d02:	68fb      	ldr	r3, [r7, #12]
 8017d04:	685b      	ldr	r3, [r3, #4]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d106      	bne.n	8017d18 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017d0a:	4b15      	ldr	r3, [pc, #84]	@ (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d0c:	f240 12df 	movw	r2, #479	@ 0x1df
 8017d10:	4917      	ldr	r1, [pc, #92]	@ (8017d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d12:	4815      	ldr	r0, [pc, #84]	@ (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d14:	f000 fe56 	bl	80189c4 <iprintf>
          LWIP_ASSERT("sanity check",
 8017d18:	68fb      	ldr	r3, [r7, #12]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	685b      	ldr	r3, [r3, #4]
 8017d1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d106      	bne.n	8017d32 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017d24:	4b0e      	ldr	r3, [pc, #56]	@ (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d26:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8017d2a:	4911      	ldr	r1, [pc, #68]	@ (8017d70 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017d2c:	480e      	ldr	r0, [pc, #56]	@ (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d2e:	f000 fe49 	bl	80189c4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8017d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d006      	beq.n	8017d48 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017d3a:	4b09      	ldr	r3, [pc, #36]	@ (8017d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017d3c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 8017d40:	490c      	ldr	r1, [pc, #48]	@ (8017d74 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8017d42:	4809      	ldr	r0, [pc, #36]	@ (8017d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017d44:	f000 fe3e 	bl	80189c4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017d48:	6a3b      	ldr	r3, [r7, #32]
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	bf14      	ite	ne
 8017d4e:	2301      	movne	r3, #1
 8017d50:	2300      	moveq	r3, #0
 8017d52:	b2db      	uxtb	r3, r3
 8017d54:	e000      	b.n	8017d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017d56:	2300      	movs	r3, #0
}
 8017d58:	4618      	mov	r0, r3
 8017d5a:	3730      	adds	r7, #48	@ 0x30
 8017d5c:	46bd      	mov	sp, r7
 8017d5e:	bd80      	pop	{r7, pc}
 8017d60:	0801c160 	.word	0x0801c160
 8017d64:	0801c244 	.word	0x0801c244
 8017d68:	0801c1a8 	.word	0x0801c1a8
 8017d6c:	0801c264 	.word	0x0801c264
 8017d70:	0801c29c 	.word	0x0801c29c
 8017d74:	0801c2ac 	.word	0x0801c2ac

08017d78 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b08e      	sub	sp, #56	@ 0x38
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	685b      	ldr	r3, [r3, #4]
 8017d84:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d88:	781b      	ldrb	r3, [r3, #0]
 8017d8a:	f003 030f 	and.w	r3, r3, #15
 8017d8e:	b2db      	uxtb	r3, r3
 8017d90:	009b      	lsls	r3, r3, #2
 8017d92:	b2db      	uxtb	r3, r3
 8017d94:	2b14      	cmp	r3, #20
 8017d96:	f040 8171 	bne.w	801807c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d9c:	88db      	ldrh	r3, [r3, #6]
 8017d9e:	b29b      	uxth	r3, r3
 8017da0:	4618      	mov	r0, r3
 8017da2:	f7f6 f9e3 	bl	800e16c <lwip_htons>
 8017da6:	4603      	mov	r3, r0
 8017da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017dac:	b29b      	uxth	r3, r3
 8017dae:	00db      	lsls	r3, r3, #3
 8017db0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db4:	885b      	ldrh	r3, [r3, #2]
 8017db6:	b29b      	uxth	r3, r3
 8017db8:	4618      	mov	r0, r3
 8017dba:	f7f6 f9d7 	bl	800e16c <lwip_htons>
 8017dbe:	4603      	mov	r3, r0
 8017dc0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dc4:	781b      	ldrb	r3, [r3, #0]
 8017dc6:	f003 030f 	and.w	r3, r3, #15
 8017dca:	b2db      	uxtb	r3, r3
 8017dcc:	009b      	lsls	r3, r3, #2
 8017dce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8017dd2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017dda:	429a      	cmp	r2, r3
 8017ddc:	f0c0 8150 	bcc.w	8018080 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017de0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8017de8:	1ad3      	subs	r3, r2, r3
 8017dea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f7f7 ff09 	bl	800fc04 <pbuf_clen>
 8017df2:	4603      	mov	r3, r0
 8017df4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017df6:	4b8c      	ldr	r3, [pc, #560]	@ (8018028 <ip4_reass+0x2b0>)
 8017df8:	881b      	ldrh	r3, [r3, #0]
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	8c3b      	ldrh	r3, [r7, #32]
 8017dfe:	4413      	add	r3, r2
 8017e00:	2b0a      	cmp	r3, #10
 8017e02:	dd10      	ble.n	8017e26 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e04:	8c3b      	ldrh	r3, [r7, #32]
 8017e06:	4619      	mov	r1, r3
 8017e08:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017e0a:	f7ff fd81 	bl	8017910 <ip_reass_remove_oldest_datagram>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	f000 8137 	beq.w	8018084 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017e16:	4b84      	ldr	r3, [pc, #528]	@ (8018028 <ip4_reass+0x2b0>)
 8017e18:	881b      	ldrh	r3, [r3, #0]
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	8c3b      	ldrh	r3, [r7, #32]
 8017e1e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017e20:	2b0a      	cmp	r3, #10
 8017e22:	f300 812f 	bgt.w	8018084 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e26:	4b81      	ldr	r3, [pc, #516]	@ (801802c <ip4_reass+0x2b4>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e2c:	e015      	b.n	8017e5a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e30:	695a      	ldr	r2, [r3, #20]
 8017e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e34:	68db      	ldr	r3, [r3, #12]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d10c      	bne.n	8017e54 <ip4_reass+0xdc>
 8017e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e3c:	699a      	ldr	r2, [r3, #24]
 8017e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e40:	691b      	ldr	r3, [r3, #16]
 8017e42:	429a      	cmp	r2, r3
 8017e44:	d106      	bne.n	8017e54 <ip4_reass+0xdc>
 8017e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e48:	899a      	ldrh	r2, [r3, #12]
 8017e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e4c:	889b      	ldrh	r3, [r3, #4]
 8017e4e:	b29b      	uxth	r3, r3
 8017e50:	429a      	cmp	r2, r3
 8017e52:	d006      	beq.n	8017e62 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8017e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1e6      	bne.n	8017e2e <ip4_reass+0xb6>
 8017e60:	e000      	b.n	8017e64 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017e62:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d109      	bne.n	8017e7e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017e6a:	8c3b      	ldrh	r3, [r7, #32]
 8017e6c:	4619      	mov	r1, r3
 8017e6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017e70:	f7ff fdb0 	bl	80179d4 <ip_reass_enqueue_new_datagram>
 8017e74:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d11c      	bne.n	8017eb6 <ip4_reass+0x13e>
      goto nullreturn;
 8017e7c:	e105      	b.n	801808a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e80:	88db      	ldrh	r3, [r3, #6]
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7f6 f971 	bl	800e16c <lwip_htons>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d110      	bne.n	8017eb6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017e96:	89db      	ldrh	r3, [r3, #14]
 8017e98:	4618      	mov	r0, r3
 8017e9a:	f7f6 f967 	bl	800e16c <lwip_htons>
 8017e9e:	4603      	mov	r3, r0
 8017ea0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d006      	beq.n	8017eb6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017eaa:	3308      	adds	r3, #8
 8017eac:	2214      	movs	r2, #20
 8017eae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f000 fe2e 	bl	8018b12 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eb8:	88db      	ldrh	r3, [r3, #6]
 8017eba:	b29b      	uxth	r3, r3
 8017ebc:	f003 0320 	and.w	r3, r3, #32
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	bf0c      	ite	eq
 8017ec4:	2301      	moveq	r3, #1
 8017ec6:	2300      	movne	r3, #0
 8017ec8:	b2db      	uxtb	r3, r3
 8017eca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017ecc:	69fb      	ldr	r3, [r7, #28]
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d00e      	beq.n	8017ef0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017ed2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017ed4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017ed6:	4413      	add	r3, r2
 8017ed8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017eda:	8b7a      	ldrh	r2, [r7, #26]
 8017edc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8017ede:	429a      	cmp	r2, r3
 8017ee0:	f0c0 80a0 	bcc.w	8018024 <ip4_reass+0x2ac>
 8017ee4:	8b7b      	ldrh	r3, [r7, #26]
 8017ee6:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 8017eea:	4293      	cmp	r3, r2
 8017eec:	f200 809a 	bhi.w	8018024 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017ef0:	69fa      	ldr	r2, [r7, #28]
 8017ef2:	6879      	ldr	r1, [r7, #4]
 8017ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017ef6:	f7ff fdd5 	bl	8017aa4 <ip_reass_chain_frag_into_datagram_and_validate>
 8017efa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8017f02:	f000 809b 	beq.w	801803c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017f06:	4b48      	ldr	r3, [pc, #288]	@ (8018028 <ip4_reass+0x2b0>)
 8017f08:	881a      	ldrh	r2, [r3, #0]
 8017f0a:	8c3b      	ldrh	r3, [r7, #32]
 8017f0c:	4413      	add	r3, r2
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	4b45      	ldr	r3, [pc, #276]	@ (8018028 <ip4_reass+0x2b0>)
 8017f12:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017f14:	69fb      	ldr	r3, [r7, #28]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	d00d      	beq.n	8017f36 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017f1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8017f1c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017f1e:	4413      	add	r3, r2
 8017f20:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f24:	8a7a      	ldrh	r2, [r7, #18]
 8017f26:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f2a:	7f9b      	ldrb	r3, [r3, #30]
 8017f2c:	f043 0301 	orr.w	r3, r3, #1
 8017f30:	b2da      	uxtb	r2, r3
 8017f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f34:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	2b01      	cmp	r3, #1
 8017f3a:	d171      	bne.n	8018020 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f3e:	8b9b      	ldrh	r3, [r3, #28]
 8017f40:	3314      	adds	r3, #20
 8017f42:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017f4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f50:	685b      	ldr	r3, [r3, #4]
 8017f52:	685b      	ldr	r3, [r3, #4]
 8017f54:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f58:	3308      	adds	r3, #8
 8017f5a:	2214      	movs	r2, #20
 8017f5c:	4619      	mov	r1, r3
 8017f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017f60:	f000 fdd7 	bl	8018b12 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017f64:	8a3b      	ldrh	r3, [r7, #16]
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7f6 f900 	bl	800e16c <lwip_htons>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	461a      	mov	r2, r3
 8017f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f72:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f76:	2200      	movs	r2, #0
 8017f78:	719a      	strb	r2, [r3, #6]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f80:	2200      	movs	r2, #0
 8017f82:	729a      	strb	r2, [r3, #10]
 8017f84:	2200      	movs	r2, #0
 8017f86:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017f8a:	685b      	ldr	r3, [r3, #4]
 8017f8c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017f8e:	e00d      	b.n	8017fac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f92:	685b      	ldr	r3, [r3, #4]
 8017f94:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017f96:	2114      	movs	r1, #20
 8017f98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017f9a:	f7f7 fd1f 	bl	800f9dc <pbuf_remove_header>
      pbuf_cat(p, r);
 8017f9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f7f7 fe6f 	bl	800fc84 <pbuf_cat>
      r = iprh->next_pbuf;
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8017fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d1ee      	bne.n	8017f90 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017fb2:	4b1e      	ldr	r3, [pc, #120]	@ (801802c <ip4_reass+0x2b4>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fb8:	429a      	cmp	r2, r3
 8017fba:	d102      	bne.n	8017fc2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017fc0:	e010      	b.n	8017fe4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fc2:	4b1a      	ldr	r3, [pc, #104]	@ (801802c <ip4_reass+0x2b4>)
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017fc8:	e007      	b.n	8017fda <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017fd0:	429a      	cmp	r2, r3
 8017fd2:	d006      	beq.n	8017fe2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d1f4      	bne.n	8017fca <ip4_reass+0x252>
 8017fe0:	e000      	b.n	8017fe4 <ip4_reass+0x26c>
          break;
 8017fe2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017fe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017fe6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8017fe8:	f7ff fd2e 	bl	8017a48 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017fec:	6878      	ldr	r0, [r7, #4]
 8017fee:	f7f7 fe09 	bl	800fc04 <pbuf_clen>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017ff6:	4b0c      	ldr	r3, [pc, #48]	@ (8018028 <ip4_reass+0x2b0>)
 8017ff8:	881b      	ldrh	r3, [r3, #0]
 8017ffa:	8c3a      	ldrh	r2, [r7, #32]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d906      	bls.n	801800e <ip4_reass+0x296>
 8018000:	4b0b      	ldr	r3, [pc, #44]	@ (8018030 <ip4_reass+0x2b8>)
 8018002:	f240 229b 	movw	r2, #667	@ 0x29b
 8018006:	490b      	ldr	r1, [pc, #44]	@ (8018034 <ip4_reass+0x2bc>)
 8018008:	480b      	ldr	r0, [pc, #44]	@ (8018038 <ip4_reass+0x2c0>)
 801800a:	f000 fcdb 	bl	80189c4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801800e:	4b06      	ldr	r3, [pc, #24]	@ (8018028 <ip4_reass+0x2b0>)
 8018010:	881a      	ldrh	r2, [r3, #0]
 8018012:	8c3b      	ldrh	r3, [r7, #32]
 8018014:	1ad3      	subs	r3, r2, r3
 8018016:	b29a      	uxth	r2, r3
 8018018:	4b03      	ldr	r3, [pc, #12]	@ (8018028 <ip4_reass+0x2b0>)
 801801a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	e038      	b.n	8018092 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018020:	2300      	movs	r3, #0
 8018022:	e036      	b.n	8018092 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018024:	bf00      	nop
 8018026:	e00a      	b.n	801803e <ip4_reass+0x2c6>
 8018028:	240104b0 	.word	0x240104b0
 801802c:	240104ac 	.word	0x240104ac
 8018030:	0801c160 	.word	0x0801c160
 8018034:	0801c2d0 	.word	0x0801c2d0
 8018038:	0801c1a8 	.word	0x0801c1a8
    goto nullreturn_ipr;
 801803c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801803e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018040:	2b00      	cmp	r3, #0
 8018042:	d106      	bne.n	8018052 <ip4_reass+0x2da>
 8018044:	4b15      	ldr	r3, [pc, #84]	@ (801809c <ip4_reass+0x324>)
 8018046:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801804a:	4915      	ldr	r1, [pc, #84]	@ (80180a0 <ip4_reass+0x328>)
 801804c:	4815      	ldr	r0, [pc, #84]	@ (80180a4 <ip4_reass+0x32c>)
 801804e:	f000 fcb9 	bl	80189c4 <iprintf>
  if (ipr->p == NULL) {
 8018052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018054:	685b      	ldr	r3, [r3, #4]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d116      	bne.n	8018088 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801805a:	4b13      	ldr	r3, [pc, #76]	@ (80180a8 <ip4_reass+0x330>)
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018060:	429a      	cmp	r2, r3
 8018062:	d006      	beq.n	8018072 <ip4_reass+0x2fa>
 8018064:	4b0d      	ldr	r3, [pc, #52]	@ (801809c <ip4_reass+0x324>)
 8018066:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801806a:	4910      	ldr	r1, [pc, #64]	@ (80180ac <ip4_reass+0x334>)
 801806c:	480d      	ldr	r0, [pc, #52]	@ (80180a4 <ip4_reass+0x32c>)
 801806e:	f000 fca9 	bl	80189c4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018072:	2100      	movs	r1, #0
 8018074:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8018076:	f7ff fce7 	bl	8017a48 <ip_reass_dequeue_datagram>
 801807a:	e006      	b.n	801808a <ip4_reass+0x312>
    goto nullreturn;
 801807c:	bf00      	nop
 801807e:	e004      	b.n	801808a <ip4_reass+0x312>
    goto nullreturn;
 8018080:	bf00      	nop
 8018082:	e002      	b.n	801808a <ip4_reass+0x312>
      goto nullreturn;
 8018084:	bf00      	nop
 8018086:	e000      	b.n	801808a <ip4_reass+0x312>
  }

nullreturn:
 8018088:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801808a:	6878      	ldr	r0, [r7, #4]
 801808c:	f7f7 fd2c 	bl	800fae8 <pbuf_free>
  return NULL;
 8018090:	2300      	movs	r3, #0
}
 8018092:	4618      	mov	r0, r3
 8018094:	3738      	adds	r7, #56	@ 0x38
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	0801c160 	.word	0x0801c160
 80180a0:	0801c2ec 	.word	0x0801c2ec
 80180a4:	0801c1a8 	.word	0x0801c1a8
 80180a8:	240104ac 	.word	0x240104ac
 80180ac:	0801c2f8 	.word	0x0801c2f8

080180b0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80180b4:	2005      	movs	r0, #5
 80180b6:	f7f6 fdf9 	bl	800ecac <memp_malloc>
 80180ba:	4603      	mov	r3, r0
}
 80180bc:	4618      	mov	r0, r3
 80180be:	bd80      	pop	{r7, pc}

080180c0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80180c0:	b580      	push	{r7, lr}
 80180c2:	b082      	sub	sp, #8
 80180c4:	af00      	add	r7, sp, #0
 80180c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d106      	bne.n	80180dc <ip_frag_free_pbuf_custom_ref+0x1c>
 80180ce:	4b07      	ldr	r3, [pc, #28]	@ (80180ec <ip_frag_free_pbuf_custom_ref+0x2c>)
 80180d0:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 80180d4:	4906      	ldr	r1, [pc, #24]	@ (80180f0 <ip_frag_free_pbuf_custom_ref+0x30>)
 80180d6:	4807      	ldr	r0, [pc, #28]	@ (80180f4 <ip_frag_free_pbuf_custom_ref+0x34>)
 80180d8:	f000 fc74 	bl	80189c4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80180dc:	6879      	ldr	r1, [r7, #4]
 80180de:	2005      	movs	r0, #5
 80180e0:	f7f6 fe5a 	bl	800ed98 <memp_free>
}
 80180e4:	bf00      	nop
 80180e6:	3708      	adds	r7, #8
 80180e8:	46bd      	mov	sp, r7
 80180ea:	bd80      	pop	{r7, pc}
 80180ec:	0801c160 	.word	0x0801c160
 80180f0:	0801c318 	.word	0x0801c318
 80180f4:	0801c1a8 	.word	0x0801c1a8

080180f8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b084      	sub	sp, #16
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d106      	bne.n	8018118 <ipfrag_free_pbuf_custom+0x20>
 801810a:	4b11      	ldr	r3, [pc, #68]	@ (8018150 <ipfrag_free_pbuf_custom+0x58>)
 801810c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8018110:	4910      	ldr	r1, [pc, #64]	@ (8018154 <ipfrag_free_pbuf_custom+0x5c>)
 8018112:	4811      	ldr	r0, [pc, #68]	@ (8018158 <ipfrag_free_pbuf_custom+0x60>)
 8018114:	f000 fc56 	bl	80189c4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018118:	68fa      	ldr	r2, [r7, #12]
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	429a      	cmp	r2, r3
 801811e:	d006      	beq.n	801812e <ipfrag_free_pbuf_custom+0x36>
 8018120:	4b0b      	ldr	r3, [pc, #44]	@ (8018150 <ipfrag_free_pbuf_custom+0x58>)
 8018122:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8018126:	490d      	ldr	r1, [pc, #52]	@ (801815c <ipfrag_free_pbuf_custom+0x64>)
 8018128:	480b      	ldr	r0, [pc, #44]	@ (8018158 <ipfrag_free_pbuf_custom+0x60>)
 801812a:	f000 fc4b 	bl	80189c4 <iprintf>
  if (pcr->original != NULL) {
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	695b      	ldr	r3, [r3, #20]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d004      	beq.n	8018140 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	695b      	ldr	r3, [r3, #20]
 801813a:	4618      	mov	r0, r3
 801813c:	f7f7 fcd4 	bl	800fae8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018140:	68f8      	ldr	r0, [r7, #12]
 8018142:	f7ff ffbd 	bl	80180c0 <ip_frag_free_pbuf_custom_ref>
}
 8018146:	bf00      	nop
 8018148:	3710      	adds	r7, #16
 801814a:	46bd      	mov	sp, r7
 801814c:	bd80      	pop	{r7, pc}
 801814e:	bf00      	nop
 8018150:	0801c160 	.word	0x0801c160
 8018154:	0801c324 	.word	0x0801c324
 8018158:	0801c1a8 	.word	0x0801c1a8
 801815c:	0801c330 	.word	0x0801c330

08018160 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b094      	sub	sp, #80	@ 0x50
 8018164:	af02      	add	r7, sp, #8
 8018166:	60f8      	str	r0, [r7, #12]
 8018168:	60b9      	str	r1, [r7, #8]
 801816a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801816c:	2300      	movs	r3, #0
 801816e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018172:	68bb      	ldr	r3, [r7, #8]
 8018174:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8018176:	3b14      	subs	r3, #20
 8018178:	2b00      	cmp	r3, #0
 801817a:	da00      	bge.n	801817e <ip4_frag+0x1e>
 801817c:	3307      	adds	r3, #7
 801817e:	10db      	asrs	r3, r3, #3
 8018180:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018182:	2314      	movs	r3, #20
 8018184:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	685b      	ldr	r3, [r3, #4]
 801818a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801818c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801818e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018192:	781b      	ldrb	r3, [r3, #0]
 8018194:	f003 030f 	and.w	r3, r3, #15
 8018198:	b2db      	uxtb	r3, r3
 801819a:	009b      	lsls	r3, r3, #2
 801819c:	b2db      	uxtb	r3, r3
 801819e:	2b14      	cmp	r3, #20
 80181a0:	d002      	beq.n	80181a8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80181a2:	f06f 0305 	mvn.w	r3, #5
 80181a6:	e110      	b.n	80183ca <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	895b      	ldrh	r3, [r3, #10]
 80181ac:	2b13      	cmp	r3, #19
 80181ae:	d809      	bhi.n	80181c4 <ip4_frag+0x64>
 80181b0:	4b88      	ldr	r3, [pc, #544]	@ (80183d4 <ip4_frag+0x274>)
 80181b2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 80181b6:	4988      	ldr	r1, [pc, #544]	@ (80183d8 <ip4_frag+0x278>)
 80181b8:	4888      	ldr	r0, [pc, #544]	@ (80183dc <ip4_frag+0x27c>)
 80181ba:	f000 fc03 	bl	80189c4 <iprintf>
 80181be:	f06f 0305 	mvn.w	r3, #5
 80181c2:	e102      	b.n	80183ca <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80181c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181c6:	88db      	ldrh	r3, [r3, #6]
 80181c8:	b29b      	uxth	r3, r3
 80181ca:	4618      	mov	r0, r3
 80181cc:	f7f5 ffce 	bl	800e16c <lwip_htons>
 80181d0:	4603      	mov	r3, r0
 80181d2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 80181d4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80181d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181da:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80181de:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80181e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80181e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	891b      	ldrh	r3, [r3, #8]
 80181ea:	3b14      	subs	r3, #20
 80181ec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 80181f0:	e0e1      	b.n	80183b6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80181f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80181f4:	00db      	lsls	r3, r3, #3
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80181fc:	4293      	cmp	r3, r2
 80181fe:	bf28      	it	cs
 8018200:	4613      	movcs	r3, r2
 8018202:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018204:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018208:	2114      	movs	r1, #20
 801820a:	200e      	movs	r0, #14
 801820c:	f7f7 f984 	bl	800f518 <pbuf_alloc>
 8018210:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8018212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018214:	2b00      	cmp	r3, #0
 8018216:	f000 80d5 	beq.w	80183c4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801821c:	895b      	ldrh	r3, [r3, #10]
 801821e:	2b13      	cmp	r3, #19
 8018220:	d806      	bhi.n	8018230 <ip4_frag+0xd0>
 8018222:	4b6c      	ldr	r3, [pc, #432]	@ (80183d4 <ip4_frag+0x274>)
 8018224:	f44f 7249 	mov.w	r2, #804	@ 0x324
 8018228:	496d      	ldr	r1, [pc, #436]	@ (80183e0 <ip4_frag+0x280>)
 801822a:	486c      	ldr	r0, [pc, #432]	@ (80183dc <ip4_frag+0x27c>)
 801822c:	f000 fbca 	bl	80189c4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018232:	685b      	ldr	r3, [r3, #4]
 8018234:	2214      	movs	r2, #20
 8018236:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8018238:	4618      	mov	r0, r3
 801823a:	f000 fc6a 	bl	8018b12 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018240:	685b      	ldr	r3, [r3, #4]
 8018242:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 8018244:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018246:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801824a:	e064      	b.n	8018316 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801824c:	68fb      	ldr	r3, [r7, #12]
 801824e:	895a      	ldrh	r2, [r3, #10]
 8018250:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8018252:	1ad3      	subs	r3, r2, r3
 8018254:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018256:	68fb      	ldr	r3, [r7, #12]
 8018258:	895b      	ldrh	r3, [r3, #10]
 801825a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801825c:	429a      	cmp	r2, r3
 801825e:	d906      	bls.n	801826e <ip4_frag+0x10e>
 8018260:	4b5c      	ldr	r3, [pc, #368]	@ (80183d4 <ip4_frag+0x274>)
 8018262:	f240 322d 	movw	r2, #813	@ 0x32d
 8018266:	495f      	ldr	r1, [pc, #380]	@ (80183e4 <ip4_frag+0x284>)
 8018268:	485c      	ldr	r0, [pc, #368]	@ (80183dc <ip4_frag+0x27c>)
 801826a:	f000 fbab 	bl	80189c4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801826e:	8bfa      	ldrh	r2, [r7, #30]
 8018270:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018274:	4293      	cmp	r3, r2
 8018276:	bf28      	it	cs
 8018278:	4613      	movcs	r3, r2
 801827a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801827e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018282:	2b00      	cmp	r3, #0
 8018284:	d105      	bne.n	8018292 <ip4_frag+0x132>
        poff = 0;
 8018286:	2300      	movs	r3, #0
 8018288:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	60fb      	str	r3, [r7, #12]
        continue;
 8018290:	e041      	b.n	8018316 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018292:	f7ff ff0d 	bl	80180b0 <ip_frag_alloc_pbuf_custom_ref>
 8018296:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018298:	69bb      	ldr	r3, [r7, #24]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d103      	bne.n	80182a6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801829e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80182a0:	f7f7 fc22 	bl	800fae8 <pbuf_free>
        goto memerr;
 80182a4:	e08f      	b.n	80183c6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182a6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80182ac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80182ae:	4413      	add	r3, r2
 80182b0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 80182b4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80182b8:	9201      	str	r2, [sp, #4]
 80182ba:	9300      	str	r3, [sp, #0]
 80182bc:	4603      	mov	r3, r0
 80182be:	2241      	movs	r2, #65	@ 0x41
 80182c0:	2000      	movs	r0, #0
 80182c2:	f7f7 fa57 	bl	800f774 <pbuf_alloced_custom>
 80182c6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d106      	bne.n	80182dc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80182ce:	69b8      	ldr	r0, [r7, #24]
 80182d0:	f7ff fef6 	bl	80180c0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80182d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80182d6:	f7f7 fc07 	bl	800fae8 <pbuf_free>
        goto memerr;
 80182da:	e074      	b.n	80183c6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80182dc:	68f8      	ldr	r0, [r7, #12]
 80182de:	f7f7 fca9 	bl	800fc34 <pbuf_ref>
      pcr->original = p;
 80182e2:	69bb      	ldr	r3, [r7, #24]
 80182e4:	68fa      	ldr	r2, [r7, #12]
 80182e6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80182e8:	69bb      	ldr	r3, [r7, #24]
 80182ea:	4a3f      	ldr	r2, [pc, #252]	@ (80183e8 <ip4_frag+0x288>)
 80182ec:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80182ee:	6979      	ldr	r1, [r7, #20]
 80182f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80182f2:	f7f7 fcc7 	bl	800fc84 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80182f6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80182fa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80182fe:	1ad3      	subs	r3, r2, r3
 8018300:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8018304:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018308:	2b00      	cmp	r3, #0
 801830a:	d004      	beq.n	8018316 <ip4_frag+0x1b6>
        poff = 0;
 801830c:	2300      	movs	r3, #0
 801830e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018316:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801831a:	2b00      	cmp	r3, #0
 801831c:	d196      	bne.n	801824c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801831e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8018320:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8018324:	4413      	add	r3, r2
 8018326:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018328:	68bb      	ldr	r3, [r7, #8]
 801832a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801832c:	f1a3 0213 	sub.w	r2, r3, #19
 8018330:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018334:	429a      	cmp	r2, r3
 8018336:	bfcc      	ite	gt
 8018338:	2301      	movgt	r3, #1
 801833a:	2300      	movle	r3, #0
 801833c:	b2db      	uxtb	r3, r3
 801833e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018340:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8018344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018348:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801834a:	6a3b      	ldr	r3, [r7, #32]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d002      	beq.n	8018356 <ip4_frag+0x1f6>
 8018350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018352:	2b00      	cmp	r3, #0
 8018354:	d003      	beq.n	801835e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018356:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018358:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801835c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801835e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8018360:	4618      	mov	r0, r3
 8018362:	f7f5 ff03 	bl	800e16c <lwip_htons>
 8018366:	4603      	mov	r3, r0
 8018368:	461a      	mov	r2, r3
 801836a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801836c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801836e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018370:	3314      	adds	r3, #20
 8018372:	b29b      	uxth	r3, r3
 8018374:	4618      	mov	r0, r3
 8018376:	f7f5 fef9 	bl	800e16c <lwip_htons>
 801837a:	4603      	mov	r3, r0
 801837c:	461a      	mov	r2, r3
 801837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018380:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018384:	2200      	movs	r2, #0
 8018386:	729a      	strb	r2, [r3, #10]
 8018388:	2200      	movs	r2, #0
 801838a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801838c:	68bb      	ldr	r3, [r7, #8]
 801838e:	695b      	ldr	r3, [r3, #20]
 8018390:	687a      	ldr	r2, [r7, #4]
 8018392:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018394:	68b8      	ldr	r0, [r7, #8]
 8018396:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018398:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801839a:	f7f7 fba5 	bl	800fae8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801839e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80183a2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80183a4:	1ad3      	subs	r3, r2, r3
 80183a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 80183aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80183ae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80183b0:	4413      	add	r3, r2
 80183b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 80183b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	f47f af19 	bne.w	80181f2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80183c0:	2300      	movs	r3, #0
 80183c2:	e002      	b.n	80183ca <ip4_frag+0x26a>
      goto memerr;
 80183c4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80183c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3748      	adds	r7, #72	@ 0x48
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	0801c160 	.word	0x0801c160
 80183d8:	0801c33c 	.word	0x0801c33c
 80183dc:	0801c1a8 	.word	0x0801c1a8
 80183e0:	0801c358 	.word	0x0801c358
 80183e4:	0801c378 	.word	0x0801c378
 80183e8:	080180f9 	.word	0x080180f9

080183ec <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b086      	sub	sp, #24
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
 80183f4:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80183f6:	230e      	movs	r3, #14
 80183f8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	895b      	ldrh	r3, [r3, #10]
 80183fe:	2b0e      	cmp	r3, #14
 8018400:	d96e      	bls.n	80184e0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	7bdb      	ldrb	r3, [r3, #15]
 8018406:	2b00      	cmp	r3, #0
 8018408:	d106      	bne.n	8018418 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801840a:	683b      	ldr	r3, [r7, #0]
 801840c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018410:	3301      	adds	r3, #1
 8018412:	b2da      	uxtb	r2, r3
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	685b      	ldr	r3, [r3, #4]
 801841c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	7b1a      	ldrb	r2, [r3, #12]
 8018422:	7b5b      	ldrb	r3, [r3, #13]
 8018424:	021b      	lsls	r3, r3, #8
 8018426:	4313      	orrs	r3, r2
 8018428:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801842a:	693b      	ldr	r3, [r7, #16]
 801842c:	781b      	ldrb	r3, [r3, #0]
 801842e:	f003 0301 	and.w	r3, r3, #1
 8018432:	2b00      	cmp	r3, #0
 8018434:	d023      	beq.n	801847e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018436:	693b      	ldr	r3, [r7, #16]
 8018438:	781b      	ldrb	r3, [r3, #0]
 801843a:	2b01      	cmp	r3, #1
 801843c:	d10f      	bne.n	801845e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801843e:	693b      	ldr	r3, [r7, #16]
 8018440:	785b      	ldrb	r3, [r3, #1]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d11b      	bne.n	801847e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801844a:	2b5e      	cmp	r3, #94	@ 0x5e
 801844c:	d117      	bne.n	801847e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	7b5b      	ldrb	r3, [r3, #13]
 8018452:	f043 0310 	orr.w	r3, r3, #16
 8018456:	b2da      	uxtb	r2, r3
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	735a      	strb	r2, [r3, #13]
 801845c:	e00f      	b.n	801847e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	2206      	movs	r2, #6
 8018462:	4928      	ldr	r1, [pc, #160]	@ (8018504 <ethernet_input+0x118>)
 8018464:	4618      	mov	r0, r3
 8018466:	f000 fabf 	bl	80189e8 <memcmp>
 801846a:	4603      	mov	r3, r0
 801846c:	2b00      	cmp	r3, #0
 801846e:	d106      	bne.n	801847e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	7b5b      	ldrb	r3, [r3, #13]
 8018474:	f043 0308 	orr.w	r3, r3, #8
 8018478:	b2da      	uxtb	r2, r3
 801847a:	687b      	ldr	r3, [r7, #4]
 801847c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801847e:	89fb      	ldrh	r3, [r7, #14]
 8018480:	2b08      	cmp	r3, #8
 8018482:	d003      	beq.n	801848c <ethernet_input+0xa0>
 8018484:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8018488:	d014      	beq.n	80184b4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801848a:	e032      	b.n	80184f2 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801848c:	683b      	ldr	r3, [r7, #0]
 801848e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8018492:	f003 0308 	and.w	r3, r3, #8
 8018496:	2b00      	cmp	r3, #0
 8018498:	d024      	beq.n	80184e4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801849a:	8afb      	ldrh	r3, [r7, #22]
 801849c:	4619      	mov	r1, r3
 801849e:	6878      	ldr	r0, [r7, #4]
 80184a0:	f7f7 fa9c 	bl	800f9dc <pbuf_remove_header>
 80184a4:	4603      	mov	r3, r0
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d11e      	bne.n	80184e8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80184aa:	6839      	ldr	r1, [r7, #0]
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f7fe ff21 	bl	80172f4 <ip4_input>
      break;
 80184b2:	e013      	b.n	80184dc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80184b4:	683b      	ldr	r3, [r7, #0]
 80184b6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80184ba:	f003 0308 	and.w	r3, r3, #8
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d014      	beq.n	80184ec <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80184c2:	8afb      	ldrh	r3, [r7, #22]
 80184c4:	4619      	mov	r1, r3
 80184c6:	6878      	ldr	r0, [r7, #4]
 80184c8:	f7f7 fa88 	bl	800f9dc <pbuf_remove_header>
 80184cc:	4603      	mov	r3, r0
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d10e      	bne.n	80184f0 <ethernet_input+0x104>
        etharp_input(p, netif);
 80184d2:	6839      	ldr	r1, [r7, #0]
 80184d4:	6878      	ldr	r0, [r7, #4]
 80184d6:	f7fe f89b 	bl	8016610 <etharp_input>
      break;
 80184da:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80184dc:	2300      	movs	r3, #0
 80184de:	e00c      	b.n	80184fa <ethernet_input+0x10e>
    goto free_and_return;
 80184e0:	bf00      	nop
 80184e2:	e006      	b.n	80184f2 <ethernet_input+0x106>
        goto free_and_return;
 80184e4:	bf00      	nop
 80184e6:	e004      	b.n	80184f2 <ethernet_input+0x106>
        goto free_and_return;
 80184e8:	bf00      	nop
 80184ea:	e002      	b.n	80184f2 <ethernet_input+0x106>
        goto free_and_return;
 80184ec:	bf00      	nop
 80184ee:	e000      	b.n	80184f2 <ethernet_input+0x106>
        goto free_and_return;
 80184f0:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80184f2:	6878      	ldr	r0, [r7, #4]
 80184f4:	f7f7 faf8 	bl	800fae8 <pbuf_free>
  return ERR_OK;
 80184f8:	2300      	movs	r3, #0
}
 80184fa:	4618      	mov	r0, r3
 80184fc:	3718      	adds	r7, #24
 80184fe:	46bd      	mov	sp, r7
 8018500:	bd80      	pop	{r7, pc}
 8018502:	bf00      	nop
 8018504:	0801c554 	.word	0x0801c554

08018508 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018508:	b580      	push	{r7, lr}
 801850a:	b086      	sub	sp, #24
 801850c:	af00      	add	r7, sp, #0
 801850e:	60f8      	str	r0, [r7, #12]
 8018510:	60b9      	str	r1, [r7, #8]
 8018512:	607a      	str	r2, [r7, #4]
 8018514:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018516:	8c3b      	ldrh	r3, [r7, #32]
 8018518:	4618      	mov	r0, r3
 801851a:	f7f5 fe27 	bl	800e16c <lwip_htons>
 801851e:	4603      	mov	r3, r0
 8018520:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018522:	210e      	movs	r1, #14
 8018524:	68b8      	ldr	r0, [r7, #8]
 8018526:	f7f7 fa49 	bl	800f9bc <pbuf_add_header>
 801852a:	4603      	mov	r3, r0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d125      	bne.n	801857c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018530:	68bb      	ldr	r3, [r7, #8]
 8018532:	685b      	ldr	r3, [r3, #4]
 8018534:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	8afa      	ldrh	r2, [r7, #22]
 801853a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801853c:	693b      	ldr	r3, [r7, #16]
 801853e:	2206      	movs	r2, #6
 8018540:	6839      	ldr	r1, [r7, #0]
 8018542:	4618      	mov	r0, r3
 8018544:	f000 fae5 	bl	8018b12 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018548:	693b      	ldr	r3, [r7, #16]
 801854a:	3306      	adds	r3, #6
 801854c:	2206      	movs	r2, #6
 801854e:	6879      	ldr	r1, [r7, #4]
 8018550:	4618      	mov	r0, r3
 8018552:	f000 fade 	bl	8018b12 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801855c:	2b06      	cmp	r3, #6
 801855e:	d006      	beq.n	801856e <ethernet_output+0x66>
 8018560:	4b0a      	ldr	r3, [pc, #40]	@ (801858c <ethernet_output+0x84>)
 8018562:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8018566:	490a      	ldr	r1, [pc, #40]	@ (8018590 <ethernet_output+0x88>)
 8018568:	480a      	ldr	r0, [pc, #40]	@ (8018594 <ethernet_output+0x8c>)
 801856a:	f000 fa2b 	bl	80189c4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801856e:	68fb      	ldr	r3, [r7, #12]
 8018570:	699b      	ldr	r3, [r3, #24]
 8018572:	68b9      	ldr	r1, [r7, #8]
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	4798      	blx	r3
 8018578:	4603      	mov	r3, r0
 801857a:	e002      	b.n	8018582 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801857c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801857e:	f06f 0301 	mvn.w	r3, #1
}
 8018582:	4618      	mov	r0, r3
 8018584:	3718      	adds	r7, #24
 8018586:	46bd      	mov	sp, r7
 8018588:	bd80      	pop	{r7, pc}
 801858a:	bf00      	nop
 801858c:	0801c388 	.word	0x0801c388
 8018590:	0801c3c0 	.word	0x0801c3c0
 8018594:	0801c3f4 	.word	0x0801c3f4

08018598 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b086      	sub	sp, #24
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
 80185a0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80185a2:	683b      	ldr	r3, [r7, #0]
 80185a4:	60bb      	str	r3, [r7, #8]
 80185a6:	2304      	movs	r3, #4
 80185a8:	60fb      	str	r3, [r7, #12]
 80185aa:	2300      	movs	r3, #0
 80185ac:	613b      	str	r3, [r7, #16]
 80185ae:	2300      	movs	r3, #0
 80185b0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80185b2:	f107 0308 	add.w	r3, r7, #8
 80185b6:	2100      	movs	r1, #0
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7f2 fdd9 	bl	800b170 <osMessageCreate>
 80185be:	4602      	mov	r2, r0
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d102      	bne.n	80185d2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80185cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80185d0:	e000      	b.n	80185d4 <sys_mbox_new+0x3c>

  return ERR_OK;
 80185d2:	2300      	movs	r3, #0
}
 80185d4:	4618      	mov	r0, r3
 80185d6:	3718      	adds	r7, #24
 80185d8:	46bd      	mov	sp, r7
 80185da:	bd80      	pop	{r7, pc}

080185dc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80185dc:	b580      	push	{r7, lr}
 80185de:	b084      	sub	sp, #16
 80185e0:	af00      	add	r7, sp, #0
 80185e2:	6078      	str	r0, [r7, #4]
 80185e4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	6839      	ldr	r1, [r7, #0]
 80185ec:	2200      	movs	r2, #0
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7f2 fde6 	bl	800b1c0 <osMessagePut>
 80185f4:	4603      	mov	r3, r0
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d102      	bne.n	8018600 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80185fa:	2300      	movs	r3, #0
 80185fc:	73fb      	strb	r3, [r7, #15]
 80185fe:	e001      	b.n	8018604 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018600:	23ff      	movs	r3, #255	@ 0xff
 8018602:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018604:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018608:	4618      	mov	r0, r3
 801860a:	3710      	adds	r7, #16
 801860c:	46bd      	mov	sp, r7
 801860e:	bd80      	pop	{r7, pc}

08018610 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b08c      	sub	sp, #48	@ 0x30
 8018614:	af00      	add	r7, sp, #0
 8018616:	61f8      	str	r0, [r7, #28]
 8018618:	61b9      	str	r1, [r7, #24]
 801861a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801861c:	f7f2 fbe6 	bl	800adec <osKernelSysTick>
 8018620:	62f8      	str	r0, [r7, #44]	@ 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018622:	697b      	ldr	r3, [r7, #20]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d017      	beq.n	8018658 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018628:	69fb      	ldr	r3, [r7, #28]
 801862a:	6819      	ldr	r1, [r3, #0]
 801862c:	f107 0320 	add.w	r3, r7, #32
 8018630:	697a      	ldr	r2, [r7, #20]
 8018632:	4618      	mov	r0, r3
 8018634:	f7f2 fe04 	bl	800b240 <osMessageGet>

    if(event.status == osEventMessage)
 8018638:	6a3b      	ldr	r3, [r7, #32]
 801863a:	2b10      	cmp	r3, #16
 801863c:	d109      	bne.n	8018652 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018640:	461a      	mov	r2, r3
 8018642:	69bb      	ldr	r3, [r7, #24]
 8018644:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018646:	f7f2 fbd1 	bl	800adec <osKernelSysTick>
 801864a:	4602      	mov	r2, r0
 801864c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801864e:	1ad3      	subs	r3, r2, r3
 8018650:	e019      	b.n	8018686 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018656:	e016      	b.n	8018686 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018658:	69fb      	ldr	r3, [r7, #28]
 801865a:	6819      	ldr	r1, [r3, #0]
 801865c:	463b      	mov	r3, r7
 801865e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018662:	4618      	mov	r0, r3
 8018664:	f7f2 fdec 	bl	800b240 <osMessageGet>
 8018668:	f107 0320 	add.w	r3, r7, #32
 801866c:	463a      	mov	r2, r7
 801866e:	ca07      	ldmia	r2, {r0, r1, r2}
 8018670:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018676:	461a      	mov	r2, r3
 8018678:	69bb      	ldr	r3, [r7, #24]
 801867a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801867c:	f7f2 fbb6 	bl	800adec <osKernelSysTick>
 8018680:	4602      	mov	r2, r0
 8018682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018684:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018686:	4618      	mov	r0, r3
 8018688:	3730      	adds	r7, #48	@ 0x30
 801868a:	46bd      	mov	sp, r7
 801868c:	bd80      	pop	{r7, pc}

0801868e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801868e:	b480      	push	{r7}
 8018690:	b083      	sub	sp, #12
 8018692:	af00      	add	r7, sp, #0
 8018694:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	2b00      	cmp	r3, #0
 801869c:	d101      	bne.n	80186a2 <sys_mbox_valid+0x14>
    return 0;
 801869e:	2300      	movs	r3, #0
 80186a0:	e000      	b.n	80186a4 <sys_mbox_valid+0x16>
  else
    return 1;
 80186a2:	2301      	movs	r3, #1
}
 80186a4:	4618      	mov	r0, r3
 80186a6:	370c      	adds	r7, #12
 80186a8:	46bd      	mov	sp, r7
 80186aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ae:	4770      	bx	lr

080186b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80186b4:	4803      	ldr	r0, [pc, #12]	@ (80186c4 <sys_init+0x14>)
 80186b6:	f7f2 fc09 	bl	800aecc <osMutexCreate>
 80186ba:	4603      	mov	r3, r0
 80186bc:	4a02      	ldr	r2, [pc, #8]	@ (80186c8 <sys_init+0x18>)
 80186be:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80186c0:	bf00      	nop
 80186c2:	bd80      	pop	{r7, pc}
 80186c4:	0801c564 	.word	0x0801c564
 80186c8:	240104b4 	.word	0x240104b4

080186cc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80186d4:	2300      	movs	r3, #0
 80186d6:	60bb      	str	r3, [r7, #8]
 80186d8:	2300      	movs	r3, #0
 80186da:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80186dc:	f107 0308 	add.w	r3, r7, #8
 80186e0:	4618      	mov	r0, r3
 80186e2:	f7f2 fbf3 	bl	800aecc <osMutexCreate>
 80186e6:	4602      	mov	r2, r0
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d102      	bne.n	80186fa <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80186f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80186f8:	e000      	b.n	80186fc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80186fa:	2300      	movs	r3, #0
}
 80186fc:	4618      	mov	r0, r3
 80186fe:	3710      	adds	r7, #16
 8018700:	46bd      	mov	sp, r7
 8018702:	bd80      	pop	{r7, pc}

08018704 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018704:	b580      	push	{r7, lr}
 8018706:	b082      	sub	sp, #8
 8018708:	af00      	add	r7, sp, #0
 801870a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018714:	4618      	mov	r0, r3
 8018716:	f7f2 fbf1 	bl	800aefc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801871a:	bf00      	nop
 801871c:	3708      	adds	r7, #8
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}

08018722 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018722:	b580      	push	{r7, lr}
 8018724:	b082      	sub	sp, #8
 8018726:	af00      	add	r7, sp, #0
 8018728:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	4618      	mov	r0, r3
 8018730:	f7f2 fc32 	bl	800af98 <osMutexRelease>
}
 8018734:	bf00      	nop
 8018736:	3708      	adds	r7, #8
 8018738:	46bd      	mov	sp, r7
 801873a:	bd80      	pop	{r7, pc}

0801873c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b08c      	sub	sp, #48	@ 0x30
 8018740:	af00      	add	r7, sp, #0
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	607a      	str	r2, [r7, #4]
 8018748:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801874a:	f107 0314 	add.w	r3, r7, #20
 801874e:	2200      	movs	r2, #0
 8018750:	601a      	str	r2, [r3, #0]
 8018752:	605a      	str	r2, [r3, #4]
 8018754:	609a      	str	r2, [r3, #8]
 8018756:	60da      	str	r2, [r3, #12]
 8018758:	611a      	str	r2, [r3, #16]
 801875a:	615a      	str	r2, [r3, #20]
 801875c:	619a      	str	r2, [r3, #24]
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	617b      	str	r3, [r7, #20]
 8018762:	68bb      	ldr	r3, [r7, #8]
 8018764:	61bb      	str	r3, [r7, #24]
 8018766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8018768:	b21b      	sxth	r3, r3
 801876a:	83bb      	strh	r3, [r7, #28]
 801876c:	683b      	ldr	r3, [r7, #0]
 801876e:	627b      	str	r3, [r7, #36]	@ 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018770:	f107 0314 	add.w	r3, r7, #20
 8018774:	6879      	ldr	r1, [r7, #4]
 8018776:	4618      	mov	r0, r3
 8018778:	f7f2 fb48 	bl	800ae0c <osThreadCreate>
 801877c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801877e:	4618      	mov	r0, r3
 8018780:	3730      	adds	r7, #48	@ 0x30
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}
	...

08018788 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018788:	b580      	push	{r7, lr}
 801878a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801878c:	4b04      	ldr	r3, [pc, #16]	@ (80187a0 <sys_arch_protect+0x18>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8018794:	4618      	mov	r0, r3
 8018796:	f7f2 fbb1 	bl	800aefc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801879a:	2301      	movs	r3, #1
}
 801879c:	4618      	mov	r0, r3
 801879e:	bd80      	pop	{r7, pc}
 80187a0:	240104b4 	.word	0x240104b4

080187a4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
 80187aa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80187ac:	4b04      	ldr	r3, [pc, #16]	@ (80187c0 <sys_arch_unprotect+0x1c>)
 80187ae:	681b      	ldr	r3, [r3, #0]
 80187b0:	4618      	mov	r0, r3
 80187b2:	f7f2 fbf1 	bl	800af98 <osMutexRelease>
}
 80187b6:	bf00      	nop
 80187b8:	3708      	adds	r7, #8
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}
 80187be:	bf00      	nop
 80187c0:	240104b4 	.word	0x240104b4

080187c4 <rand>:
 80187c4:	4b16      	ldr	r3, [pc, #88]	@ (8018820 <rand+0x5c>)
 80187c6:	b510      	push	{r4, lr}
 80187c8:	681c      	ldr	r4, [r3, #0]
 80187ca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80187cc:	b9b3      	cbnz	r3, 80187fc <rand+0x38>
 80187ce:	2018      	movs	r0, #24
 80187d0:	f000 fb58 	bl	8018e84 <malloc>
 80187d4:	4602      	mov	r2, r0
 80187d6:	6320      	str	r0, [r4, #48]	@ 0x30
 80187d8:	b920      	cbnz	r0, 80187e4 <rand+0x20>
 80187da:	4b12      	ldr	r3, [pc, #72]	@ (8018824 <rand+0x60>)
 80187dc:	4812      	ldr	r0, [pc, #72]	@ (8018828 <rand+0x64>)
 80187de:	2152      	movs	r1, #82	@ 0x52
 80187e0:	f000 f9a6 	bl	8018b30 <__assert_func>
 80187e4:	4911      	ldr	r1, [pc, #68]	@ (801882c <rand+0x68>)
 80187e6:	4b12      	ldr	r3, [pc, #72]	@ (8018830 <rand+0x6c>)
 80187e8:	e9c0 1300 	strd	r1, r3, [r0]
 80187ec:	4b11      	ldr	r3, [pc, #68]	@ (8018834 <rand+0x70>)
 80187ee:	6083      	str	r3, [r0, #8]
 80187f0:	230b      	movs	r3, #11
 80187f2:	8183      	strh	r3, [r0, #12]
 80187f4:	2100      	movs	r1, #0
 80187f6:	2001      	movs	r0, #1
 80187f8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80187fc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80187fe:	480e      	ldr	r0, [pc, #56]	@ (8018838 <rand+0x74>)
 8018800:	690b      	ldr	r3, [r1, #16]
 8018802:	694c      	ldr	r4, [r1, #20]
 8018804:	4a0d      	ldr	r2, [pc, #52]	@ (801883c <rand+0x78>)
 8018806:	4358      	muls	r0, r3
 8018808:	fb02 0004 	mla	r0, r2, r4, r0
 801880c:	fba3 3202 	umull	r3, r2, r3, r2
 8018810:	3301      	adds	r3, #1
 8018812:	eb40 0002 	adc.w	r0, r0, r2
 8018816:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801881a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801881e:	bd10      	pop	{r4, pc}
 8018820:	240049cc 	.word	0x240049cc
 8018824:	0801c56c 	.word	0x0801c56c
 8018828:	0801c583 	.word	0x0801c583
 801882c:	abcd330e 	.word	0xabcd330e
 8018830:	e66d1234 	.word	0xe66d1234
 8018834:	0005deec 	.word	0x0005deec
 8018838:	5851f42d 	.word	0x5851f42d
 801883c:	4c957f2d 	.word	0x4c957f2d

08018840 <std>:
 8018840:	2300      	movs	r3, #0
 8018842:	b510      	push	{r4, lr}
 8018844:	4604      	mov	r4, r0
 8018846:	e9c0 3300 	strd	r3, r3, [r0]
 801884a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801884e:	6083      	str	r3, [r0, #8]
 8018850:	8181      	strh	r1, [r0, #12]
 8018852:	6643      	str	r3, [r0, #100]	@ 0x64
 8018854:	81c2      	strh	r2, [r0, #14]
 8018856:	6183      	str	r3, [r0, #24]
 8018858:	4619      	mov	r1, r3
 801885a:	2208      	movs	r2, #8
 801885c:	305c      	adds	r0, #92	@ 0x5c
 801885e:	f000 f8d3 	bl	8018a08 <memset>
 8018862:	4b0d      	ldr	r3, [pc, #52]	@ (8018898 <std+0x58>)
 8018864:	6263      	str	r3, [r4, #36]	@ 0x24
 8018866:	4b0d      	ldr	r3, [pc, #52]	@ (801889c <std+0x5c>)
 8018868:	62a3      	str	r3, [r4, #40]	@ 0x28
 801886a:	4b0d      	ldr	r3, [pc, #52]	@ (80188a0 <std+0x60>)
 801886c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801886e:	4b0d      	ldr	r3, [pc, #52]	@ (80188a4 <std+0x64>)
 8018870:	6323      	str	r3, [r4, #48]	@ 0x30
 8018872:	4b0d      	ldr	r3, [pc, #52]	@ (80188a8 <std+0x68>)
 8018874:	6224      	str	r4, [r4, #32]
 8018876:	429c      	cmp	r4, r3
 8018878:	d006      	beq.n	8018888 <std+0x48>
 801887a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801887e:	4294      	cmp	r4, r2
 8018880:	d002      	beq.n	8018888 <std+0x48>
 8018882:	33d0      	adds	r3, #208	@ 0xd0
 8018884:	429c      	cmp	r4, r3
 8018886:	d105      	bne.n	8018894 <std+0x54>
 8018888:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018890:	f000 b93c 	b.w	8018b0c <__retarget_lock_init_recursive>
 8018894:	bd10      	pop	{r4, pc}
 8018896:	bf00      	nop
 8018898:	08019465 	.word	0x08019465
 801889c:	08019487 	.word	0x08019487
 80188a0:	080194bf 	.word	0x080194bf
 80188a4:	080194e3 	.word	0x080194e3
 80188a8:	240104b8 	.word	0x240104b8

080188ac <stdio_exit_handler>:
 80188ac:	4a02      	ldr	r2, [pc, #8]	@ (80188b8 <stdio_exit_handler+0xc>)
 80188ae:	4903      	ldr	r1, [pc, #12]	@ (80188bc <stdio_exit_handler+0x10>)
 80188b0:	4803      	ldr	r0, [pc, #12]	@ (80188c0 <stdio_exit_handler+0x14>)
 80188b2:	f000 b869 	b.w	8018988 <_fwalk_sglue>
 80188b6:	bf00      	nop
 80188b8:	240049c0 	.word	0x240049c0
 80188bc:	080193fd 	.word	0x080193fd
 80188c0:	240049d0 	.word	0x240049d0

080188c4 <cleanup_stdio>:
 80188c4:	6841      	ldr	r1, [r0, #4]
 80188c6:	4b0c      	ldr	r3, [pc, #48]	@ (80188f8 <cleanup_stdio+0x34>)
 80188c8:	4299      	cmp	r1, r3
 80188ca:	b510      	push	{r4, lr}
 80188cc:	4604      	mov	r4, r0
 80188ce:	d001      	beq.n	80188d4 <cleanup_stdio+0x10>
 80188d0:	f000 fd94 	bl	80193fc <_fflush_r>
 80188d4:	68a1      	ldr	r1, [r4, #8]
 80188d6:	4b09      	ldr	r3, [pc, #36]	@ (80188fc <cleanup_stdio+0x38>)
 80188d8:	4299      	cmp	r1, r3
 80188da:	d002      	beq.n	80188e2 <cleanup_stdio+0x1e>
 80188dc:	4620      	mov	r0, r4
 80188de:	f000 fd8d 	bl	80193fc <_fflush_r>
 80188e2:	68e1      	ldr	r1, [r4, #12]
 80188e4:	4b06      	ldr	r3, [pc, #24]	@ (8018900 <cleanup_stdio+0x3c>)
 80188e6:	4299      	cmp	r1, r3
 80188e8:	d004      	beq.n	80188f4 <cleanup_stdio+0x30>
 80188ea:	4620      	mov	r0, r4
 80188ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80188f0:	f000 bd84 	b.w	80193fc <_fflush_r>
 80188f4:	bd10      	pop	{r4, pc}
 80188f6:	bf00      	nop
 80188f8:	240104b8 	.word	0x240104b8
 80188fc:	24010520 	.word	0x24010520
 8018900:	24010588 	.word	0x24010588

08018904 <global_stdio_init.part.0>:
 8018904:	b510      	push	{r4, lr}
 8018906:	4b0b      	ldr	r3, [pc, #44]	@ (8018934 <global_stdio_init.part.0+0x30>)
 8018908:	4c0b      	ldr	r4, [pc, #44]	@ (8018938 <global_stdio_init.part.0+0x34>)
 801890a:	4a0c      	ldr	r2, [pc, #48]	@ (801893c <global_stdio_init.part.0+0x38>)
 801890c:	601a      	str	r2, [r3, #0]
 801890e:	4620      	mov	r0, r4
 8018910:	2200      	movs	r2, #0
 8018912:	2104      	movs	r1, #4
 8018914:	f7ff ff94 	bl	8018840 <std>
 8018918:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801891c:	2201      	movs	r2, #1
 801891e:	2109      	movs	r1, #9
 8018920:	f7ff ff8e 	bl	8018840 <std>
 8018924:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8018928:	2202      	movs	r2, #2
 801892a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801892e:	2112      	movs	r1, #18
 8018930:	f7ff bf86 	b.w	8018840 <std>
 8018934:	240105f0 	.word	0x240105f0
 8018938:	240104b8 	.word	0x240104b8
 801893c:	080188ad 	.word	0x080188ad

08018940 <__sfp_lock_acquire>:
 8018940:	4801      	ldr	r0, [pc, #4]	@ (8018948 <__sfp_lock_acquire+0x8>)
 8018942:	f000 b8e4 	b.w	8018b0e <__retarget_lock_acquire_recursive>
 8018946:	bf00      	nop
 8018948:	240105f9 	.word	0x240105f9

0801894c <__sfp_lock_release>:
 801894c:	4801      	ldr	r0, [pc, #4]	@ (8018954 <__sfp_lock_release+0x8>)
 801894e:	f000 b8df 	b.w	8018b10 <__retarget_lock_release_recursive>
 8018952:	bf00      	nop
 8018954:	240105f9 	.word	0x240105f9

08018958 <__sinit>:
 8018958:	b510      	push	{r4, lr}
 801895a:	4604      	mov	r4, r0
 801895c:	f7ff fff0 	bl	8018940 <__sfp_lock_acquire>
 8018960:	6a23      	ldr	r3, [r4, #32]
 8018962:	b11b      	cbz	r3, 801896c <__sinit+0x14>
 8018964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018968:	f7ff bff0 	b.w	801894c <__sfp_lock_release>
 801896c:	4b04      	ldr	r3, [pc, #16]	@ (8018980 <__sinit+0x28>)
 801896e:	6223      	str	r3, [r4, #32]
 8018970:	4b04      	ldr	r3, [pc, #16]	@ (8018984 <__sinit+0x2c>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	2b00      	cmp	r3, #0
 8018976:	d1f5      	bne.n	8018964 <__sinit+0xc>
 8018978:	f7ff ffc4 	bl	8018904 <global_stdio_init.part.0>
 801897c:	e7f2      	b.n	8018964 <__sinit+0xc>
 801897e:	bf00      	nop
 8018980:	080188c5 	.word	0x080188c5
 8018984:	240105f0 	.word	0x240105f0

08018988 <_fwalk_sglue>:
 8018988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801898c:	4607      	mov	r7, r0
 801898e:	4688      	mov	r8, r1
 8018990:	4614      	mov	r4, r2
 8018992:	2600      	movs	r6, #0
 8018994:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018998:	f1b9 0901 	subs.w	r9, r9, #1
 801899c:	d505      	bpl.n	80189aa <_fwalk_sglue+0x22>
 801899e:	6824      	ldr	r4, [r4, #0]
 80189a0:	2c00      	cmp	r4, #0
 80189a2:	d1f7      	bne.n	8018994 <_fwalk_sglue+0xc>
 80189a4:	4630      	mov	r0, r6
 80189a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80189aa:	89ab      	ldrh	r3, [r5, #12]
 80189ac:	2b01      	cmp	r3, #1
 80189ae:	d907      	bls.n	80189c0 <_fwalk_sglue+0x38>
 80189b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80189b4:	3301      	adds	r3, #1
 80189b6:	d003      	beq.n	80189c0 <_fwalk_sglue+0x38>
 80189b8:	4629      	mov	r1, r5
 80189ba:	4638      	mov	r0, r7
 80189bc:	47c0      	blx	r8
 80189be:	4306      	orrs	r6, r0
 80189c0:	3568      	adds	r5, #104	@ 0x68
 80189c2:	e7e9      	b.n	8018998 <_fwalk_sglue+0x10>

080189c4 <iprintf>:
 80189c4:	b40f      	push	{r0, r1, r2, r3}
 80189c6:	b507      	push	{r0, r1, r2, lr}
 80189c8:	4906      	ldr	r1, [pc, #24]	@ (80189e4 <iprintf+0x20>)
 80189ca:	ab04      	add	r3, sp, #16
 80189cc:	6808      	ldr	r0, [r1, #0]
 80189ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80189d2:	6881      	ldr	r1, [r0, #8]
 80189d4:	9301      	str	r3, [sp, #4]
 80189d6:	f000 f93d 	bl	8018c54 <_vfiprintf_r>
 80189da:	b003      	add	sp, #12
 80189dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80189e0:	b004      	add	sp, #16
 80189e2:	4770      	bx	lr
 80189e4:	240049cc 	.word	0x240049cc

080189e8 <memcmp>:
 80189e8:	b510      	push	{r4, lr}
 80189ea:	3901      	subs	r1, #1
 80189ec:	4402      	add	r2, r0
 80189ee:	4290      	cmp	r0, r2
 80189f0:	d101      	bne.n	80189f6 <memcmp+0xe>
 80189f2:	2000      	movs	r0, #0
 80189f4:	e005      	b.n	8018a02 <memcmp+0x1a>
 80189f6:	7803      	ldrb	r3, [r0, #0]
 80189f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80189fc:	42a3      	cmp	r3, r4
 80189fe:	d001      	beq.n	8018a04 <memcmp+0x1c>
 8018a00:	1b18      	subs	r0, r3, r4
 8018a02:	bd10      	pop	{r4, pc}
 8018a04:	3001      	adds	r0, #1
 8018a06:	e7f2      	b.n	80189ee <memcmp+0x6>

08018a08 <memset>:
 8018a08:	4402      	add	r2, r0
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	4293      	cmp	r3, r2
 8018a0e:	d100      	bne.n	8018a12 <memset+0xa>
 8018a10:	4770      	bx	lr
 8018a12:	f803 1b01 	strb.w	r1, [r3], #1
 8018a16:	e7f9      	b.n	8018a0c <memset+0x4>

08018a18 <_reclaim_reent>:
 8018a18:	4b29      	ldr	r3, [pc, #164]	@ (8018ac0 <_reclaim_reent+0xa8>)
 8018a1a:	681b      	ldr	r3, [r3, #0]
 8018a1c:	4283      	cmp	r3, r0
 8018a1e:	b570      	push	{r4, r5, r6, lr}
 8018a20:	4604      	mov	r4, r0
 8018a22:	d04b      	beq.n	8018abc <_reclaim_reent+0xa4>
 8018a24:	69c3      	ldr	r3, [r0, #28]
 8018a26:	b1ab      	cbz	r3, 8018a54 <_reclaim_reent+0x3c>
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	b16b      	cbz	r3, 8018a48 <_reclaim_reent+0x30>
 8018a2c:	2500      	movs	r5, #0
 8018a2e:	69e3      	ldr	r3, [r4, #28]
 8018a30:	68db      	ldr	r3, [r3, #12]
 8018a32:	5959      	ldr	r1, [r3, r5]
 8018a34:	2900      	cmp	r1, #0
 8018a36:	d13b      	bne.n	8018ab0 <_reclaim_reent+0x98>
 8018a38:	3504      	adds	r5, #4
 8018a3a:	2d80      	cmp	r5, #128	@ 0x80
 8018a3c:	d1f7      	bne.n	8018a2e <_reclaim_reent+0x16>
 8018a3e:	69e3      	ldr	r3, [r4, #28]
 8018a40:	4620      	mov	r0, r4
 8018a42:	68d9      	ldr	r1, [r3, #12]
 8018a44:	f000 f892 	bl	8018b6c <_free_r>
 8018a48:	69e3      	ldr	r3, [r4, #28]
 8018a4a:	6819      	ldr	r1, [r3, #0]
 8018a4c:	b111      	cbz	r1, 8018a54 <_reclaim_reent+0x3c>
 8018a4e:	4620      	mov	r0, r4
 8018a50:	f000 f88c 	bl	8018b6c <_free_r>
 8018a54:	6961      	ldr	r1, [r4, #20]
 8018a56:	b111      	cbz	r1, 8018a5e <_reclaim_reent+0x46>
 8018a58:	4620      	mov	r0, r4
 8018a5a:	f000 f887 	bl	8018b6c <_free_r>
 8018a5e:	69e1      	ldr	r1, [r4, #28]
 8018a60:	b111      	cbz	r1, 8018a68 <_reclaim_reent+0x50>
 8018a62:	4620      	mov	r0, r4
 8018a64:	f000 f882 	bl	8018b6c <_free_r>
 8018a68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8018a6a:	b111      	cbz	r1, 8018a72 <_reclaim_reent+0x5a>
 8018a6c:	4620      	mov	r0, r4
 8018a6e:	f000 f87d 	bl	8018b6c <_free_r>
 8018a72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8018a74:	b111      	cbz	r1, 8018a7c <_reclaim_reent+0x64>
 8018a76:	4620      	mov	r0, r4
 8018a78:	f000 f878 	bl	8018b6c <_free_r>
 8018a7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8018a7e:	b111      	cbz	r1, 8018a86 <_reclaim_reent+0x6e>
 8018a80:	4620      	mov	r0, r4
 8018a82:	f000 f873 	bl	8018b6c <_free_r>
 8018a86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8018a88:	b111      	cbz	r1, 8018a90 <_reclaim_reent+0x78>
 8018a8a:	4620      	mov	r0, r4
 8018a8c:	f000 f86e 	bl	8018b6c <_free_r>
 8018a90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8018a92:	b111      	cbz	r1, 8018a9a <_reclaim_reent+0x82>
 8018a94:	4620      	mov	r0, r4
 8018a96:	f000 f869 	bl	8018b6c <_free_r>
 8018a9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8018a9c:	b111      	cbz	r1, 8018aa4 <_reclaim_reent+0x8c>
 8018a9e:	4620      	mov	r0, r4
 8018aa0:	f000 f864 	bl	8018b6c <_free_r>
 8018aa4:	6a23      	ldr	r3, [r4, #32]
 8018aa6:	b14b      	cbz	r3, 8018abc <_reclaim_reent+0xa4>
 8018aa8:	4620      	mov	r0, r4
 8018aaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018aae:	4718      	bx	r3
 8018ab0:	680e      	ldr	r6, [r1, #0]
 8018ab2:	4620      	mov	r0, r4
 8018ab4:	f000 f85a 	bl	8018b6c <_free_r>
 8018ab8:	4631      	mov	r1, r6
 8018aba:	e7bb      	b.n	8018a34 <_reclaim_reent+0x1c>
 8018abc:	bd70      	pop	{r4, r5, r6, pc}
 8018abe:	bf00      	nop
 8018ac0:	240049cc 	.word	0x240049cc

08018ac4 <__libc_init_array>:
 8018ac4:	b570      	push	{r4, r5, r6, lr}
 8018ac6:	4d0d      	ldr	r5, [pc, #52]	@ (8018afc <__libc_init_array+0x38>)
 8018ac8:	4c0d      	ldr	r4, [pc, #52]	@ (8018b00 <__libc_init_array+0x3c>)
 8018aca:	1b64      	subs	r4, r4, r5
 8018acc:	10a4      	asrs	r4, r4, #2
 8018ace:	2600      	movs	r6, #0
 8018ad0:	42a6      	cmp	r6, r4
 8018ad2:	d109      	bne.n	8018ae8 <__libc_init_array+0x24>
 8018ad4:	4d0b      	ldr	r5, [pc, #44]	@ (8018b04 <__libc_init_array+0x40>)
 8018ad6:	4c0c      	ldr	r4, [pc, #48]	@ (8018b08 <__libc_init_array+0x44>)
 8018ad8:	f000 fed4 	bl	8019884 <_init>
 8018adc:	1b64      	subs	r4, r4, r5
 8018ade:	10a4      	asrs	r4, r4, #2
 8018ae0:	2600      	movs	r6, #0
 8018ae2:	42a6      	cmp	r6, r4
 8018ae4:	d105      	bne.n	8018af2 <__libc_init_array+0x2e>
 8018ae6:	bd70      	pop	{r4, r5, r6, pc}
 8018ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8018aec:	4798      	blx	r3
 8018aee:	3601      	adds	r6, #1
 8018af0:	e7ee      	b.n	8018ad0 <__libc_init_array+0xc>
 8018af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018af6:	4798      	blx	r3
 8018af8:	3601      	adds	r6, #1
 8018afa:	e7f2      	b.n	8018ae2 <__libc_init_array+0x1e>
 8018afc:	0801c654 	.word	0x0801c654
 8018b00:	0801c654 	.word	0x0801c654
 8018b04:	0801c654 	.word	0x0801c654
 8018b08:	0801c658 	.word	0x0801c658

08018b0c <__retarget_lock_init_recursive>:
 8018b0c:	4770      	bx	lr

08018b0e <__retarget_lock_acquire_recursive>:
 8018b0e:	4770      	bx	lr

08018b10 <__retarget_lock_release_recursive>:
 8018b10:	4770      	bx	lr

08018b12 <memcpy>:
 8018b12:	440a      	add	r2, r1
 8018b14:	4291      	cmp	r1, r2
 8018b16:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8018b1a:	d100      	bne.n	8018b1e <memcpy+0xc>
 8018b1c:	4770      	bx	lr
 8018b1e:	b510      	push	{r4, lr}
 8018b20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018b24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018b28:	4291      	cmp	r1, r2
 8018b2a:	d1f9      	bne.n	8018b20 <memcpy+0xe>
 8018b2c:	bd10      	pop	{r4, pc}
	...

08018b30 <__assert_func>:
 8018b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018b32:	4614      	mov	r4, r2
 8018b34:	461a      	mov	r2, r3
 8018b36:	4b09      	ldr	r3, [pc, #36]	@ (8018b5c <__assert_func+0x2c>)
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	4605      	mov	r5, r0
 8018b3c:	68d8      	ldr	r0, [r3, #12]
 8018b3e:	b954      	cbnz	r4, 8018b56 <__assert_func+0x26>
 8018b40:	4b07      	ldr	r3, [pc, #28]	@ (8018b60 <__assert_func+0x30>)
 8018b42:	461c      	mov	r4, r3
 8018b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018b48:	9100      	str	r1, [sp, #0]
 8018b4a:	462b      	mov	r3, r5
 8018b4c:	4905      	ldr	r1, [pc, #20]	@ (8018b64 <__assert_func+0x34>)
 8018b4e:	f000 fccd 	bl	80194ec <fiprintf>
 8018b52:	f000 fe4b 	bl	80197ec <abort>
 8018b56:	4b04      	ldr	r3, [pc, #16]	@ (8018b68 <__assert_func+0x38>)
 8018b58:	e7f4      	b.n	8018b44 <__assert_func+0x14>
 8018b5a:	bf00      	nop
 8018b5c:	240049cc 	.word	0x240049cc
 8018b60:	0801c616 	.word	0x0801c616
 8018b64:	0801c5e8 	.word	0x0801c5e8
 8018b68:	0801c5db 	.word	0x0801c5db

08018b6c <_free_r>:
 8018b6c:	b538      	push	{r3, r4, r5, lr}
 8018b6e:	4605      	mov	r5, r0
 8018b70:	2900      	cmp	r1, #0
 8018b72:	d041      	beq.n	8018bf8 <_free_r+0x8c>
 8018b74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018b78:	1f0c      	subs	r4, r1, #4
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	bfb8      	it	lt
 8018b7e:	18e4      	addlt	r4, r4, r3
 8018b80:	f000 fc64 	bl	801944c <__malloc_lock>
 8018b84:	4a1d      	ldr	r2, [pc, #116]	@ (8018bfc <_free_r+0x90>)
 8018b86:	6813      	ldr	r3, [r2, #0]
 8018b88:	b933      	cbnz	r3, 8018b98 <_free_r+0x2c>
 8018b8a:	6063      	str	r3, [r4, #4]
 8018b8c:	6014      	str	r4, [r2, #0]
 8018b8e:	4628      	mov	r0, r5
 8018b90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b94:	f000 bc60 	b.w	8019458 <__malloc_unlock>
 8018b98:	42a3      	cmp	r3, r4
 8018b9a:	d908      	bls.n	8018bae <_free_r+0x42>
 8018b9c:	6820      	ldr	r0, [r4, #0]
 8018b9e:	1821      	adds	r1, r4, r0
 8018ba0:	428b      	cmp	r3, r1
 8018ba2:	bf01      	itttt	eq
 8018ba4:	6819      	ldreq	r1, [r3, #0]
 8018ba6:	685b      	ldreq	r3, [r3, #4]
 8018ba8:	1809      	addeq	r1, r1, r0
 8018baa:	6021      	streq	r1, [r4, #0]
 8018bac:	e7ed      	b.n	8018b8a <_free_r+0x1e>
 8018bae:	461a      	mov	r2, r3
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	b10b      	cbz	r3, 8018bb8 <_free_r+0x4c>
 8018bb4:	42a3      	cmp	r3, r4
 8018bb6:	d9fa      	bls.n	8018bae <_free_r+0x42>
 8018bb8:	6811      	ldr	r1, [r2, #0]
 8018bba:	1850      	adds	r0, r2, r1
 8018bbc:	42a0      	cmp	r0, r4
 8018bbe:	d10b      	bne.n	8018bd8 <_free_r+0x6c>
 8018bc0:	6820      	ldr	r0, [r4, #0]
 8018bc2:	4401      	add	r1, r0
 8018bc4:	1850      	adds	r0, r2, r1
 8018bc6:	4283      	cmp	r3, r0
 8018bc8:	6011      	str	r1, [r2, #0]
 8018bca:	d1e0      	bne.n	8018b8e <_free_r+0x22>
 8018bcc:	6818      	ldr	r0, [r3, #0]
 8018bce:	685b      	ldr	r3, [r3, #4]
 8018bd0:	6053      	str	r3, [r2, #4]
 8018bd2:	4408      	add	r0, r1
 8018bd4:	6010      	str	r0, [r2, #0]
 8018bd6:	e7da      	b.n	8018b8e <_free_r+0x22>
 8018bd8:	d902      	bls.n	8018be0 <_free_r+0x74>
 8018bda:	230c      	movs	r3, #12
 8018bdc:	602b      	str	r3, [r5, #0]
 8018bde:	e7d6      	b.n	8018b8e <_free_r+0x22>
 8018be0:	6820      	ldr	r0, [r4, #0]
 8018be2:	1821      	adds	r1, r4, r0
 8018be4:	428b      	cmp	r3, r1
 8018be6:	bf04      	itt	eq
 8018be8:	6819      	ldreq	r1, [r3, #0]
 8018bea:	685b      	ldreq	r3, [r3, #4]
 8018bec:	6063      	str	r3, [r4, #4]
 8018bee:	bf04      	itt	eq
 8018bf0:	1809      	addeq	r1, r1, r0
 8018bf2:	6021      	streq	r1, [r4, #0]
 8018bf4:	6054      	str	r4, [r2, #4]
 8018bf6:	e7ca      	b.n	8018b8e <_free_r+0x22>
 8018bf8:	bd38      	pop	{r3, r4, r5, pc}
 8018bfa:	bf00      	nop
 8018bfc:	24010600 	.word	0x24010600

08018c00 <__sfputc_r>:
 8018c00:	6893      	ldr	r3, [r2, #8]
 8018c02:	3b01      	subs	r3, #1
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	b410      	push	{r4}
 8018c08:	6093      	str	r3, [r2, #8]
 8018c0a:	da08      	bge.n	8018c1e <__sfputc_r+0x1e>
 8018c0c:	6994      	ldr	r4, [r2, #24]
 8018c0e:	42a3      	cmp	r3, r4
 8018c10:	db01      	blt.n	8018c16 <__sfputc_r+0x16>
 8018c12:	290a      	cmp	r1, #10
 8018c14:	d103      	bne.n	8018c1e <__sfputc_r+0x1e>
 8018c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c1a:	f000 bc79 	b.w	8019510 <__swbuf_r>
 8018c1e:	6813      	ldr	r3, [r2, #0]
 8018c20:	1c58      	adds	r0, r3, #1
 8018c22:	6010      	str	r0, [r2, #0]
 8018c24:	7019      	strb	r1, [r3, #0]
 8018c26:	4608      	mov	r0, r1
 8018c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c2c:	4770      	bx	lr

08018c2e <__sfputs_r>:
 8018c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c30:	4606      	mov	r6, r0
 8018c32:	460f      	mov	r7, r1
 8018c34:	4614      	mov	r4, r2
 8018c36:	18d5      	adds	r5, r2, r3
 8018c38:	42ac      	cmp	r4, r5
 8018c3a:	d101      	bne.n	8018c40 <__sfputs_r+0x12>
 8018c3c:	2000      	movs	r0, #0
 8018c3e:	e007      	b.n	8018c50 <__sfputs_r+0x22>
 8018c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018c44:	463a      	mov	r2, r7
 8018c46:	4630      	mov	r0, r6
 8018c48:	f7ff ffda 	bl	8018c00 <__sfputc_r>
 8018c4c:	1c43      	adds	r3, r0, #1
 8018c4e:	d1f3      	bne.n	8018c38 <__sfputs_r+0xa>
 8018c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018c54 <_vfiprintf_r>:
 8018c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c58:	460d      	mov	r5, r1
 8018c5a:	b09d      	sub	sp, #116	@ 0x74
 8018c5c:	4614      	mov	r4, r2
 8018c5e:	4698      	mov	r8, r3
 8018c60:	4606      	mov	r6, r0
 8018c62:	b118      	cbz	r0, 8018c6c <_vfiprintf_r+0x18>
 8018c64:	6a03      	ldr	r3, [r0, #32]
 8018c66:	b90b      	cbnz	r3, 8018c6c <_vfiprintf_r+0x18>
 8018c68:	f7ff fe76 	bl	8018958 <__sinit>
 8018c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018c6e:	07d9      	lsls	r1, r3, #31
 8018c70:	d405      	bmi.n	8018c7e <_vfiprintf_r+0x2a>
 8018c72:	89ab      	ldrh	r3, [r5, #12]
 8018c74:	059a      	lsls	r2, r3, #22
 8018c76:	d402      	bmi.n	8018c7e <_vfiprintf_r+0x2a>
 8018c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018c7a:	f7ff ff48 	bl	8018b0e <__retarget_lock_acquire_recursive>
 8018c7e:	89ab      	ldrh	r3, [r5, #12]
 8018c80:	071b      	lsls	r3, r3, #28
 8018c82:	d501      	bpl.n	8018c88 <_vfiprintf_r+0x34>
 8018c84:	692b      	ldr	r3, [r5, #16]
 8018c86:	b99b      	cbnz	r3, 8018cb0 <_vfiprintf_r+0x5c>
 8018c88:	4629      	mov	r1, r5
 8018c8a:	4630      	mov	r0, r6
 8018c8c:	f000 fc7e 	bl	801958c <__swsetup_r>
 8018c90:	b170      	cbz	r0, 8018cb0 <_vfiprintf_r+0x5c>
 8018c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018c94:	07dc      	lsls	r4, r3, #31
 8018c96:	d504      	bpl.n	8018ca2 <_vfiprintf_r+0x4e>
 8018c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018c9c:	b01d      	add	sp, #116	@ 0x74
 8018c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ca2:	89ab      	ldrh	r3, [r5, #12]
 8018ca4:	0598      	lsls	r0, r3, #22
 8018ca6:	d4f7      	bmi.n	8018c98 <_vfiprintf_r+0x44>
 8018ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018caa:	f7ff ff31 	bl	8018b10 <__retarget_lock_release_recursive>
 8018cae:	e7f3      	b.n	8018c98 <_vfiprintf_r+0x44>
 8018cb0:	2300      	movs	r3, #0
 8018cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018cb4:	2320      	movs	r3, #32
 8018cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8018cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8018cbe:	2330      	movs	r3, #48	@ 0x30
 8018cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018e70 <_vfiprintf_r+0x21c>
 8018cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018cc8:	f04f 0901 	mov.w	r9, #1
 8018ccc:	4623      	mov	r3, r4
 8018cce:	469a      	mov	sl, r3
 8018cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018cd4:	b10a      	cbz	r2, 8018cda <_vfiprintf_r+0x86>
 8018cd6:	2a25      	cmp	r2, #37	@ 0x25
 8018cd8:	d1f9      	bne.n	8018cce <_vfiprintf_r+0x7a>
 8018cda:	ebba 0b04 	subs.w	fp, sl, r4
 8018cde:	d00b      	beq.n	8018cf8 <_vfiprintf_r+0xa4>
 8018ce0:	465b      	mov	r3, fp
 8018ce2:	4622      	mov	r2, r4
 8018ce4:	4629      	mov	r1, r5
 8018ce6:	4630      	mov	r0, r6
 8018ce8:	f7ff ffa1 	bl	8018c2e <__sfputs_r>
 8018cec:	3001      	adds	r0, #1
 8018cee:	f000 80a7 	beq.w	8018e40 <_vfiprintf_r+0x1ec>
 8018cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018cf4:	445a      	add	r2, fp
 8018cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8018cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	f000 809f 	beq.w	8018e40 <_vfiprintf_r+0x1ec>
 8018d02:	2300      	movs	r3, #0
 8018d04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018d0c:	f10a 0a01 	add.w	sl, sl, #1
 8018d10:	9304      	str	r3, [sp, #16]
 8018d12:	9307      	str	r3, [sp, #28]
 8018d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8018d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8018d1a:	4654      	mov	r4, sl
 8018d1c:	2205      	movs	r2, #5
 8018d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d22:	4853      	ldr	r0, [pc, #332]	@ (8018e70 <_vfiprintf_r+0x21c>)
 8018d24:	f7e7 faf4 	bl	8000310 <memchr>
 8018d28:	9a04      	ldr	r2, [sp, #16]
 8018d2a:	b9d8      	cbnz	r0, 8018d64 <_vfiprintf_r+0x110>
 8018d2c:	06d1      	lsls	r1, r2, #27
 8018d2e:	bf44      	itt	mi
 8018d30:	2320      	movmi	r3, #32
 8018d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018d36:	0713      	lsls	r3, r2, #28
 8018d38:	bf44      	itt	mi
 8018d3a:	232b      	movmi	r3, #43	@ 0x2b
 8018d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018d40:	f89a 3000 	ldrb.w	r3, [sl]
 8018d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8018d46:	d015      	beq.n	8018d74 <_vfiprintf_r+0x120>
 8018d48:	9a07      	ldr	r2, [sp, #28]
 8018d4a:	4654      	mov	r4, sl
 8018d4c:	2000      	movs	r0, #0
 8018d4e:	f04f 0c0a 	mov.w	ip, #10
 8018d52:	4621      	mov	r1, r4
 8018d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018d58:	3b30      	subs	r3, #48	@ 0x30
 8018d5a:	2b09      	cmp	r3, #9
 8018d5c:	d94b      	bls.n	8018df6 <_vfiprintf_r+0x1a2>
 8018d5e:	b1b0      	cbz	r0, 8018d8e <_vfiprintf_r+0x13a>
 8018d60:	9207      	str	r2, [sp, #28]
 8018d62:	e014      	b.n	8018d8e <_vfiprintf_r+0x13a>
 8018d64:	eba0 0308 	sub.w	r3, r0, r8
 8018d68:	fa09 f303 	lsl.w	r3, r9, r3
 8018d6c:	4313      	orrs	r3, r2
 8018d6e:	9304      	str	r3, [sp, #16]
 8018d70:	46a2      	mov	sl, r4
 8018d72:	e7d2      	b.n	8018d1a <_vfiprintf_r+0xc6>
 8018d74:	9b03      	ldr	r3, [sp, #12]
 8018d76:	1d19      	adds	r1, r3, #4
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	9103      	str	r1, [sp, #12]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	bfbb      	ittet	lt
 8018d80:	425b      	neglt	r3, r3
 8018d82:	f042 0202 	orrlt.w	r2, r2, #2
 8018d86:	9307      	strge	r3, [sp, #28]
 8018d88:	9307      	strlt	r3, [sp, #28]
 8018d8a:	bfb8      	it	lt
 8018d8c:	9204      	strlt	r2, [sp, #16]
 8018d8e:	7823      	ldrb	r3, [r4, #0]
 8018d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8018d92:	d10a      	bne.n	8018daa <_vfiprintf_r+0x156>
 8018d94:	7863      	ldrb	r3, [r4, #1]
 8018d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8018d98:	d132      	bne.n	8018e00 <_vfiprintf_r+0x1ac>
 8018d9a:	9b03      	ldr	r3, [sp, #12]
 8018d9c:	1d1a      	adds	r2, r3, #4
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	9203      	str	r2, [sp, #12]
 8018da2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018da6:	3402      	adds	r4, #2
 8018da8:	9305      	str	r3, [sp, #20]
 8018daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018e80 <_vfiprintf_r+0x22c>
 8018dae:	7821      	ldrb	r1, [r4, #0]
 8018db0:	2203      	movs	r2, #3
 8018db2:	4650      	mov	r0, sl
 8018db4:	f7e7 faac 	bl	8000310 <memchr>
 8018db8:	b138      	cbz	r0, 8018dca <_vfiprintf_r+0x176>
 8018dba:	9b04      	ldr	r3, [sp, #16]
 8018dbc:	eba0 000a 	sub.w	r0, r0, sl
 8018dc0:	2240      	movs	r2, #64	@ 0x40
 8018dc2:	4082      	lsls	r2, r0
 8018dc4:	4313      	orrs	r3, r2
 8018dc6:	3401      	adds	r4, #1
 8018dc8:	9304      	str	r3, [sp, #16]
 8018dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018dce:	4829      	ldr	r0, [pc, #164]	@ (8018e74 <_vfiprintf_r+0x220>)
 8018dd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018dd4:	2206      	movs	r2, #6
 8018dd6:	f7e7 fa9b 	bl	8000310 <memchr>
 8018dda:	2800      	cmp	r0, #0
 8018ddc:	d03f      	beq.n	8018e5e <_vfiprintf_r+0x20a>
 8018dde:	4b26      	ldr	r3, [pc, #152]	@ (8018e78 <_vfiprintf_r+0x224>)
 8018de0:	bb1b      	cbnz	r3, 8018e2a <_vfiprintf_r+0x1d6>
 8018de2:	9b03      	ldr	r3, [sp, #12]
 8018de4:	3307      	adds	r3, #7
 8018de6:	f023 0307 	bic.w	r3, r3, #7
 8018dea:	3308      	adds	r3, #8
 8018dec:	9303      	str	r3, [sp, #12]
 8018dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018df0:	443b      	add	r3, r7
 8018df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8018df4:	e76a      	b.n	8018ccc <_vfiprintf_r+0x78>
 8018df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8018dfa:	460c      	mov	r4, r1
 8018dfc:	2001      	movs	r0, #1
 8018dfe:	e7a8      	b.n	8018d52 <_vfiprintf_r+0xfe>
 8018e00:	2300      	movs	r3, #0
 8018e02:	3401      	adds	r4, #1
 8018e04:	9305      	str	r3, [sp, #20]
 8018e06:	4619      	mov	r1, r3
 8018e08:	f04f 0c0a 	mov.w	ip, #10
 8018e0c:	4620      	mov	r0, r4
 8018e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018e12:	3a30      	subs	r2, #48	@ 0x30
 8018e14:	2a09      	cmp	r2, #9
 8018e16:	d903      	bls.n	8018e20 <_vfiprintf_r+0x1cc>
 8018e18:	2b00      	cmp	r3, #0
 8018e1a:	d0c6      	beq.n	8018daa <_vfiprintf_r+0x156>
 8018e1c:	9105      	str	r1, [sp, #20]
 8018e1e:	e7c4      	b.n	8018daa <_vfiprintf_r+0x156>
 8018e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8018e24:	4604      	mov	r4, r0
 8018e26:	2301      	movs	r3, #1
 8018e28:	e7f0      	b.n	8018e0c <_vfiprintf_r+0x1b8>
 8018e2a:	ab03      	add	r3, sp, #12
 8018e2c:	9300      	str	r3, [sp, #0]
 8018e2e:	462a      	mov	r2, r5
 8018e30:	4b12      	ldr	r3, [pc, #72]	@ (8018e7c <_vfiprintf_r+0x228>)
 8018e32:	a904      	add	r1, sp, #16
 8018e34:	4630      	mov	r0, r6
 8018e36:	f3af 8000 	nop.w
 8018e3a:	4607      	mov	r7, r0
 8018e3c:	1c78      	adds	r0, r7, #1
 8018e3e:	d1d6      	bne.n	8018dee <_vfiprintf_r+0x19a>
 8018e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018e42:	07d9      	lsls	r1, r3, #31
 8018e44:	d405      	bmi.n	8018e52 <_vfiprintf_r+0x1fe>
 8018e46:	89ab      	ldrh	r3, [r5, #12]
 8018e48:	059a      	lsls	r2, r3, #22
 8018e4a:	d402      	bmi.n	8018e52 <_vfiprintf_r+0x1fe>
 8018e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8018e4e:	f7ff fe5f 	bl	8018b10 <__retarget_lock_release_recursive>
 8018e52:	89ab      	ldrh	r3, [r5, #12]
 8018e54:	065b      	lsls	r3, r3, #25
 8018e56:	f53f af1f 	bmi.w	8018c98 <_vfiprintf_r+0x44>
 8018e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018e5c:	e71e      	b.n	8018c9c <_vfiprintf_r+0x48>
 8018e5e:	ab03      	add	r3, sp, #12
 8018e60:	9300      	str	r3, [sp, #0]
 8018e62:	462a      	mov	r2, r5
 8018e64:	4b05      	ldr	r3, [pc, #20]	@ (8018e7c <_vfiprintf_r+0x228>)
 8018e66:	a904      	add	r1, sp, #16
 8018e68:	4630      	mov	r0, r6
 8018e6a:	f000 f923 	bl	80190b4 <_printf_i>
 8018e6e:	e7e4      	b.n	8018e3a <_vfiprintf_r+0x1e6>
 8018e70:	0801c617 	.word	0x0801c617
 8018e74:	0801c621 	.word	0x0801c621
 8018e78:	00000000 	.word	0x00000000
 8018e7c:	08018c2f 	.word	0x08018c2f
 8018e80:	0801c61d 	.word	0x0801c61d

08018e84 <malloc>:
 8018e84:	4b02      	ldr	r3, [pc, #8]	@ (8018e90 <malloc+0xc>)
 8018e86:	4601      	mov	r1, r0
 8018e88:	6818      	ldr	r0, [r3, #0]
 8018e8a:	f000 b825 	b.w	8018ed8 <_malloc_r>
 8018e8e:	bf00      	nop
 8018e90:	240049cc 	.word	0x240049cc

08018e94 <sbrk_aligned>:
 8018e94:	b570      	push	{r4, r5, r6, lr}
 8018e96:	4e0f      	ldr	r6, [pc, #60]	@ (8018ed4 <sbrk_aligned+0x40>)
 8018e98:	460c      	mov	r4, r1
 8018e9a:	6831      	ldr	r1, [r6, #0]
 8018e9c:	4605      	mov	r5, r0
 8018e9e:	b911      	cbnz	r1, 8018ea6 <sbrk_aligned+0x12>
 8018ea0:	f000 fc82 	bl	80197a8 <_sbrk_r>
 8018ea4:	6030      	str	r0, [r6, #0]
 8018ea6:	4621      	mov	r1, r4
 8018ea8:	4628      	mov	r0, r5
 8018eaa:	f000 fc7d 	bl	80197a8 <_sbrk_r>
 8018eae:	1c43      	adds	r3, r0, #1
 8018eb0:	d103      	bne.n	8018eba <sbrk_aligned+0x26>
 8018eb2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8018eb6:	4620      	mov	r0, r4
 8018eb8:	bd70      	pop	{r4, r5, r6, pc}
 8018eba:	1cc4      	adds	r4, r0, #3
 8018ebc:	f024 0403 	bic.w	r4, r4, #3
 8018ec0:	42a0      	cmp	r0, r4
 8018ec2:	d0f8      	beq.n	8018eb6 <sbrk_aligned+0x22>
 8018ec4:	1a21      	subs	r1, r4, r0
 8018ec6:	4628      	mov	r0, r5
 8018ec8:	f000 fc6e 	bl	80197a8 <_sbrk_r>
 8018ecc:	3001      	adds	r0, #1
 8018ece:	d1f2      	bne.n	8018eb6 <sbrk_aligned+0x22>
 8018ed0:	e7ef      	b.n	8018eb2 <sbrk_aligned+0x1e>
 8018ed2:	bf00      	nop
 8018ed4:	240105fc 	.word	0x240105fc

08018ed8 <_malloc_r>:
 8018ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018edc:	1ccd      	adds	r5, r1, #3
 8018ede:	f025 0503 	bic.w	r5, r5, #3
 8018ee2:	3508      	adds	r5, #8
 8018ee4:	2d0c      	cmp	r5, #12
 8018ee6:	bf38      	it	cc
 8018ee8:	250c      	movcc	r5, #12
 8018eea:	2d00      	cmp	r5, #0
 8018eec:	4606      	mov	r6, r0
 8018eee:	db01      	blt.n	8018ef4 <_malloc_r+0x1c>
 8018ef0:	42a9      	cmp	r1, r5
 8018ef2:	d904      	bls.n	8018efe <_malloc_r+0x26>
 8018ef4:	230c      	movs	r3, #12
 8018ef6:	6033      	str	r3, [r6, #0]
 8018ef8:	2000      	movs	r0, #0
 8018efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018efe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8018fd4 <_malloc_r+0xfc>
 8018f02:	f000 faa3 	bl	801944c <__malloc_lock>
 8018f06:	f8d8 3000 	ldr.w	r3, [r8]
 8018f0a:	461c      	mov	r4, r3
 8018f0c:	bb44      	cbnz	r4, 8018f60 <_malloc_r+0x88>
 8018f0e:	4629      	mov	r1, r5
 8018f10:	4630      	mov	r0, r6
 8018f12:	f7ff ffbf 	bl	8018e94 <sbrk_aligned>
 8018f16:	1c43      	adds	r3, r0, #1
 8018f18:	4604      	mov	r4, r0
 8018f1a:	d158      	bne.n	8018fce <_malloc_r+0xf6>
 8018f1c:	f8d8 4000 	ldr.w	r4, [r8]
 8018f20:	4627      	mov	r7, r4
 8018f22:	2f00      	cmp	r7, #0
 8018f24:	d143      	bne.n	8018fae <_malloc_r+0xd6>
 8018f26:	2c00      	cmp	r4, #0
 8018f28:	d04b      	beq.n	8018fc2 <_malloc_r+0xea>
 8018f2a:	6823      	ldr	r3, [r4, #0]
 8018f2c:	4639      	mov	r1, r7
 8018f2e:	4630      	mov	r0, r6
 8018f30:	eb04 0903 	add.w	r9, r4, r3
 8018f34:	f000 fc38 	bl	80197a8 <_sbrk_r>
 8018f38:	4581      	cmp	r9, r0
 8018f3a:	d142      	bne.n	8018fc2 <_malloc_r+0xea>
 8018f3c:	6821      	ldr	r1, [r4, #0]
 8018f3e:	1a6d      	subs	r5, r5, r1
 8018f40:	4629      	mov	r1, r5
 8018f42:	4630      	mov	r0, r6
 8018f44:	f7ff ffa6 	bl	8018e94 <sbrk_aligned>
 8018f48:	3001      	adds	r0, #1
 8018f4a:	d03a      	beq.n	8018fc2 <_malloc_r+0xea>
 8018f4c:	6823      	ldr	r3, [r4, #0]
 8018f4e:	442b      	add	r3, r5
 8018f50:	6023      	str	r3, [r4, #0]
 8018f52:	f8d8 3000 	ldr.w	r3, [r8]
 8018f56:	685a      	ldr	r2, [r3, #4]
 8018f58:	bb62      	cbnz	r2, 8018fb4 <_malloc_r+0xdc>
 8018f5a:	f8c8 7000 	str.w	r7, [r8]
 8018f5e:	e00f      	b.n	8018f80 <_malloc_r+0xa8>
 8018f60:	6822      	ldr	r2, [r4, #0]
 8018f62:	1b52      	subs	r2, r2, r5
 8018f64:	d420      	bmi.n	8018fa8 <_malloc_r+0xd0>
 8018f66:	2a0b      	cmp	r2, #11
 8018f68:	d917      	bls.n	8018f9a <_malloc_r+0xc2>
 8018f6a:	1961      	adds	r1, r4, r5
 8018f6c:	42a3      	cmp	r3, r4
 8018f6e:	6025      	str	r5, [r4, #0]
 8018f70:	bf18      	it	ne
 8018f72:	6059      	strne	r1, [r3, #4]
 8018f74:	6863      	ldr	r3, [r4, #4]
 8018f76:	bf08      	it	eq
 8018f78:	f8c8 1000 	streq.w	r1, [r8]
 8018f7c:	5162      	str	r2, [r4, r5]
 8018f7e:	604b      	str	r3, [r1, #4]
 8018f80:	4630      	mov	r0, r6
 8018f82:	f000 fa69 	bl	8019458 <__malloc_unlock>
 8018f86:	f104 000b 	add.w	r0, r4, #11
 8018f8a:	1d23      	adds	r3, r4, #4
 8018f8c:	f020 0007 	bic.w	r0, r0, #7
 8018f90:	1ac2      	subs	r2, r0, r3
 8018f92:	bf1c      	itt	ne
 8018f94:	1a1b      	subne	r3, r3, r0
 8018f96:	50a3      	strne	r3, [r4, r2]
 8018f98:	e7af      	b.n	8018efa <_malloc_r+0x22>
 8018f9a:	6862      	ldr	r2, [r4, #4]
 8018f9c:	42a3      	cmp	r3, r4
 8018f9e:	bf0c      	ite	eq
 8018fa0:	f8c8 2000 	streq.w	r2, [r8]
 8018fa4:	605a      	strne	r2, [r3, #4]
 8018fa6:	e7eb      	b.n	8018f80 <_malloc_r+0xa8>
 8018fa8:	4623      	mov	r3, r4
 8018faa:	6864      	ldr	r4, [r4, #4]
 8018fac:	e7ae      	b.n	8018f0c <_malloc_r+0x34>
 8018fae:	463c      	mov	r4, r7
 8018fb0:	687f      	ldr	r7, [r7, #4]
 8018fb2:	e7b6      	b.n	8018f22 <_malloc_r+0x4a>
 8018fb4:	461a      	mov	r2, r3
 8018fb6:	685b      	ldr	r3, [r3, #4]
 8018fb8:	42a3      	cmp	r3, r4
 8018fba:	d1fb      	bne.n	8018fb4 <_malloc_r+0xdc>
 8018fbc:	2300      	movs	r3, #0
 8018fbe:	6053      	str	r3, [r2, #4]
 8018fc0:	e7de      	b.n	8018f80 <_malloc_r+0xa8>
 8018fc2:	230c      	movs	r3, #12
 8018fc4:	6033      	str	r3, [r6, #0]
 8018fc6:	4630      	mov	r0, r6
 8018fc8:	f000 fa46 	bl	8019458 <__malloc_unlock>
 8018fcc:	e794      	b.n	8018ef8 <_malloc_r+0x20>
 8018fce:	6005      	str	r5, [r0, #0]
 8018fd0:	e7d6      	b.n	8018f80 <_malloc_r+0xa8>
 8018fd2:	bf00      	nop
 8018fd4:	24010600 	.word	0x24010600

08018fd8 <_printf_common>:
 8018fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fdc:	4616      	mov	r6, r2
 8018fde:	4698      	mov	r8, r3
 8018fe0:	688a      	ldr	r2, [r1, #8]
 8018fe2:	690b      	ldr	r3, [r1, #16]
 8018fe4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018fe8:	4293      	cmp	r3, r2
 8018fea:	bfb8      	it	lt
 8018fec:	4613      	movlt	r3, r2
 8018fee:	6033      	str	r3, [r6, #0]
 8018ff0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018ff4:	4607      	mov	r7, r0
 8018ff6:	460c      	mov	r4, r1
 8018ff8:	b10a      	cbz	r2, 8018ffe <_printf_common+0x26>
 8018ffa:	3301      	adds	r3, #1
 8018ffc:	6033      	str	r3, [r6, #0]
 8018ffe:	6823      	ldr	r3, [r4, #0]
 8019000:	0699      	lsls	r1, r3, #26
 8019002:	bf42      	ittt	mi
 8019004:	6833      	ldrmi	r3, [r6, #0]
 8019006:	3302      	addmi	r3, #2
 8019008:	6033      	strmi	r3, [r6, #0]
 801900a:	6825      	ldr	r5, [r4, #0]
 801900c:	f015 0506 	ands.w	r5, r5, #6
 8019010:	d106      	bne.n	8019020 <_printf_common+0x48>
 8019012:	f104 0a19 	add.w	sl, r4, #25
 8019016:	68e3      	ldr	r3, [r4, #12]
 8019018:	6832      	ldr	r2, [r6, #0]
 801901a:	1a9b      	subs	r3, r3, r2
 801901c:	42ab      	cmp	r3, r5
 801901e:	dc26      	bgt.n	801906e <_printf_common+0x96>
 8019020:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019024:	6822      	ldr	r2, [r4, #0]
 8019026:	3b00      	subs	r3, #0
 8019028:	bf18      	it	ne
 801902a:	2301      	movne	r3, #1
 801902c:	0692      	lsls	r2, r2, #26
 801902e:	d42b      	bmi.n	8019088 <_printf_common+0xb0>
 8019030:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019034:	4641      	mov	r1, r8
 8019036:	4638      	mov	r0, r7
 8019038:	47c8      	blx	r9
 801903a:	3001      	adds	r0, #1
 801903c:	d01e      	beq.n	801907c <_printf_common+0xa4>
 801903e:	6823      	ldr	r3, [r4, #0]
 8019040:	6922      	ldr	r2, [r4, #16]
 8019042:	f003 0306 	and.w	r3, r3, #6
 8019046:	2b04      	cmp	r3, #4
 8019048:	bf02      	ittt	eq
 801904a:	68e5      	ldreq	r5, [r4, #12]
 801904c:	6833      	ldreq	r3, [r6, #0]
 801904e:	1aed      	subeq	r5, r5, r3
 8019050:	68a3      	ldr	r3, [r4, #8]
 8019052:	bf0c      	ite	eq
 8019054:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019058:	2500      	movne	r5, #0
 801905a:	4293      	cmp	r3, r2
 801905c:	bfc4      	itt	gt
 801905e:	1a9b      	subgt	r3, r3, r2
 8019060:	18ed      	addgt	r5, r5, r3
 8019062:	2600      	movs	r6, #0
 8019064:	341a      	adds	r4, #26
 8019066:	42b5      	cmp	r5, r6
 8019068:	d11a      	bne.n	80190a0 <_printf_common+0xc8>
 801906a:	2000      	movs	r0, #0
 801906c:	e008      	b.n	8019080 <_printf_common+0xa8>
 801906e:	2301      	movs	r3, #1
 8019070:	4652      	mov	r2, sl
 8019072:	4641      	mov	r1, r8
 8019074:	4638      	mov	r0, r7
 8019076:	47c8      	blx	r9
 8019078:	3001      	adds	r0, #1
 801907a:	d103      	bne.n	8019084 <_printf_common+0xac>
 801907c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019084:	3501      	adds	r5, #1
 8019086:	e7c6      	b.n	8019016 <_printf_common+0x3e>
 8019088:	18e1      	adds	r1, r4, r3
 801908a:	1c5a      	adds	r2, r3, #1
 801908c:	2030      	movs	r0, #48	@ 0x30
 801908e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019092:	4422      	add	r2, r4
 8019094:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019098:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801909c:	3302      	adds	r3, #2
 801909e:	e7c7      	b.n	8019030 <_printf_common+0x58>
 80190a0:	2301      	movs	r3, #1
 80190a2:	4622      	mov	r2, r4
 80190a4:	4641      	mov	r1, r8
 80190a6:	4638      	mov	r0, r7
 80190a8:	47c8      	blx	r9
 80190aa:	3001      	adds	r0, #1
 80190ac:	d0e6      	beq.n	801907c <_printf_common+0xa4>
 80190ae:	3601      	adds	r6, #1
 80190b0:	e7d9      	b.n	8019066 <_printf_common+0x8e>
	...

080190b4 <_printf_i>:
 80190b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190b8:	7e0f      	ldrb	r7, [r1, #24]
 80190ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80190bc:	2f78      	cmp	r7, #120	@ 0x78
 80190be:	4691      	mov	r9, r2
 80190c0:	4680      	mov	r8, r0
 80190c2:	460c      	mov	r4, r1
 80190c4:	469a      	mov	sl, r3
 80190c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80190ca:	d807      	bhi.n	80190dc <_printf_i+0x28>
 80190cc:	2f62      	cmp	r7, #98	@ 0x62
 80190ce:	d80a      	bhi.n	80190e6 <_printf_i+0x32>
 80190d0:	2f00      	cmp	r7, #0
 80190d2:	f000 80d2 	beq.w	801927a <_printf_i+0x1c6>
 80190d6:	2f58      	cmp	r7, #88	@ 0x58
 80190d8:	f000 80b9 	beq.w	801924e <_printf_i+0x19a>
 80190dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80190e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80190e4:	e03a      	b.n	801915c <_printf_i+0xa8>
 80190e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80190ea:	2b15      	cmp	r3, #21
 80190ec:	d8f6      	bhi.n	80190dc <_printf_i+0x28>
 80190ee:	a101      	add	r1, pc, #4	@ (adr r1, 80190f4 <_printf_i+0x40>)
 80190f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80190f4:	0801914d 	.word	0x0801914d
 80190f8:	08019161 	.word	0x08019161
 80190fc:	080190dd 	.word	0x080190dd
 8019100:	080190dd 	.word	0x080190dd
 8019104:	080190dd 	.word	0x080190dd
 8019108:	080190dd 	.word	0x080190dd
 801910c:	08019161 	.word	0x08019161
 8019110:	080190dd 	.word	0x080190dd
 8019114:	080190dd 	.word	0x080190dd
 8019118:	080190dd 	.word	0x080190dd
 801911c:	080190dd 	.word	0x080190dd
 8019120:	08019261 	.word	0x08019261
 8019124:	0801918b 	.word	0x0801918b
 8019128:	0801921b 	.word	0x0801921b
 801912c:	080190dd 	.word	0x080190dd
 8019130:	080190dd 	.word	0x080190dd
 8019134:	08019283 	.word	0x08019283
 8019138:	080190dd 	.word	0x080190dd
 801913c:	0801918b 	.word	0x0801918b
 8019140:	080190dd 	.word	0x080190dd
 8019144:	080190dd 	.word	0x080190dd
 8019148:	08019223 	.word	0x08019223
 801914c:	6833      	ldr	r3, [r6, #0]
 801914e:	1d1a      	adds	r2, r3, #4
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	6032      	str	r2, [r6, #0]
 8019154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019158:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801915c:	2301      	movs	r3, #1
 801915e:	e09d      	b.n	801929c <_printf_i+0x1e8>
 8019160:	6833      	ldr	r3, [r6, #0]
 8019162:	6820      	ldr	r0, [r4, #0]
 8019164:	1d19      	adds	r1, r3, #4
 8019166:	6031      	str	r1, [r6, #0]
 8019168:	0606      	lsls	r6, r0, #24
 801916a:	d501      	bpl.n	8019170 <_printf_i+0xbc>
 801916c:	681d      	ldr	r5, [r3, #0]
 801916e:	e003      	b.n	8019178 <_printf_i+0xc4>
 8019170:	0645      	lsls	r5, r0, #25
 8019172:	d5fb      	bpl.n	801916c <_printf_i+0xb8>
 8019174:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019178:	2d00      	cmp	r5, #0
 801917a:	da03      	bge.n	8019184 <_printf_i+0xd0>
 801917c:	232d      	movs	r3, #45	@ 0x2d
 801917e:	426d      	negs	r5, r5
 8019180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019184:	4859      	ldr	r0, [pc, #356]	@ (80192ec <_printf_i+0x238>)
 8019186:	230a      	movs	r3, #10
 8019188:	e011      	b.n	80191ae <_printf_i+0xfa>
 801918a:	6821      	ldr	r1, [r4, #0]
 801918c:	6833      	ldr	r3, [r6, #0]
 801918e:	0608      	lsls	r0, r1, #24
 8019190:	f853 5b04 	ldr.w	r5, [r3], #4
 8019194:	d402      	bmi.n	801919c <_printf_i+0xe8>
 8019196:	0649      	lsls	r1, r1, #25
 8019198:	bf48      	it	mi
 801919a:	b2ad      	uxthmi	r5, r5
 801919c:	2f6f      	cmp	r7, #111	@ 0x6f
 801919e:	4853      	ldr	r0, [pc, #332]	@ (80192ec <_printf_i+0x238>)
 80191a0:	6033      	str	r3, [r6, #0]
 80191a2:	bf14      	ite	ne
 80191a4:	230a      	movne	r3, #10
 80191a6:	2308      	moveq	r3, #8
 80191a8:	2100      	movs	r1, #0
 80191aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80191ae:	6866      	ldr	r6, [r4, #4]
 80191b0:	60a6      	str	r6, [r4, #8]
 80191b2:	2e00      	cmp	r6, #0
 80191b4:	bfa2      	ittt	ge
 80191b6:	6821      	ldrge	r1, [r4, #0]
 80191b8:	f021 0104 	bicge.w	r1, r1, #4
 80191bc:	6021      	strge	r1, [r4, #0]
 80191be:	b90d      	cbnz	r5, 80191c4 <_printf_i+0x110>
 80191c0:	2e00      	cmp	r6, #0
 80191c2:	d04b      	beq.n	801925c <_printf_i+0x1a8>
 80191c4:	4616      	mov	r6, r2
 80191c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80191ca:	fb03 5711 	mls	r7, r3, r1, r5
 80191ce:	5dc7      	ldrb	r7, [r0, r7]
 80191d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80191d4:	462f      	mov	r7, r5
 80191d6:	42bb      	cmp	r3, r7
 80191d8:	460d      	mov	r5, r1
 80191da:	d9f4      	bls.n	80191c6 <_printf_i+0x112>
 80191dc:	2b08      	cmp	r3, #8
 80191de:	d10b      	bne.n	80191f8 <_printf_i+0x144>
 80191e0:	6823      	ldr	r3, [r4, #0]
 80191e2:	07df      	lsls	r7, r3, #31
 80191e4:	d508      	bpl.n	80191f8 <_printf_i+0x144>
 80191e6:	6923      	ldr	r3, [r4, #16]
 80191e8:	6861      	ldr	r1, [r4, #4]
 80191ea:	4299      	cmp	r1, r3
 80191ec:	bfde      	ittt	le
 80191ee:	2330      	movle	r3, #48	@ 0x30
 80191f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80191f4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80191f8:	1b92      	subs	r2, r2, r6
 80191fa:	6122      	str	r2, [r4, #16]
 80191fc:	f8cd a000 	str.w	sl, [sp]
 8019200:	464b      	mov	r3, r9
 8019202:	aa03      	add	r2, sp, #12
 8019204:	4621      	mov	r1, r4
 8019206:	4640      	mov	r0, r8
 8019208:	f7ff fee6 	bl	8018fd8 <_printf_common>
 801920c:	3001      	adds	r0, #1
 801920e:	d14a      	bne.n	80192a6 <_printf_i+0x1f2>
 8019210:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019214:	b004      	add	sp, #16
 8019216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801921a:	6823      	ldr	r3, [r4, #0]
 801921c:	f043 0320 	orr.w	r3, r3, #32
 8019220:	6023      	str	r3, [r4, #0]
 8019222:	4833      	ldr	r0, [pc, #204]	@ (80192f0 <_printf_i+0x23c>)
 8019224:	2778      	movs	r7, #120	@ 0x78
 8019226:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801922a:	6823      	ldr	r3, [r4, #0]
 801922c:	6831      	ldr	r1, [r6, #0]
 801922e:	061f      	lsls	r7, r3, #24
 8019230:	f851 5b04 	ldr.w	r5, [r1], #4
 8019234:	d402      	bmi.n	801923c <_printf_i+0x188>
 8019236:	065f      	lsls	r7, r3, #25
 8019238:	bf48      	it	mi
 801923a:	b2ad      	uxthmi	r5, r5
 801923c:	6031      	str	r1, [r6, #0]
 801923e:	07d9      	lsls	r1, r3, #31
 8019240:	bf44      	itt	mi
 8019242:	f043 0320 	orrmi.w	r3, r3, #32
 8019246:	6023      	strmi	r3, [r4, #0]
 8019248:	b11d      	cbz	r5, 8019252 <_printf_i+0x19e>
 801924a:	2310      	movs	r3, #16
 801924c:	e7ac      	b.n	80191a8 <_printf_i+0xf4>
 801924e:	4827      	ldr	r0, [pc, #156]	@ (80192ec <_printf_i+0x238>)
 8019250:	e7e9      	b.n	8019226 <_printf_i+0x172>
 8019252:	6823      	ldr	r3, [r4, #0]
 8019254:	f023 0320 	bic.w	r3, r3, #32
 8019258:	6023      	str	r3, [r4, #0]
 801925a:	e7f6      	b.n	801924a <_printf_i+0x196>
 801925c:	4616      	mov	r6, r2
 801925e:	e7bd      	b.n	80191dc <_printf_i+0x128>
 8019260:	6833      	ldr	r3, [r6, #0]
 8019262:	6825      	ldr	r5, [r4, #0]
 8019264:	6961      	ldr	r1, [r4, #20]
 8019266:	1d18      	adds	r0, r3, #4
 8019268:	6030      	str	r0, [r6, #0]
 801926a:	062e      	lsls	r6, r5, #24
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	d501      	bpl.n	8019274 <_printf_i+0x1c0>
 8019270:	6019      	str	r1, [r3, #0]
 8019272:	e002      	b.n	801927a <_printf_i+0x1c6>
 8019274:	0668      	lsls	r0, r5, #25
 8019276:	d5fb      	bpl.n	8019270 <_printf_i+0x1bc>
 8019278:	8019      	strh	r1, [r3, #0]
 801927a:	2300      	movs	r3, #0
 801927c:	6123      	str	r3, [r4, #16]
 801927e:	4616      	mov	r6, r2
 8019280:	e7bc      	b.n	80191fc <_printf_i+0x148>
 8019282:	6833      	ldr	r3, [r6, #0]
 8019284:	1d1a      	adds	r2, r3, #4
 8019286:	6032      	str	r2, [r6, #0]
 8019288:	681e      	ldr	r6, [r3, #0]
 801928a:	6862      	ldr	r2, [r4, #4]
 801928c:	2100      	movs	r1, #0
 801928e:	4630      	mov	r0, r6
 8019290:	f7e7 f83e 	bl	8000310 <memchr>
 8019294:	b108      	cbz	r0, 801929a <_printf_i+0x1e6>
 8019296:	1b80      	subs	r0, r0, r6
 8019298:	6060      	str	r0, [r4, #4]
 801929a:	6863      	ldr	r3, [r4, #4]
 801929c:	6123      	str	r3, [r4, #16]
 801929e:	2300      	movs	r3, #0
 80192a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80192a4:	e7aa      	b.n	80191fc <_printf_i+0x148>
 80192a6:	6923      	ldr	r3, [r4, #16]
 80192a8:	4632      	mov	r2, r6
 80192aa:	4649      	mov	r1, r9
 80192ac:	4640      	mov	r0, r8
 80192ae:	47d0      	blx	sl
 80192b0:	3001      	adds	r0, #1
 80192b2:	d0ad      	beq.n	8019210 <_printf_i+0x15c>
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	079b      	lsls	r3, r3, #30
 80192b8:	d413      	bmi.n	80192e2 <_printf_i+0x22e>
 80192ba:	68e0      	ldr	r0, [r4, #12]
 80192bc:	9b03      	ldr	r3, [sp, #12]
 80192be:	4298      	cmp	r0, r3
 80192c0:	bfb8      	it	lt
 80192c2:	4618      	movlt	r0, r3
 80192c4:	e7a6      	b.n	8019214 <_printf_i+0x160>
 80192c6:	2301      	movs	r3, #1
 80192c8:	4632      	mov	r2, r6
 80192ca:	4649      	mov	r1, r9
 80192cc:	4640      	mov	r0, r8
 80192ce:	47d0      	blx	sl
 80192d0:	3001      	adds	r0, #1
 80192d2:	d09d      	beq.n	8019210 <_printf_i+0x15c>
 80192d4:	3501      	adds	r5, #1
 80192d6:	68e3      	ldr	r3, [r4, #12]
 80192d8:	9903      	ldr	r1, [sp, #12]
 80192da:	1a5b      	subs	r3, r3, r1
 80192dc:	42ab      	cmp	r3, r5
 80192de:	dcf2      	bgt.n	80192c6 <_printf_i+0x212>
 80192e0:	e7eb      	b.n	80192ba <_printf_i+0x206>
 80192e2:	2500      	movs	r5, #0
 80192e4:	f104 0619 	add.w	r6, r4, #25
 80192e8:	e7f5      	b.n	80192d6 <_printf_i+0x222>
 80192ea:	bf00      	nop
 80192ec:	0801c628 	.word	0x0801c628
 80192f0:	0801c639 	.word	0x0801c639

080192f4 <__sflush_r>:
 80192f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80192f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192fc:	0716      	lsls	r6, r2, #28
 80192fe:	4605      	mov	r5, r0
 8019300:	460c      	mov	r4, r1
 8019302:	d454      	bmi.n	80193ae <__sflush_r+0xba>
 8019304:	684b      	ldr	r3, [r1, #4]
 8019306:	2b00      	cmp	r3, #0
 8019308:	dc02      	bgt.n	8019310 <__sflush_r+0x1c>
 801930a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801930c:	2b00      	cmp	r3, #0
 801930e:	dd48      	ble.n	80193a2 <__sflush_r+0xae>
 8019310:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8019312:	2e00      	cmp	r6, #0
 8019314:	d045      	beq.n	80193a2 <__sflush_r+0xae>
 8019316:	2300      	movs	r3, #0
 8019318:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801931c:	682f      	ldr	r7, [r5, #0]
 801931e:	6a21      	ldr	r1, [r4, #32]
 8019320:	602b      	str	r3, [r5, #0]
 8019322:	d030      	beq.n	8019386 <__sflush_r+0x92>
 8019324:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019326:	89a3      	ldrh	r3, [r4, #12]
 8019328:	0759      	lsls	r1, r3, #29
 801932a:	d505      	bpl.n	8019338 <__sflush_r+0x44>
 801932c:	6863      	ldr	r3, [r4, #4]
 801932e:	1ad2      	subs	r2, r2, r3
 8019330:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019332:	b10b      	cbz	r3, 8019338 <__sflush_r+0x44>
 8019334:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019336:	1ad2      	subs	r2, r2, r3
 8019338:	2300      	movs	r3, #0
 801933a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801933c:	6a21      	ldr	r1, [r4, #32]
 801933e:	4628      	mov	r0, r5
 8019340:	47b0      	blx	r6
 8019342:	1c43      	adds	r3, r0, #1
 8019344:	89a3      	ldrh	r3, [r4, #12]
 8019346:	d106      	bne.n	8019356 <__sflush_r+0x62>
 8019348:	6829      	ldr	r1, [r5, #0]
 801934a:	291d      	cmp	r1, #29
 801934c:	d82b      	bhi.n	80193a6 <__sflush_r+0xb2>
 801934e:	4a2a      	ldr	r2, [pc, #168]	@ (80193f8 <__sflush_r+0x104>)
 8019350:	410a      	asrs	r2, r1
 8019352:	07d6      	lsls	r6, r2, #31
 8019354:	d427      	bmi.n	80193a6 <__sflush_r+0xb2>
 8019356:	2200      	movs	r2, #0
 8019358:	6062      	str	r2, [r4, #4]
 801935a:	04d9      	lsls	r1, r3, #19
 801935c:	6922      	ldr	r2, [r4, #16]
 801935e:	6022      	str	r2, [r4, #0]
 8019360:	d504      	bpl.n	801936c <__sflush_r+0x78>
 8019362:	1c42      	adds	r2, r0, #1
 8019364:	d101      	bne.n	801936a <__sflush_r+0x76>
 8019366:	682b      	ldr	r3, [r5, #0]
 8019368:	b903      	cbnz	r3, 801936c <__sflush_r+0x78>
 801936a:	6560      	str	r0, [r4, #84]	@ 0x54
 801936c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801936e:	602f      	str	r7, [r5, #0]
 8019370:	b1b9      	cbz	r1, 80193a2 <__sflush_r+0xae>
 8019372:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019376:	4299      	cmp	r1, r3
 8019378:	d002      	beq.n	8019380 <__sflush_r+0x8c>
 801937a:	4628      	mov	r0, r5
 801937c:	f7ff fbf6 	bl	8018b6c <_free_r>
 8019380:	2300      	movs	r3, #0
 8019382:	6363      	str	r3, [r4, #52]	@ 0x34
 8019384:	e00d      	b.n	80193a2 <__sflush_r+0xae>
 8019386:	2301      	movs	r3, #1
 8019388:	4628      	mov	r0, r5
 801938a:	47b0      	blx	r6
 801938c:	4602      	mov	r2, r0
 801938e:	1c50      	adds	r0, r2, #1
 8019390:	d1c9      	bne.n	8019326 <__sflush_r+0x32>
 8019392:	682b      	ldr	r3, [r5, #0]
 8019394:	2b00      	cmp	r3, #0
 8019396:	d0c6      	beq.n	8019326 <__sflush_r+0x32>
 8019398:	2b1d      	cmp	r3, #29
 801939a:	d001      	beq.n	80193a0 <__sflush_r+0xac>
 801939c:	2b16      	cmp	r3, #22
 801939e:	d11e      	bne.n	80193de <__sflush_r+0xea>
 80193a0:	602f      	str	r7, [r5, #0]
 80193a2:	2000      	movs	r0, #0
 80193a4:	e022      	b.n	80193ec <__sflush_r+0xf8>
 80193a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193aa:	b21b      	sxth	r3, r3
 80193ac:	e01b      	b.n	80193e6 <__sflush_r+0xf2>
 80193ae:	690f      	ldr	r7, [r1, #16]
 80193b0:	2f00      	cmp	r7, #0
 80193b2:	d0f6      	beq.n	80193a2 <__sflush_r+0xae>
 80193b4:	0793      	lsls	r3, r2, #30
 80193b6:	680e      	ldr	r6, [r1, #0]
 80193b8:	bf08      	it	eq
 80193ba:	694b      	ldreq	r3, [r1, #20]
 80193bc:	600f      	str	r7, [r1, #0]
 80193be:	bf18      	it	ne
 80193c0:	2300      	movne	r3, #0
 80193c2:	eba6 0807 	sub.w	r8, r6, r7
 80193c6:	608b      	str	r3, [r1, #8]
 80193c8:	f1b8 0f00 	cmp.w	r8, #0
 80193cc:	dde9      	ble.n	80193a2 <__sflush_r+0xae>
 80193ce:	6a21      	ldr	r1, [r4, #32]
 80193d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80193d2:	4643      	mov	r3, r8
 80193d4:	463a      	mov	r2, r7
 80193d6:	4628      	mov	r0, r5
 80193d8:	47b0      	blx	r6
 80193da:	2800      	cmp	r0, #0
 80193dc:	dc08      	bgt.n	80193f0 <__sflush_r+0xfc>
 80193de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80193e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80193e6:	81a3      	strh	r3, [r4, #12]
 80193e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80193ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80193f0:	4407      	add	r7, r0
 80193f2:	eba8 0800 	sub.w	r8, r8, r0
 80193f6:	e7e7      	b.n	80193c8 <__sflush_r+0xd4>
 80193f8:	dfbffffe 	.word	0xdfbffffe

080193fc <_fflush_r>:
 80193fc:	b538      	push	{r3, r4, r5, lr}
 80193fe:	690b      	ldr	r3, [r1, #16]
 8019400:	4605      	mov	r5, r0
 8019402:	460c      	mov	r4, r1
 8019404:	b913      	cbnz	r3, 801940c <_fflush_r+0x10>
 8019406:	2500      	movs	r5, #0
 8019408:	4628      	mov	r0, r5
 801940a:	bd38      	pop	{r3, r4, r5, pc}
 801940c:	b118      	cbz	r0, 8019416 <_fflush_r+0x1a>
 801940e:	6a03      	ldr	r3, [r0, #32]
 8019410:	b90b      	cbnz	r3, 8019416 <_fflush_r+0x1a>
 8019412:	f7ff faa1 	bl	8018958 <__sinit>
 8019416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d0f3      	beq.n	8019406 <_fflush_r+0xa>
 801941e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019420:	07d0      	lsls	r0, r2, #31
 8019422:	d404      	bmi.n	801942e <_fflush_r+0x32>
 8019424:	0599      	lsls	r1, r3, #22
 8019426:	d402      	bmi.n	801942e <_fflush_r+0x32>
 8019428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801942a:	f7ff fb70 	bl	8018b0e <__retarget_lock_acquire_recursive>
 801942e:	4628      	mov	r0, r5
 8019430:	4621      	mov	r1, r4
 8019432:	f7ff ff5f 	bl	80192f4 <__sflush_r>
 8019436:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019438:	07da      	lsls	r2, r3, #31
 801943a:	4605      	mov	r5, r0
 801943c:	d4e4      	bmi.n	8019408 <_fflush_r+0xc>
 801943e:	89a3      	ldrh	r3, [r4, #12]
 8019440:	059b      	lsls	r3, r3, #22
 8019442:	d4e1      	bmi.n	8019408 <_fflush_r+0xc>
 8019444:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019446:	f7ff fb63 	bl	8018b10 <__retarget_lock_release_recursive>
 801944a:	e7dd      	b.n	8019408 <_fflush_r+0xc>

0801944c <__malloc_lock>:
 801944c:	4801      	ldr	r0, [pc, #4]	@ (8019454 <__malloc_lock+0x8>)
 801944e:	f7ff bb5e 	b.w	8018b0e <__retarget_lock_acquire_recursive>
 8019452:	bf00      	nop
 8019454:	240105f8 	.word	0x240105f8

08019458 <__malloc_unlock>:
 8019458:	4801      	ldr	r0, [pc, #4]	@ (8019460 <__malloc_unlock+0x8>)
 801945a:	f7ff bb59 	b.w	8018b10 <__retarget_lock_release_recursive>
 801945e:	bf00      	nop
 8019460:	240105f8 	.word	0x240105f8

08019464 <__sread>:
 8019464:	b510      	push	{r4, lr}
 8019466:	460c      	mov	r4, r1
 8019468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801946c:	f000 f98a 	bl	8019784 <_read_r>
 8019470:	2800      	cmp	r0, #0
 8019472:	bfab      	itete	ge
 8019474:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8019476:	89a3      	ldrhlt	r3, [r4, #12]
 8019478:	181b      	addge	r3, r3, r0
 801947a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801947e:	bfac      	ite	ge
 8019480:	6563      	strge	r3, [r4, #84]	@ 0x54
 8019482:	81a3      	strhlt	r3, [r4, #12]
 8019484:	bd10      	pop	{r4, pc}

08019486 <__swrite>:
 8019486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801948a:	461f      	mov	r7, r3
 801948c:	898b      	ldrh	r3, [r1, #12]
 801948e:	05db      	lsls	r3, r3, #23
 8019490:	4605      	mov	r5, r0
 8019492:	460c      	mov	r4, r1
 8019494:	4616      	mov	r6, r2
 8019496:	d505      	bpl.n	80194a4 <__swrite+0x1e>
 8019498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801949c:	2302      	movs	r3, #2
 801949e:	2200      	movs	r2, #0
 80194a0:	f000 f95e 	bl	8019760 <_lseek_r>
 80194a4:	89a3      	ldrh	r3, [r4, #12]
 80194a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80194aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80194ae:	81a3      	strh	r3, [r4, #12]
 80194b0:	4632      	mov	r2, r6
 80194b2:	463b      	mov	r3, r7
 80194b4:	4628      	mov	r0, r5
 80194b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80194ba:	f000 b985 	b.w	80197c8 <_write_r>

080194be <__sseek>:
 80194be:	b510      	push	{r4, lr}
 80194c0:	460c      	mov	r4, r1
 80194c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194c6:	f000 f94b 	bl	8019760 <_lseek_r>
 80194ca:	1c43      	adds	r3, r0, #1
 80194cc:	89a3      	ldrh	r3, [r4, #12]
 80194ce:	bf15      	itete	ne
 80194d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80194d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80194d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80194da:	81a3      	strheq	r3, [r4, #12]
 80194dc:	bf18      	it	ne
 80194de:	81a3      	strhne	r3, [r4, #12]
 80194e0:	bd10      	pop	{r4, pc}

080194e2 <__sclose>:
 80194e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80194e6:	f000 b909 	b.w	80196fc <_close_r>
	...

080194ec <fiprintf>:
 80194ec:	b40e      	push	{r1, r2, r3}
 80194ee:	b503      	push	{r0, r1, lr}
 80194f0:	4601      	mov	r1, r0
 80194f2:	ab03      	add	r3, sp, #12
 80194f4:	4805      	ldr	r0, [pc, #20]	@ (801950c <fiprintf+0x20>)
 80194f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80194fa:	6800      	ldr	r0, [r0, #0]
 80194fc:	9301      	str	r3, [sp, #4]
 80194fe:	f7ff fba9 	bl	8018c54 <_vfiprintf_r>
 8019502:	b002      	add	sp, #8
 8019504:	f85d eb04 	ldr.w	lr, [sp], #4
 8019508:	b003      	add	sp, #12
 801950a:	4770      	bx	lr
 801950c:	240049cc 	.word	0x240049cc

08019510 <__swbuf_r>:
 8019510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019512:	460e      	mov	r6, r1
 8019514:	4614      	mov	r4, r2
 8019516:	4605      	mov	r5, r0
 8019518:	b118      	cbz	r0, 8019522 <__swbuf_r+0x12>
 801951a:	6a03      	ldr	r3, [r0, #32]
 801951c:	b90b      	cbnz	r3, 8019522 <__swbuf_r+0x12>
 801951e:	f7ff fa1b 	bl	8018958 <__sinit>
 8019522:	69a3      	ldr	r3, [r4, #24]
 8019524:	60a3      	str	r3, [r4, #8]
 8019526:	89a3      	ldrh	r3, [r4, #12]
 8019528:	071a      	lsls	r2, r3, #28
 801952a:	d501      	bpl.n	8019530 <__swbuf_r+0x20>
 801952c:	6923      	ldr	r3, [r4, #16]
 801952e:	b943      	cbnz	r3, 8019542 <__swbuf_r+0x32>
 8019530:	4621      	mov	r1, r4
 8019532:	4628      	mov	r0, r5
 8019534:	f000 f82a 	bl	801958c <__swsetup_r>
 8019538:	b118      	cbz	r0, 8019542 <__swbuf_r+0x32>
 801953a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801953e:	4638      	mov	r0, r7
 8019540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019542:	6823      	ldr	r3, [r4, #0]
 8019544:	6922      	ldr	r2, [r4, #16]
 8019546:	1a98      	subs	r0, r3, r2
 8019548:	6963      	ldr	r3, [r4, #20]
 801954a:	b2f6      	uxtb	r6, r6
 801954c:	4283      	cmp	r3, r0
 801954e:	4637      	mov	r7, r6
 8019550:	dc05      	bgt.n	801955e <__swbuf_r+0x4e>
 8019552:	4621      	mov	r1, r4
 8019554:	4628      	mov	r0, r5
 8019556:	f7ff ff51 	bl	80193fc <_fflush_r>
 801955a:	2800      	cmp	r0, #0
 801955c:	d1ed      	bne.n	801953a <__swbuf_r+0x2a>
 801955e:	68a3      	ldr	r3, [r4, #8]
 8019560:	3b01      	subs	r3, #1
 8019562:	60a3      	str	r3, [r4, #8]
 8019564:	6823      	ldr	r3, [r4, #0]
 8019566:	1c5a      	adds	r2, r3, #1
 8019568:	6022      	str	r2, [r4, #0]
 801956a:	701e      	strb	r6, [r3, #0]
 801956c:	6962      	ldr	r2, [r4, #20]
 801956e:	1c43      	adds	r3, r0, #1
 8019570:	429a      	cmp	r2, r3
 8019572:	d004      	beq.n	801957e <__swbuf_r+0x6e>
 8019574:	89a3      	ldrh	r3, [r4, #12]
 8019576:	07db      	lsls	r3, r3, #31
 8019578:	d5e1      	bpl.n	801953e <__swbuf_r+0x2e>
 801957a:	2e0a      	cmp	r6, #10
 801957c:	d1df      	bne.n	801953e <__swbuf_r+0x2e>
 801957e:	4621      	mov	r1, r4
 8019580:	4628      	mov	r0, r5
 8019582:	f7ff ff3b 	bl	80193fc <_fflush_r>
 8019586:	2800      	cmp	r0, #0
 8019588:	d0d9      	beq.n	801953e <__swbuf_r+0x2e>
 801958a:	e7d6      	b.n	801953a <__swbuf_r+0x2a>

0801958c <__swsetup_r>:
 801958c:	b538      	push	{r3, r4, r5, lr}
 801958e:	4b29      	ldr	r3, [pc, #164]	@ (8019634 <__swsetup_r+0xa8>)
 8019590:	4605      	mov	r5, r0
 8019592:	6818      	ldr	r0, [r3, #0]
 8019594:	460c      	mov	r4, r1
 8019596:	b118      	cbz	r0, 80195a0 <__swsetup_r+0x14>
 8019598:	6a03      	ldr	r3, [r0, #32]
 801959a:	b90b      	cbnz	r3, 80195a0 <__swsetup_r+0x14>
 801959c:	f7ff f9dc 	bl	8018958 <__sinit>
 80195a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80195a4:	0719      	lsls	r1, r3, #28
 80195a6:	d422      	bmi.n	80195ee <__swsetup_r+0x62>
 80195a8:	06da      	lsls	r2, r3, #27
 80195aa:	d407      	bmi.n	80195bc <__swsetup_r+0x30>
 80195ac:	2209      	movs	r2, #9
 80195ae:	602a      	str	r2, [r5, #0]
 80195b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80195b4:	81a3      	strh	r3, [r4, #12]
 80195b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80195ba:	e033      	b.n	8019624 <__swsetup_r+0x98>
 80195bc:	0758      	lsls	r0, r3, #29
 80195be:	d512      	bpl.n	80195e6 <__swsetup_r+0x5a>
 80195c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80195c2:	b141      	cbz	r1, 80195d6 <__swsetup_r+0x4a>
 80195c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80195c8:	4299      	cmp	r1, r3
 80195ca:	d002      	beq.n	80195d2 <__swsetup_r+0x46>
 80195cc:	4628      	mov	r0, r5
 80195ce:	f7ff facd 	bl	8018b6c <_free_r>
 80195d2:	2300      	movs	r3, #0
 80195d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80195d6:	89a3      	ldrh	r3, [r4, #12]
 80195d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80195dc:	81a3      	strh	r3, [r4, #12]
 80195de:	2300      	movs	r3, #0
 80195e0:	6063      	str	r3, [r4, #4]
 80195e2:	6923      	ldr	r3, [r4, #16]
 80195e4:	6023      	str	r3, [r4, #0]
 80195e6:	89a3      	ldrh	r3, [r4, #12]
 80195e8:	f043 0308 	orr.w	r3, r3, #8
 80195ec:	81a3      	strh	r3, [r4, #12]
 80195ee:	6923      	ldr	r3, [r4, #16]
 80195f0:	b94b      	cbnz	r3, 8019606 <__swsetup_r+0x7a>
 80195f2:	89a3      	ldrh	r3, [r4, #12]
 80195f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80195f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80195fc:	d003      	beq.n	8019606 <__swsetup_r+0x7a>
 80195fe:	4621      	mov	r1, r4
 8019600:	4628      	mov	r0, r5
 8019602:	f000 f83f 	bl	8019684 <__smakebuf_r>
 8019606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801960a:	f013 0201 	ands.w	r2, r3, #1
 801960e:	d00a      	beq.n	8019626 <__swsetup_r+0x9a>
 8019610:	2200      	movs	r2, #0
 8019612:	60a2      	str	r2, [r4, #8]
 8019614:	6962      	ldr	r2, [r4, #20]
 8019616:	4252      	negs	r2, r2
 8019618:	61a2      	str	r2, [r4, #24]
 801961a:	6922      	ldr	r2, [r4, #16]
 801961c:	b942      	cbnz	r2, 8019630 <__swsetup_r+0xa4>
 801961e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019622:	d1c5      	bne.n	80195b0 <__swsetup_r+0x24>
 8019624:	bd38      	pop	{r3, r4, r5, pc}
 8019626:	0799      	lsls	r1, r3, #30
 8019628:	bf58      	it	pl
 801962a:	6962      	ldrpl	r2, [r4, #20]
 801962c:	60a2      	str	r2, [r4, #8]
 801962e:	e7f4      	b.n	801961a <__swsetup_r+0x8e>
 8019630:	2000      	movs	r0, #0
 8019632:	e7f7      	b.n	8019624 <__swsetup_r+0x98>
 8019634:	240049cc 	.word	0x240049cc

08019638 <__swhatbuf_r>:
 8019638:	b570      	push	{r4, r5, r6, lr}
 801963a:	460c      	mov	r4, r1
 801963c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019640:	2900      	cmp	r1, #0
 8019642:	b096      	sub	sp, #88	@ 0x58
 8019644:	4615      	mov	r5, r2
 8019646:	461e      	mov	r6, r3
 8019648:	da0d      	bge.n	8019666 <__swhatbuf_r+0x2e>
 801964a:	89a3      	ldrh	r3, [r4, #12]
 801964c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8019650:	f04f 0100 	mov.w	r1, #0
 8019654:	bf14      	ite	ne
 8019656:	2340      	movne	r3, #64	@ 0x40
 8019658:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801965c:	2000      	movs	r0, #0
 801965e:	6031      	str	r1, [r6, #0]
 8019660:	602b      	str	r3, [r5, #0]
 8019662:	b016      	add	sp, #88	@ 0x58
 8019664:	bd70      	pop	{r4, r5, r6, pc}
 8019666:	466a      	mov	r2, sp
 8019668:	f000 f858 	bl	801971c <_fstat_r>
 801966c:	2800      	cmp	r0, #0
 801966e:	dbec      	blt.n	801964a <__swhatbuf_r+0x12>
 8019670:	9901      	ldr	r1, [sp, #4]
 8019672:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8019676:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801967a:	4259      	negs	r1, r3
 801967c:	4159      	adcs	r1, r3
 801967e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019682:	e7eb      	b.n	801965c <__swhatbuf_r+0x24>

08019684 <__smakebuf_r>:
 8019684:	898b      	ldrh	r3, [r1, #12]
 8019686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019688:	079d      	lsls	r5, r3, #30
 801968a:	4606      	mov	r6, r0
 801968c:	460c      	mov	r4, r1
 801968e:	d507      	bpl.n	80196a0 <__smakebuf_r+0x1c>
 8019690:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8019694:	6023      	str	r3, [r4, #0]
 8019696:	6123      	str	r3, [r4, #16]
 8019698:	2301      	movs	r3, #1
 801969a:	6163      	str	r3, [r4, #20]
 801969c:	b003      	add	sp, #12
 801969e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80196a0:	ab01      	add	r3, sp, #4
 80196a2:	466a      	mov	r2, sp
 80196a4:	f7ff ffc8 	bl	8019638 <__swhatbuf_r>
 80196a8:	9f00      	ldr	r7, [sp, #0]
 80196aa:	4605      	mov	r5, r0
 80196ac:	4639      	mov	r1, r7
 80196ae:	4630      	mov	r0, r6
 80196b0:	f7ff fc12 	bl	8018ed8 <_malloc_r>
 80196b4:	b948      	cbnz	r0, 80196ca <__smakebuf_r+0x46>
 80196b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80196ba:	059a      	lsls	r2, r3, #22
 80196bc:	d4ee      	bmi.n	801969c <__smakebuf_r+0x18>
 80196be:	f023 0303 	bic.w	r3, r3, #3
 80196c2:	f043 0302 	orr.w	r3, r3, #2
 80196c6:	81a3      	strh	r3, [r4, #12]
 80196c8:	e7e2      	b.n	8019690 <__smakebuf_r+0xc>
 80196ca:	89a3      	ldrh	r3, [r4, #12]
 80196cc:	6020      	str	r0, [r4, #0]
 80196ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80196d2:	81a3      	strh	r3, [r4, #12]
 80196d4:	9b01      	ldr	r3, [sp, #4]
 80196d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80196da:	b15b      	cbz	r3, 80196f4 <__smakebuf_r+0x70>
 80196dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80196e0:	4630      	mov	r0, r6
 80196e2:	f000 f82d 	bl	8019740 <_isatty_r>
 80196e6:	b128      	cbz	r0, 80196f4 <__smakebuf_r+0x70>
 80196e8:	89a3      	ldrh	r3, [r4, #12]
 80196ea:	f023 0303 	bic.w	r3, r3, #3
 80196ee:	f043 0301 	orr.w	r3, r3, #1
 80196f2:	81a3      	strh	r3, [r4, #12]
 80196f4:	89a3      	ldrh	r3, [r4, #12]
 80196f6:	431d      	orrs	r5, r3
 80196f8:	81a5      	strh	r5, [r4, #12]
 80196fa:	e7cf      	b.n	801969c <__smakebuf_r+0x18>

080196fc <_close_r>:
 80196fc:	b538      	push	{r3, r4, r5, lr}
 80196fe:	4d06      	ldr	r5, [pc, #24]	@ (8019718 <_close_r+0x1c>)
 8019700:	2300      	movs	r3, #0
 8019702:	4604      	mov	r4, r0
 8019704:	4608      	mov	r0, r1
 8019706:	602b      	str	r3, [r5, #0]
 8019708:	f7e7 fec0 	bl	800148c <_close>
 801970c:	1c43      	adds	r3, r0, #1
 801970e:	d102      	bne.n	8019716 <_close_r+0x1a>
 8019710:	682b      	ldr	r3, [r5, #0]
 8019712:	b103      	cbz	r3, 8019716 <_close_r+0x1a>
 8019714:	6023      	str	r3, [r4, #0]
 8019716:	bd38      	pop	{r3, r4, r5, pc}
 8019718:	240105f4 	.word	0x240105f4

0801971c <_fstat_r>:
 801971c:	b538      	push	{r3, r4, r5, lr}
 801971e:	4d07      	ldr	r5, [pc, #28]	@ (801973c <_fstat_r+0x20>)
 8019720:	2300      	movs	r3, #0
 8019722:	4604      	mov	r4, r0
 8019724:	4608      	mov	r0, r1
 8019726:	4611      	mov	r1, r2
 8019728:	602b      	str	r3, [r5, #0]
 801972a:	f7e7 febb 	bl	80014a4 <_fstat>
 801972e:	1c43      	adds	r3, r0, #1
 8019730:	d102      	bne.n	8019738 <_fstat_r+0x1c>
 8019732:	682b      	ldr	r3, [r5, #0]
 8019734:	b103      	cbz	r3, 8019738 <_fstat_r+0x1c>
 8019736:	6023      	str	r3, [r4, #0]
 8019738:	bd38      	pop	{r3, r4, r5, pc}
 801973a:	bf00      	nop
 801973c:	240105f4 	.word	0x240105f4

08019740 <_isatty_r>:
 8019740:	b538      	push	{r3, r4, r5, lr}
 8019742:	4d06      	ldr	r5, [pc, #24]	@ (801975c <_isatty_r+0x1c>)
 8019744:	2300      	movs	r3, #0
 8019746:	4604      	mov	r4, r0
 8019748:	4608      	mov	r0, r1
 801974a:	602b      	str	r3, [r5, #0]
 801974c:	f7e7 feba 	bl	80014c4 <_isatty>
 8019750:	1c43      	adds	r3, r0, #1
 8019752:	d102      	bne.n	801975a <_isatty_r+0x1a>
 8019754:	682b      	ldr	r3, [r5, #0]
 8019756:	b103      	cbz	r3, 801975a <_isatty_r+0x1a>
 8019758:	6023      	str	r3, [r4, #0]
 801975a:	bd38      	pop	{r3, r4, r5, pc}
 801975c:	240105f4 	.word	0x240105f4

08019760 <_lseek_r>:
 8019760:	b538      	push	{r3, r4, r5, lr}
 8019762:	4d07      	ldr	r5, [pc, #28]	@ (8019780 <_lseek_r+0x20>)
 8019764:	4604      	mov	r4, r0
 8019766:	4608      	mov	r0, r1
 8019768:	4611      	mov	r1, r2
 801976a:	2200      	movs	r2, #0
 801976c:	602a      	str	r2, [r5, #0]
 801976e:	461a      	mov	r2, r3
 8019770:	f7e7 feb3 	bl	80014da <_lseek>
 8019774:	1c43      	adds	r3, r0, #1
 8019776:	d102      	bne.n	801977e <_lseek_r+0x1e>
 8019778:	682b      	ldr	r3, [r5, #0]
 801977a:	b103      	cbz	r3, 801977e <_lseek_r+0x1e>
 801977c:	6023      	str	r3, [r4, #0]
 801977e:	bd38      	pop	{r3, r4, r5, pc}
 8019780:	240105f4 	.word	0x240105f4

08019784 <_read_r>:
 8019784:	b538      	push	{r3, r4, r5, lr}
 8019786:	4d07      	ldr	r5, [pc, #28]	@ (80197a4 <_read_r+0x20>)
 8019788:	4604      	mov	r4, r0
 801978a:	4608      	mov	r0, r1
 801978c:	4611      	mov	r1, r2
 801978e:	2200      	movs	r2, #0
 8019790:	602a      	str	r2, [r5, #0]
 8019792:	461a      	mov	r2, r3
 8019794:	f7e7 fe41 	bl	800141a <_read>
 8019798:	1c43      	adds	r3, r0, #1
 801979a:	d102      	bne.n	80197a2 <_read_r+0x1e>
 801979c:	682b      	ldr	r3, [r5, #0]
 801979e:	b103      	cbz	r3, 80197a2 <_read_r+0x1e>
 80197a0:	6023      	str	r3, [r4, #0]
 80197a2:	bd38      	pop	{r3, r4, r5, pc}
 80197a4:	240105f4 	.word	0x240105f4

080197a8 <_sbrk_r>:
 80197a8:	b538      	push	{r3, r4, r5, lr}
 80197aa:	4d06      	ldr	r5, [pc, #24]	@ (80197c4 <_sbrk_r+0x1c>)
 80197ac:	2300      	movs	r3, #0
 80197ae:	4604      	mov	r4, r0
 80197b0:	4608      	mov	r0, r1
 80197b2:	602b      	str	r3, [r5, #0]
 80197b4:	f7e7 fe9e 	bl	80014f4 <_sbrk>
 80197b8:	1c43      	adds	r3, r0, #1
 80197ba:	d102      	bne.n	80197c2 <_sbrk_r+0x1a>
 80197bc:	682b      	ldr	r3, [r5, #0]
 80197be:	b103      	cbz	r3, 80197c2 <_sbrk_r+0x1a>
 80197c0:	6023      	str	r3, [r4, #0]
 80197c2:	bd38      	pop	{r3, r4, r5, pc}
 80197c4:	240105f4 	.word	0x240105f4

080197c8 <_write_r>:
 80197c8:	b538      	push	{r3, r4, r5, lr}
 80197ca:	4d07      	ldr	r5, [pc, #28]	@ (80197e8 <_write_r+0x20>)
 80197cc:	4604      	mov	r4, r0
 80197ce:	4608      	mov	r0, r1
 80197d0:	4611      	mov	r1, r2
 80197d2:	2200      	movs	r2, #0
 80197d4:	602a      	str	r2, [r5, #0]
 80197d6:	461a      	mov	r2, r3
 80197d8:	f7e7 fe3c 	bl	8001454 <_write>
 80197dc:	1c43      	adds	r3, r0, #1
 80197de:	d102      	bne.n	80197e6 <_write_r+0x1e>
 80197e0:	682b      	ldr	r3, [r5, #0]
 80197e2:	b103      	cbz	r3, 80197e6 <_write_r+0x1e>
 80197e4:	6023      	str	r3, [r4, #0]
 80197e6:	bd38      	pop	{r3, r4, r5, pc}
 80197e8:	240105f4 	.word	0x240105f4

080197ec <abort>:
 80197ec:	b508      	push	{r3, lr}
 80197ee:	2006      	movs	r0, #6
 80197f0:	f000 f82c 	bl	801984c <raise>
 80197f4:	2001      	movs	r0, #1
 80197f6:	f7e7 fe05 	bl	8001404 <_exit>

080197fa <_raise_r>:
 80197fa:	291f      	cmp	r1, #31
 80197fc:	b538      	push	{r3, r4, r5, lr}
 80197fe:	4605      	mov	r5, r0
 8019800:	460c      	mov	r4, r1
 8019802:	d904      	bls.n	801980e <_raise_r+0x14>
 8019804:	2316      	movs	r3, #22
 8019806:	6003      	str	r3, [r0, #0]
 8019808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801980c:	bd38      	pop	{r3, r4, r5, pc}
 801980e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8019810:	b112      	cbz	r2, 8019818 <_raise_r+0x1e>
 8019812:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019816:	b94b      	cbnz	r3, 801982c <_raise_r+0x32>
 8019818:	4628      	mov	r0, r5
 801981a:	f000 f831 	bl	8019880 <_getpid_r>
 801981e:	4622      	mov	r2, r4
 8019820:	4601      	mov	r1, r0
 8019822:	4628      	mov	r0, r5
 8019824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019828:	f000 b818 	b.w	801985c <_kill_r>
 801982c:	2b01      	cmp	r3, #1
 801982e:	d00a      	beq.n	8019846 <_raise_r+0x4c>
 8019830:	1c59      	adds	r1, r3, #1
 8019832:	d103      	bne.n	801983c <_raise_r+0x42>
 8019834:	2316      	movs	r3, #22
 8019836:	6003      	str	r3, [r0, #0]
 8019838:	2001      	movs	r0, #1
 801983a:	e7e7      	b.n	801980c <_raise_r+0x12>
 801983c:	2100      	movs	r1, #0
 801983e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019842:	4620      	mov	r0, r4
 8019844:	4798      	blx	r3
 8019846:	2000      	movs	r0, #0
 8019848:	e7e0      	b.n	801980c <_raise_r+0x12>
	...

0801984c <raise>:
 801984c:	4b02      	ldr	r3, [pc, #8]	@ (8019858 <raise+0xc>)
 801984e:	4601      	mov	r1, r0
 8019850:	6818      	ldr	r0, [r3, #0]
 8019852:	f7ff bfd2 	b.w	80197fa <_raise_r>
 8019856:	bf00      	nop
 8019858:	240049cc 	.word	0x240049cc

0801985c <_kill_r>:
 801985c:	b538      	push	{r3, r4, r5, lr}
 801985e:	4d07      	ldr	r5, [pc, #28]	@ (801987c <_kill_r+0x20>)
 8019860:	2300      	movs	r3, #0
 8019862:	4604      	mov	r4, r0
 8019864:	4608      	mov	r0, r1
 8019866:	4611      	mov	r1, r2
 8019868:	602b      	str	r3, [r5, #0]
 801986a:	f7e7 fdb9 	bl	80013e0 <_kill>
 801986e:	1c43      	adds	r3, r0, #1
 8019870:	d102      	bne.n	8019878 <_kill_r+0x1c>
 8019872:	682b      	ldr	r3, [r5, #0]
 8019874:	b103      	cbz	r3, 8019878 <_kill_r+0x1c>
 8019876:	6023      	str	r3, [r4, #0]
 8019878:	bd38      	pop	{r3, r4, r5, pc}
 801987a:	bf00      	nop
 801987c:	240105f4 	.word	0x240105f4

08019880 <_getpid_r>:
 8019880:	f7e7 bda6 	b.w	80013d0 <_getpid>

08019884 <_init>:
 8019884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019886:	bf00      	nop
 8019888:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801988a:	bc08      	pop	{r3}
 801988c:	469e      	mov	lr, r3
 801988e:	4770      	bx	lr

08019890 <_fini>:
 8019890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019892:	bf00      	nop
 8019894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019896:	bc08      	pop	{r3}
 8019898:	469e      	mov	lr, r3
 801989a:	4770      	bx	lr
